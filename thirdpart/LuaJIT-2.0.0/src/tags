!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABIVER	Makefile	/^ABIVER=  5.1$/;"	m
AHUREF_LSX	lj_asm_ppc.h	111;"	d
ALIAS_MAY	lj_opt_mem.c	/^  ALIAS_MAY,	\/* The two refs MAY alias (inexact). *\/$/;"	e	enum:__anon32	file:
ALIAS_MUST	lj_opt_mem.c	/^  ALIAS_MUST	\/* The two refs MUST alias (exact). *\/$/;"	e	enum:__anon32	file:
ALIAS_NO	lj_opt_mem.c	/^  ALIAS_NO,	\/* The two refs CANNOT alias (exact). *\/$/;"	e	enum:__anon32	file:
ALL_GEN	Makefile	/^ALL_GEN= $(LJVM_S) $(ALL_HDRGEN) $(LIB_VMDEFP)$/;"	m
ALL_HDRGEN	Makefile	/^ALL_HDRGEN= lj_bcdef.h lj_ffdef.h lj_libdef.h lj_recdef.h lj_folddef.h \\$/;"	m
ALL_LIB	msvcbuild.bat	/^@set ALL_LIB=lib_base.c lib_math.c lib_bit.c lib_string.c lib_table.c lib_io.c lib_os.c lib_package.c lib_debug.c lib_jit.c lib_ffi.c$/;"	v
ALL_RM	Makefile	/^    ALL_RM:= $(subst \/,\\,$(ALL_RM))$/;"	m
ALL_RM	Makefile	/^ALL_RM= $(ALL_T) $(ALL_GEN) *.o host\/*.o $(WIN_RM)$/;"	m
ALL_T	Makefile	/^ALL_T= $(LUAJIT_T) $(LUAJIT_A) $(LUAJIT_SO) $(HOST_T)$/;"	m
AMALGDLL	msvcbuild.bat	/^:AMALGDLL$/;"	l
ARG1_FP	lj_ircall.h	90;"	d
ARG1_FP	lj_ircall.h	92;"	d
ARG2_64	lj_ircall.h	96;"	d
ARG2_64	lj_ircall.h	98;"	d
ARMCC	lj_target_arm.h	/^typedef enum ARMCC {$/;"	g
ARMCC	lj_target_arm.h	/^} ARMCC;$/;"	t	typeref:enum:ARMCC
ARMF_CC	lj_target_arm.h	146;"	d
ARMF_D	lj_target_arm.h	148;"	d
ARMF_M	lj_target_arm.h	150;"	d
ARMF_N	lj_target_arm.h	147;"	d
ARMF_RSH	lj_target_arm.h	152;"	d
ARMF_S	lj_target_arm.h	149;"	d
ARMF_SH	lj_target_arm.h	151;"	d
ARMI_ADC	lj_target_arm.h	/^  ARMI_ADC = 0xe0a00000,$/;"	e	enum:ARMIns
ARMI_ADD	lj_target_arm.h	/^  ARMI_ADD = 0xe0800000,$/;"	e	enum:ARMIns
ARMI_AND	lj_target_arm.h	/^  ARMI_AND = 0xe0000000,$/;"	e	enum:ARMIns
ARMI_B	lj_target_arm.h	/^  ARMI_B = 0xea000000,$/;"	e	enum:ARMIns
ARMI_BIC	lj_target_arm.h	/^  ARMI_BIC = 0xe1c00000,$/;"	e	enum:ARMIns
ARMI_BL	lj_target_arm.h	/^  ARMI_BL = 0xeb000000,$/;"	e	enum:ARMIns
ARMI_BLX	lj_target_arm.h	/^  ARMI_BLX = 0xfa000000,$/;"	e	enum:ARMIns
ARMI_BLXr	lj_target_arm.h	/^  ARMI_BLXr = 0xe12fff30,$/;"	e	enum:ARMIns
ARMI_CCAL	lj_target_arm.h	/^  ARMI_CCAL = 0xe0000000,$/;"	e	enum:ARMIns
ARMI_CMN	lj_target_arm.h	/^  ARMI_CMN = 0xe1700000,$/;"	e	enum:ARMIns
ARMI_CMP	lj_target_arm.h	/^  ARMI_CMP = 0xe1500000,$/;"	e	enum:ARMIns
ARMI_EOR	lj_target_arm.h	/^  ARMI_EOR = 0xe0200000,$/;"	e	enum:ARMIns
ARMI_K12	lj_target_arm.h	/^  ARMI_K12 = 0x02000000,$/;"	e	enum:ARMIns
ARMI_KNEG	lj_target_arm.h	/^  ARMI_KNEG = 0x00200000,$/;"	e	enum:ARMIns
ARMI_LDR	lj_target_arm.h	/^  ARMI_LDR = 0xe4100000,$/;"	e	enum:ARMIns
ARMI_LDRB	lj_target_arm.h	/^  ARMI_LDRB = 0xe4500000,$/;"	e	enum:ARMIns
ARMI_LDRD	lj_target_arm.h	/^  ARMI_LDRD = 0xe00000d0,$/;"	e	enum:ARMIns
ARMI_LDRH	lj_target_arm.h	/^  ARMI_LDRH = 0xe01000b0,$/;"	e	enum:ARMIns
ARMI_LDRSB	lj_target_arm.h	/^  ARMI_LDRSB = 0xe01000d0,$/;"	e	enum:ARMIns
ARMI_LDRSH	lj_target_arm.h	/^  ARMI_LDRSH = 0xe01000f0,$/;"	e	enum:ARMIns
ARMI_LSX_I	lj_target_arm.h	/^  ARMI_LSX_I = 0x00400000,$/;"	e	enum:ARMIns
ARMI_LS_P	lj_target_arm.h	/^  ARMI_LS_P = 0x01000000,$/;"	e	enum:ARMIns
ARMI_LS_R	lj_target_arm.h	/^  ARMI_LS_R = 0x02000000,$/;"	e	enum:ARMIns
ARMI_LS_U	lj_target_arm.h	/^  ARMI_LS_U = 0x00800000,$/;"	e	enum:ARMIns
ARMI_LS_W	lj_target_arm.h	/^  ARMI_LS_W = 0x00200000,$/;"	e	enum:ARMIns
ARMI_MOV	lj_target_arm.h	/^  ARMI_MOV = 0xe1a00000,$/;"	e	enum:ARMIns
ARMI_MOVT	lj_target_arm.h	/^  ARMI_MOVT = 0xe3400000,$/;"	e	enum:ARMIns
ARMI_MOVW	lj_target_arm.h	/^  ARMI_MOVW = 0xe3000000,$/;"	e	enum:ARMIns
ARMI_MUL	lj_target_arm.h	/^  ARMI_MUL = 0xe0000090,$/;"	e	enum:ARMIns
ARMI_MVN	lj_target_arm.h	/^  ARMI_MVN = 0xe1e00000,$/;"	e	enum:ARMIns
ARMI_NOP	lj_target_arm.h	/^  ARMI_NOP = 0xe1a00000,$/;"	e	enum:ARMIns
ARMI_ORR	lj_target_arm.h	/^  ARMI_ORR = 0xe1800000,$/;"	e	enum:ARMIns
ARMI_PUSH	lj_target_arm.h	/^  ARMI_PUSH = 0xe92d0000,$/;"	e	enum:ARMIns
ARMI_REV	lj_target_arm.h	/^  ARMI_REV = 0xe6bf0f30,$/;"	e	enum:ARMIns
ARMI_RSB	lj_target_arm.h	/^  ARMI_RSB = 0xe0600000,$/;"	e	enum:ARMIns
ARMI_RSC	lj_target_arm.h	/^  ARMI_RSC = 0xe0e00000,$/;"	e	enum:ARMIns
ARMI_S	lj_target_arm.h	/^  ARMI_S = 0x000100000,$/;"	e	enum:ARMIns
ARMI_SBC	lj_target_arm.h	/^  ARMI_SBC = 0xe0c00000,$/;"	e	enum:ARMIns
ARMI_SMULL	lj_target_arm.h	/^  ARMI_SMULL = 0xe0c00090,$/;"	e	enum:ARMIns
ARMI_STR	lj_target_arm.h	/^  ARMI_STR = 0xe4000000,$/;"	e	enum:ARMIns
ARMI_STRB	lj_target_arm.h	/^  ARMI_STRB = 0xe4400000,$/;"	e	enum:ARMIns
ARMI_STRD	lj_target_arm.h	/^  ARMI_STRD = 0xe00000f0,$/;"	e	enum:ARMIns
ARMI_STRH	lj_target_arm.h	/^  ARMI_STRH = 0xe00000b0,$/;"	e	enum:ARMIns
ARMI_SUB	lj_target_arm.h	/^  ARMI_SUB = 0xe0400000,$/;"	e	enum:ARMIns
ARMI_SXTB	lj_target_arm.h	/^  ARMI_SXTB = 0xe6af0070,$/;"	e	enum:ARMIns
ARMI_SXTH	lj_target_arm.h	/^  ARMI_SXTH = 0xe6bf0070,$/;"	e	enum:ARMIns
ARMI_TEQ	lj_target_arm.h	/^  ARMI_TEQ = 0xe1300000,$/;"	e	enum:ARMIns
ARMI_TST	lj_target_arm.h	/^  ARMI_TST = 0xe1100000,$/;"	e	enum:ARMIns
ARMI_UXTB	lj_target_arm.h	/^  ARMI_UXTB = 0xe6ef0070,$/;"	e	enum:ARMIns
ARMI_UXTH	lj_target_arm.h	/^  ARMI_UXTH = 0xe6ff0070,$/;"	e	enum:ARMIns
ARMI_VABS_D	lj_target_arm.h	/^  ARMI_VABS_D = 0xeeb00bc0,$/;"	e	enum:ARMIns
ARMI_VADD_D	lj_target_arm.h	/^  ARMI_VADD_D = 0xee300b00,$/;"	e	enum:ARMIns
ARMI_VCMPZ_D	lj_target_arm.h	/^  ARMI_VCMPZ_D = 0xeeb50b40,$/;"	e	enum:ARMIns
ARMI_VCMP_D	lj_target_arm.h	/^  ARMI_VCMP_D = 0xeeb40b40,$/;"	e	enum:ARMIns
ARMI_VCVTR_S32_F32	lj_target_arm.h	/^  ARMI_VCVTR_S32_F32 = 0xeebd0a40,$/;"	e	enum:ARMIns
ARMI_VCVTR_S32_F64	lj_target_arm.h	/^  ARMI_VCVTR_S32_F64 = 0xeebd0b40,$/;"	e	enum:ARMIns
ARMI_VCVTR_U32_F32	lj_target_arm.h	/^  ARMI_VCVTR_U32_F32 = 0xeebc0a40,$/;"	e	enum:ARMIns
ARMI_VCVTR_U32_F64	lj_target_arm.h	/^  ARMI_VCVTR_U32_F64 = 0xeebc0b40,$/;"	e	enum:ARMIns
ARMI_VCVT_F32_F64	lj_target_arm.h	/^  ARMI_VCVT_F32_F64 = 0xeeb70bc0,$/;"	e	enum:ARMIns
ARMI_VCVT_F32_S32	lj_target_arm.h	/^  ARMI_VCVT_F32_S32 = 0xeeb80ac0,$/;"	e	enum:ARMIns
ARMI_VCVT_F32_U32	lj_target_arm.h	/^  ARMI_VCVT_F32_U32 = 0xeeb80a40,$/;"	e	enum:ARMIns
ARMI_VCVT_F64_F32	lj_target_arm.h	/^  ARMI_VCVT_F64_F32 = 0xeeb70ac0,$/;"	e	enum:ARMIns
ARMI_VCVT_F64_S32	lj_target_arm.h	/^  ARMI_VCVT_F64_S32 = 0xeeb80bc0,$/;"	e	enum:ARMIns
ARMI_VCVT_F64_U32	lj_target_arm.h	/^  ARMI_VCVT_F64_U32 = 0xeeb80b40,$/;"	e	enum:ARMIns
ARMI_VCVT_S32_F32	lj_target_arm.h	/^  ARMI_VCVT_S32_F32 = 0xeebd0ac0,$/;"	e	enum:ARMIns
ARMI_VCVT_S32_F64	lj_target_arm.h	/^  ARMI_VCVT_S32_F64 = 0xeebd0bc0,$/;"	e	enum:ARMIns
ARMI_VCVT_U32_F32	lj_target_arm.h	/^  ARMI_VCVT_U32_F32 = 0xeebc0ac0,$/;"	e	enum:ARMIns
ARMI_VCVT_U32_F64	lj_target_arm.h	/^  ARMI_VCVT_U32_F64 = 0xeebc0bc0,$/;"	e	enum:ARMIns
ARMI_VDIV_D	lj_target_arm.h	/^  ARMI_VDIV_D = 0xee800b00,$/;"	e	enum:ARMIns
ARMI_VLDR_D	lj_target_arm.h	/^  ARMI_VLDR_D = 0xed100b00,$/;"	e	enum:ARMIns
ARMI_VLDR_S	lj_target_arm.h	/^  ARMI_VLDR_S = 0xed100a00,$/;"	e	enum:ARMIns
ARMI_VMLA_D	lj_target_arm.h	/^  ARMI_VMLA_D = 0xee000b00,$/;"	e	enum:ARMIns
ARMI_VMLS_D	lj_target_arm.h	/^  ARMI_VMLS_D = 0xee000b40,$/;"	e	enum:ARMIns
ARMI_VMOVI_D	lj_target_arm.h	/^  ARMI_VMOVI_D = 0xeeb00b00,$/;"	e	enum:ARMIns
ARMI_VMOV_D	lj_target_arm.h	/^  ARMI_VMOV_D = 0xeeb00b40,$/;"	e	enum:ARMIns
ARMI_VMOV_D_RR	lj_target_arm.h	/^  ARMI_VMOV_D_RR = 0xec400b10,$/;"	e	enum:ARMIns
ARMI_VMOV_RR_D	lj_target_arm.h	/^  ARMI_VMOV_RR_D = 0xec500b10,$/;"	e	enum:ARMIns
ARMI_VMOV_R_S	lj_target_arm.h	/^  ARMI_VMOV_R_S = 0xee100a10,$/;"	e	enum:ARMIns
ARMI_VMOV_S	lj_target_arm.h	/^  ARMI_VMOV_S = 0xeeb00a40,$/;"	e	enum:ARMIns
ARMI_VMOV_S_R	lj_target_arm.h	/^  ARMI_VMOV_S_R = 0xee000a10,$/;"	e	enum:ARMIns
ARMI_VMRS	lj_target_arm.h	/^  ARMI_VMRS = 0xeef1fa10,$/;"	e	enum:ARMIns
ARMI_VMUL_D	lj_target_arm.h	/^  ARMI_VMUL_D = 0xee200b00,$/;"	e	enum:ARMIns
ARMI_VNEG_D	lj_target_arm.h	/^  ARMI_VNEG_D = 0xeeb10b40,$/;"	e	enum:ARMIns
ARMI_VNMLS_D	lj_target_arm.h	/^  ARMI_VNMLS_D = 0xee100b00,$/;"	e	enum:ARMIns
ARMI_VSQRT_D	lj_target_arm.h	/^  ARMI_VSQRT_D = 0xeeb10bc0,$/;"	e	enum:ARMIns
ARMI_VSTR_D	lj_target_arm.h	/^  ARMI_VSTR_D = 0xed000b00,$/;"	e	enum:ARMIns
ARMI_VSTR_S	lj_target_arm.h	/^  ARMI_VSTR_S = 0xed000a00,$/;"	e	enum:ARMIns
ARMI_VSUB_D	lj_target_arm.h	/^  ARMI_VSUB_D = 0xee300b40,$/;"	e	enum:ARMIns
ARMIns	lj_target_arm.h	/^typedef enum ARMIns {$/;"	g
ARMIns	lj_target_arm.h	/^} ARMIns;$/;"	t	typeref:enum:ARMIns
ARMSH_ASR	lj_target_arm.h	/^  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR, ARMSH_ROR$/;"	e	enum:ARMShift
ARMSH_LSL	lj_target_arm.h	/^  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR, ARMSH_ROR$/;"	e	enum:ARMShift
ARMSH_LSR	lj_target_arm.h	/^  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR, ARMSH_ROR$/;"	e	enum:ARMShift
ARMSH_ROR	lj_target_arm.h	/^  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR, ARMSH_ROR$/;"	e	enum:ARMShift
ARMShift	lj_target_arm.h	/^typedef enum ARMShift {$/;"	g
ARMShift	lj_target_arm.h	/^} ARMShift;$/;"	t	typeref:enum:ARMShift
ASMFunction	lj_obj.h	/^typedef void (*ASMFunction)(void);$/;"	t
ASMREF_L	lj_asm.c	97;"	d	file:
ASMREF_TMP1	lj_asm.c	95;"	d	file:
ASMREF_TMP2	lj_asm.c	96;"	d	file:
ASMState	lj_asm.c	/^typedef struct ASMState {$/;"	s	file:
ASMState	lj_asm.c	/^} ASMState;$/;"	t	typeref:struct:ASMState	file:
AUXMARK	lib_package.c	528;"	d	file:
AliasRet	lj_opt_mem.c	/^} AliasRet;$/;"	t	typeref:enum:__anon32	file:
Arith	host/minilua.c	/^static void Arith(lua_State*L,StkId ra,const TValue*rb,$/;"	f	file:
BAD	msvcbuild.bat	/^:BAD$/;"	l
BCBIAS_J	lj_bc.h	29;"	d
BCDEF	lj_bc.h	/^BCDEF(BCENUM)$/;"	e	enum:__anon25
BCDEF	lj_bc.h	71;"	d
BCDUMP_F_BE	lj_bcdump.h	42;"	d
BCDUMP_F_FFI	lj_bcdump.h	44;"	d
BCDUMP_F_KNOWN	lj_bcdump.h	46;"	d
BCDUMP_F_STRIP	lj_bcdump.h	43;"	d
BCDUMP_HEAD1	lj_bcdump.h	32;"	d
BCDUMP_HEAD2	lj_bcdump.h	33;"	d
BCDUMP_HEAD3	lj_bcdump.h	34;"	d
BCDUMP_KGC_CHILD	lj_bcdump.h	/^  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64, BCDUMP_KGC_U64,$/;"	e	enum:__anon64
BCDUMP_KGC_COMPLEX	lj_bcdump.h	/^  BCDUMP_KGC_COMPLEX, BCDUMP_KGC_STR$/;"	e	enum:__anon64
BCDUMP_KGC_I64	lj_bcdump.h	/^  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64, BCDUMP_KGC_U64,$/;"	e	enum:__anon64
BCDUMP_KGC_STR	lj_bcdump.h	/^  BCDUMP_KGC_COMPLEX, BCDUMP_KGC_STR$/;"	e	enum:__anon64
BCDUMP_KGC_TAB	lj_bcdump.h	/^  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64, BCDUMP_KGC_U64,$/;"	e	enum:__anon64
BCDUMP_KGC_U64	lj_bcdump.h	/^  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64, BCDUMP_KGC_U64,$/;"	e	enum:__anon64
BCDUMP_KTAB_FALSE	lj_bcdump.h	/^  BCDUMP_KTAB_NIL, BCDUMP_KTAB_FALSE, BCDUMP_KTAB_TRUE,$/;"	e	enum:__anon65
BCDUMP_KTAB_INT	lj_bcdump.h	/^  BCDUMP_KTAB_INT, BCDUMP_KTAB_NUM, BCDUMP_KTAB_STR$/;"	e	enum:__anon65
BCDUMP_KTAB_NIL	lj_bcdump.h	/^  BCDUMP_KTAB_NIL, BCDUMP_KTAB_FALSE, BCDUMP_KTAB_TRUE,$/;"	e	enum:__anon65
BCDUMP_KTAB_NUM	lj_bcdump.h	/^  BCDUMP_KTAB_INT, BCDUMP_KTAB_NUM, BCDUMP_KTAB_STR$/;"	e	enum:__anon65
BCDUMP_KTAB_STR	lj_bcdump.h	/^  BCDUMP_KTAB_INT, BCDUMP_KTAB_NUM, BCDUMP_KTAB_STR$/;"	e	enum:__anon65
BCDUMP_KTAB_TRUE	lj_bcdump.h	/^  BCDUMP_KTAB_NIL, BCDUMP_KTAB_FALSE, BCDUMP_KTAB_TRUE,$/;"	e	enum:__anon65
BCDUMP_VERSION	lj_bcdump.h	39;"	d
BCENUM	lj_bc.h	197;"	d
BCENUM	lj_bc.h	199;"	d
BCINS_ABC	lj_bc.h	53;"	d
BCINS_AD	lj_bc.h	55;"	d
BCINS_AJ	lj_bc.h	57;"	d
BCIns	lj_obj.h	/^typedef uint32_t BCIns;  \/* Bytecode instruction. *\/$/;"	t
BCInsLine	lj_lex.h	/^typedef struct BCInsLine {$/;"	s
BCInsLine	lj_lex.h	/^} BCInsLine;$/;"	t	typeref:struct:BCInsLine
BCLine	lj_obj.h	/^typedef int32_t BCLine;  \/* Bytecode line number. *\/$/;"	t
BCMAX_A	lj_bc.h	25;"	d
BCMAX_B	lj_bc.h	26;"	d
BCMAX_C	lj_bc.h	27;"	d
BCMAX_D	lj_bc.h	28;"	d
BCMODE	lj_bc.h	249;"	d
BCMODE_FF	lj_bc.h	251;"	d
BCM___	lj_bc.h	240;"	d
BCM_max	lj_bc.h	/^  BCM_max$/;"	e	enum:__anon27
BCMbase	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCMcdata	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMdst	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCMfunc	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMjump	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMlit	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMlits	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMnone	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCMnum	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMode	lj_bc.h	/^} BCMode;$/;"	t	typeref:enum:__anon27
BCMpri	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMrbase	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCMstr	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMtab	lj_bc.h	/^  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,$/;"	e	enum:__anon27
BCMuv	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCMvar	lj_bc.h	/^  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,  \/* Mode A must be <= 7 *\/$/;"	e	enum:__anon27
BCNAME	host/buildvm.c	234;"	d	file:
BCNAME	host/buildvm.c	236;"	d	file:
BCOp	lj_bc.h	/^} BCOp;$/;"	t	typeref:enum:__anon25
BCPos	lj_obj.h	/^typedef uint32_t BCPos;  \/* Bytecode position. *\/$/;"	t
BCReg	lj_obj.h	/^typedef uint32_t BCReg;  \/* Bytecode register. *\/$/;"	t
BCWriteCtx	lj_bcwrite.c	/^typedef struct BCWriteCtx {$/;"	s	file:
BCWriteCtx	lj_bcwrite.c	/^} BCWriteCtx;$/;"	t	typeref:struct:BCWriteCtx	file:
BC__MAX	lj_bc.h	/^  BC__MAX$/;"	e	enum:__anon25
BLOOM_MASK	lj_def.h	109;"	d
BPROP_SLOTS	lj_jit.h	278;"	d
BPropEntry	lj_jit.h	/^typedef struct BPropEntry {$/;"	s
BPropEntry	lj_jit.h	/^} BPropEntry;$/;"	t	typeref:struct:BPropEntry
BRET	host/minilua.c	7698;"	d	file:
BSZPTR	host/buildvm_arch.h	7834;"	d
BUILDDEF	host/buildvm.h	/^BUILDDEF(BUILDENUM)$/;"	e	enum:__anon1
BUILDDEF	host/buildvm.h	41;"	d
BUILDENUM	host/buildvm.h	47;"	d
BUILDENUM	host/buildvm.h	49;"	d
BUILDMODE	Makefile	/^    BUILDMODE= dynamic$/;"	m
BUILDMODE	Makefile	/^  BUILDMODE= static$/;"	m
BUILDMODE	Makefile	/^BUILDMODE= mixed$/;"	m
BUILDNAME	host/buildvm.c	351;"	d	file:
BUILDNAME	host/buildvm.c	353;"	d	file:
BUILDVM_O	Makefile	/^BUILDVM_O= host\/buildvm.o host\/buildvm_asm.o host\/buildvm_peobj.o \\$/;"	m
BUILDVM_T	Makefile	/^  BUILDVM_T= host\/buildvm.exe$/;"	m
BUILDVM_T	Makefile	/^BUILDVM_T= host\/buildvm$/;"	m
BUILDVM_X	Makefile	/^    BUILDVM_X= host\\buildvm$/;"	m
BUILDVM_X	Makefile	/^BUILDVM_X= $(BUILDVM_T)$/;"	m
BUILD_MAX_FOLD	host/buildvm.h	20;"	d
BUILD_MAX_RELOC	host/buildvm.h	19;"	d
BUILD__MAX	host/buildvm.h	/^  BUILD__MAX$/;"	e	enum:__anon1
BinOpr	host/minilua.c	/^typedef enum BinOpr{$/;"	g	file:
BinOpr	host/minilua.c	/^}BinOpr;$/;"	t	typeref:enum:BinOpr	file:
BinOpr	lj_parse.c	/^typedef enum BinOpr {$/;"	g	file:
BinOpr	lj_parse.c	/^} BinOpr;$/;"	t	typeref:enum:BinOpr	file:
BlockCnt	host/minilua.c	/^typedef struct BlockCnt{$/;"	s	file:
BlockCnt	host/minilua.c	/^}BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
BloomFilter	lj_def.h	/^typedef uintptr_t BloomFilter;$/;"	t
BuildCtx	host/buildvm.h	/^typedef struct BuildCtx {$/;"	s
BuildCtx	host/buildvm.h	/^} BuildCtx;$/;"	t	typeref:struct:BuildCtx
BuildMode	host/buildvm.h	/^} BuildMode;$/;"	t	typeref:enum:__anon1
BuildReloc	host/buildvm.h	/^typedef struct BuildReloc {$/;"	s
BuildReloc	host/buildvm.h	/^} BuildReloc;$/;"	t	typeref:struct:BuildReloc
BuildSym	host/buildvm.h	/^typedef struct BuildSym {$/;"	s
BuildSym	host/buildvm.h	/^} BuildSym;$/;"	t	typeref:struct:BuildSym
CALLBACK_HANDLE_REGARG	lj_ccallback.c	273;"	d	file:
CALLBACK_HANDLE_REGARG	lj_ccallback.c	287;"	d	file:
CALLBACK_HANDLE_REGARG	lj_ccallback.c	296;"	d	file:
CALLBACK_HANDLE_REGARG	lj_ccallback.c	345;"	d	file:
CALLBACK_HANDLE_REGARG	lj_ccallback.c	356;"	d	file:
CALLBACK_HANDLE_REGARG	lj_ccallback.c	381;"	d	file:
CALLBACK_HANDLE_REGARG_FP1	lj_ccallback.c	315;"	d	file:
CALLBACK_HANDLE_REGARG_FP1	lj_ccallback.c	320;"	d	file:
CALLBACK_HANDLE_REGARG_FP2	lj_ccallback.c	316;"	d	file:
CALLBACK_HANDLE_REGARG_FP2	lj_ccallback.c	341;"	d	file:
CALLBACK_HANDLE_RET	lj_ccallback.c	375;"	d	file:
CALLBACK_HANDLE_RET	lj_ccallback.c	396;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	33;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	51;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	59;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	66;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	73;"	d	file:
CALLBACK_MAX_SLOT	lj_ccallback.c	80;"	d	file:
CALLBACK_MCODE_GROUP	lj_ccallback.c	38;"	d	file:
CALLBACK_MCODE_HEAD	lj_ccallback.c	37;"	d	file:
CALLBACK_MCODE_HEAD	lj_ccallback.c	56;"	d	file:
CALLBACK_MCODE_HEAD	lj_ccallback.c	63;"	d	file:
CALLBACK_MCODE_HEAD	lj_ccallback.c	70;"	d	file:
CALLBACK_MCODE_SIZE	lj_ccallback.c	26;"	d	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	/^static MSize CALLBACK_OFS2SLOT(MSize ofs)$/;"	f	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	32;"	d	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	58;"	d	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	65;"	d	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	72;"	d	file:
CALLBACK_OFS2SLOT	lj_ccallback.c	79;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	31;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	40;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	57;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	64;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	71;"	d	file:
CALLBACK_SLOT2OFS	lj_ccallback.c	78;"	d	file:
CALL_MMAP	lj_alloc.c	/^static LJ_AINLINE void *CALL_MMAP(size_t size)$/;"	f	file:
CALL_MREMAP	lj_alloc.c	279;"	d	file:
CALL_MREMAP	lj_alloc.c	292;"	d	file:
CALL_MREMAP_	lj_alloc.c	/^static LJ_AINLINE void *CALL_MREMAP_(void *ptr, size_t osz, size_t nsz,$/;"	f	file:
CALL_MREMAP_MAYMOVE	lj_alloc.c	281;"	d	file:
CALL_MREMAP_MV	lj_alloc.c	283;"	d	file:
CALL_MREMAP_MV	lj_alloc.c	285;"	d	file:
CALL_MREMAP_NOMOVE	lj_alloc.c	280;"	d	file:
CALL_MUNMAP	lj_alloc.c	/^static LJ_AINLINE int CALL_MUNMAP(void *ptr, size_t size)$/;"	f	file:
CAP_POSITION	lib_string.c	171;"	d	file:
CAP_UNFINISHED	lib_string.c	170;"	d	file:
CC	Makefile	/^CC= gcc$/;"	m
CCALL_ALIGN_CALLSTATE	lj_ccall.h	122;"	d
CCALL_ALIGN_CALLSTATE	lj_ccall.h	39;"	d
CCALL_ALIGN_STACKARG	lj_ccall.h	119;"	d
CCALL_ALIGN_STACKARG	lj_ccall.h	23;"	d
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	149;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	188;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	214;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	289;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	337;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	378;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	61;"	d	file:
CCALL_HANDLE_COMPLEXARG	lj_ccall.c	96;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	128;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	178;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	204;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	278;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	31;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	326;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	362;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	42;"	d	file:
CCALL_HANDLE_COMPLEXRET	lj_ccall.c	83;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	132;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	182;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	207;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	282;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	330;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	366;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	54;"	d	file:
CCALL_HANDLE_COMPLEXRET2	lj_ccall.c	85;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	104;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	152;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	250;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	292;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	341;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	381;"	d	file:
CCALL_HANDLE_REGARG	lj_ccall.c	64;"	d	file:
CCALL_HANDLE_REGARG_FP1	lj_ccall.c	191;"	d	file:
CCALL_HANDLE_REGARG_FP1	lj_ccall.c	217;"	d	file:
CCALL_HANDLE_REGARG_FP2	lj_ccall.c	192;"	d	file:
CCALL_HANDLE_REGARG_FP2	lj_ccall.c	246;"	d	file:
CCALL_HANDLE_RET	lj_ccall.c	268;"	d	file:
CCALL_HANDLE_RET	lj_ccall.c	315;"	d	file:
CCALL_HANDLE_RET	lj_ccall.c	404;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	140;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	185;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	210;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	285;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	333;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	375;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	58;"	d	file:
CCALL_HANDLE_STRUCTARG	lj_ccall.c	89;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	114;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	173;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	196;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	26;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	274;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	322;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	358;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	35;"	d	file:
CCALL_HANDLE_STRUCTRET	lj_ccall.c	78;"	d	file:
CCALL_HANDLE_STRUCTRET2	lj_ccall.c	123;"	d	file:
CCALL_HANDLE_STRUCTRET2	lj_ccall.c	200;"	d	file:
CCALL_HANDLE_STRUCTRET2	lj_ccall.c	413;"	d	file:
CCALL_MAXSTACK	lj_ccall.h	134;"	d
CCALL_MAX_FPR	lj_ctype.h	156;"	d
CCALL_MAX_GPR	lj_ctype.h	155;"	d
CCALL_NARG_FPR	lj_ccall.h	20;"	d
CCALL_NARG_FPR	lj_ccall.h	26;"	d
CCALL_NARG_FPR	lj_ccall.h	32;"	d
CCALL_NARG_FPR	lj_ccall.h	57;"	d
CCALL_NARG_FPR	lj_ccall.h	60;"	d
CCALL_NARG_FPR	lj_ccall.h	74;"	d
CCALL_NARG_FPR	lj_ccall.h	86;"	d
CCALL_NARG_FPR	lj_ccall.h	96;"	d
CCALL_NARG_GPR	lj_ccall.h	19;"	d
CCALL_NARG_GPR	lj_ccall.h	25;"	d
CCALL_NARG_GPR	lj_ccall.h	31;"	d
CCALL_NARG_GPR	lj_ccall.h	54;"	d
CCALL_NARG_GPR	lj_ccall.h	73;"	d
CCALL_NARG_GPR	lj_ccall.h	85;"	d
CCALL_NARG_GPR	lj_ccall.h	95;"	d
CCALL_NRET_FPR	lj_ccall.h	22;"	d
CCALL_NRET_FPR	lj_ccall.h	28;"	d
CCALL_NRET_FPR	lj_ccall.h	34;"	d
CCALL_NRET_FPR	lj_ccall.h	58;"	d
CCALL_NRET_FPR	lj_ccall.h	61;"	d
CCALL_NRET_FPR	lj_ccall.h	76;"	d
CCALL_NRET_FPR	lj_ccall.h	88;"	d
CCALL_NRET_FPR	lj_ccall.h	98;"	d
CCALL_NRET_GPR	lj_ccall.h	21;"	d
CCALL_NRET_GPR	lj_ccall.h	27;"	d
CCALL_NRET_GPR	lj_ccall.h	33;"	d
CCALL_NRET_GPR	lj_ccall.h	55;"	d
CCALL_NRET_GPR	lj_ccall.h	75;"	d
CCALL_NRET_GPR	lj_ccall.h	87;"	d
CCALL_NRET_GPR	lj_ccall.h	97;"	d
CCALL_NUM_FPR	lj_ccall.h	127;"	d
CCALL_NUM_GPR	lj_ccall.h	125;"	d
CCALL_RCL_INT	lj_ccall.c	422;"	d	file:
CCALL_RCL_MEM	lj_ccall.c	424;"	d	file:
CCALL_RCL_SSE	lj_ccall.c	423;"	d	file:
CCALL_SPS_EXTRA	lj_ccall.h	113;"	d
CCALL_SPS_EXTRA	lj_ccall.h	29;"	d
CCALL_SPS_EXTRA	lj_ccall.h	77;"	d
CCALL_SPS_EXTRA	lj_ccall.h	99;"	d
CCALL_SPS_FREE	lj_ccall.h	100;"	d
CCALL_SPS_FREE	lj_ccall.h	38;"	d
CCALL_SPS_FREE	lj_ccall.h	63;"	d
CCALL_SPS_FREE	lj_ccall.h	78;"	d
CCALL_SPS_FREE	lj_ccall.h	89;"	d
CCALL_VECTOR_REG	lj_ccall.h	116;"	d
CCALL_VECTOR_REG	lj_ccall.h	35;"	d
CCDEBUG	Makefile	/^CCDEBUG=$/;"	m
CCF_ARG	lj_cconv.h	52;"	d
CCF_ARG_SHIFT	lj_cconv.h	51;"	d
CCF_CAST	lj_cconv.h	46;"	d
CCF_FROMTV	lj_cconv.h	47;"	d
CCF_GETARG	lj_cconv.h	53;"	d
CCF_IGNQUAL	lj_cconv.h	49;"	d
CCF_SAME	lj_cconv.h	48;"	d
CCI_CALL_FL	lj_ircall.h	31;"	d
CCI_CALL_FN	lj_ircall.h	30;"	d
CCI_CALL_FS	lj_ircall.h	32;"	d
CCI_CALL_L	lj_ircall.h	28;"	d
CCI_CALL_N	lj_ircall.h	27;"	d
CCI_CALL_S	lj_ircall.h	29;"	d
CCI_CASTU64	lj_ircall.h	36;"	d
CCI_CC_CDECL	lj_ircall.h	43;"	d
CCI_CC_FASTCALL	lj_ircall.h	45;"	d
CCI_CC_MASK	lj_ircall.h	40;"	d
CCI_CC_SHIFT	lj_ircall.h	41;"	d
CCI_CC_STDCALL	lj_ircall.h	46;"	d
CCI_CC_THISCALL	lj_ircall.h	44;"	d
CCI_L	lj_ircall.h	35;"	d
CCI_NARGS	lj_ircall.h	19;"	d
CCI_NARGS_MAX	lj_ircall.h	20;"	d
CCI_NOFPRCLOBBER	lj_ircall.h	37;"	d
CCI_OP	lj_ircall.h	25;"	d
CCI_OPSHIFT	lj_ircall.h	24;"	d
CCI_OPTYPE	lj_ircall.h	23;"	d
CCI_OTSHIFT	lj_ircall.h	22;"	d
CCI_VARARG	lj_ircall.h	38;"	d
CCOPT	Makefile	/^CCOPT= -fPIC -O2 -fomit-frame-pointer$/;"	m
CCOPTIONS	Makefile	/^CCOPTIONS= $(CCDEBUG) $(CCOPT) $(CCWARN) $(XCFLAGS) $(CFLAGS)$/;"	m
CCOPT_arm	Makefile	/^CCOPT_arm=$/;"	m
CCOPT_mips	Makefile	/^CCOPT_mips=$/;"	m
CCOPT_ppc	Makefile	/^CCOPT_ppc=$/;"	m
CCOPT_ppcspe	Makefile	/^CCOPT_ppcspe=$/;"	m
CCOPT_x64	Makefile	/^CCOPT_x64=$/;"	m
CCOPT_x86	Makefile	/^CCOPT_x86= -march=i686$/;"	m
CCWARN	Makefile	/^CCWARN= -Wall$/;"	m
CCX	lj_cconv.h	43;"	d
CCX_A	lj_cconv.h	/^  CCX_A,	\/* Refarray. *\/$/;"	e	enum:__anon21
CCX_B	lj_cconv.h	/^  CCX_B,	\/* Bool. *\/$/;"	e	enum:__anon21
CCX_C	lj_cconv.h	/^  CCX_C,	\/* Complex. *\/$/;"	e	enum:__anon21
CCX_F	lj_cconv.h	/^  CCX_F,	\/* Floating-point number. *\/$/;"	e	enum:__anon21
CCX_I	lj_cconv.h	/^  CCX_I,	\/* Integer. *\/$/;"	e	enum:__anon21
CCX_P	lj_cconv.h	/^  CCX_P,	\/* Pointer. *\/$/;"	e	enum:__anon21
CCX_S	lj_cconv.h	/^  CCX_S		\/* Struct\/union. *\/$/;"	e	enum:__anon21
CCX_V	lj_cconv.h	/^  CCX_V,	\/* Vector. *\/$/;"	e	enum:__anon21
CC_A	lj_target_x86.h	/^  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A = CC_NBE,$/;"	e	enum:__anon53
CC_AE	lj_target_x86.h	/^  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE = CC_NB,$/;"	e	enum:__anon53
CC_AL	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_B	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_BE	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_C	lj_target_x86.h	/^  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE = CC_NB,$/;"	e	enum:__anon53
CC_CC	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_CS	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_E	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_EQ	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_EQ	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_G	lj_target_x86.h	/^  CC_NG = CC_LE, CC_G = CC_NLE$/;"	e	enum:__anon53
CC_GE	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_GE	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_GE	lj_target_x86.h	/^  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE = CC_NL,$/;"	e	enum:__anon53
CC_GT	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_GT	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_HI	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_HS	lj_target_arm.h	/^  CC_HS = CC_CS, CC_LO = CC_CC$/;"	e	enum:ARMCC
CC_L	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_LE	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_LE	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_LE	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_LO	lj_target_arm.h	/^  CC_HS = CC_CS, CC_LO = CC_CC$/;"	e	enum:ARMCC
CC_LS	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_LT	lj_target_arm.h	/^  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,$/;"	e	enum:ARMCC
CC_LT	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_MI	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_NA	lj_target_x86.h	/^  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A = CC_NBE,$/;"	e	enum:__anon53
CC_NAE	lj_target_x86.h	/^  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE = CC_NB,$/;"	e	enum:__anon53
CC_NB	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_NBE	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_NC	lj_target_x86.h	/^  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE = CC_NB,$/;"	e	enum:__anon53
CC_NE	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_NE	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_NE	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_NG	lj_target_x86.h	/^  CC_NG = CC_LE, CC_G = CC_NLE$/;"	e	enum:__anon53
CC_NGE	lj_target_x86.h	/^  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE = CC_NL,$/;"	e	enum:__anon53
CC_NL	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_NLE	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_NO	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_NP	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_NS	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_NS	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_NZ	lj_target_x86.h	/^  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A = CC_NBE,$/;"	e	enum:__anon53
CC_O	lj_target_x86.h	/^  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,$/;"	e	enum:__anon53
CC_P	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_PE	lj_target_x86.h	/^  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE = CC_NL,$/;"	e	enum:__anon53
CC_PL	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_PO	lj_target_x86.h	/^  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE = CC_NL,$/;"	e	enum:__anon53
CC_S	lj_target_x86.h	/^  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,$/;"	e	enum:__anon53
CC_SO	lj_target_ppc.h	/^  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO$/;"	e	enum:PPCCC
CC_TWO	lj_asm_ppc.h	1641;"	d
CC_UNSIGNED	lj_asm_ppc.h	1640;"	d
CC_VC	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_VS	lj_target_arm.h	/^  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,$/;"	e	enum:ARMCC
CC_Z	lj_target_x86.h	/^  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A = CC_NBE,$/;"	e	enum:__anon53
CCallInfo	lj_ircall.h	/^typedef struct CCallInfo {$/;"	s
CCallInfo	lj_ircall.h	/^} CCallInfo;$/;"	t	typeref:struct:CCallInfo
CCallState	lj_ccall.h	/^typedef LJ_ALIGN(CCALL_ALIGN_CALLSTATE) struct CCallState {$/;"	s
CCallState	lj_ccall.h	/^} CCallState;$/;"	t	typeref:struct:CCallState
CCallback	lj_ctype.h	/^typedef LJ_ALIGN(8) struct CCallback {$/;"	s
CCallback	lj_ctype.h	/^} CCallback;$/;"	v	typeref:struct:CCallback
CClosure	host/minilua.c	/^typedef struct CClosure{$/;"	s	file:
CClosure	host/minilua.c	/^}CClosure;$/;"	t	typeref:struct:CClosure	file:
CDArith	lj_carith.c	/^typedef struct CDArith {$/;"	s	file:
CDArith	lj_carith.c	/^} CDArith;$/;"	t	typeref:struct:CDArith	file:
CDF_SCL	lj_ctype.h	372;"	d
CDF__END	lj_ctype.h	/^  CDF__END$/;"	e	enum:__anon73
CDSDEF	lj_ctype.h	/^CDSDEF(CDSFLAG)$/;"	e	enum:__anon73
CDSDEF	lj_ctype.h	336;"	d
CDSFLAG	lj_ctype.h	366;"	d
CDSFLAG	lj_ctype.h	368;"	d
CFRAME_OFS_ERRF	lj_frame.h	108;"	d
CFRAME_OFS_ERRF	lj_frame.h	117;"	d
CFRAME_OFS_ERRF	lj_frame.h	127;"	d
CFRAME_OFS_ERRF	lj_frame.h	136;"	d
CFRAME_OFS_ERRF	lj_frame.h	63;"	d
CFRAME_OFS_ERRF	lj_frame.h	76;"	d
CFRAME_OFS_ERRF	lj_frame.h	86;"	d
CFRAME_OFS_ERRF	lj_frame.h	94;"	d
CFRAME_OFS_L	lj_frame.h	111;"	d
CFRAME_OFS_L	lj_frame.h	120;"	d
CFRAME_OFS_L	lj_frame.h	130;"	d
CFRAME_OFS_L	lj_frame.h	139;"	d
CFRAME_OFS_L	lj_frame.h	66;"	d
CFRAME_OFS_L	lj_frame.h	75;"	d
CFRAME_OFS_L	lj_frame.h	85;"	d
CFRAME_OFS_L	lj_frame.h	97;"	d
CFRAME_OFS_MULTRES	lj_frame.h	113;"	d
CFRAME_OFS_MULTRES	lj_frame.h	122;"	d
CFRAME_OFS_MULTRES	lj_frame.h	132;"	d
CFRAME_OFS_MULTRES	lj_frame.h	141;"	d
CFRAME_OFS_MULTRES	lj_frame.h	68;"	d
CFRAME_OFS_MULTRES	lj_frame.h	78;"	d
CFRAME_OFS_MULTRES	lj_frame.h	88;"	d
CFRAME_OFS_MULTRES	lj_frame.h	99;"	d
CFRAME_OFS_NRES	lj_frame.h	109;"	d
CFRAME_OFS_NRES	lj_frame.h	118;"	d
CFRAME_OFS_NRES	lj_frame.h	128;"	d
CFRAME_OFS_NRES	lj_frame.h	137;"	d
CFRAME_OFS_NRES	lj_frame.h	64;"	d
CFRAME_OFS_NRES	lj_frame.h	77;"	d
CFRAME_OFS_NRES	lj_frame.h	87;"	d
CFRAME_OFS_NRES	lj_frame.h	95;"	d
CFRAME_OFS_PC	lj_frame.h	112;"	d
CFRAME_OFS_PC	lj_frame.h	121;"	d
CFRAME_OFS_PC	lj_frame.h	131;"	d
CFRAME_OFS_PC	lj_frame.h	140;"	d
CFRAME_OFS_PC	lj_frame.h	67;"	d
CFRAME_OFS_PC	lj_frame.h	74;"	d
CFRAME_OFS_PC	lj_frame.h	84;"	d
CFRAME_OFS_PC	lj_frame.h	98;"	d
CFRAME_OFS_PREV	lj_frame.h	110;"	d
CFRAME_OFS_PREV	lj_frame.h	119;"	d
CFRAME_OFS_PREV	lj_frame.h	129;"	d
CFRAME_OFS_PREV	lj_frame.h	138;"	d
CFRAME_OFS_PREV	lj_frame.h	65;"	d
CFRAME_OFS_PREV	lj_frame.h	73;"	d
CFRAME_OFS_PREV	lj_frame.h	83;"	d
CFRAME_OFS_PREV	lj_frame.h	96;"	d
CFRAME_RAWMASK	lj_frame.h	154;"	d
CFRAME_RESUME	lj_frame.h	152;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	105;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	115;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	124;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	134;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	143;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	70;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	81;"	d
CFRAME_SHIFT_MULTRES	lj_frame.h	91;"	d
CFRAME_SIZE	lj_frame.h	101;"	d
CFRAME_SIZE	lj_frame.h	103;"	d
CFRAME_SIZE	lj_frame.h	114;"	d
CFRAME_SIZE	lj_frame.h	123;"	d
CFRAME_SIZE	lj_frame.h	133;"	d
CFRAME_SIZE	lj_frame.h	142;"	d
CFRAME_SIZE	lj_frame.h	69;"	d
CFRAME_SIZE	lj_frame.h	79;"	d
CFRAME_SIZE	lj_frame.h	89;"	d
CFRAME_SIZE_JIT	lj_frame.h	149;"	d
CFRAME_SIZE_JIT	lj_frame.h	80;"	d
CFRAME_SIZE_JIT	lj_frame.h	90;"	d
CFRAME_UNWIND_FF	lj_frame.h	153;"	d
CHUNK_ALIGN_MASK	lj_alloc.c	61;"	d	file:
CHUNK_OVERHEAD	lj_alloc.c	315;"	d	file:
CINUSE_BIT	lj_alloc.c	347;"	d	file:
CKWDEF	lj_ctype.h	/^CKWDEF(CKWNUM)$/;"	e	enum:__anon72
CKWDEF	lj_ctype.h	343;"	d
CKWNUM	lj_ctype.h	353;"	d
CKWNUM	lj_ctype.h	357;"	d
CLIB_DEFHANDLE	lj_clib.c	158;"	d	file:
CLIB_DEFHANDLE	lj_clib.c	264;"	d	file:
CLIB_DEFHANDLE	lj_clib.c	28;"	d	file:
CLIB_DEFHANDLE	lj_clib.c	30;"	d	file:
CLIB_DEFHANDLE	lj_clib.c	32;"	d	file:
CLIB_HANDLE_CRT	lj_clib.c	/^  CLIB_HANDLE_CRT,$/;"	e	enum:__anon62	file:
CLIB_HANDLE_DLL	lj_clib.c	/^  CLIB_HANDLE_DLL,$/;"	e	enum:__anon62	file:
CLIB_HANDLE_EXE	lj_clib.c	/^  CLIB_HANDLE_EXE,$/;"	e	enum:__anon62	file:
CLIB_HANDLE_GDI32	lj_clib.c	/^  CLIB_HANDLE_GDI32,$/;"	e	enum:__anon62	file:
CLIB_HANDLE_KERNEL32	lj_clib.c	/^  CLIB_HANDLE_KERNEL32,$/;"	e	enum:__anon62	file:
CLIB_HANDLE_MAX	lj_clib.c	/^  CLIB_HANDLE_MAX$/;"	e	enum:__anon62	file:
CLIB_HANDLE_USER32	lj_clib.c	/^  CLIB_HANDLE_USER32,$/;"	e	enum:__anon62	file:
CLIB_SOEXT	lj_clib.c	49;"	d	file:
CLIB_SOEXT	lj_clib.c	51;"	d	file:
CLIB_SOEXT	lj_clib.c	53;"	d	file:
CLIB_SOPREFIX	lj_clib.c	43;"	d	file:
CLIB_SOPREFIX	lj_clib.c	45;"	d	file:
CLNS_INDEX	lj_clib.h	14;"	d
CLibrary	lj_clib.h	/^typedef struct CLibrary {$/;"	s
CLibrary	lj_clib.h	/^} CLibrary;$/;"	t	typeref:struct:CLibrary
CMFAIL	lj_alloc.c	71;"	d	file:
COMPFLAGS	lj_asm_x86.h	2012;"	d
CONDFOLD	lj_iropt.h	110;"	d
CONFLICT_SEARCH_LIM	lj_asm_arm.h	128;"	d
CONFLICT_SEARCH_LIM	lj_asm_mips.h	114;"	d
CONFLICT_SEARCH_LIM	lj_asm_ppc.h	85;"	d
CONFLICT_SEARCH_LIM	lj_asm_x86.h	75;"	d
CPARSE_MAX_BUF	lj_cparse.h	15;"	d
CPARSE_MAX_DECLDEPTH	lj_cparse.h	17;"	d
CPARSE_MAX_DECLSTACK	lj_cparse.h	16;"	d
CPARSE_MAX_PACKSTACK	lj_cparse.h	18;"	d
CPARSE_MODE_ABSTRACT	lj_cparse.h	22;"	d
CPARSE_MODE_DIRECT	lj_cparse.h	23;"	d
CPARSE_MODE_FIELD	lj_cparse.h	24;"	d
CPARSE_MODE_MULTI	lj_cparse.h	21;"	d
CPARSE_MODE_NOIMPLICIT	lj_cparse.h	25;"	d
CPARSE_MODE_SKIP	lj_cparse.h	26;"	d
CPChar	lj_cparse.h	/^typedef int CPChar;	\/* C parser character. Unsigned ext. from char. *\/$/;"	t
CPDecl	lj_cparse.c	/^typedef struct CPDecl {$/;"	s	file:
CPDecl	lj_cparse.c	/^} CPDecl;$/;"	t	typeref:struct:CPDecl	file:
CPDeclIdx	lj_cparse.c	/^typedef CTypeID CPDeclIdx;	\/* Index into declaration stack. *\/$/;"	t	file:
CPNS_DEFAULT	lj_cparse.c	346;"	d	file:
CPNS_STRUCT	lj_cparse.c	348;"	d	file:
CPState	lj_cparse.h	/^typedef struct CPState {$/;"	s
CPState	lj_cparse.h	/^} CPState;$/;"	t	typeref:struct:CPState
CPToken	lj_cparse.h	/^typedef int CPToken;	\/* C parser token. *\/$/;"	t
CPValue	lj_cparse.h	/^typedef struct CPValue {$/;"	s
CPValue	lj_cparse.h	/^} CPValue;$/;"	t	typeref:struct:CPValue
CPscl	lj_cparse.c	/^typedef uint32_t CPscl;		\/* Storage class flags. *\/$/;"	t	file:
CREATE_ABC	host/minilua.c	940;"	d	file:
CREATE_ABx	host/minilua.c	941;"	d	file:
CREC_COPY_MAXLEN	lj_crecord.c	125;"	d	file:
CREC_COPY_MAXUNROLL	lj_crecord.c	124;"	d	file:
CREC_COPY_REGWIN	lj_crecord.c	136;"	d	file:
CREC_COPY_REGWIN	lj_crecord.c	138;"	d	file:
CREC_COPY_REGWIN	lj_crecord.c	140;"	d	file:
CREC_FILL_MAXLEN	lj_crecord.c	129;"	d	file:
CREC_FILL_MAXLEN	lj_crecord.c	131;"	d	file:
CREC_FILL_MAXUNROLL	lj_crecord.c	127;"	d	file:
CRecMemList	lj_crecord.c	/^typedef struct CRecMemList {$/;"	s	file:
CRecMemList	lj_crecord.c	/^} CRecMemList;$/;"	t	typeref:struct:CRecMemList	file:
CSEFOLD	lj_iropt.h	113;"	d
CTALIGN	lj_ctype.h	187;"	d
CTALIGN_PTR	lj_ctype.h	252;"	d
CTALIGN_PTR	lj_ctype.h	255;"	d
CTATTRIB	lj_ctype.h	188;"	d
CTA_ALIGN	lj_ctype.h	/^  CTA_ALIGN,		\/* Alignment override. *\/$/;"	e	enum:__anon70
CTA_BAD	lj_ctype.h	/^  CTA_BAD,		\/* To catch bad IDs. *\/$/;"	e	enum:__anon70
CTA_NONE	lj_ctype.h	/^  CTA_NONE,		\/* Ignored attribute. Must be zero. *\/$/;"	e	enum:__anon70
CTA_QUAL	lj_ctype.h	/^  CTA_QUAL,		\/* Unmerged qualifiers. *\/$/;"	e	enum:__anon70
CTA_REDIR	lj_ctype.h	/^  CTA_REDIR,		\/* Redirected symbol name. *\/$/;"	e	enum:__anon70
CTA_SUBTYPE	lj_ctype.h	/^  CTA_SUBTYPE,		\/* Transparent sub-type. *\/$/;"	e	enum:__anon70
CTA__MAX	lj_ctype.h	/^  CTA__MAX$/;"	e	enum:__anon70
CTBSZ_FIELD	lj_ctype.h	108;"	d
CTBSZ_MAX	lj_ctype.h	107;"	d
CTCC_CDECL	lj_ctype.h	/^enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL, CTCC_STDCALL };$/;"	e	enum:__anon69
CTCC_FASTCALL	lj_ctype.h	/^enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL, CTCC_STDCALL };$/;"	e	enum:__anon69
CTCC_STDCALL	lj_ctype.h	/^enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL, CTCC_STDCALL };$/;"	e	enum:__anon69
CTCC_THISCALL	lj_ctype.h	/^enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL, CTCC_STDCALL };$/;"	e	enum:__anon69
CTFP_ALIGNED	lj_ctype.h	83;"	d
CTFP_CCONV	lj_ctype.h	86;"	d
CTFP_PACKED	lj_ctype.h	84;"	d
CTF_ALIGN	lj_ctype.h	79;"	d
CTF_BOOL	lj_ctype.h	64;"	d
CTF_COMPLEX	lj_ctype.h	73;"	d
CTF_CONST	lj_ctype.h	66;"	d
CTF_FP	lj_ctype.h	65;"	d
CTF_INSERT	lj_ctype.h	116;"	d
CTF_LONG	lj_ctype.h	69;"	d
CTF_QUAL	lj_ctype.h	78;"	d
CTF_REF	lj_ctype.h	71;"	d
CTF_SSEREGPARM	lj_ctype.h	76;"	d
CTF_UCHAR	lj_ctype.h	80;"	d
CTF_UNION	lj_ctype.h	74;"	d
CTF_UNSIGNED	lj_ctype.h	68;"	d
CTF_VARARG	lj_ctype.h	75;"	d
CTF_VECTOR	lj_ctype.h	72;"	d
CTF_VLA	lj_ctype.h	70;"	d
CTF_VOLATILE	lj_ctype.h	67;"	d
CTHASH_MASK	lj_ctype.h	152;"	d
CTHASH_SIZE	lj_ctype.h	151;"	d
CTID_INT_PSZ	lj_ctype.h	311;"	d
CTID_INT_PSZ	lj_ctype.h	314;"	d
CTID_MAX	lj_ctype.h	/^  CTID_MAX = 65536$/;"	e	enum:__anon71
CTID_UINT_PSZ	lj_ctype.h	312;"	d
CTID_UINT_PSZ	lj_ctype.h	315;"	d
CTID_WCHAR	lj_ctype.h	319;"	d
CTID_WCHAR	lj_ctype.h	321;"	d
CTID_WCHAR	lj_ctype.h	323;"	d
CTINFO	lj_ctype.h	186;"	d
CTINFO_REF	lj_ctype.h	258;"	d
CTInfo	lj_ctype.h	/^typedef uint32_t CTInfo;	\/* Type info. *\/$/;"	t
CTKWDEF	lj_ctype.c	43;"	d	file:
CTKWINFODEF	lj_ctype.c	114;"	d	file:
CTKWINFODEF	lj_ctype.c	120;"	d	file:
CTKWNAMEDEF	lj_ctype.c	127;"	d	file:
CTKWNAMEDEF	lj_ctype.c	131;"	d	file:
CTMASK_ALIGN	lj_ctype.h	92;"	d
CTMASK_ATTRIB	lj_ctype.h	94;"	d
CTMASK_BITBSZ	lj_ctype.h	110;"	d
CTMASK_BITCSZ	lj_ctype.h	111;"	d
CTMASK_BITPOS	lj_ctype.h	109;"	d
CTMASK_CCONV	lj_ctype.h	96;"	d
CTMASK_CID	lj_ctype.h	89;"	d
CTMASK_MSIZEP	lj_ctype.h	103;"	d
CTMASK_NUM	lj_ctype.h	90;"	d
CTMASK_REGPARM	lj_ctype.h	98;"	d
CTMASK_VSIZEP	lj_ctype.h	101;"	d
CTOKDEF	lj_ctype.h	/^CTOKDEF(CTOKNUM)$/;"	e	enum:__anon72
CTOKDEF	lj_ctype.h	329;"	d
CTOKNUM	lj_ctype.h	352;"	d
CTOKNUM	lj_ctype.h	356;"	d
CTOKSTR	lj_cparse.c	34;"	d	file:
CTOKSTR	lj_cparse.c	36;"	d	file:
CTOK_FIRSTDECL	lj_ctype.h	/^  CTOK_FIRSTDECL = CTOK_VOID,$/;"	e	enum:__anon72
CTOK_FIRSTSCL	lj_ctype.h	/^  CTOK_FIRSTSCL = CTOK_TYPEDEF,$/;"	e	enum:__anon72
CTOK_LASTDECL	lj_ctype.h	/^  CTOK_LASTDECL = CTOK_ENUM$/;"	e	enum:__anon72
CTOK_LASTDECLFLAG	lj_ctype.h	/^  CTOK_LASTDECLFLAG = CTOK_REGISTER,$/;"	e	enum:__anon72
CTOK_OFS	lj_ctype.h	/^  CTOK_OFS = 255,$/;"	e	enum:__anon72
CTREPR_MAX	lj_ctype.c	333;"	d	file:
CTRepr	lj_ctype.c	/^typedef struct CTRepr {$/;"	s	file:
CTRepr	lj_ctype.c	/^} CTRepr;$/;"	t	typeref:struct:CTRepr	file:
CTSHIFT_ALIGN	lj_ctype.h	93;"	d
CTSHIFT_ATTRIB	lj_ctype.h	95;"	d
CTSHIFT_BITBSZ	lj_ctype.h	113;"	d
CTSHIFT_BITCSZ	lj_ctype.h	114;"	d
CTSHIFT_BITPOS	lj_ctype.h	112;"	d
CTSHIFT_CCONV	lj_ctype.h	97;"	d
CTSHIFT_MSIZEP	lj_ctype.h	104;"	d
CTSHIFT_NUM	lj_ctype.h	91;"	d
CTSHIFT_REGPARM	lj_ctype.h	99;"	d
CTSHIFT_VSIZEP	lj_ctype.h	102;"	d
CTSIZE_INVALID	lj_ctype.h	135;"	d
CTSIZE_PTR	lj_ctype.h	251;"	d
CTSIZE_PTR	lj_ctype.h	254;"	d
CTSize	lj_ctype.h	/^typedef uint32_t CTSize;	\/* Type size. *\/$/;"	t
CTState	lj_ctype.h	/^typedef struct CTState {$/;"	s
CTState	lj_ctype.h	/^} CTState;$/;"	t	typeref:struct:CTState
CTTDDEF	lj_ctype.c	20;"	d	file:
CTTDINFODEF	lj_ctype.c	113;"	d	file:
CTTDINFODEF	lj_ctype.c	119;"	d	file:
CTTDNAMEDEF	lj_ctype.c	126;"	d	file:
CTTDNAMEDEF	lj_ctype.c	130;"	d	file:
CTTYDEF	lj_ctype.h	/^CTTYDEF(CTTYIDDEF)$/;"	e	enum:__anon71
CTTYDEF	lj_ctype.h	274;"	d
CTTYDEFP	lj_ctype.h	267;"	d
CTTYDEFP	lj_ctype.h	270;"	d
CTTYIDDEF	lj_ctype.h	302;"	d
CTTYIDDEF	lj_ctype.h	304;"	d
CTTYINFODEF	lj_ctype.c	112;"	d	file:
CTTYINFODEF	lj_ctype.c	118;"	d	file:
CTTYPEINFO_NUM	lj_ctype.c	134;"	d	file:
CTTYPETAB_MIN	lj_ctype.c	135;"	d	file:
CT_ARRAY	lj_ctype.h	/^  CT_ARRAY,		\/* Array or complex type. *\/$/;"	e	enum:__anon68
CT_ATTRIB	lj_ctype.h	/^  CT_ATTRIB,		\/* Miscellaneous attributes. *\/$/;"	e	enum:__anon68
CT_BITFIELD	lj_ctype.h	/^  CT_BITFIELD,		\/* Struct\/union bitfield. *\/$/;"	e	enum:__anon68
CT_CONSTVAL	lj_ctype.h	/^  CT_CONSTVAL,		\/* Constant value. *\/$/;"	e	enum:__anon68
CT_ENUM	lj_ctype.h	/^  CT_ENUM,		\/* Enumeration. *\/$/;"	e	enum:__anon68
CT_EXTERN	lj_ctype.h	/^  CT_EXTERN,		\/* External reference. *\/$/;"	e	enum:__anon68
CT_FIELD	lj_ctype.h	/^  CT_FIELD,		\/* Struct\/union field or function parameter. *\/$/;"	e	enum:__anon68
CT_FUNC	lj_ctype.h	/^  CT_FUNC,		\/* Function. *\/$/;"	e	enum:__anon68
CT_HASSIZE	lj_ctype.h	/^  CT_HASSIZE = CT_ENUM,  \/* Last type where ct->size holds the actual size. *\/$/;"	e	enum:__anon68
CT_KW	lj_ctype.h	/^  CT_KW			\/* Keyword. *\/$/;"	e	enum:__anon68
CT_MAYCONVERT	lj_ctype.h	/^  CT_MAYCONVERT = CT_ARRAY,$/;"	e	enum:__anon68
CT_MEMALIGN	lj_ctype.h	261;"	d
CT_NUM	lj_ctype.h	/^  CT_NUM,		\/* Integer or floating-point numbers. *\/$/;"	e	enum:__anon68
CT_PTR	lj_ctype.h	/^  CT_PTR,		\/* Pointer or reference. *\/$/;"	e	enum:__anon68
CT_STRUCT	lj_ctype.h	/^  CT_STRUCT,		\/* Struct or union. *\/$/;"	e	enum:__anon68
CT_TYPEDEF	lj_ctype.h	/^  CT_TYPEDEF,		\/* Typedef. *\/$/;"	e	enum:__anon68
CT_VOID	lj_ctype.h	/^  CT_VOID,		\/* Void type. *\/$/;"	e	enum:__anon68
CType	lj_ctype.h	/^typedef struct CType {$/;"	s
CType	lj_ctype.h	/^} CType;$/;"	t	typeref:struct:CType
CTypeID	lj_ctype.h	/^typedef uint32_t CTypeID;	\/* Type ID. *\/$/;"	t
CTypeID1	lj_ctype.h	/^typedef uint16_t CTypeID1;	\/* Minimum-sized type ID. *\/$/;"	t
CallInfo	host/minilua.c	/^typedef struct CallInfo{$/;"	s	file:
CallInfo	host/minilua.c	/^}CallInfo;$/;"	t	typeref:struct:CallInfo	file:
CallS	host/minilua.c	/^struct CallS{$/;"	s	file:
Closure	host/minilua.c	/^typedef union Closure{$/;"	u	file:
Closure	host/minilua.c	/^}Closure;$/;"	t	typeref:union:Closure	file:
ConsControl	host/minilua.c	/^struct ConsControl{$/;"	s	file:
ContextRecord	lj_err.c	/^  PCONTEXT ContextRecord;$/;"	m	struct:UndocumentedDispatcherContext	file:
ControlPc	lj_err.c	/^  ULONG64 ControlPc;$/;"	m	struct:UndocumentedDispatcherContext	file:
D	host/buildvm.h	/^  struct dasm_State *D;$/;"	m	struct:BuildCtx	typeref:struct:BuildCtx::dasm_State
DADDR	lj_gdbjit.c	454;"	d	file:
DADDR	lj_gdbjit.c	681;"	d	file:
DALIGNNOP	lj_gdbjit.c	458;"	d	file:
DALIGNNOP	lj_gdbjit.c	685;"	d	file:
DASM	Makefile	/^DASM= $(HOST_LUA) $(DASM_DIR)\/dynasm.lua$/;"	m
DASM	msvcbuild.bat	/^@set DASM=%DASMDIR%\\dynasm.lua$/;"	v
DASMDIR	msvcbuild.bat	/^@set DASMDIR=..\\dynasm$/;"	v
DASMFLAGS	msvcbuild.bat	/^@set DASMFLAGS=-D WIN -D JIT -D FFI -D P64$/;"	v
DASMFLAGS	msvcbuild.bat	/^@set DASMFLAGS=-D WIN -D JIT -D FFI$/;"	v
DASM_AFLAGS	Makefile	/^DASM_AFLAGS=$/;"	m
DASM_ALIGNED_WRITES	host/buildvm.c	55;"	d	file:
DASM_ARCH	Makefile	/^  DASM_ARCH= x86$/;"	m
DASM_ARCH	Makefile	/^DASM_ARCH= $(TARGET_LJARCH)$/;"	m
DASM_CHECKS	host/buildvm.c	42;"	d	file:
DASM_DASC	Makefile	/^DASM_DASC= vm_$(DASM_ARCH).dasc$/;"	m
DASM_DEP	Makefile	/^  DASM_DEP= $(MINILUA_T)$/;"	m
DASM_DIR	Makefile	/^DASM_DIR= ..\/dynasm$/;"	m
DASM_EXTERN	host/buildvm.c	49;"	d	file:
DASM_FLAGS	Makefile	/^DASM_FLAGS= $(DASM_XFLAGS) $(DASM_AFLAGS)$/;"	m
DASM_MAXSECTION	host/buildvm_arch.h	25;"	d
DASM_SECTION_CODE_OP	host/buildvm_arch.h	23;"	d
DASM_SECTION_CODE_SUB	host/buildvm_arch.h	24;"	d
DASM_XFLAGS	Makefile	/^DASM_XFLAGS=$/;"	m
DB	lj_gdbjit.c	450;"	d	file:
DB	lj_gdbjit.c	677;"	d	file:
DEFAULT_GRANULARITY	lj_alloc.c	40;"	d	file:
DEFAULT_MMAP_THRESHOLD	lj_alloc.c	42;"	d	file:
DEFAULT_TRIM_THRESHOLD	lj_alloc.c	41;"	d	file:
DEF_SLOT	lj_snap.c	193;"	d	file:
DEF_SLOT	lj_snap.c	262;"	d	file:
DI8	lj_gdbjit.c	451;"	d	file:
DI8	lj_gdbjit.c	678;"	d	file:
DIRECT_CHUNK_OVERHEAD	lj_alloc.c	318;"	d	file:
DIRECT_FOOT_PAD	lj_alloc.c	320;"	d	file:
DIRECT_MMAP	lj_alloc.c	/^static LJ_AINLINE void *DIRECT_MMAP(size_t size)$/;"	f	file:
DIRECT_MMAP	lj_alloc.c	258;"	d	file:
DISPATCH_GL	host/buildvm_arch.h	1459;"	d
DISPATCH_J	host/buildvm_arch.h	1460;"	d
DISPMODE_CALL	lj_dispatch.c	88;"	d	file:
DISPMODE_INS	lj_dispatch.c	87;"	d	file:
DISPMODE_JIT	lj_dispatch.c	85;"	d	file:
DISPMODE_REC	lj_dispatch.c	86;"	d	file:
DISPMODE_RET	lj_dispatch.c	89;"	d	file:
DLEN	lj_strscan.c	495;"	d	file:
DLEN	lj_strscan.c	70;"	d	file:
DLMSG	lib_package.c	149;"	d	file:
DLNE	lj_gdbjit.c	639;"	d	file:
DLNE	lj_gdbjit.c	674;"	d	file:
DNEXT	lj_strscan.c	493;"	d	file:
DNEXT	lj_strscan.c	68;"	d	file:
DPREV	lj_strscan.c	494;"	d	file:
DPREV	lj_strscan.c	69;"	d	file:
DROPFOLD	lj_iropt.h	/^  DROPFOLD,		\/* Guard eliminated. *\/$/;"	e	enum:__anon23
DSECT	lj_gdbjit.c	459;"	d	file:
DSECT	lj_gdbjit.c	686;"	d	file:
DSTR	lj_gdbjit.c	457;"	d	file:
DSTR	lj_gdbjit.c	684;"	d	file:
DSV	lj_gdbjit.c	456;"	d	file:
DSV	lj_gdbjit.c	683;"	d	file:
DU16	lj_gdbjit.c	452;"	d	file:
DU16	lj_gdbjit.c	679;"	d	file:
DU32	lj_gdbjit.c	453;"	d	file:
DU32	lj_gdbjit.c	680;"	d	file:
DUV	lj_gdbjit.c	455;"	d	file:
DUV	lj_gdbjit.c	682;"	d	file:
DW_AT_high_pc	lj_gdbjit.c	/^  DW_AT_high_pc = 0x12$/;"	e	enum:__anon93	file:
DW_AT_low_pc	lj_gdbjit.c	/^  DW_AT_low_pc = 0x11,$/;"	e	enum:__anon93	file:
DW_AT_name	lj_gdbjit.c	/^  DW_AT_name = 0x03,$/;"	e	enum:__anon93	file:
DW_AT_stmt_list	lj_gdbjit.c	/^  DW_AT_stmt_list = 0x10,$/;"	e	enum:__anon93	file:
DW_CFA_advance_loc	lj_gdbjit.c	/^  DW_CFA_advance_loc = 0x40,$/;"	e	enum:__anon89	file:
DW_CFA_def_cfa	lj_gdbjit.c	/^  DW_CFA_def_cfa = 0xc,$/;"	e	enum:__anon89	file:
DW_CFA_def_cfa_offset	lj_gdbjit.c	/^  DW_CFA_def_cfa_offset = 0xe,$/;"	e	enum:__anon89	file:
DW_CFA_nop	lj_gdbjit.c	/^  DW_CFA_nop = 0x0,$/;"	e	enum:__anon89	file:
DW_CFA_offset	lj_gdbjit.c	/^  DW_CFA_offset = 0x80$/;"	e	enum:__anon89	file:
DW_CFA_offset_extended	lj_gdbjit.c	/^  DW_CFA_offset_extended = 0x5,$/;"	e	enum:__anon89	file:
DW_CFA_offset_extended_sf	lj_gdbjit.c	/^  DW_CFA_offset_extended_sf = 0x11,$/;"	e	enum:__anon89	file:
DW_CIE_VERSION	lj_gdbjit.c	231;"	d	file:
DW_EH_PE_textrel	lj_gdbjit.c	/^  DW_EH_PE_textrel = 0x20$/;"	e	enum:__anon90	file:
DW_EH_PE_udata4	lj_gdbjit.c	/^  DW_EH_PE_udata4 = 3,$/;"	e	enum:__anon90	file:
DW_FORM_addr	lj_gdbjit.c	/^  DW_FORM_addr = 0x01,$/;"	e	enum:__anon94	file:
DW_FORM_data4	lj_gdbjit.c	/^  DW_FORM_data4 = 0x06,$/;"	e	enum:__anon94	file:
DW_FORM_string	lj_gdbjit.c	/^  DW_FORM_string = 0x08$/;"	e	enum:__anon94	file:
DW_LNE_end_sequence	lj_gdbjit.c	/^  DW_LNE_end_sequence = 1,$/;"	e	enum:__anon96	file:
DW_LNE_set_address	lj_gdbjit.c	/^  DW_LNE_set_address = 2$/;"	e	enum:__anon96	file:
DW_LNS_advance_line	lj_gdbjit.c	/^  DW_LNS_advance_line = 3$/;"	e	enum:__anon95	file:
DW_LNS_advance_pc	lj_gdbjit.c	/^  DW_LNS_advance_pc = 2,$/;"	e	enum:__anon95	file:
DW_LNS_copy	lj_gdbjit.c	/^  DW_LNS_copy = 1,$/;"	e	enum:__anon95	file:
DW_LNS_extended_op	lj_gdbjit.c	/^  DW_LNS_extended_op = 0,$/;"	e	enum:__anon95	file:
DW_REG_AX	lj_gdbjit.c	/^  DW_REG_AX, DW_REG_CX, DW_REG_DX, DW_REG_BX,$/;"	e	enum:__anon97	file:
DW_REG_BP	lj_gdbjit.c	/^  DW_REG_SP, DW_REG_BP, DW_REG_SI, DW_REG_DI,$/;"	e	enum:__anon97	file:
DW_REG_BX	lj_gdbjit.c	/^  DW_REG_AX, DW_REG_CX, DW_REG_DX, DW_REG_BX,$/;"	e	enum:__anon97	file:
DW_REG_CX	lj_gdbjit.c	/^  DW_REG_AX, DW_REG_CX, DW_REG_DX, DW_REG_BX,$/;"	e	enum:__anon97	file:
DW_REG_DI	lj_gdbjit.c	/^  DW_REG_SP, DW_REG_BP, DW_REG_SI, DW_REG_DI,$/;"	e	enum:__anon97	file:
DW_REG_DX	lj_gdbjit.c	/^  DW_REG_AX, DW_REG_CX, DW_REG_DX, DW_REG_BX,$/;"	e	enum:__anon97	file:
DW_REG_RA	lj_gdbjit.c	/^  DW_REG_RA,$/;"	e	enum:__anon97	file:
DW_REG_SI	lj_gdbjit.c	/^  DW_REG_SP, DW_REG_BP, DW_REG_SI, DW_REG_DI,$/;"	e	enum:__anon97	file:
DW_REG_SP	lj_gdbjit.c	/^  DW_REG_SP, DW_REG_BP, DW_REG_SI, DW_REG_DI,$/;"	e	enum:__anon97	file:
DW_TAG_compile_unit	lj_gdbjit.c	/^  DW_TAG_compile_unit = 0x11$/;"	e	enum:__anon91	file:
DW_children_no	lj_gdbjit.c	/^  DW_children_no = 0,$/;"	e	enum:__anon92	file:
DW_children_yes	lj_gdbjit.c	/^  DW_children_yes = 1$/;"	e	enum:__anon92	file:
DYNAMIC_CC	Makefile	/^DYNAMIC_CC = $(CROSS)$(CC) -fPIC$/;"	m
Dst	host/buildvm.c	39;"	d	file:
Dst_DECL	host/buildvm.c	40;"	d	file:
Dst_REF	host/buildvm.c	41;"	d	file:
Dt1	host/buildvm_arch.h	1197;"	d
Dt2	host/buildvm_arch.h	1200;"	d
Dt3	host/buildvm_arch.h	1203;"	d
Dt4	host/buildvm_arch.h	1206;"	d
Dt5	host/buildvm_arch.h	1209;"	d
Dt6	host/buildvm_arch.h	1212;"	d
Dt7	host/buildvm_arch.h	1215;"	d
Dt8	host/buildvm_arch.h	1218;"	d
Dt9	host/buildvm_arch.h	1221;"	d
DtA	host/buildvm_arch.h	1224;"	d
DtB	host/buildvm_arch.h	1227;"	d
DtC	host/buildvm_arch.h	1230;"	d
DtD	host/buildvm_arch.h	1233;"	d
DtE	host/buildvm_arch.h	5000;"	d
DtF	host/buildvm_arch.h	5102;"	d
E	Makefile	/^E= @echo$/;"	m
ELFASM_PX	host/buildvm_asm.c	139;"	d	file:
ELFASM_PX	host/buildvm_asm.c	141;"	d	file:
ELFSECT_FLAGS_ALLOC	lj_gdbjit.c	202;"	d	file:
ELFSECT_FLAGS_EXEC	lj_gdbjit.c	203;"	d	file:
ELFSECT_FLAGS_WRITE	lj_gdbjit.c	201;"	d	file:
ELFSECT_IDX_ABS	lj_gdbjit.c	192;"	d	file:
ELFSECT_TYPE_NOBITS	lj_gdbjit.c	/^  ELFSECT_TYPE_NOBITS = 8$/;"	e	enum:__anon87	file:
ELFSECT_TYPE_PROGBITS	lj_gdbjit.c	/^  ELFSECT_TYPE_PROGBITS = 1,$/;"	e	enum:__anon87	file:
ELFSECT_TYPE_STRTAB	lj_gdbjit.c	/^  ELFSECT_TYPE_STRTAB = 3,$/;"	e	enum:__anon87	file:
ELFSECT_TYPE_SYMTAB	lj_gdbjit.c	/^  ELFSECT_TYPE_SYMTAB = 2,$/;"	e	enum:__anon87	file:
ELFSYM_BIND_GLOBAL	lj_gdbjit.c	/^  ELFSYM_BIND_GLOBAL = 1 << 4,$/;"	e	enum:__anon88	file:
ELFSYM_BIND_LOCAL	lj_gdbjit.c	/^  ELFSYM_BIND_LOCAL = 0 << 4,$/;"	e	enum:__anon88	file:
ELFSYM_TYPE_FILE	lj_gdbjit.c	/^  ELFSYM_TYPE_FILE = 4,$/;"	e	enum:__anon88	file:
ELFSYM_TYPE_FUNC	lj_gdbjit.c	/^  ELFSYM_TYPE_FUNC = 2,$/;"	e	enum:__anon88	file:
ELFheader	lj_gdbjit.c	/^typedef struct ELFheader {$/;"	s	file:
ELFheader	lj_gdbjit.c	/^} ELFheader;$/;"	t	typeref:struct:ELFheader	file:
ELFsectheader	lj_gdbjit.c	/^typedef struct ELFsectheader {$/;"	s	file:
ELFsectheader	lj_gdbjit.c	/^} ELFsectheader;$/;"	t	typeref:struct:ELFsectheader	file:
ELFsymbol	lj_gdbjit.c	/^typedef struct ELFsymbol {$/;"	s	file:
ELFsymbol	lj_gdbjit.c	/^} ELFsymbol;$/;"	t	typeref:struct:ELFsymbol	file:
EMITFOLD	lj_iropt.h	114;"	d
END	msvcbuild.bat	/^:END$/;"	l
END_OF_STREAM	lj_lex.c	45;"	d	file:
ERRDEF	lj_err.c	73;"	d	file:
ERRDEF	lj_err.h	14;"	d
ERRDEF	lj_errmsg.h	188;"	d
ERRNO_RESTORE	lj_dispatch.h	121;"	d
ERRNO_RESTORE	lj_dispatch.h	124;"	d
ERRNO_RESTORE	lj_dispatch.h	128;"	d
ERRNO_SAVE	lj_dispatch.h	120;"	d
ERRNO_SAVE	lj_dispatch.h	123;"	d
ERRNO_SAVE	lj_dispatch.h	127;"	d
EXITSTATE_CHECKEXIT	lj_target_arm.h	138;"	d
EXITSTATE_CHECKEXIT	lj_target_mips.h	120;"	d
EXITSTATE_CHECKEXIT	lj_target_ppc.h	112;"	d
EXITSTATE_PCREG	lj_target_arm.h	136;"	d
EXITSTUBS_PER_GROUP	lj_target_arm.h	141;"	d
EXITSTUBS_PER_GROUP	lj_target_x86.h	158;"	d
EXITSTUB_SPACING	lj_target_arm.h	140;"	d
EXITSTUB_SPACING	lj_target_x86.h	157;"	d
ErrMsg	lj_err.h	/^} ErrMsg;$/;"	t	typeref:enum:__anon33
EstablisherFrame	lj_err.c	/^  ULONG64 EstablisherFrame;$/;"	m	struct:UndocumentedDispatcherContext	file:
ExitDataCP	lj_trace.c	/^typedef struct ExitDataCP {$/;"	s	file:
ExitDataCP	lj_trace.c	/^} ExitDataCP;$/;"	t	typeref:struct:ExitDataCP	file:
ExitNo	lj_jit.h	/^typedef uint32_t ExitNo;$/;"	t
ExitState	lj_target_arm.h	/^} ExitState;$/;"	t	typeref:struct:__anon31
ExitState	lj_target_mips.h	/^} ExitState;$/;"	t	typeref:struct:__anon39
ExitState	lj_target_ppc.h	/^} ExitState;$/;"	t	typeref:struct:__anon29
ExitState	lj_target_x86.h	/^} ExitState;$/;"	t	typeref:struct:__anon45
ExpDesc	lj_parse.c	/^typedef struct ExpDesc {$/;"	s	file:
ExpDesc	lj_parse.c	/^} ExpDesc;$/;"	t	typeref:struct:ExpDesc	file:
ExpKind	lj_parse.c	/^} ExpKind;$/;"	t	typeref:enum:__anon40	file:
FAIL	msvcbuild.bat	/^:FAIL$/;"	l
FAILFOLD	lj_iropt.h	/^  FAILFOLD,		\/* Guard would always fail. *\/$/;"	e	enum:__anon23
FENCEPOST_HEAD	lj_alloc.c	351;"	d	file:
FFDEF	lj_ff.h	13;"	d
FFDEF	lj_ffdef.h	205;"	d
FFH_RES	lj_lib.h	30;"	d
FFH_RETRY	lj_lib.h	28;"	d
FFH_TAILCALL	lj_lib.h	31;"	d
FFH_UNREACHABLE	lj_lib.h	29;"	d
FFIGOTDEF	lj_dispatch.h	23;"	d
FFIGOTDEF	lj_dispatch.h	26;"	d
FF_C	lj_obj.h	389;"	d
FF_C_	lj_ff.h	/^  FF_C_ = FF_C,		\/* Regular C function (must be 1). *\/$/;"	e	enum:__anon35
FF_LUA	lj_obj.h	388;"	d
FF_LUA_	lj_ff.h	/^  FF_LUA_ = FF_LUA,	\/* Lua function (must be 0). *\/$/;"	e	enum:__anon35
FF_NUM_ASMFUNC	lj_ffdef.h	208;"	d
FF__MAX	lj_ff.h	/^  FF__MAX$/;"	e	enum:__anon35
FF_next_N	lj_bc.h	227;"	d
FLAGS_EXEC	luajit.c	396;"	d	file:
FLAGS_INTERACTIVE	luajit.c	394;"	d	file:
FLAGS_NOENV	luajit.c	398;"	d	file:
FLAGS_OPTION	luajit.c	397;"	d	file:
FLAGS_VERSION	luajit.c	395;"	d	file:
FLENUM	lj_ir.h	205;"	d
FLENUM	lj_ir.h	207;"	d
FLNAME	host/buildvm.c	262;"	d	file:
FLNAME	host/buildvm.c	264;"	d	file:
FLOFS	lj_asm.c	141;"	d	file:
FLOFS	lj_asm.c	143;"	d	file:
FMTP_CHARS	lj_str.c	283;"	d	file:
FMT_FLAGS	lib_string.c	704;"	d	file:
FOLDDEF_PREFIX	host/buildvm.h	26;"	d
FOLD_SNEW_MAX_LEN	lj_opt_fold.c	1804;"	d	file:
FOLD_SNEW_TYPE8	lj_opt_fold.c	1805;"	d	file:
FORCE_REX	lj_emit_x86.h	14;"	d
FORCE_REX	lj_emit_x86.h	18;"	d
FORL_EXT	lj_bc.h	/^  FORL_IDX, FORL_STOP, FORL_STEP, FORL_EXT$/;"	e	enum:__anon26
FORL_IDX	lj_bc.h	/^  FORL_IDX, FORL_STOP, FORL_STEP, FORL_EXT$/;"	e	enum:__anon26
FORL_STEP	lj_bc.h	/^  FORL_IDX, FORL_STOP, FORL_STEP, FORL_EXT$/;"	e	enum:__anon26
FORL_STOP	lj_bc.h	/^  FORL_IDX, FORL_STOP, FORL_STEP, FORL_EXT$/;"	e	enum:__anon26
FOUR_SIZE_T_SIZES	lj_alloc.c	57;"	d	file:
FPMENUM	lj_ir.h	178;"	d
FPMENUM	lj_ir.h	180;"	d
FPMNAME	host/buildvm.c	255;"	d	file:
FPMNAME	host/buildvm.c	257;"	d	file:
FPRArg	lj_ccall.h	/^typedef LJ_ALIGN(16) union FPRArg {$/;"	u
FPRArg	lj_ccall.h	/^typedef double FPRArg;$/;"	t
FPRArg	lj_ccall.h	/^typedef union FPRArg {$/;"	u
FPRArg	lj_ccall.h	/^} FPRArg;$/;"	t	typeref:union:FPRArg
FPRArg	lj_ccall.h	/^} FPRArg;$/;"	v	typeref:union:FPRArg
FPRCBArg	lj_ctype.h	/^typedef LJ_ALIGN(8) union FPRCBArg { double d; float f[2]; } FPRCBArg;$/;"	u
FPRCBArg	lj_ctype.h	/^typedef LJ_ALIGN(8) union FPRCBArg { double d; float f[2]; } FPRCBArg;$/;"	v	typeref:union:FPRCBArg
FPRDEF	lj_target_arm.h	/^  FPRDEF(RIDENUM)		\/* Floating-point registers (FPRs). *\/$/;"	e	enum:__anon30
FPRDEF	lj_target_arm.h	15;"	d
FPRDEF	lj_target_arm.h	17;"	d
FPRDEF	lj_target_mips.h	/^  FPRDEF(RIDENUM)		\/* Floating-point registers (FPRs). *\/$/;"	e	enum:__anon38
FPRDEF	lj_target_mips.h	16;"	d
FPRDEF	lj_target_ppc.h	/^  FPRDEF(RIDENUM)		\/* Floating-point registers (FPRs). *\/$/;"	e	enum:__anon28
FPRDEF	lj_target_ppc.h	16;"	d
FPRDEF	lj_target_x86.h	/^  FPRDEF(RIDENUM)		\/* Floating-point registers (FPRs). *\/$/;"	e	enum:__anon44
FPRDEF	lj_target_x86.h	15;"	d
FPRDEF	lj_target_x86.h	21;"	d
FRAME_C	lj_frame.h	/^  FRAME_LUA, FRAME_C, FRAME_CONT, FRAME_VARG,$/;"	e	enum:__anon75
FRAME_CONT	lj_frame.h	/^  FRAME_LUA, FRAME_C, FRAME_CONT, FRAME_VARG,$/;"	e	enum:__anon75
FRAME_CP	lj_frame.h	/^  FRAME_LUAP, FRAME_CP, FRAME_PCALL, FRAME_PCALLH$/;"	e	enum:__anon75
FRAME_LUA	lj_frame.h	/^  FRAME_LUA, FRAME_C, FRAME_CONT, FRAME_VARG,$/;"	e	enum:__anon75
FRAME_LUAP	lj_frame.h	/^  FRAME_LUAP, FRAME_CP, FRAME_PCALL, FRAME_PCALLH$/;"	e	enum:__anon75
FRAME_P	lj_frame.h	20;"	d
FRAME_PCALL	lj_frame.h	/^  FRAME_LUAP, FRAME_CP, FRAME_PCALL, FRAME_PCALLH$/;"	e	enum:__anon75
FRAME_PCALLH	lj_frame.h	/^  FRAME_LUAP, FRAME_CP, FRAME_PCALL, FRAME_PCALLH$/;"	e	enum:__anon75
FRAME_TYPE	lj_frame.h	19;"	d
FRAME_TYPEP	lj_frame.h	21;"	d
FRAME_VARG	lj_frame.h	/^  FRAME_LUA, FRAME_C, FRAME_CONT, FRAME_VARG,$/;"	e	enum:__anon75
FREELIST_REF	lib_aux.c	252;"	d	file:
FSCOPE_BREAK	lj_parse.c	104;"	d	file:
FSCOPE_GOLA	lj_parse.c	105;"	d	file:
FSCOPE_LOOP	lj_parse.c	103;"	d	file:
FSCOPE_NOCLOSE	lj_parse.c	107;"	d	file:
FSCOPE_UPVAL	lj_parse.c	106;"	d	file:
FUSE_DISABLED	lj_asm.c	103;"	d	file:
FastFunc	lj_ff.h	/^} FastFunc;$/;"	t	typeref:enum:__anon35
FileReaderCtx	lj_load.c	/^typedef struct FileReaderCtx {$/;"	s	file:
FileReaderCtx	lj_load.c	/^} FileReaderCtx;$/;"	t	typeref:struct:FileReaderCtx	file:
Fill0	lj_err.c	/^  ULONG Fill0;$/;"	m	struct:UndocumentedDispatcherContext	file:
FoldFunc	lj_opt_fold.c	/^typedef IRRef (LJ_FASTCALL *FoldFunc)(jit_State *J);$/;"	t	file:
FoldState	lj_jit.h	/^typedef struct FoldState {$/;"	s
FoldState	lj_jit.h	/^} FoldState;$/;"	t	typeref:struct:FoldState
FrameLink	lj_obj.h	/^} FrameLink;$/;"	t	typeref:union:__anon100
FuncScope	lj_parse.c	/^typedef struct FuncScope {$/;"	s	file:
FuncScope	lj_parse.c	/^} FuncScope;$/;"	t	typeref:struct:FuncScope	file:
FuncState	host/minilua.c	/^typedef struct FuncState{$/;"	s	file:
FuncState	host/minilua.c	/^}FuncState;$/;"	t	typeref:struct:FuncState	file:
FuncState	lj_parse.c	/^typedef struct FuncState {$/;"	s	file:
FuncState	lj_parse.c	/^} FuncState;$/;"	t	typeref:struct:FuncState	file:
FunctionEntry	lj_err.c	/^  PRUNTIME_FUNCTION FunctionEntry;$/;"	m	struct:UndocumentedDispatcherContext	file:
G	host/minilua.c	488;"	d	file:
G	lj_obj.h	582;"	d
G2GG	lj_dispatch.h	85;"	d
G2J	lj_dispatch.h	89;"	d
GCFINALIZECOST	lj_gc.c	32;"	d	file:
GCFreeFunc	lj_gc.c	/^typedef void (LJ_FASTCALL *GCFreeFunc)(global_State *g, GCobj *o);$/;"	t	file:
GCHeader	lj_jit.h	/^  GCHeader;$/;"	m	struct:GCtrace
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCcdata
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GChead
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCproto
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCstr
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCtab
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCudata
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:GCupval
GCHeader	lj_obj.h	/^  GCHeader;$/;"	m	struct:lua_State
GCHeader	lj_obj.h	39;"	d
GCObject	host/minilua.c	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject	file:
GCObject	host/minilua.c	/^union GCObject{$/;"	u	file:
GCROOT_BASEMT	lj_obj.h	/^  GCROOT_BASEMT,	\/* Metatables for base types. *\/$/;"	e	enum:__anon109
GCROOT_BASEMT_NUM	lj_obj.h	/^  GCROOT_BASEMT_NUM = GCROOT_BASEMT + ~LJ_TNUMX,$/;"	e	enum:__anon109
GCROOT_IO_INPUT	lj_obj.h	/^  GCROOT_IO_INPUT,	\/* Userdata for default I\/O input file. *\/$/;"	e	enum:__anon109
GCROOT_IO_OUTPUT	lj_obj.h	/^  GCROOT_IO_OUTPUT,	\/* Userdata for default I\/O output file. *\/$/;"	e	enum:__anon109
GCROOT_MAX	lj_obj.h	/^  GCROOT_MAX$/;"	e	enum:__anon109
GCROOT_MMNAME	lj_obj.h	/^  GCROOT_MMNAME,	\/* Metamethod names. *\/$/;"	e	enum:__anon109
GCROOT_MMNAME_LAST	lj_obj.h	/^  GCROOT_MMNAME_LAST = GCROOT_MMNAME + MM__MAX-1,$/;"	e	enum:__anon109
GCRef	lj_obj.h	/^typedef struct GCRef {$/;"	s
GCRef	lj_obj.h	/^} GCRef;$/;"	t	typeref:struct:GCRef
GCRootID	lj_obj.h	/^} GCRootID;$/;"	t	typeref:enum:__anon109
GCSTEPSIZE	lj_gc.c	29;"	d	file:
GCSWEEPCOST	lj_gc.c	31;"	d	file:
GCSWEEPMAX	lj_gc.c	30;"	d	file:
GCSatomic	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCSfinalize	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCSpause	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCSpropagate	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCSsweep	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCSsweepstring	lj_gc.h	/^  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize$/;"	e	enum:__anon34
GCState	lj_obj.h	/^typedef struct GCState {$/;"	s
GCState	lj_obj.h	/^} GCState;$/;"	t	typeref:struct:GCState
GCTM	host/minilua.c	/^static void GCTM(lua_State*L){$/;"	f	file:
GCcdata	lj_obj.h	/^typedef struct GCcdata {$/;"	s
GCcdata	lj_obj.h	/^} GCcdata;$/;"	t	typeref:struct:GCcdata
GCcdataVar	lj_obj.h	/^typedef struct GCcdataVar {$/;"	s
GCcdataVar	lj_obj.h	/^} GCcdataVar;$/;"	t	typeref:struct:GCcdataVar
GCfunc	lj_obj.h	/^typedef union GCfunc {$/;"	u
GCfunc	lj_obj.h	/^} GCfunc;$/;"	t	typeref:union:GCfunc
GCfuncC	lj_obj.h	/^typedef struct GCfuncC {$/;"	s
GCfuncC	lj_obj.h	/^} GCfuncC;$/;"	t	typeref:struct:GCfuncC
GCfuncHeader	lj_obj.h	/^  GCfuncHeader;$/;"	m	struct:GCfuncC
GCfuncHeader	lj_obj.h	/^  GCfuncHeader;$/;"	m	struct:GCfuncL
GCfuncHeader	lj_obj.h	368;"	d
GCfuncL	lj_obj.h	/^typedef struct GCfuncL {$/;"	s
GCfuncL	lj_obj.h	/^} GCfuncL;$/;"	t	typeref:struct:GCfuncL
GChead	lj_obj.h	/^typedef struct GChead {$/;"	s
GChead	lj_obj.h	/^} GChead;$/;"	t	typeref:struct:GChead
GCheader	host/minilua.c	/^typedef struct GCheader{$/;"	s	file:
GCheader	host/minilua.c	/^}GCheader;$/;"	t	typeref:struct:GCheader	file:
GCobj	lj_obj.h	/^typedef union GCobj {$/;"	u
GCobj	lj_obj.h	/^} GCobj;$/;"	t	typeref:union:GCobj
GCproto	lj_obj.h	/^typedef struct GCproto {$/;"	s
GCproto	lj_obj.h	/^} GCproto;$/;"	t	typeref:struct:GCproto
GCstr	lj_obj.h	/^typedef struct GCstr {$/;"	s
GCstr	lj_obj.h	/^} GCstr;$/;"	t	typeref:struct:GCstr
GCtab	lj_obj.h	/^typedef struct GCtab {$/;"	s
GCtab	lj_obj.h	/^} GCtab;$/;"	t	typeref:struct:GCtab
GCthreshold	host/minilua.c	/^lu_mem GCthreshold;$/;"	m	struct:global_State	file:
GCtrace	lj_jit.h	/^typedef struct GCtrace {$/;"	s
GCtrace	lj_jit.h	/^} GCtrace;$/;"	t	typeref:struct:GCtrace
GCudata	lj_obj.h	/^typedef struct GCudata {$/;"	s
GCudata	lj_obj.h	/^} GCudata;$/;"	t	typeref:struct:GCudata
GCupval	lj_obj.h	/^typedef struct GCupval {$/;"	s
GCupval	lj_obj.h	/^} GCupval;$/;"	t	typeref:struct:GCupval
GDBJIT_NOACTION	lj_gdbjit.c	/^  GDBJIT_NOACTION = 0,$/;"	e	enum:__anon86	file:
GDBJIT_REGISTER	lj_gdbjit.c	/^  GDBJIT_REGISTER,$/;"	e	enum:__anon86	file:
GDBJIT_SECT_NULL	lj_gdbjit.c	/^  GDBJIT_SECT_NULL,$/;"	e	enum:__anon98	file:
GDBJIT_SECT__MAX	lj_gdbjit.c	/^  GDBJIT_SECT__MAX$/;"	e	enum:__anon98	file:
GDBJIT_SECT_debug_abbrev	lj_gdbjit.c	/^  GDBJIT_SECT_debug_abbrev,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_debug_info	lj_gdbjit.c	/^  GDBJIT_SECT_debug_info,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_debug_line	lj_gdbjit.c	/^  GDBJIT_SECT_debug_line,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_eh_frame	lj_gdbjit.c	/^  GDBJIT_SECT_eh_frame,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_shstrtab	lj_gdbjit.c	/^  GDBJIT_SECT_shstrtab,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_strtab	lj_gdbjit.c	/^  GDBJIT_SECT_strtab,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_symtab	lj_gdbjit.c	/^  GDBJIT_SECT_symtab,$/;"	e	enum:__anon98	file:
GDBJIT_SECT_text	lj_gdbjit.c	/^  GDBJIT_SECT_text,$/;"	e	enum:__anon98	file:
GDBJIT_SYM_FILE	lj_gdbjit.c	/^  GDBJIT_SYM_FILE,$/;"	e	enum:__anon99	file:
GDBJIT_SYM_FUNC	lj_gdbjit.c	/^  GDBJIT_SYM_FUNC,$/;"	e	enum:__anon99	file:
GDBJIT_SYM_UNDEF	lj_gdbjit.c	/^  GDBJIT_SYM_UNDEF,$/;"	e	enum:__anon99	file:
GDBJIT_SYM__MAX	lj_gdbjit.c	/^  GDBJIT_SYM__MAX$/;"	e	enum:__anon99	file:
GDBJIT_UNREGISTER	lj_gdbjit.c	/^  GDBJIT_UNREGISTER$/;"	e	enum:__anon86	file:
GDBJITctx	lj_gdbjit.c	/^typedef struct GDBJITctx {$/;"	s	file:
GDBJITctx	lj_gdbjit.c	/^} GDBJITctx;$/;"	t	typeref:struct:GDBJITctx	file:
GDBJITdesc	lj_gdbjit.c	/^typedef struct GDBJITdesc {$/;"	s	file:
GDBJITdesc	lj_gdbjit.c	/^} GDBJITdesc;$/;"	t	typeref:struct:GDBJITdesc	file:
GDBJITentry	lj_gdbjit.c	/^typedef struct GDBJITentry {$/;"	s	file:
GDBJITentry	lj_gdbjit.c	/^} GDBJITentry;$/;"	t	typeref:struct:GDBJITentry	file:
GDBJITentryobj	lj_gdbjit.c	/^typedef struct GDBJITentryobj {$/;"	s	file:
GDBJITentryobj	lj_gdbjit.c	/^} GDBJITentryobj;$/;"	t	typeref:struct:GDBJITentryobj	file:
GDBJITinitf	lj_gdbjit.c	/^typedef void (LJ_FASTCALL *GDBJITinitf)(GDBJITctx *ctx);$/;"	t	file:
GDBJITobj	lj_gdbjit.c	/^typedef struct GDBJITobj {$/;"	s	file:
GDBJITobj	lj_gdbjit.c	/^} GDBJITobj;$/;"	t	typeref:struct:GDBJITobj	file:
GETARG_A	host/minilua.c	930;"	d	file:
GETARG_B	host/minilua.c	932;"	d	file:
GETARG_Bx	host/minilua.c	936;"	d	file:
GETARG_C	host/minilua.c	934;"	d	file:
GETARG_sBx	host/minilua.c	938;"	d	file:
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS	lib_package.c	77;"	d	file:
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS	lj_clib.c	153;"	d	file:
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT	lib_package.c	78;"	d	file:
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT	lj_clib.c	154;"	d	file:
GET_OPCODE	host/minilua.c	928;"	d	file:
GG_DISP2G	lj_dispatch.h	92;"	d
GG_DISP2HOT	lj_dispatch.h	94;"	d
GG_DISP2J	lj_dispatch.h	93;"	d
GG_DISP2STATIC	lj_dispatch.h	95;"	d
GG_G2DISP	lj_dispatch.h	91;"	d
GG_LEN_DDISP	lj_dispatch.h	65;"	d
GG_LEN_DISP	lj_dispatch.h	67;"	d
GG_LEN_SDISP	lj_dispatch.h	66;"	d
GG_NUM_ASMFF	lj_dispatch.h	63;"	d
GG_OFS	lj_dispatch.h	84;"	d
GG_State	lj_dispatch.h	/^typedef struct GG_State {$/;"	s
GG_State	lj_dispatch.h	/^} GG_State;$/;"	t	typeref:struct:GG_State
GLOB_BC_CALLT_Z	host/buildvm_arch.h	/^  GLOB_BC_CALLT_Z,$/;"	e	enum:__anon19
GLOB_BC_CAT_Z	host/buildvm_arch.h	/^  GLOB_BC_CAT_Z,$/;"	e	enum:__anon19
GLOB_BC_LEN_Z	host/buildvm_arch.h	/^  GLOB_BC_LEN_Z,$/;"	e	enum:__anon19
GLOB_BC_MODVN_Z	host/buildvm_arch.h	/^  GLOB_BC_MODVN_Z,$/;"	e	enum:__anon19
GLOB_BC_RET_Z	host/buildvm_arch.h	/^  GLOB_BC_RET_Z,$/;"	e	enum:__anon19
GLOB_BC_TGETS_Z	host/buildvm_arch.h	/^  GLOB_BC_TGETS_Z,$/;"	e	enum:__anon19
GLOB_BC_TSETS_Z	host/buildvm_arch.h	/^  GLOB_BC_TSETS_Z,$/;"	e	enum:__anon19
GLOB__MAX	host/buildvm_arch.h	/^  GLOB__MAX$/;"	e	enum:__anon19
GLOB_assert_bad_for_arg_type	host/buildvm_arch.h	/^  GLOB_assert_bad_for_arg_type,$/;"	e	enum:__anon19
GLOB_cont_cat	host/buildvm_arch.h	/^  GLOB_cont_cat,$/;"	e	enum:__anon19
GLOB_cont_condf	host/buildvm_arch.h	/^  GLOB_cont_condf,$/;"	e	enum:__anon19
GLOB_cont_condt	host/buildvm_arch.h	/^  GLOB_cont_condt,$/;"	e	enum:__anon19
GLOB_cont_dispatch	host/buildvm_arch.h	/^  GLOB_cont_dispatch,$/;"	e	enum:__anon19
GLOB_cont_ffi_callback	host/buildvm_arch.h	/^  GLOB_cont_ffi_callback,$/;"	e	enum:__anon19
GLOB_cont_hook	host/buildvm_arch.h	/^  GLOB_cont_hook,$/;"	e	enum:__anon19
GLOB_cont_nop	host/buildvm_arch.h	/^  GLOB_cont_nop,$/;"	e	enum:__anon19
GLOB_cont_ra	host/buildvm_arch.h	/^  GLOB_cont_ra,$/;"	e	enum:__anon19
GLOB_ff_assert	host/buildvm_arch.h	/^  GLOB_ff_assert,$/;"	e	enum:__anon19
GLOB_ff_bit_arshift	host/buildvm_arch.h	/^  GLOB_ff_bit_arshift,$/;"	e	enum:__anon19
GLOB_ff_bit_band	host/buildvm_arch.h	/^  GLOB_ff_bit_band,$/;"	e	enum:__anon19
GLOB_ff_bit_bnot	host/buildvm_arch.h	/^  GLOB_ff_bit_bnot,$/;"	e	enum:__anon19
GLOB_ff_bit_bor	host/buildvm_arch.h	/^  GLOB_ff_bit_bor,$/;"	e	enum:__anon19
GLOB_ff_bit_bswap	host/buildvm_arch.h	/^  GLOB_ff_bit_bswap,$/;"	e	enum:__anon19
GLOB_ff_bit_bxor	host/buildvm_arch.h	/^  GLOB_ff_bit_bxor,$/;"	e	enum:__anon19
GLOB_ff_bit_lshift	host/buildvm_arch.h	/^  GLOB_ff_bit_lshift,$/;"	e	enum:__anon19
GLOB_ff_bit_rol	host/buildvm_arch.h	/^  GLOB_ff_bit_rol,$/;"	e	enum:__anon19
GLOB_ff_bit_ror	host/buildvm_arch.h	/^  GLOB_ff_bit_ror,$/;"	e	enum:__anon19
GLOB_ff_bit_rshift	host/buildvm_arch.h	/^  GLOB_ff_bit_rshift,$/;"	e	enum:__anon19
GLOB_ff_bit_tobit	host/buildvm_arch.h	/^  GLOB_ff_bit_tobit,$/;"	e	enum:__anon19
GLOB_ff_coroutine_resume	host/buildvm_arch.h	/^  GLOB_ff_coroutine_resume,$/;"	e	enum:__anon19
GLOB_ff_coroutine_wrap_aux	host/buildvm_arch.h	/^  GLOB_ff_coroutine_wrap_aux,$/;"	e	enum:__anon19
GLOB_ff_coroutine_yield	host/buildvm_arch.h	/^  GLOB_ff_coroutine_yield,$/;"	e	enum:__anon19
GLOB_ff_getmetatable	host/buildvm_arch.h	/^  GLOB_ff_getmetatable,$/;"	e	enum:__anon19
GLOB_ff_ipairs	host/buildvm_arch.h	/^  GLOB_ff_ipairs,$/;"	e	enum:__anon19
GLOB_ff_ipairs_aux	host/buildvm_arch.h	/^  GLOB_ff_ipairs_aux,$/;"	e	enum:__anon19
GLOB_ff_math_abs	host/buildvm_arch.h	/^  GLOB_ff_math_abs,$/;"	e	enum:__anon19
GLOB_ff_math_acos	host/buildvm_arch.h	/^  GLOB_ff_math_acos,$/;"	e	enum:__anon19
GLOB_ff_math_asin	host/buildvm_arch.h	/^  GLOB_ff_math_asin,$/;"	e	enum:__anon19
GLOB_ff_math_atan	host/buildvm_arch.h	/^  GLOB_ff_math_atan,$/;"	e	enum:__anon19
GLOB_ff_math_atan2	host/buildvm_arch.h	/^  GLOB_ff_math_atan2,$/;"	e	enum:__anon19
GLOB_ff_math_ceil	host/buildvm_arch.h	/^  GLOB_ff_math_ceil,$/;"	e	enum:__anon19
GLOB_ff_math_cos	host/buildvm_arch.h	/^  GLOB_ff_math_cos,$/;"	e	enum:__anon19
GLOB_ff_math_cosh	host/buildvm_arch.h	/^  GLOB_ff_math_cosh,$/;"	e	enum:__anon19
GLOB_ff_math_deg	host/buildvm_arch.h	/^  GLOB_ff_math_deg,$/;"	e	enum:__anon19
GLOB_ff_math_exp	host/buildvm_arch.h	/^  GLOB_ff_math_exp,$/;"	e	enum:__anon19
GLOB_ff_math_floor	host/buildvm_arch.h	/^  GLOB_ff_math_floor,$/;"	e	enum:__anon19
GLOB_ff_math_fmod	host/buildvm_arch.h	/^  GLOB_ff_math_fmod,$/;"	e	enum:__anon19
GLOB_ff_math_frexp	host/buildvm_arch.h	/^  GLOB_ff_math_frexp,$/;"	e	enum:__anon19
GLOB_ff_math_ldexp	host/buildvm_arch.h	/^  GLOB_ff_math_ldexp,$/;"	e	enum:__anon19
GLOB_ff_math_log	host/buildvm_arch.h	/^  GLOB_ff_math_log,$/;"	e	enum:__anon19
GLOB_ff_math_log10	host/buildvm_arch.h	/^  GLOB_ff_math_log10,$/;"	e	enum:__anon19
GLOB_ff_math_max	host/buildvm_arch.h	/^  GLOB_ff_math_max,$/;"	e	enum:__anon19
GLOB_ff_math_min	host/buildvm_arch.h	/^  GLOB_ff_math_min,$/;"	e	enum:__anon19
GLOB_ff_math_modf	host/buildvm_arch.h	/^  GLOB_ff_math_modf,$/;"	e	enum:__anon19
GLOB_ff_math_pow	host/buildvm_arch.h	/^  GLOB_ff_math_pow,$/;"	e	enum:__anon19
GLOB_ff_math_rad	host/buildvm_arch.h	/^  GLOB_ff_math_rad,$/;"	e	enum:__anon19
GLOB_ff_math_sin	host/buildvm_arch.h	/^  GLOB_ff_math_sin,$/;"	e	enum:__anon19
GLOB_ff_math_sinh	host/buildvm_arch.h	/^  GLOB_ff_math_sinh,$/;"	e	enum:__anon19
GLOB_ff_math_sqrt	host/buildvm_arch.h	/^  GLOB_ff_math_sqrt,$/;"	e	enum:__anon19
GLOB_ff_math_tan	host/buildvm_arch.h	/^  GLOB_ff_math_tan,$/;"	e	enum:__anon19
GLOB_ff_math_tanh	host/buildvm_arch.h	/^  GLOB_ff_math_tanh,$/;"	e	enum:__anon19
GLOB_ff_next	host/buildvm_arch.h	/^  GLOB_ff_next,$/;"	e	enum:__anon19
GLOB_ff_pairs	host/buildvm_arch.h	/^  GLOB_ff_pairs,$/;"	e	enum:__anon19
GLOB_ff_pcall	host/buildvm_arch.h	/^  GLOB_ff_pcall,$/;"	e	enum:__anon19
GLOB_ff_rawget	host/buildvm_arch.h	/^  GLOB_ff_rawget,$/;"	e	enum:__anon19
GLOB_ff_setmetatable	host/buildvm_arch.h	/^  GLOB_ff_setmetatable,$/;"	e	enum:__anon19
GLOB_ff_string_byte	host/buildvm_arch.h	/^  GLOB_ff_string_byte,$/;"	e	enum:__anon19
GLOB_ff_string_char	host/buildvm_arch.h	/^  GLOB_ff_string_char,$/;"	e	enum:__anon19
GLOB_ff_string_len	host/buildvm_arch.h	/^  GLOB_ff_string_len,$/;"	e	enum:__anon19
GLOB_ff_string_lower	host/buildvm_arch.h	/^  GLOB_ff_string_lower,$/;"	e	enum:__anon19
GLOB_ff_string_rep	host/buildvm_arch.h	/^  GLOB_ff_string_rep,$/;"	e	enum:__anon19
GLOB_ff_string_reverse	host/buildvm_arch.h	/^  GLOB_ff_string_reverse,$/;"	e	enum:__anon19
GLOB_ff_string_sub	host/buildvm_arch.h	/^  GLOB_ff_string_sub,$/;"	e	enum:__anon19
GLOB_ff_string_upper	host/buildvm_arch.h	/^  GLOB_ff_string_upper,$/;"	e	enum:__anon19
GLOB_ff_table_getn	host/buildvm_arch.h	/^  GLOB_ff_table_getn,$/;"	e	enum:__anon19
GLOB_ff_tonumber	host/buildvm_arch.h	/^  GLOB_ff_tonumber,$/;"	e	enum:__anon19
GLOB_ff_tostring	host/buildvm_arch.h	/^  GLOB_ff_tostring,$/;"	e	enum:__anon19
GLOB_ff_type	host/buildvm_arch.h	/^  GLOB_ff_type,$/;"	e	enum:__anon19
GLOB_ff_xpcall	host/buildvm_arch.h	/^  GLOB_ff_xpcall,$/;"	e	enum:__anon19
GLOB_fff_emptystr	host/buildvm_arch.h	/^  GLOB_fff_emptystr,$/;"	e	enum:__anon19
GLOB_fff_fallback	host/buildvm_arch.h	/^  GLOB_fff_fallback,$/;"	e	enum:__anon19
GLOB_fff_fallback_1	host/buildvm_arch.h	/^  GLOB_fff_fallback_1,$/;"	e	enum:__anon19
GLOB_fff_fallback_2	host/buildvm_arch.h	/^  GLOB_fff_fallback_2,$/;"	e	enum:__anon19
GLOB_fff_fallback_bit_op	host/buildvm_arch.h	/^  GLOB_fff_fallback_bit_op,$/;"	e	enum:__anon19
GLOB_fff_gcstep	host/buildvm_arch.h	/^  GLOB_fff_gcstep,$/;"	e	enum:__anon19
GLOB_fff_newstr	host/buildvm_arch.h	/^  GLOB_fff_newstr,$/;"	e	enum:__anon19
GLOB_fff_res	host/buildvm_arch.h	/^  GLOB_fff_res,$/;"	e	enum:__anon19
GLOB_fff_res0	host/buildvm_arch.h	/^  GLOB_fff_res0,$/;"	e	enum:__anon19
GLOB_fff_res1	host/buildvm_arch.h	/^  GLOB_fff_res1,$/;"	e	enum:__anon19
GLOB_fff_res2	host/buildvm_arch.h	/^  GLOB_fff_res2,$/;"	e	enum:__anon19
GLOB_fff_res_	host/buildvm_arch.h	/^  GLOB_fff_res_,$/;"	e	enum:__anon19
GLOB_fff_resbit	host/buildvm_arch.h	/^  GLOB_fff_resbit,$/;"	e	enum:__anon19
GLOB_fff_resi	host/buildvm_arch.h	/^  GLOB_fff_resi,$/;"	e	enum:__anon19
GLOB_fff_resn	host/buildvm_arch.h	/^  GLOB_fff_resn,$/;"	e	enum:__anon19
GLOB_fff_resxmm0	host/buildvm_arch.h	/^  GLOB_fff_resxmm0,$/;"	e	enum:__anon19
GLOB_vm_call	host/buildvm_arch.h	/^  GLOB_vm_call,$/;"	e	enum:__anon19
GLOB_vm_call_dispatch	host/buildvm_arch.h	/^  GLOB_vm_call_dispatch,$/;"	e	enum:__anon19
GLOB_vm_call_dispatch_f	host/buildvm_arch.h	/^  GLOB_vm_call_dispatch_f,$/;"	e	enum:__anon19
GLOB_vm_call_tail	host/buildvm_arch.h	/^  GLOB_vm_call_tail,$/;"	e	enum:__anon19
GLOB_vm_callhook	host/buildvm_arch.h	/^  GLOB_vm_callhook,$/;"	e	enum:__anon19
GLOB_vm_ceil	host/buildvm_arch.h	/^  GLOB_vm_ceil,$/;"	e	enum:__anon19
GLOB_vm_ceil_sse	host/buildvm_arch.h	/^  GLOB_vm_ceil_sse,$/;"	e	enum:__anon19
GLOB_vm_cpcall	host/buildvm_arch.h	/^  GLOB_vm_cpcall,$/;"	e	enum:__anon19
GLOB_vm_cpuid	host/buildvm_arch.h	/^  GLOB_vm_cpuid,$/;"	e	enum:__anon19
GLOB_vm_exit_handler	host/buildvm_arch.h	/^  GLOB_vm_exit_handler,$/;"	e	enum:__anon19
GLOB_vm_exit_interp	host/buildvm_arch.h	/^  GLOB_vm_exit_interp,$/;"	e	enum:__anon19
GLOB_vm_exp2_x87	host/buildvm_arch.h	/^  GLOB_vm_exp2_x87,$/;"	e	enum:__anon19
GLOB_vm_exp2raw	host/buildvm_arch.h	/^  GLOB_vm_exp2raw,$/;"	e	enum:__anon19
GLOB_vm_exp_x87	host/buildvm_arch.h	/^  GLOB_vm_exp_x87,$/;"	e	enum:__anon19
GLOB_vm_ffi_call	host/buildvm_arch.h	/^  GLOB_vm_ffi_call,$/;"	e	enum:__anon19
GLOB_vm_ffi_callback	host/buildvm_arch.h	/^  GLOB_vm_ffi_callback,$/;"	e	enum:__anon19
GLOB_vm_floor	host/buildvm_arch.h	/^  GLOB_vm_floor,$/;"	e	enum:__anon19
GLOB_vm_floor_sse	host/buildvm_arch.h	/^  GLOB_vm_floor_sse,$/;"	e	enum:__anon19
GLOB_vm_foldarith	host/buildvm_arch.h	/^  GLOB_vm_foldarith,$/;"	e	enum:__anon19
GLOB_vm_foldfpm	host/buildvm_arch.h	/^  GLOB_vm_foldfpm,$/;"	e	enum:__anon19
GLOB_vm_growstack_c	host/buildvm_arch.h	/^  GLOB_vm_growstack_c,$/;"	e	enum:__anon19
GLOB_vm_growstack_f	host/buildvm_arch.h	/^  GLOB_vm_growstack_f,$/;"	e	enum:__anon19
GLOB_vm_growstack_v	host/buildvm_arch.h	/^  GLOB_vm_growstack_v,$/;"	e	enum:__anon19
GLOB_vm_hotcall	host/buildvm_arch.h	/^  GLOB_vm_hotcall,$/;"	e	enum:__anon19
GLOB_vm_hotloop	host/buildvm_arch.h	/^  GLOB_vm_hotloop,$/;"	e	enum:__anon19
GLOB_vm_inshook	host/buildvm_arch.h	/^  GLOB_vm_inshook,$/;"	e	enum:__anon19
GLOB_vm_leave_cp	host/buildvm_arch.h	/^  GLOB_vm_leave_cp,$/;"	e	enum:__anon19
GLOB_vm_leave_unw	host/buildvm_arch.h	/^  GLOB_vm_leave_unw,$/;"	e	enum:__anon19
GLOB_vm_log2	host/buildvm_arch.h	/^  GLOB_vm_log2,$/;"	e	enum:__anon19
GLOB_vm_mod	host/buildvm_arch.h	/^  GLOB_vm_mod,$/;"	e	enum:__anon19
GLOB_vm_pcall	host/buildvm_arch.h	/^  GLOB_vm_pcall,$/;"	e	enum:__anon19
GLOB_vm_pow	host/buildvm_arch.h	/^  GLOB_vm_pow,$/;"	e	enum:__anon19
GLOB_vm_pow_sse	host/buildvm_arch.h	/^  GLOB_vm_pow_sse,$/;"	e	enum:__anon19
GLOB_vm_powi_sse	host/buildvm_arch.h	/^  GLOB_vm_powi_sse,$/;"	e	enum:__anon19
GLOB_vm_record	host/buildvm_arch.h	/^  GLOB_vm_record,$/;"	e	enum:__anon19
GLOB_vm_resume	host/buildvm_arch.h	/^  GLOB_vm_resume,$/;"	e	enum:__anon19
GLOB_vm_rethook	host/buildvm_arch.h	/^  GLOB_vm_rethook,$/;"	e	enum:__anon19
GLOB_vm_return	host/buildvm_arch.h	/^  GLOB_vm_return,$/;"	e	enum:__anon19
GLOB_vm_returnc	host/buildvm_arch.h	/^  GLOB_vm_returnc,$/;"	e	enum:__anon19
GLOB_vm_returnp	host/buildvm_arch.h	/^  GLOB_vm_returnp,$/;"	e	enum:__anon19
GLOB_vm_trunc	host/buildvm_arch.h	/^  GLOB_vm_trunc,$/;"	e	enum:__anon19
GLOB_vm_trunc_sse	host/buildvm_arch.h	/^  GLOB_vm_trunc_sse,$/;"	e	enum:__anon19
GLOB_vm_unwind_c	host/buildvm_arch.h	/^  GLOB_vm_unwind_c,$/;"	e	enum:__anon19
GLOB_vm_unwind_c_eh	host/buildvm_arch.h	/^  GLOB_vm_unwind_c_eh,$/;"	e	enum:__anon19
GLOB_vm_unwind_ff	host/buildvm_arch.h	/^  GLOB_vm_unwind_ff,$/;"	e	enum:__anon19
GLOB_vm_unwind_ff_eh	host/buildvm_arch.h	/^  GLOB_vm_unwind_ff_eh,$/;"	e	enum:__anon19
GLOB_vm_unwind_rethrow	host/buildvm_arch.h	/^  GLOB_vm_unwind_rethrow,$/;"	e	enum:__anon19
GLOB_vm_unwind_yield	host/buildvm_arch.h	/^  GLOB_vm_unwind_yield,$/;"	e	enum:__anon19
GLOB_vmeta_arith_nv	host/buildvm_arch.h	/^  GLOB_vmeta_arith_nv,$/;"	e	enum:__anon19
GLOB_vmeta_arith_nvo	host/buildvm_arch.h	/^  GLOB_vmeta_arith_nvo,$/;"	e	enum:__anon19
GLOB_vmeta_arith_vn	host/buildvm_arch.h	/^  GLOB_vmeta_arith_vn,$/;"	e	enum:__anon19
GLOB_vmeta_arith_vno	host/buildvm_arch.h	/^  GLOB_vmeta_arith_vno,$/;"	e	enum:__anon19
GLOB_vmeta_arith_vv	host/buildvm_arch.h	/^  GLOB_vmeta_arith_vv,$/;"	e	enum:__anon19
GLOB_vmeta_arith_vvo	host/buildvm_arch.h	/^  GLOB_vmeta_arith_vvo,$/;"	e	enum:__anon19
GLOB_vmeta_binop	host/buildvm_arch.h	/^  GLOB_vmeta_binop,$/;"	e	enum:__anon19
GLOB_vmeta_call	host/buildvm_arch.h	/^  GLOB_vmeta_call,$/;"	e	enum:__anon19
GLOB_vmeta_call_ra	host/buildvm_arch.h	/^  GLOB_vmeta_call_ra,$/;"	e	enum:__anon19
GLOB_vmeta_comp	host/buildvm_arch.h	/^  GLOB_vmeta_comp,$/;"	e	enum:__anon19
GLOB_vmeta_equal	host/buildvm_arch.h	/^  GLOB_vmeta_equal,$/;"	e	enum:__anon19
GLOB_vmeta_equal_cd	host/buildvm_arch.h	/^  GLOB_vmeta_equal_cd,$/;"	e	enum:__anon19
GLOB_vmeta_for	host/buildvm_arch.h	/^  GLOB_vmeta_for,$/;"	e	enum:__anon19
GLOB_vmeta_len	host/buildvm_arch.h	/^  GLOB_vmeta_len,$/;"	e	enum:__anon19
GLOB_vmeta_tgetb	host/buildvm_arch.h	/^  GLOB_vmeta_tgetb,$/;"	e	enum:__anon19
GLOB_vmeta_tgets	host/buildvm_arch.h	/^  GLOB_vmeta_tgets,$/;"	e	enum:__anon19
GLOB_vmeta_tgetv	host/buildvm_arch.h	/^  GLOB_vmeta_tgetv,$/;"	e	enum:__anon19
GLOB_vmeta_tsetb	host/buildvm_arch.h	/^  GLOB_vmeta_tsetb,$/;"	e	enum:__anon19
GLOB_vmeta_tsets	host/buildvm_arch.h	/^  GLOB_vmeta_tsets,$/;"	e	enum:__anon19
GLOB_vmeta_tsetv	host/buildvm_arch.h	/^  GLOB_vmeta_tsetv,$/;"	e	enum:__anon19
GLOB_vmeta_unm	host/buildvm_arch.h	/^  GLOB_vmeta_unm,$/;"	e	enum:__anon19
GOTDEF	lj_dispatch.h	/^GOTDEF(GOTENUM)$/;"	e	enum:__anon24
GOTDEF	lj_dispatch.h	28;"	d
GOTENUM	lj_dispatch.h	43;"	d
GOTENUM	lj_dispatch.h	45;"	d
GOTFUNC	lj_dispatch.c	41;"	d	file:
GOTFUNC	lj_dispatch.c	45;"	d	file:
GPRArg	lj_ccall.h	/^typedef intptr_t GPRArg;$/;"	t
GPRDEF	lj_target_arm.h	/^  GPRDEF(RIDENUM)		\/* General-purpose registers (GPRs). *\/$/;"	e	enum:__anon30
GPRDEF	lj_target_arm.h	11;"	d
GPRDEF	lj_target_mips.h	/^  GPRDEF(RIDENUM)		\/* General-purpose registers (GPRs). *\/$/;"	e	enum:__anon38
GPRDEF	lj_target_mips.h	11;"	d
GPRDEF	lj_target_ppc.h	/^  GPRDEF(RIDENUM)		\/* General-purpose registers (GPRs). *\/$/;"	e	enum:__anon28
GPRDEF	lj_target_ppc.h	11;"	d
GPRDEF	lj_target_x86.h	/^  GPRDEF(RIDENUM)		\/* General-purpose registers (GPRs). *\/$/;"	e	enum:__anon44
GPRDEF	lj_target_x86.h	12;"	d
GPRDEF	lj_target_x86.h	19;"	d
HASH_BIAS	lj_tab.h	12;"	d
HASH_ROT1	lj_tab.h	13;"	d
HASH_ROT2	lj_tab.h	14;"	d
HASH_ROT3	lj_tab.h	15;"	d
HOOK_ACTIVE	lj_obj.h	552;"	d
HOOK_ACTIVE_SHIFT	lj_obj.h	553;"	d
HOOK_EVENTMASK	lj_obj.h	551;"	d
HOOK_GC	lj_obj.h	555;"	d
HOOK_VMEVENT	lj_obj.h	554;"	d
HOST_ACFLAGS	Makefile	/^HOST_ACFLAGS= $(CCOPTIONS) $(HOST_XCFLAGS) $(TARGET_ARCH) $(HOST_CFLAGS)$/;"	m
HOST_ALDFLAGS	Makefile	/^HOST_ALDFLAGS= $(LDOPTIONS) $(HOST_XLDFLAGS) $(HOST_LDFLAGS)$/;"	m
HOST_ALIBS	Makefile	/^HOST_ALIBS= $(HOST_XLIBS) $(LIBS) $(HOST_LIBS)$/;"	m
HOST_CC	Makefile	/^HOST_CC= $(CC)$/;"	m
HOST_LUA	Makefile	/^  HOST_LUA= $(MINILUA_X)$/;"	m
HOST_LUA	Makefile	/^HOST_LUA=$/;"	m
HOST_MSYS	Makefile	/^    HOST_MSYS= cygwin$/;"	m
HOST_MSYS	Makefile	/^    HOST_MSYS= mingw$/;"	m
HOST_O	Makefile	/^HOST_O= $(MINILUA_O) $(BUILDVM_O)$/;"	m
HOST_RM	Makefile	/^  HOST_RM= del$/;"	m
HOST_RM	Makefile	/^HOST_RM= rm -f$/;"	m
HOST_SYS	Makefile	/^    HOST_SYS= Windows$/;"	m
HOST_SYS	Makefile	/^  HOST_SYS:= $(shell uname -s)$/;"	m
HOST_SYS	Makefile	/^  HOST_SYS= Windows$/;"	m
HOST_T	Makefile	/^HOST_T= $(MINILUA_T) $(BUILDVM_T)$/;"	m
HOST_XCFLAGS	Makefile	/^HOST_XCFLAGS= -I.$/;"	m
HOST_XLDFLAGS	Makefile	/^HOST_XLDFLAGS=$/;"	m
HOST_XLIBS	Makefile	/^HOST_XLIBS=$/;"	m
HOTCOUNT_CALL	lj_dispatch.h	60;"	d
HOTCOUNT_LOOP	lj_dispatch.h	59;"	d
HOTCOUNT_PCMASK	lj_dispatch.h	56;"	d
HOTCOUNT_SIZE	lj_dispatch.h	55;"	d
H_	lib_ffi.c	699;"	d	file:
H_	lib_ffi.c	735;"	d	file:
H_	lj_cparse.c	1833;"	d	file:
H_	lj_cparse.c	937;"	d	file:
HandlerData	lj_err.c	/^  PVOID HandlerData;$/;"	m	struct:UndocumentedDispatcherContext	file:
HistoryTable	lj_err.c	/^  PUNWIND_HISTORY_TABLE HistoryTable;$/;"	m	struct:UndocumentedDispatcherContext	file:
HotCount	lj_dispatch.h	/^typedef uint16_t HotCount;$/;"	t
HotPenalty	lj_jit.h	/^typedef struct HotPenalty {$/;"	s
HotPenalty	lj_jit.h	/^} HotPenalty;$/;"	t	typeref:struct:HotPenalty
INDEXK	host/minilua.c	943;"	d	file:
INIT_MMAP	lj_alloc.c	/^static void INIT_MMAP(void)$/;"	f	file:
INIT_MMAP	lj_alloc.c	122;"	d	file:
INIT_MMAP	lj_alloc.c	257;"	d	file:
INT64FOLD	lj_iropt.h	109;"	d
INTFOLD	lj_iropt.h	108;"	d
INUSE_BITS	lj_alloc.c	348;"	d	file:
IOFILE_FLAG_CLOSE	lib_io.c	37;"	d	file:
IOFILE_TYPE_FILE	lib_io.c	32;"	d	file:
IOFILE_TYPE_MASK	lib_io.c	35;"	d	file:
IOFILE_TYPE_PIPE	lib_io.c	33;"	d	file:
IOFILE_TYPE_STDF	lib_io.c	34;"	d	file:
IOFileUD	lib_io.c	/^typedef struct IOFileUD {$/;"	s	file:
IOFileUD	lib_io.c	/^} IOFileUD;$/;"	t	typeref:struct:IOFileUD	file:
IOSTDF_IOF	lib_io.c	40;"	d	file:
IOSTDF_UD	lib_io.c	39;"	d	file:
IR	lj_asm.c	1884;"	d	file:
IR	lj_asm.c	93;"	d	file:
IR	lj_crecord.c	1649;"	d	file:
IR	lj_crecord.c	36;"	d	file:
IR	lj_ffrecord.c	32;"	d	file:
IR	lj_ffrecord.c	886;"	d	file:
IR	lj_ir.c	35;"	d	file:
IR	lj_ir.c	497;"	d	file:
IR	lj_opt_dce.c	18;"	d	file:
IR	lj_opt_dce.c	75;"	d	file:
IR	lj_opt_fold.c	134;"	d	file:
IR	lj_opt_fold.c	2273;"	d	file:
IR	lj_opt_loop.c	433;"	d	file:
IR	lj_opt_loop.c	93;"	d	file:
IR	lj_opt_mem.c	22;"	d	file:
IR	lj_opt_mem.c	902;"	d	file:
IR	lj_opt_narrow.c	643;"	d	file:
IR	lj_opt_narrow.c	93;"	d	file:
IR	lj_opt_sink.c	19;"	d	file:
IR	lj_opt_sink.c	243;"	d	file:
IR	lj_opt_split.c	721;"	d	file:
IR	lj_opt_split.c	95;"	d	file:
IR	lj_record.c	2243;"	d	file:
IR	lj_record.c	35;"	d	file:
IR	lj_snap.c	30;"	d	file:
IR	lj_snap.c	856;"	d	file:
IRCALLCI	lj_ir.c	59;"	d	file:
IRCALLCI	lj_ir.c	63;"	d	file:
IRCALLCOND_ANY	lj_ircall.h	49;"	d
IRCALLCOND_FFI	lj_ircall.h	78;"	d
IRCALLCOND_FFI	lj_ircall.h	85;"	d
IRCALLCOND_FFI32	lj_ircall.h	80;"	d
IRCALLCOND_FFI32	lj_ircall.h	82;"	d
IRCALLCOND_FFI32	lj_ircall.h	86;"	d
IRCALLCOND_FP64_FFI	lj_ircall.h	72;"	d
IRCALLCOND_FP64_FFI	lj_ircall.h	74;"	d
IRCALLCOND_FPMATH	lj_ircall.h	52;"	d
IRCALLCOND_FPMATH	lj_ircall.h	54;"	d
IRCALLCOND_SOFTFP	lj_ircall.h	58;"	d
IRCALLCOND_SOFTFP	lj_ircall.h	65;"	d
IRCALLCOND_SOFTFP_FFI	lj_ircall.h	60;"	d
IRCALLCOND_SOFTFP_FFI	lj_ircall.h	62;"	d
IRCALLCOND_SOFTFP_FFI	lj_ircall.h	66;"	d
IRCALLDEF	lj_ircall.h	/^IRCALLDEF(IRCALLENUM)$/;"	e	enum:__anon82
IRCALLDEF	lj_ircall.h	102;"	d
IRCALLENUM	lj_ircall.h	180;"	d
IRCALLENUM	lj_ircall.h	182;"	d
IRCALLNAME	host/buildvm.c	269;"	d	file:
IRCALLNAME	host/buildvm.c	271;"	d	file:
IRCALL__MAX	lj_ircall.h	/^  IRCALL__MAX$/;"	e	enum:__anon82
IRCONV_ANY	lj_ir.h	237;"	d
IRCONV_CHECK	lj_ir.h	239;"	d
IRCONV_CONVMASK	lj_ir.h	233;"	d
IRCONV_CSH	lj_ir.h	234;"	d
IRCONV_DSH	lj_ir.h	227;"	d
IRCONV_DSTMASK	lj_ir.h	226;"	d
IRCONV_INDEX	lj_ir.h	238;"	d
IRCONV_INT_NUM	lj_ir.h	229;"	d
IRCONV_MODEMASK	lj_ir.h	232;"	d
IRCONV_NUM_INT	lj_ir.h	228;"	d
IRCONV_SEXT	lj_ir.h	231;"	d
IRCONV_SRCMASK	lj_ir.h	225;"	d
IRCONV_TOBIT	lj_ir.h	236;"	d
IRCONV_TRUNC	lj_ir.h	230;"	d
IRCallID	lj_ircall.h	/^} IRCallID;$/;"	t	typeref:enum:__anon82
IRDEF	lj_ir.h	/^IRDEF(IRENUM)$/;"	e	enum:__anon54
IRDEF	lj_ir.h	14;"	d
IRDELTA_L2S	lj_ir.h	161;"	d
IRENUM	lj_ir.h	145;"	d
IRENUM	lj_ir.h	147;"	d
IRFLDEF	lj_ir.h	/^IRFLDEF(FLENUM)$/;"	e	enum:__anon56
IRFLDEF	lj_ir.h	185;"	d
IRFL__MAX	lj_ir.h	/^  IRFL__MAX$/;"	e	enum:__anon56
IRFPMDEF	lj_ir.h	/^IRFPMDEF(FPMENUM)$/;"	e	enum:__anon55
IRFPMDEF	lj_ir.h	171;"	d
IRFPM__MAX	lj_ir.h	/^  IRFPM__MAX$/;"	e	enum:__anon55
IRFPMathOp	lj_ir.h	/^} IRFPMathOp;$/;"	t	typeref:enum:__anon55
IRFieldID	lj_ir.h	/^} IRFieldID;$/;"	t	typeref:enum:__anon56
IRIns	lj_ir.h	/^typedef union IRIns {$/;"	u
IRIns	lj_ir.h	/^} IRIns;$/;"	t	typeref:union:IRIns
IRMODE	lj_ir.h	273;"	d
IRM_A	lj_ir.h	257;"	d
IRM_AW	lj_ir.h	265;"	d
IRM_C	lj_ir.h	253;"	d
IRM_CW	lj_ir.h	264;"	d
IRM_L	lj_ir.h	258;"	d
IRM_LW	lj_ir.h	266;"	d
IRM_N	lj_ir.h	255;"	d
IRM_NW	lj_ir.h	263;"	d
IRM_R	lj_ir.h	256;"	d
IRM_S	lj_ir.h	259;"	d
IRM_W	lj_ir.h	261;"	d
IRM___	lj_ir.h	250;"	d
IRMcst	lj_ir.h	/^  IRMcst,		\/* Constant literal: i, gcr or ptr. *\/$/;"	e	enum:__anon57
IRMlit	lj_ir.h	/^  IRMlit,		\/* 16 bit unsigned literal. *\/$/;"	e	enum:__anon57
IRMnone	lj_ir.h	/^  IRMnone		\/* Unused operand. *\/$/;"	e	enum:__anon57
IRMode	lj_ir.h	/^} IRMode;$/;"	t	typeref:enum:__anon57
IRMref	lj_ir.h	/^  IRMref,		\/* IR reference. *\/$/;"	e	enum:__anon57
IRNAME	host/buildvm.c	241;"	d	file:
IRNAME	host/buildvm.c	243;"	d	file:
IROp	lj_ir.h	/^} IROp;$/;"	t	typeref:enum:__anon54
IROp1	lj_ir.h	/^typedef uint8_t IROp1;$/;"	t
IROpT	lj_ir.h	/^typedef uint16_t IROpT;$/;"	t
IRREF2	lj_ir.h	437;"	d
IRRef	lj_ir.h	/^typedef uint32_t IRRef;		\/* Used to pass around references. *\/$/;"	t
IRRef1	lj_ir.h	/^typedef uint16_t IRRef1;	\/* One stored reference. *\/$/;"	t
IRRef2	lj_ir.h	/^typedef uint32_t IRRef2;	\/* Two stored references. *\/$/;"	t
IRSLOAD_CONVERT	lj_ir.h	215;"	d
IRSLOAD_FRAME	lj_ir.h	213;"	d
IRSLOAD_INHERIT	lj_ir.h	217;"	d
IRSLOAD_PARENT	lj_ir.h	212;"	d
IRSLOAD_READONLY	lj_ir.h	216;"	d
IRSLOAD_TYPECHECK	lj_ir.h	214;"	d
IRT	lj_ir.h	321;"	d
IRTDEF	lj_ir.h	/^IRTDEF(IRTENUM)$/;"	e	enum:__anon58
IRTDEF	lj_ir.h	286;"	d
IRTENUM	lj_ir.h	296;"	d
IRTENUM	lj_ir.h	298;"	d
IRTG	lj_ir.h	324;"	d
IRTGI	lj_ir.h	325;"	d
IRTI	lj_ir.h	322;"	d
IRTN	lj_ir.h	323;"	d
IRTNAME	host/buildvm.c	248;"	d	file:
IRTNAME	host/buildvm.c	250;"	d	file:
IRTSIZE	lj_ir.c	51;"	d	file:
IRTSIZE	lj_ir.c	53;"	d	file:
IRT_GUARD	lj_ir.h	/^  IRT_GUARD = 0x80,	\/* Instruction is a guard. *\/$/;"	e	enum:__anon58
IRT_INTP	lj_ir.h	/^  IRT_INTP = LJ_64 ? IRT_I64 : IRT_INT,$/;"	e	enum:__anon58
IRT_IS64	lj_ir.h	357;"	d
IRT_IS64	lj_ir.h	360;"	d
IRT_ISPHI	lj_ir.h	/^  IRT_ISPHI = 0x40,	\/* Instruction is left or right PHI operand. *\/$/;"	e	enum:__anon58
IRT_MARK	lj_ir.h	/^  IRT_MARK = 0x20,	\/* Marker for misc. purposes. *\/$/;"	e	enum:__anon58
IRT_PTR	lj_ir.h	/^  IRT_PTR = LJ_64 ? IRT_P64 : IRT_P32,$/;"	e	enum:__anon58
IRT_T	lj_ir.h	/^  IRT_T = 0xff$/;"	e	enum:__anon58
IRT_TYPE	lj_ir.h	/^  IRT_TYPE = 0x1f,$/;"	e	enum:__anon58
IRT_UINTP	lj_ir.h	/^  IRT_UINTP = LJ_64 ? IRT_U64 : IRT_U32,$/;"	e	enum:__anon58
IRT__MAX	lj_ir.h	/^  IRT__MAX,$/;"	e	enum:__anon58
IRType	lj_ir.h	/^} IRType;$/;"	t	typeref:enum:__anon58
IRType1	lj_ir.h	/^typedef struct IRType1 { uint8_t irt; } IRType1;$/;"	s
IRType1	lj_ir.h	/^typedef struct IRType1 { uint8_t irt; } IRType1;$/;"	t	typeref:struct:IRType1
IRXLOAD_READONLY	lj_ir.h	220;"	d
IRXLOAD_UNALIGNED	lj_ir.h	222;"	d
IRXLOAD_VOLATILE	lj_ir.h	221;"	d
IR__MAX	lj_ir.h	/^  IR__MAX$/;"	e	enum:__anon54
ISK	host/minilua.c	942;"	d	file:
IS_DIRECT_BIT	lj_alloc.c	73;"	d	file:
ImageBase	lj_err.c	/^  ULONG64 ImageBase;$/;"	m	struct:UndocumentedDispatcherContext	file:
Instruction	host/minilua.c	/^typedef lu_int32 Instruction;$/;"	t	file:
IntPoint	host/minilua.c	209;"	d	file:
J	lj_asm.c	/^  jit_State *J;		\/* JIT compiler state. *\/$/;"	m	struct:ASMState	file:
J	lj_dispatch.h	/^  jit_State J;				\/* JIT state. *\/$/;"	m	struct:GG_State
J	lj_opt_narrow.c	/^  jit_State *J;		\/* JIT compiler state. *\/$/;"	m	struct:NarrowConv	file:
J	lj_trace.c	/^  jit_State *J;$/;"	m	struct:ExitDataCP	file:
J2G	lj_dispatch.h	88;"	d
J2GG	lj_dispatch.h	86;"	d
JITGOTDEF	lj_dispatch.h	18;"	d
JITGOTDEF	lj_dispatch.h	20;"	d
JIT_F_ARMV6	lj_jit.h	36;"	d
JIT_F_ARMV6T2	lj_jit.h	37;"	d
JIT_F_ARMV6T2_	lj_jit.h	31;"	d
JIT_F_ARMV6_	lj_jit.h	30;"	d
JIT_F_ARMV7	lj_jit.h	32;"	d
JIT_F_CMOV	lib_jit.c	541;"	d	file:
JIT_F_CMOV	lj_jit.h	17;"	d
JIT_F_CPUSTRING	lj_jit.h	28;"	d
JIT_F_CPUSTRING	lj_jit.h	42;"	d
JIT_F_CPUSTRING	lj_jit.h	49;"	d
JIT_F_CPUSTRING	lj_jit.h	55;"	d
JIT_F_CPUSTRING	lj_jit.h	58;"	d
JIT_F_CPU_FIRST	lj_jit.h	27;"	d
JIT_F_CPU_FIRST	lj_jit.h	41;"	d
JIT_F_CPU_FIRST	lj_jit.h	48;"	d
JIT_F_CPU_FIRST	lj_jit.h	54;"	d
JIT_F_CPU_FIRST	lj_jit.h	57;"	d
JIT_F_LEA_AGU	lj_jit.h	24;"	d
JIT_F_MIPS32R2	lj_jit.h	51;"	d
JIT_F_ON	lj_jit.h	13;"	d
JIT_F_OPTSTRING	lj_jit.h	77;"	d
JIT_F_OPT_0	lj_jit.h	81;"	d
JIT_F_OPT_1	lj_jit.h	82;"	d
JIT_F_OPT_2	lj_jit.h	83;"	d
JIT_F_OPT_3	lj_jit.h	84;"	d
JIT_F_OPT_ABC	lj_jit.h	71;"	d
JIT_F_OPT_CSE	lj_jit.h	65;"	d
JIT_F_OPT_DCE	lj_jit.h	66;"	d
JIT_F_OPT_DEFAULT	lj_jit.h	86;"	d
JIT_F_OPT_DSE	lj_jit.h	68;"	d
JIT_F_OPT_FIRST	lj_jit.h	76;"	d
JIT_F_OPT_FOLD	lj_jit.h	64;"	d
JIT_F_OPT_FUSE	lj_jit.h	73;"	d
JIT_F_OPT_FWD	lj_jit.h	67;"	d
JIT_F_OPT_LOOP	lj_jit.h	70;"	d
JIT_F_OPT_MASK	lj_jit.h	62;"	d
JIT_F_OPT_NARROW	lj_jit.h	69;"	d
JIT_F_OPT_SINK	lj_jit.h	72;"	d
JIT_F_P4	lj_jit.h	21;"	d
JIT_F_PREFER_IMUL	lj_jit.h	22;"	d
JIT_F_ROUND	lj_jit.h	45;"	d
JIT_F_SPLIT_XMM	lj_jit.h	23;"	d
JIT_F_SQRT	lj_jit.h	44;"	d
JIT_F_SSE2	lib_jit.c	542;"	d	file:
JIT_F_SSE2	lj_jit.h	18;"	d
JIT_F_SSE3	lj_jit.h	19;"	d
JIT_F_SSE4_1	lj_jit.h	20;"	d
JIT_F_VFP	lj_jit.h	38;"	d
JIT_F_VFPV2	lj_jit.h	33;"	d
JIT_F_VFPV3	lj_jit.h	34;"	d
JIT_PARAMDEF	lj_jit.h	/^JIT_PARAMDEF(JIT_PARAMENUM)$/;"	e	enum:__anon77
JIT_PARAMDEF	lj_jit.h	97;"	d
JIT_PARAMENUM	lj_jit.h	120;"	d
JIT_PARAMENUM	lj_jit.h	122;"	d
JIT_PARAMINIT	lib_jit.c	521;"	d	file:
JIT_PARAMINIT	lib_jit.c	523;"	d	file:
JIT_PARAMSTR	lj_jit.h	126;"	d
JIT_P_STRING	lj_jit.h	127;"	d
JIT_P__MAX	lj_jit.h	/^  JIT_P__MAX$/;"	e	enum:__anon77
JIT_P_sizemcode_DEFAULT	lj_jit.h	90;"	d
JIT_P_sizemcode_DEFAULT	lj_jit.h	93;"	d
K64Array	lj_ir.c	/^typedef struct K64Array {$/;"	s	file:
K64Array	lj_ir.c	/^} K64Array;$/;"	t	typeref:struct:K64Array	file:
KBx	host/minilua.c	4939;"	d	file:
KEY_HOOK	lib_debug.c	/^static const char KEY_HOOK = 'h';$/;"	v	file:
KINTFOLD	lj_iropt.h	/^  KINTFOLD,		\/* Return ref for int constant in fins->i. *\/$/;"	e	enum:__anon23
L	host/minilua.c	/^lua_State*L;$/;"	m	struct:MatchState	file:
L	host/minilua.c	/^lua_State*L;$/;"	m	struct:Zio	file:
L	host/minilua.c	/^lua_State*L;$/;"	m	struct:luaL_Buffer	file:
L	host/minilua.c	/^struct lua_State*L;$/;"	m	struct:FuncState	typeref:struct:FuncState::lua_State	file:
L	host/minilua.c	/^struct lua_State*L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State	file:
L	lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	lib_string.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	lj_bcwrite.c	/^  lua_State *L;			\/* Lua state. *\/$/;"	m	struct:BCWriteCtx	file:
L	lj_cparse.h	/^  lua_State *L;		\/* Lua state. *\/$/;"	m	struct:CPState
L	lj_ctype.c	/^  lua_State *L;$/;"	m	struct:CTRepr	file:
L	lj_ctype.h	/^  lua_State *L;		\/* Lua state (needed for errors and allocations). *\/$/;"	m	struct:CTState
L	lj_dispatch.h	/^  lua_State L;				\/* Main thread. *\/$/;"	m	struct:GG_State
L	lj_jit.h	/^  lua_State *L;		\/* Current Lua state. *\/$/;"	m	struct:jit_State
L	lj_lex.h	/^  struct lua_State *L;	\/* Lua state. *\/$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	lj_parse.c	/^  lua_State *L;			\/* Lua state. *\/$/;"	m	struct:FuncState	file:
L2GG	lj_dispatch.h	87;"	d
L2J	lj_dispatch.h	90;"	d
LABEL_PREFIX	host/buildvm.h	29;"	d
LABEL_PREFIX_BC	host/buildvm.h	30;"	d
LABEL_PREFIX_CF	host/buildvm.h	32;"	d
LABEL_PREFIX_FF	host/buildvm.h	31;"	d
LABEL_PREFIX_FFH	host/buildvm.h	33;"	d
LABEL_PREFIX_LIBCF	host/buildvm.h	34;"	d
LABEL_PREFIX_LIBINIT	host/buildvm.h	35;"	d
LAST_TT	lj_obj.h	169;"	d
LClosure	host/minilua.c	/^typedef struct LClosure{$/;"	s	file:
LClosure	host/minilua.c	/^}LClosure;$/;"	t	typeref:struct:LClosure	file:
LDOPTIONS	Makefile	/^LDOPTIONS= $(CCDEBUG) $(LDFLAGS)$/;"	m
LEFTFOLD	lj_iropt.h	111;"	d
LEVELS1	lib_debug.c	381;"	d	file:
LEVELS2	lib_debug.c	382;"	d	file:
LG	host/minilua.c	/^typedef struct LG{$/;"	s	file:
LG	host/minilua.c	/^}LG;$/;"	t	typeref:struct:LG	file:
LHSVarList	lj_parse.c	/^typedef struct LHSVarList {$/;"	s	file:
LHSVarList	lj_parse.c	/^} LHSVarList;$/;"	t	typeref:struct:LHSVarList	file:
LHS_assign	host/minilua.c	/^struct LHS_assign{$/;"	s	file:
LIBDEF_PREFIX	host/buildvm.h	23;"	d
LIBINIT_ASM	lj_lib.h	96;"	d
LIBINIT_ASM_	lj_lib.h	97;"	d
LIBINIT_CF	lj_lib.h	95;"	d
LIBINIT_COPY	lj_lib.h	102;"	d
LIBINIT_END	lj_lib.h	105;"	d
LIBINIT_FFID	lj_lib.h	104;"	d
LIBINIT_LASTCL	lj_lib.h	103;"	d
LIBINIT_LENMASK	lj_lib.h	93;"	d
LIBINIT_MAXSTR	lj_lib.h	99;"	d
LIBINIT_NUMBER	lj_lib.h	101;"	d
LIBINIT_SET	lj_lib.h	100;"	d
LIBINIT_STRING	lj_lib.h	98;"	d
LIBINIT_TAGMASK	lj_lib.h	94;"	d
LIB_VMDEF	Makefile	/^LIB_VMDEF= jit\/vmdef.lua$/;"	m
LIB_VMDEFP	Makefile	/^LIB_VMDEFP= $(LIB_VMDEF)$/;"	m
LJARCH	msvcbuild.bat	/^@set LJARCH=x64$/;"	v
LJARCH	msvcbuild.bat	/^@set LJARCH=x86$/;"	v
LJCOMPILE	msvcbuild.bat	/^@set LJCOMPILE=%LJCOMPILE% \/Zi$/;"	v
LJCOMPILE	msvcbuild.bat	/^@set LJCOMPILE=cl \/nologo \/c \/MD \/O2 \/W3 \/D_CRT_SECURE_NO_DEPRECATE$/;"	v
LJCORE_O	Makefile	/^LJCORE_O= lj_gc.o lj_err.o lj_char.o lj_bc.o lj_obj.o \\$/;"	m
LJFOLD	lj_opt_fold.c	148;"	d	file:
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(abc_fwd)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(abc_invar)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(abc_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(barrier_tnew_tdup)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(comm_bxor)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(comm_comp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(comm_dup)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(comm_equal)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(comm_swap)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(cse_conv)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_cdata_int64_kgc)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_cdata_ptr_int64_cnew)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_cdata_typeid_cnew)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_cdata_typeid_kgc)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_str_len_kgc)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_str_len_snew)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_tab_ah)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_tab_tdup_asize)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_tab_tdup_hmask)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_tab_tnew_asize)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fload_tab_tnew_hmask)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(fwd_href_tdup)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_add_kgc)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_add_kptr)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_add_kright)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_bnot)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_bnot64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_bswap)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_bswap64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint64_int_i64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint64_num_i64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint64_num_u64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint_ext)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint_i64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kint_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_kintu32_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_knum_i64_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_knum_int_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_knum_u32_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_conv_knum_u64_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_fpmath)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_int64arith)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_int64arith2)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_int64comp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_int64comp0)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_int64shift)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_intarith)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_intcomp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_intcomp0)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_intovarith)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_ldexp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_numarith)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_numcomp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_numpow)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_snew_empty)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_snew_kptr)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_strcmp)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_strref)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_strref_snew)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_strto)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_tobit)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_tostr_kint)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(kfold_tostr_knum)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(merge_eqne_snew_kgc)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(narrow_convert)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_bxor)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_dup)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_intarith_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_intarith_k64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_minmax_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_minmax_left)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_minmax_right)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(reassoc_shift)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(shortcut_conv_num_int)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(shortcut_dropleft)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(shortcut_left)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(shortcut_leftleft)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(shortcut_round)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_andk_shiftk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_band_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_bor_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_bxor_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_flt_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_i64_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_int_i64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_int_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_narrow)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_sext)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_conv_u32_num)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_floor_conv)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intadd_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intadd_k64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intmod_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intmod_kleft)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intmul_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intmul_k32)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intmul_k64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsub)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsub_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsub_k64)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsub_kleft)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsubadd_leftcancel)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsubadd_rightcancel)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsubaddadd_cancel)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsubsub_leftcancel)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_intsubsub_rightcancel)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numadd_negx)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numadd_xneg)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_nummuldiv_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_nummuldiv_negk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_nummuldiv_negneg)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numpow_kx)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numpow_xk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numsub_k)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numsub_negk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_numsub_xneg)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_shift1_ki)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_shift2_ki)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_shift_andk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_shift_ik)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_shiftk_andk)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(simplify_tobit_conv)$/;"	f
LJFOLDF	lj_opt_fold.c	/^LJFOLDF(xload_kptr)$/;"	f
LJFOLDF	lj_opt_fold.c	150;"	d	file:
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_cse)$/;"	f
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_dse_ahstore)$/;"	f
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_fwd_aload)$/;"	f
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_fwd_hload)$/;"	f
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_fwd_hrefk)$/;"	f
LJFOLDX	lj_opt_fold.c	/^LJFOLDX(lj_opt_fwd_xload)$/;"	f
LJFOLDX	lj_opt_fold.c	149;"	d	file:
LJLIB	msvcbuild.bat	/^@set LJLIB=lib \/nologo$/;"	v
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(assert)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(coroutine_resume)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(coroutine_yield)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(pcall)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(rawget)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(tonumber)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_ASM(tostring)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_NOREG LJLIB_ASM(coroutine_wrap_aux)$/;"	f
LJLIB_ASM	lib_base.c	/^LJLIB_NOREGUV LJLIB_ASM(ipairs_aux)	LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_bit.c	/^LJLIB_ASM(bit_tobit)		LJLIB_REC(bit_unary IR_TOBIT)$/;"	f
LJLIB_ASM	lib_math.c	/^LJLIB_ASM(math_abs)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_math.c	/^LJLIB_ASM(math_min)		LJLIB_REC(math_minmax IR_MIN)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_byte)		LJLIB_REC(string_range 0)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_char)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_len)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_rep)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_reverse)$/;"	f
LJLIB_ASM	lib_string.c	/^LJLIB_ASM(string_sub)		LJLIB_REC(string_range 1)$/;"	f
LJLIB_ASM	lib_table.c	/^LJLIB_ASM(table_getn)		LJLIB_REC(.)$/;"	f
LJLIB_ASM	lj_lib.h	78;"	d
LJLIB_ASM_	lib_base.c	/^LJLIB_ASM_(getmetatable)	LJLIB_REC(.)$/;"	f
LJLIB_ASM_	lib_bit.c	/^LJLIB_ASM_(bit_bnot)		LJLIB_REC(bit_unary IR_BNOT)$/;"	f
LJLIB_ASM_	lib_bit.c	/^LJLIB_ASM_(bit_bor)		LJLIB_REC(bit_nary IR_BOR)$/;"	f
LJLIB_ASM_	lib_bit.c	/^LJLIB_ASM_(bit_rshift)		LJLIB_REC(bit_shift IR_BSHR)$/;"	f
LJLIB_ASM_	lib_math.c	/^LJLIB_ASM_(math_deg)		LJLIB_REC(math_degrad)$/;"	f
LJLIB_ASM_	lib_math.c	/^LJLIB_ASM_(math_floor)		LJLIB_REC(math_round IRFPM_FLOOR)$/;"	f
LJLIB_ASM_	lib_math.c	/^LJLIB_ASM_(math_log10)		LJLIB_REC(math_unary IRFPM_LOG10)$/;"	f
LJLIB_ASM_	lib_math.c	/^LJLIB_ASM_(math_max)		LJLIB_REC(math_minmax IR_MAX)$/;"	f
LJLIB_ASM_	lib_math.c	/^LJLIB_ASM_(math_pow)		LJLIB_REC(.)$/;"	f
LJLIB_ASM_	lj_lib.h	79;"	d
LJLIB_C	Makefile	/^LJLIB_C= $(LJLIB_O:.o=.c)$/;"	m
LJLIB_CF	lib_base.c	/^LJLIB_CF(collectgarbage)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(coroutine_create)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(coroutine_running)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(coroutine_wrap)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(dofile)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(error)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(gcinfo)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(getfenv)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(load)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(loadfile)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(loadstring)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(newproxy)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(print)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(rawequal)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(rawlen)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(rawset)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(select)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(setfenv)$/;"	f
LJLIB_CF	lib_base.c	/^LJLIB_CF(unpack)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_debug)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getfenv)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_gethook)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getinfo)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getlocal)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getmetatable)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getregistry)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getupvalue)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_getuservalue)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_setfenv)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_sethook)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_setlocal)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_setmetatable)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_setupvalue)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_setuservalue)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_traceback)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_upvalueid)$/;"	f
LJLIB_CF	lib_debug.c	/^LJLIB_CF(debug_upvaluejoin)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_abi)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_alignof)	LJLIB_REC(ffi_xof FF_ffi_alignof)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_callback_free)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_callback_set)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_cast)	LJLIB_REC(ffi_new)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_clib___gc)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_clib___index)	LJLIB_REC(clib_index 1)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_clib___newindex)	LJLIB_REC(clib_index 0)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_copy)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_errno)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_fill)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_gc)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_istype)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_load)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___add)	LJLIB_REC(cdata_arith MM_add)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___call)	LJLIB_REC(cdata_call)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___concat)	LJLIB_REC(cdata_arith MM_concat)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___div)	LJLIB_REC(cdata_arith MM_div)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___eq)		LJLIB_REC(cdata_arith MM_eq)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___index)	LJLIB_REC(cdata_index 0)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___ipairs)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___le)		LJLIB_REC(cdata_arith MM_le)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___len)	LJLIB_REC(cdata_arith MM_len)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___lt)		LJLIB_REC(cdata_arith MM_lt)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___mod)	LJLIB_REC(cdata_arith MM_mod)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___mul)	LJLIB_REC(cdata_arith MM_mul)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___newindex)	LJLIB_REC(cdata_index 1)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___pairs)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___pow)	LJLIB_REC(cdata_arith MM_pow)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___sub)	LJLIB_REC(cdata_arith MM_sub)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___tostring)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_meta___unm)	LJLIB_REC(cdata_arith MM_unm)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_metatype)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_new)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_offsetof)	LJLIB_REC(ffi_xof FF_ffi_offsetof)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_sizeof)	LJLIB_REC(ffi_xof FF_ffi_sizeof)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_string)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_ffi.c	/^LJLIB_CF(ffi_typeof)	LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_close)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_flush)		LJLIB_REC(io_flush GCROOT_IO_OUTPUT)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_input)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_lines)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method___gc)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method___tostring)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_close)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_flush)		LJLIB_REC(io_flush 0)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_lines)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_read)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_seek)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_setvbuf)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_method_write)		LJLIB_REC(io_write 0)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_output)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_popen)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_read)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_tmpfile)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_type)$/;"	f
LJLIB_CF	lib_io.c	/^LJLIB_CF(io_write)		LJLIB_REC(io_write GCROOT_IO_OUTPUT)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_attach)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_flush)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_off)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_on)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_opt_start)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_status)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_funcbc)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_funcinfo)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_funck)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_funcuvname)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_ircalladdr)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_traceexitstub)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_traceinfo)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_traceir)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_tracek)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_tracemc)$/;"	f
LJLIB_CF	lib_jit.c	/^LJLIB_CF(jit_util_tracesnap)$/;"	f
LJLIB_CF	lib_math.c	/^LJLIB_CF(math_random)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_math.c	/^LJLIB_CF(math_randomseed)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_clock)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_date)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_difftime)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_execute)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_exit)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_getenv)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_remove)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_rename)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_setlocale)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_time)$/;"	f
LJLIB_CF	lib_os.c	/^LJLIB_CF(os_tmpname)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_dump)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_find)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_format)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_gmatch)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_gsub)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_CF(string_match)$/;"	f
LJLIB_CF	lib_string.c	/^LJLIB_NOREG LJLIB_CF(string_gmatch_aux)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_concat)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_foreach)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_foreachi)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_insert)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_maxn)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_pack)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_remove)		LJLIB_REC(.)$/;"	f
LJLIB_CF	lib_table.c	/^LJLIB_CF(table_sort)$/;"	f
LJLIB_CF	lj_lib.h	77;"	d
LJLIB_MODULE_base	lib_base.c	39;"	d	file:
LJLIB_MODULE_base	lj_libdef.h	4;"	d
LJLIB_MODULE_bit	lib_bit.c	20;"	d	file:
LJLIB_MODULE_bit	lj_libdef.h	97;"	d
LJLIB_MODULE_coroutine	lib_base.c	549;"	d	file:
LJLIB_MODULE_coroutine	lj_libdef.h	54;"	d
LJLIB_MODULE_debug	lib_debug.c	24;"	d	file:
LJLIB_MODULE_debug	lj_libdef.h	223;"	d
LJLIB_MODULE_ffi	lib_ffi.c	472;"	d	file:
LJLIB_MODULE_ffi	lj_libdef.h	364;"	d
LJLIB_MODULE_ffi_callback	lib_ffi.c	428;"	d	file:
LJLIB_MODULE_ffi_callback	lj_libdef.h	352;"	d
LJLIB_MODULE_ffi_clib	lib_ffi.c	356;"	d	file:
LJLIB_MODULE_ffi_clib	lj_libdef.h	339;"	d
LJLIB_MODULE_ffi_meta	lib_ffi.c	103;"	d	file:
LJLIB_MODULE_ffi_meta	lj_libdef.h	306;"	d
LJLIB_MODULE_io	lib_io.c	393;"	d	file:
LJLIB_MODULE_io	lj_libdef.h	177;"	d
LJLIB_MODULE_io_method	lib_io.c	284;"	d	file:
LJLIB_MODULE_io_method	lj_libdef.h	156;"	d
LJLIB_MODULE_jit	lib_jit.c	36;"	d	file:
LJLIB_MODULE_jit	lj_libdef.h	255;"	d
LJLIB_MODULE_jit_opt	lib_jit.c	423;"	d	file:
LJLIB_MODULE_jit_opt	lj_libdef.h	296;"	d
LJLIB_MODULE_jit_util	lib_jit.c	148;"	d	file:
LJLIB_MODULE_jit_util	lj_libdef.h	272;"	d
LJLIB_MODULE_math	lib_math.c	21;"	d	file:
LJLIB_MODULE_math	lj_libdef.h	71;"	d
LJLIB_MODULE_os	lib_os.c	32;"	d	file:
LJLIB_MODULE_os	lj_libdef.h	200;"	d
LJLIB_MODULE_string	lib_string.c	32;"	d	file:
LJLIB_MODULE_string	lj_libdef.h	113;"	d
LJLIB_MODULE_table	lib_table.c	24;"	d	file:
LJLIB_MODULE_table	lj_libdef.h	137;"	d
LJLIB_NOREG	lj_lib.h	84;"	d
LJLIB_NOREGUV	lj_lib.h	83;"	d
LJLIB_O	Makefile	/^LJLIB_O= lib_base.o lib_math.o lib_bit.o lib_string.o lib_table.o \\$/;"	m
LJLIB_PUSH	lib_base.c	/^LJLIB_PUSH(lastcl)$/;"	f
LJLIB_PUSH	lj_lib.h	81;"	d
LJLIB_REC	lj_lib.h	82;"	d
LJLIB_SET	lib_base.c	/^LJLIB_SET(_VERSION)$/;"	f
LJLIB_SET	lib_ffi.c	/^LJLIB_PUSH(top-1) LJLIB_SET(__index)$/;"	f
LJLIB_SET	lib_io.c	/^LJLIB_PUSH(top-1) LJLIB_SET(__index)$/;"	f
LJLIB_SET	lj_lib.h	80;"	d
LJLINK	msvcbuild.bat	/^@set LJLINK=%LJLINK% \/debug$/;"	v
LJLINK	msvcbuild.bat	/^@set LJLINK=link \/nologo$/;"	v
LJMT	msvcbuild.bat	/^@set LJMT=mt \/nologo$/;"	v
LJVMCORE_DYNO	Makefile	/^  LJVMCORE_DYNO= $(LJVMCORE_O)$/;"	m
LJVMCORE_DYNO	Makefile	/^LJVMCORE_DYNO= $(LJVMCORE_O:.o=_dyn.o)$/;"	m
LJVMCORE_O	Makefile	/^LJVMCORE_O= $(LJVM_O) $(LJCORE_O)$/;"	m
LJVM_BOUT	Makefile	/^LJVM_BOUT= $(LJVM_S)$/;"	m
LJVM_MODE	Makefile	/^  LJVM_MODE= coffasm$/;"	m
LJVM_MODE	Makefile	/^  LJVM_MODE= machasm$/;"	m
LJVM_MODE	Makefile	/^LJVM_MODE= elfasm$/;"	m
LJVM_O	Makefile	/^LJVM_O= lj_vm.o$/;"	m
LJVM_S	Makefile	/^LJVM_S= lj_vm.s$/;"	m
LJ_32	lj_arch.h	386;"	d
LJ_32	lj_arch.h	389;"	d
LJ_52	lj_arch.h	411;"	d
LJ_52	lj_arch.h	413;"	d
LJ_64	lj_arch.h	387;"	d
LJ_64	lj_arch.h	390;"	d
LJ_ABI_EABI	lj_arch.h	163;"	d
LJ_ABI_EABI	lj_arch.h	237;"	d
LJ_ABI_SOFTFP	lj_arch.h	161;"	d
LJ_ABI_SOFTFP	lj_arch.h	235;"	d
LJ_ABI_SOFTFP	lj_arch.h	369;"	d
LJ_ABI_WIN	lj_arch.h	125;"	d
LJ_ABI_WIN	lj_arch.h	127;"	d
LJ_ABI_WIN	lj_arch.h	142;"	d
LJ_AINLINE	lj_def.h	119;"	d
LJ_AINLINE	lj_def.h	239;"	d
LJ_ALIGN	lj_def.h	117;"	d
LJ_ALIGN	lj_def.h	237;"	d
LJ_ARCH_BITS	lj_arch.h	122;"	d
LJ_ARCH_BITS	lj_arch.h	140;"	d
LJ_ARCH_BITS	lj_arch.h	155;"	d
LJ_ARCH_BITS	lj_arch.h	186;"	d
LJ_ARCH_BITS	lj_arch.h	188;"	d
LJ_ARCH_BITS	lj_arch.h	232;"	d
LJ_ARCH_BITS	lj_arch.h	257;"	d
LJ_ARCH_CELL	lj_arch.h	223;"	d
LJ_ARCH_ENDIAN	lj_arch.h	123;"	d
LJ_ARCH_ENDIAN	lj_arch.h	141;"	d
LJ_ARCH_ENDIAN	lj_arch.h	156;"	d
LJ_ARCH_ENDIAN	lj_arch.h	190;"	d
LJ_ARCH_ENDIAN	lj_arch.h	233;"	d
LJ_ARCH_ENDIAN	lj_arch.h	252;"	d
LJ_ARCH_ENDIAN	lj_arch.h	255;"	d
LJ_ARCH_HASFPU	lj_arch.h	158;"	d
LJ_ARCH_HASFPU	lj_arch.h	366;"	d
LJ_ARCH_NAME	lj_arch.h	121;"	d
LJ_ARCH_NAME	lj_arch.h	139;"	d
LJ_ARCH_NAME	lj_arch.h	154;"	d
LJ_ARCH_NAME	lj_arch.h	184;"	d
LJ_ARCH_NAME	lj_arch.h	231;"	d
LJ_ARCH_NAME	lj_arch.h	251;"	d
LJ_ARCH_NAME	lj_arch.h	254;"	d
LJ_ARCH_NOFFI	lj_arch.h	214;"	d
LJ_ARCH_NOFFI	lj_arch.h	245;"	d
LJ_ARCH_NOJIT	lj_arch.h	246;"	d
LJ_ARCH_NUMMODE	lj_arch.h	135;"	d
LJ_ARCH_NUMMODE	lj_arch.h	150;"	d
LJ_ARCH_NUMMODE	lj_arch.h	170;"	d
LJ_ARCH_NUMMODE	lj_arch.h	197;"	d
LJ_ARCH_NUMMODE	lj_arch.h	244;"	d
LJ_ARCH_NUMMODE	lj_arch.h	264;"	d
LJ_ARCH_PPC64	lj_arch.h	213;"	d
LJ_ARCH_ROUND	lj_arch.h	220;"	d
LJ_ARCH_SQRT	lj_arch.h	217;"	d
LJ_ARCH_VERSION	lj_arch.h	173;"	d
LJ_ARCH_VERSION	lj_arch.h	175;"	d
LJ_ARCH_VERSION	lj_arch.h	177;"	d
LJ_ARCH_VERSION	lj_arch.h	179;"	d
LJ_ARCH_VERSION	lj_arch.h	200;"	d
LJ_ARCH_VERSION	lj_arch.h	202;"	d
LJ_ARCH_VERSION	lj_arch.h	204;"	d
LJ_ARCH_VERSION	lj_arch.h	206;"	d
LJ_ARCH_VERSION	lj_arch.h	208;"	d
LJ_ARCH_VERSION	lj_arch.h	210;"	d
LJ_ARCH_VERSION	lj_arch.h	267;"	d
LJ_ARCH_VERSION	lj_arch.h	269;"	d
LJ_ARCH_XENON	lj_arch.h	226;"	d
LJ_ASMF	lj_def.h	289;"	d
LJ_ASMF_NORET	lj_def.h	298;"	d
LJ_ASSERT_NAME	lj_def.h	312;"	d
LJ_ASSERT_NAME2	lj_def.h	311;"	d
LJ_BE	lj_arch.h	375;"	d
LJ_BE	lj_arch.h	380;"	d
LJ_CHAR_ALNUM	lj_char.h	20;"	d
LJ_CHAR_ALPHA	lj_char.h	19;"	d
LJ_CHAR_CNTRL	lj_char.h	11;"	d
LJ_CHAR_DIGIT	lj_char.h	14;"	d
LJ_CHAR_GRAPH	lj_char.h	21;"	d
LJ_CHAR_IDENT	lj_char.h	18;"	d
LJ_CHAR_LOWER	lj_char.h	17;"	d
LJ_CHAR_PUNCT	lj_char.h	13;"	d
LJ_CHAR_SPACE	lj_char.h	12;"	d
LJ_CHAR_UPPER	lj_char.h	16;"	d
LJ_CHAR_XDIGIT	lj_char.h	15;"	d
LJ_CONT_FFI_CALLBACK	lj_vm.h	/^enum { LJ_CONT_TAILCALL, LJ_CONT_FFI_CALLBACK };  \/* Special continuations. *\/$/;"	e	enum:__anon66
LJ_CONT_TAILCALL	lj_vm.h	/^enum { LJ_CONT_TAILCALL, LJ_CONT_FFI_CALLBACK };  \/* Special continuations. *\/$/;"	e	enum:__anon66
LJ_CTYPE_RESTORE	lj_ctype.h	388;"	d
LJ_CTYPE_SAVE	lj_ctype.h	387;"	d
LJ_DATA	lj_def.h	287;"	d
LJ_DATADEF	lj_def.h	288;"	d
LJ_DUALNUM	lj_arch.h	338;"	d
LJ_DUALNUM	lj_arch.h	340;"	d
LJ_ENDIAN_LOHI	lj_arch.h	377;"	d
LJ_ENDIAN_LOHI	lj_arch.h	382;"	d
LJ_ENDIAN_SELECT	lj_arch.h	376;"	d
LJ_ENDIAN_SELECT	lj_arch.h	381;"	d
LJ_ERR__MAX	lj_err.h	/^  LJ_ERR__MAX$/;"	e	enum:__anon33
LJ_EXCODE	lj_err.c	394;"	d	file:
LJ_EXCODE_CHECK	lj_err.c	396;"	d	file:
LJ_EXCODE_ERRCODE	lj_err.c	397;"	d	file:
LJ_EXCODE_MAKE	lj_err.c	395;"	d	file:
LJ_FASTCALL	lj_def.h	133;"	d
LJ_FASTCALL	lj_def.h	242;"	d
LJ_FASTCALL	lj_def.h	273;"	d
LJ_FUNC	lj_def.h	292;"	d
LJ_FUNC	lj_def.h	294;"	d
LJ_FUNCA	lj_def.h	290;"	d
LJ_FUNCA_NORET	lj_def.h	297;"	d
LJ_FUNC_NORET	lj_def.h	296;"	d
LJ_GC_BLACK	lj_gc.h	19;"	d
LJ_GC_CDATA_FIN	lj_gc.h	23;"	d
LJ_GC_COLORS	lj_gc.h	28;"	d
LJ_GC_FINALIZED	lj_gc.h	20;"	d
LJ_GC_FIXED	lj_gc.h	24;"	d
LJ_GC_SFIXED	lj_gc.h	25;"	d
LJ_GC_WEAK	lj_gc.h	29;"	d
LJ_GC_WEAKKEY	lj_gc.h	21;"	d
LJ_GC_WEAKVAL	lj_gc.h	22;"	d
LJ_GC_WHITE0	lj_gc.h	17;"	d
LJ_GC_WHITE1	lj_gc.h	18;"	d
LJ_GC_WHITES	lj_gc.h	27;"	d
LJ_GOT__MAX	lj_dispatch.h	/^  LJ_GOT__MAX$/;"	e	enum:__anon24
LJ_HASFFI	lj_arch.h	360;"	d
LJ_HASFFI	lj_arch.h	362;"	d
LJ_HASJIT	lj_arch.h	353;"	d
LJ_HASJIT	lj_arch.h	355;"	d
LJ_INLINE	lj_def.h	118;"	d
LJ_INLINE	lj_def.h	238;"	d
LJ_KSIMD	lj_jit.h	298;"	d
LJ_KSIMD_ABS	lj_jit.h	/^  LJ_KSIMD_ABS,$/;"	e	enum:__anon81
LJ_KSIMD_NEG	lj_jit.h	/^  LJ_KSIMD_NEG,$/;"	e	enum:__anon81
LJ_KSIMD__MAX	lj_jit.h	/^  LJ_KSIMD__MAX$/;"	e	enum:__anon81
LJ_LE	lj_arch.h	374;"	d
LJ_LE	lj_arch.h	379;"	d
LJ_LIB_REG	lj_lib.h	86;"	d
LJ_LIKELY	lj_def.h	136;"	d
LJ_LIKELY	lj_def.h	282;"	d
LJ_MAX_ABITS	lj_def.h	56;"	d
LJ_MAX_ALLOC	lj_def.h	50;"	d
LJ_MAX_ASIZE	lj_def.h	57;"	d
LJ_MAX_BCINS	lj_def.h	62;"	d
LJ_MAX_COLOSIZE	lj_def.h	58;"	d
LJ_MAX_EXITSTUBGR	lj_def.h	84;"	d
LJ_MAX_HBITS	lj_def.h	55;"	d
LJ_MAX_IDXCHAIN	lj_def.h	67;"	d
LJ_MAX_JSLOTS	lj_def.h	82;"	d
LJ_MAX_LINE	lj_def.h	60;"	d
LJ_MAX_LOCVAR	lj_def.h	64;"	d
LJ_MAX_MEM	lj_def.h	49;"	d
LJ_MAX_PHI	lj_def.h	83;"	d
LJ_MAX_SLOTS	lj_def.h	63;"	d
LJ_MAX_STR	lj_def.h	51;"	d
LJ_MAX_STRTAB	lj_def.h	54;"	d
LJ_MAX_UDATA	lj_def.h	52;"	d
LJ_MAX_UPVAL	lj_def.h	65;"	d
LJ_MAX_VSTACK	lj_parse.c	113;"	d	file:
LJ_MAX_XLEVEL	lj_def.h	61;"	d
LJ_MIN_GLOBAL	lj_def.h	73;"	d
LJ_MIN_IRSZ	lj_def.h	78;"	d
LJ_MIN_K64SZ	lj_def.h	79;"	d
LJ_MIN_REGISTRY	lj_def.h	74;"	d
LJ_MIN_SBUF	lj_def.h	76;"	d
LJ_MIN_STRTAB	lj_def.h	75;"	d
LJ_MIN_VECSZ	lj_def.h	77;"	d
LJ_MSVC_EXCODE	lj_err.c	392;"	d	file:
LJ_NEED_FP64	lj_ircall.h	69;"	d
LJ_NOAPI	lj_def.h	124;"	d
LJ_NOAPI	lj_def.h	279;"	d
LJ_NOINLINE	lj_def.h	120;"	d
LJ_NOINLINE	lj_def.h	240;"	d
LJ_NORET	lj_def.h	116;"	d
LJ_NORET	lj_def.h	236;"	d
LJ_NORET	lj_def.h	276;"	d
LJ_NO_UNWIND	lj_arch.h	406;"	d
LJ_NUMMODE_DUAL	lj_arch.h	115;"	d
LJ_NUMMODE_DUAL_SINGLE	lj_arch.h	116;"	d
LJ_NUMMODE_SINGLE	lj_arch.h	113;"	d
LJ_NUMMODE_SINGLE_DUAL	lj_arch.h	114;"	d
LJ_NUM_CBPAGE	lj_def.h	70;"	d
LJ_OS_NAME	lj_arch.h	83;"	d
LJ_OS_NAME	lj_arch.h	85;"	d
LJ_OS_NAME	lj_arch.h	87;"	d
LJ_OS_NAME	lj_arch.h	89;"	d
LJ_OS_NAME	lj_arch.h	91;"	d
LJ_OS_NAME	lj_arch.h	93;"	d
LJ_OS_NOJIT	lj_arch.h	347;"	d
LJ_PAGESIZE	lj_arch.h	277;"	d
LJ_POST_FFRETRY	lj_jit.h	/^  LJ_POST_FFRETRY	\/* Suppress recording of retried fast functions. *\/$/;"	e	enum:__anon79
LJ_POST_FIXBOOL	lj_jit.h	/^  LJ_POST_FIXBOOL,	\/* Fixup boolean result. *\/$/;"	e	enum:__anon79
LJ_POST_FIXCOMP	lj_jit.h	/^  LJ_POST_FIXCOMP,	\/* Fixup comparison and emit pending guard. *\/$/;"	e	enum:__anon79
LJ_POST_FIXCONST	lj_jit.h	/^  LJ_POST_FIXCONST,	\/* Fixup constant results. *\/$/;"	e	enum:__anon79
LJ_POST_FIXGUARD	lj_jit.h	/^  LJ_POST_FIXGUARD,	\/* Fixup and emit pending guard. *\/$/;"	e	enum:__anon79
LJ_POST_FIXGUARDSNAP	lj_jit.h	/^  LJ_POST_FIXGUARDSNAP,	\/* Fixup and emit pending guard and snapshot. *\/$/;"	e	enum:__anon79
LJ_POST_NONE	lj_jit.h	/^  LJ_POST_NONE,		\/* No action. *\/$/;"	e	enum:__anon79
LJ_PRNG_BITS	lj_jit.h	/^static LJ_AINLINE uint32_t LJ_PRNG_BITS(jit_State *J, int bits)$/;"	f
LJ_SOFTFP	lj_arch.h	371;"	d
LJ_STACK_EXTRA	lj_def.h	68;"	d
LJ_STACK_MAX	lj_state.c	34;"	d	file:
LJ_STACK_MAXEX	lj_state.c	36;"	d	file:
LJ_STACK_MIN	lj_state.c	33;"	d	file:
LJ_STACK_START	lj_state.c	35;"	d	file:
LJ_STATIC_ASSERT	lj_def.h	314;"	d
LJ_STATIC_ASSERT	lj_def.h	317;"	d
LJ_STR_INTBUF	lj_str.h	29;"	d
LJ_STR_NUMBUF	lj_str.h	30;"	d
LJ_TARGET_ARM	lj_arch.h	164;"	d
LJ_TARGET_CONSOLE	lj_arch.h	105;"	d
LJ_TARGET_CONSOLE	lj_arch.h	110;"	d
LJ_TARGET_DLOPEN	lj_arch.h	101;"	d
LJ_TARGET_EHRETREG	lj_arch.h	131;"	d
LJ_TARGET_EHRETREG	lj_arch.h	145;"	d
LJ_TARGET_EHRETREG	lj_arch.h	165;"	d
LJ_TARGET_EHRETREG	lj_arch.h	192;"	d
LJ_TARGET_EHRETREG	lj_arch.h	239;"	d
LJ_TARGET_EHRETREG	lj_arch.h	259;"	d
LJ_TARGET_IOS	lj_arch.h	99;"	d
LJ_TARGET_JUMPRANGE	lj_arch.h	146;"	d
LJ_TARGET_JUMPRANGE	lj_arch.h	166;"	d
LJ_TARGET_JUMPRANGE	lj_arch.h	193;"	d
LJ_TARGET_JUMPRANGE	lj_arch.h	240;"	d
LJ_TARGET_JUMPRANGE	lj_arch.h	260;"	d
LJ_TARGET_LINUX	lj_arch.h	97;"	d
LJ_TARGET_MASKROT	lj_arch.h	133;"	d
LJ_TARGET_MASKROT	lj_arch.h	148;"	d
LJ_TARGET_MASKROT	lj_arch.h	168;"	d
LJ_TARGET_MASKROT	lj_arch.h	195;"	d
LJ_TARGET_MASKROT	lj_arch.h	242;"	d
LJ_TARGET_MASKROT	lj_arch.h	262;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	132;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	147;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	167;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	194;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	241;"	d
LJ_TARGET_MASKSHIFT	lj_arch.h	261;"	d
LJ_TARGET_MIPS	lj_arch.h	258;"	d
LJ_TARGET_OSX	lj_arch.h	98;"	d
LJ_TARGET_POSIX	lj_arch.h	100;"	d
LJ_TARGET_PPC	lj_arch.h	191;"	d
LJ_TARGET_PPCSPE	lj_arch.h	238;"	d
LJ_TARGET_PS3	lj_arch.h	104;"	d
LJ_TARGET_UNALIGNED	lj_arch.h	134;"	d
LJ_TARGET_UNALIGNED	lj_arch.h	149;"	d
LJ_TARGET_UNALIGNED	lj_arch.h	394;"	d
LJ_TARGET_UNIFYROT	lj_arch.h	169;"	d
LJ_TARGET_UNIFYROT	lj_arch.h	196;"	d
LJ_TARGET_UNIFYROT	lj_arch.h	243;"	d
LJ_TARGET_UNIFYROT	lj_arch.h	263;"	d
LJ_TARGET_WINDOWS	lj_arch.h	96;"	d
LJ_TARGET_X64	lj_arch.h	143;"	d
LJ_TARGET_X86	lj_arch.h	129;"	d
LJ_TARGET_X86ORX64	lj_arch.h	130;"	d
LJ_TARGET_X86ORX64	lj_arch.h	144;"	d
LJ_TARGET_XBOX360	lj_arch.h	109;"	d
LJ_TCDATA	lj_obj.h	204;"	d
LJ_TFALSE	lj_obj.h	195;"	d
LJ_TFUNC	lj_obj.h	202;"	d
LJ_TISGCV	lj_obj.h	218;"	d
LJ_TISNUM	lj_obj.h	212;"	d
LJ_TISNUM	lj_obj.h	214;"	d
LJ_TISPRI	lj_obj.h	217;"	d
LJ_TISTABUD	lj_obj.h	219;"	d
LJ_TISTRUECOND	lj_obj.h	216;"	d
LJ_TLIGHTUD	lj_obj.h	197;"	d
LJ_TNIL	lj_obj.h	194;"	d
LJ_TNUMX	lj_obj.h	208;"	d
LJ_TPROTO	lj_obj.h	201;"	d
LJ_TRACE_ACTIVE	lj_jit.h	/^  LJ_TRACE_ACTIVE = 0x10,$/;"	e	enum:__anon78
LJ_TRACE_ASM	lj_jit.h	/^  LJ_TRACE_ASM,		\/* Assemble trace. *\/$/;"	e	enum:__anon78
LJ_TRACE_END	lj_jit.h	/^  LJ_TRACE_END,		\/* End of trace. *\/$/;"	e	enum:__anon78
LJ_TRACE_ERR	lj_jit.h	/^  LJ_TRACE_ERR		\/* Trace aborted with error. *\/$/;"	e	enum:__anon78
LJ_TRACE_IDLE	lj_jit.h	/^  LJ_TRACE_IDLE,	\/* Trace compiler idle. *\/$/;"	e	enum:__anon78
LJ_TRACE_RECORD	lj_jit.h	/^  LJ_TRACE_RECORD,	\/* Bytecode recording active. *\/$/;"	e	enum:__anon78
LJ_TRACE_START	lj_jit.h	/^  LJ_TRACE_START,	\/* New trace started. *\/$/;"	e	enum:__anon78
LJ_TRERR__MAX	lj_trace.h	/^  LJ_TRERR__MAX$/;"	e	enum:__anon83
LJ_TRLINK_DOWNREC	lj_jit.h	/^  LJ_TRLINK_DOWNREC,		\/* Down-recursion. *\/$/;"	e	enum:__anon80
LJ_TRLINK_INTERP	lj_jit.h	/^  LJ_TRLINK_INTERP,		\/* Fallback to interpreter. *\/$/;"	e	enum:__anon80
LJ_TRLINK_LOOP	lj_jit.h	/^  LJ_TRLINK_LOOP,		\/* Loop to same trace. *\/$/;"	e	enum:__anon80
LJ_TRLINK_NONE	lj_jit.h	/^  LJ_TRLINK_NONE,		\/* Incomplete trace. No link, yet. *\/$/;"	e	enum:__anon80
LJ_TRLINK_RETURN	lj_jit.h	/^  LJ_TRLINK_RETURN		\/* Return to interpreter. *\/$/;"	e	enum:__anon80
LJ_TRLINK_ROOT	lj_jit.h	/^  LJ_TRLINK_ROOT,		\/* Link to other root trace. *\/$/;"	e	enum:__anon80
LJ_TRLINK_TAILREC	lj_jit.h	/^  LJ_TRLINK_TAILREC,		\/* Tail-recursion. *\/$/;"	e	enum:__anon80
LJ_TRLINK_UPREC	lj_jit.h	/^  LJ_TRLINK_UPREC,		\/* Up-recursion. *\/$/;"	e	enum:__anon80
LJ_TSTR	lj_obj.h	198;"	d
LJ_TTAB	lj_obj.h	205;"	d
LJ_TTHREAD	lj_obj.h	200;"	d
LJ_TTRACE	lj_obj.h	203;"	d
LJ_TTRUE	lj_obj.h	196;"	d
LJ_TUDATA	lj_obj.h	206;"	d
LJ_TUPVAL	lj_obj.h	199;"	d
LJ_UEXCLASS	lj_err.c	224;"	d	file:
LJ_UEXCLASS_CHECK	lj_err.c	226;"	d	file:
LJ_UEXCLASS_ERRCODE	lj_err.c	227;"	d	file:
LJ_UEXCLASS_MAKE	lj_err.c	225;"	d	file:
LJ_UNLIKELY	lj_def.h	137;"	d
LJ_UNLIKELY	lj_def.h	283;"	d
LJ_UNWIND_EXT	lj_err.c	64;"	d	file:
LJ_UNWIND_EXT	lj_err.c	66;"	d	file:
LJ_VMEVENTS_HSIZE	lj_vmevent.h	13;"	d
LJ_VMEVENTS_REGKEY	lj_vmevent.h	12;"	d
LJ_VMEVENT__MAX	lj_vmevent.h	/^  LJ_VMEVENT__MAX$/;"	e	enum:__anon22
LJ_VMST_ASM	lj_obj.h	/^  LJ_VMST_ASM,		\/* Assembler. *\/$/;"	e	enum:__anon107
LJ_VMST_C	lj_obj.h	/^  LJ_VMST_C,		\/* C function. *\/$/;"	e	enum:__anon107
LJ_VMST_EXIT	lj_obj.h	/^  LJ_VMST_EXIT,		\/* Trace exit handler. *\/$/;"	e	enum:__anon107
LJ_VMST_GC	lj_obj.h	/^  LJ_VMST_GC,		\/* Garbage collector. *\/$/;"	e	enum:__anon107
LJ_VMST_INTERP	lj_obj.h	/^  LJ_VMST_INTERP,	\/* Interpreter. *\/$/;"	e	enum:__anon107
LJ_VMST_OPT	lj_obj.h	/^  LJ_VMST_OPT,		\/* Optimizer. *\/$/;"	e	enum:__anon107
LJ_VMST_RECORD	lj_obj.h	/^  LJ_VMST_RECORD,	\/* Trace recorder. *\/$/;"	e	enum:__anon107
LJ_VMST__MAX	lj_obj.h	/^  LJ_VMST__MAX$/;"	e	enum:__anon107
LOOPEV_ENTER	lj_record.c	/^  LOOPEV_ENTER		\/* Loop is entered. *\/$/;"	e	enum:__anon110	file:
LOOPEV_ENTERLO	lj_record.c	/^  LOOPEV_ENTERLO,	\/* Loop is entered with a low iteration count left. *\/$/;"	e	enum:__anon110	file:
LOOPEV_LEAVE	lj_record.c	/^  LOOPEV_LEAVE,		\/* Loop is left or not entered. *\/$/;"	e	enum:__anon110	file:
LUAI_GCMUL	luaconf.h	75;"	d
LUAI_GCPAUSE	luaconf.h	74;"	d
LUAI_MAXCSTACK	luaconf.h	73;"	d
LUAI_MAXNUMBER2STR	luaconf.h	104;"	d
LUAI_MAXSTACK	luaconf.h	72;"	d
LUAI_THROW	host/minilua.c	159;"	d	file:
LUAI_TRY	host/minilua.c	160;"	d	file:
LUAI_UACNUMBER	luaconf.h	100;"	d
LUAJIT_A	Makefile	/^LUAJIT_A= libluajit.a$/;"	m
LUAJIT_ARCH_ARM	lj_arch.h	20;"	d
LUAJIT_ARCH_MIPS	lj_arch.h	26;"	d
LUAJIT_ARCH_PPC	lj_arch.h	22;"	d
LUAJIT_ARCH_PPCSPE	lj_arch.h	24;"	d
LUAJIT_ARCH_X64	lj_arch.h	18;"	d
LUAJIT_ARCH_X86	lj_arch.h	16;"	d
LUAJIT_ARCH_arm	lj_arch.h	21;"	d
LUAJIT_ARCH_mips	lj_arch.h	27;"	d
LUAJIT_ARCH_ppc	lj_arch.h	23;"	d
LUAJIT_ARCH_ppcspe	lj_arch.h	25;"	d
LUAJIT_ARCH_x64	lj_arch.h	19;"	d
LUAJIT_ARCH_x86	lj_arch.h	17;"	d
LUAJIT_BE	lj_arch.h	13;"	d
LUAJIT_COPYRIGHT	luajit.h	36;"	d
LUAJIT_LE	lj_arch.h	12;"	d
LUAJIT_MODE_ALLFUNC	luajit.h	/^  LUAJIT_MODE_ALLFUNC,		\/* Recurse into subroutine protos. *\/$/;"	e	enum:__anon74
LUAJIT_MODE_ALLSUBFUNC	luajit.h	/^  LUAJIT_MODE_ALLSUBFUNC,	\/* Change only the subroutines. *\/$/;"	e	enum:__anon74
LUAJIT_MODE_DEBUG	luajit.h	/^  LUAJIT_MODE_DEBUG,		\/* Set debug mode (idx = level). *\/$/;"	e	enum:__anon74
LUAJIT_MODE_ENGINE	luajit.h	/^  LUAJIT_MODE_ENGINE,		\/* Set mode for whole JIT engine. *\/$/;"	e	enum:__anon74
LUAJIT_MODE_FLUSH	luajit.h	60;"	d
LUAJIT_MODE_FUNC	luajit.h	/^  LUAJIT_MODE_FUNC,		\/* Change mode for a function. *\/$/;"	e	enum:__anon74
LUAJIT_MODE_MASK	luajit.h	40;"	d
LUAJIT_MODE_MAX	luajit.h	/^  LUAJIT_MODE_MAX$/;"	e	enum:__anon74
LUAJIT_MODE_OFF	luajit.h	58;"	d
LUAJIT_MODE_ON	luajit.h	59;"	d
LUAJIT_MODE_TRACE	luajit.h	/^  LUAJIT_MODE_TRACE,		\/* Flush a compiled trace. *\/$/;"	e	enum:__anon74
LUAJIT_MODE_WRAPCFUNC	luajit.h	/^  LUAJIT_MODE_WRAPCFUNC = 0x10,	\/* Set wrapper mode for C function calls. *\/$/;"	e	enum:__anon74
LUAJIT_NO_EXP2	lj_arch.h	402;"	d
LUAJIT_NO_LOG2	lj_arch.h	399;"	d
LUAJIT_O	Makefile	/^LUAJIT_O= luajit.o$/;"	m
LUAJIT_OS	lj_arch.h	64;"	d
LUAJIT_OS	lj_arch.h	66;"	d
LUAJIT_OS	lj_arch.h	68;"	d
LUAJIT_OS	lj_arch.h	71;"	d
LUAJIT_OS	lj_arch.h	74;"	d
LUAJIT_OS	lj_arch.h	76;"	d
LUAJIT_OS_BSD	lj_arch.h	34;"	d
LUAJIT_OS_LINUX	lj_arch.h	32;"	d
LUAJIT_OS_OSX	lj_arch.h	33;"	d
LUAJIT_OS_OTHER	lj_arch.h	30;"	d
LUAJIT_OS_POSIX	lj_arch.h	35;"	d
LUAJIT_OS_WINDOWS	lj_arch.h	31;"	d
LUAJIT_SO	Makefile	/^    LUAJIT_SO= $(TARGET_DLLNAME)$/;"	m
LUAJIT_SO	Makefile	/^    LUAJIT_SO= cyg$(TARGET_DLLNAME)$/;"	m
LUAJIT_SO	Makefile	/^LUAJIT_SO= libluajit.so$/;"	m
LUAJIT_T	Makefile	/^  LUAJIT_T= luajit.exe$/;"	m
LUAJIT_T	Makefile	/^LUAJIT_T= luajit$/;"	m
LUAJIT_TARGET	lj_arch.h	41;"	d
LUAJIT_TARGET	lj_arch.h	43;"	d
LUAJIT_TARGET	lj_arch.h	45;"	d
LUAJIT_TARGET	lj_arch.h	48;"	d
LUAJIT_TARGET	lj_arch.h	50;"	d
LUAJIT_TARGET	lj_arch.h	53;"	d
LUAJIT_UNPROTECT_MCODE	lj_mcode.c	125;"	d	file:
LUAJIT_URL	luajit.h	37;"	d
LUAJIT_VERSION	luajit.h	33;"	d
LUAJIT_VERSION_NUM	luajit.h	34;"	d
LUAJIT_VERSION_SYM	lj_dispatch.c	/^LUA_API void LUAJIT_VERSION_SYM(void)$/;"	f
LUAJIT_VERSION_SYM	luajit.h	35;"	d
LUALIB_API	luaconf.h	119;"	d
LUAL_BUFFERSIZE	luaconf.h	93;"	d
LUA_API	luaconf.h	111;"	d
LUA_API	luaconf.h	113;"	d
LUA_API	luaconf.h	116;"	d
LUA_AUTHORS	lua.h	23;"	d
LUA_BITLIBNAME	lualib.h	21;"	d
LUA_CDIR	luaconf.h	19;"	d
LUA_CDIR	luaconf.h	31;"	d
LUA_COLIBNAME	lualib.h	13;"	d
LUA_COMPAT_GFIND	luaconf.h	80;"	d
LUA_COMPAT_MOD	luaconf.h	79;"	d
LUA_COPYRIGHT	lua.h	22;"	d
LUA_CORE	lj_alloc.c	24;"	d	file:
LUA_CORE	lj_api.c	10;"	d	file:
LUA_CORE	lj_asm.c	7;"	d	file:
LUA_CORE	lj_bc.c	7;"	d	file:
LUA_CORE	lj_bcread.c	7;"	d	file:
LUA_CORE	lj_bcwrite.c	7;"	d	file:
LUA_CORE	lj_char.c	20;"	d	file:
LUA_CORE	lj_crecord.c	7;"	d	file:
LUA_CORE	lj_debug.c	7;"	d	file:
LUA_CORE	lj_dispatch.c	7;"	d	file:
LUA_CORE	lj_err.c	7;"	d	file:
LUA_CORE	lj_ffrecord.c	7;"	d	file:
LUA_CORE	lj_func.c	10;"	d	file:
LUA_CORE	lj_gc.c	10;"	d	file:
LUA_CORE	lj_gdbjit.c	7;"	d	file:
LUA_CORE	lj_ir.c	7;"	d	file:
LUA_CORE	lj_lex.c	10;"	d	file:
LUA_CORE	lj_lib.c	7;"	d	file:
LUA_CORE	lj_load.c	10;"	d	file:
LUA_CORE	lj_mcode.c	7;"	d	file:
LUA_CORE	lj_meta.c	10;"	d	file:
LUA_CORE	lj_obj.c	7;"	d	file:
LUA_CORE	lj_opt_dce.c	7;"	d	file:
LUA_CORE	lj_opt_fold.c	9;"	d	file:
LUA_CORE	lj_opt_loop.c	7;"	d	file:
LUA_CORE	lj_opt_mem.c	10;"	d	file:
LUA_CORE	lj_opt_narrow.c	8;"	d	file:
LUA_CORE	lj_opt_sink.c	7;"	d	file:
LUA_CORE	lj_opt_split.c	7;"	d	file:
LUA_CORE	lj_parse.c	10;"	d	file:
LUA_CORE	lj_record.c	7;"	d	file:
LUA_CORE	lj_snap.c	7;"	d	file:
LUA_CORE	lj_state.c	10;"	d	file:
LUA_CORE	lj_str.c	12;"	d	file:
LUA_CORE	lj_strscan.c	9;"	d	file:
LUA_CORE	lj_tab.c	10;"	d	file:
LUA_CORE	lj_trace.c	7;"	d	file:
LUA_CORE	lj_udata.c	7;"	d	file:
LUA_CORE	lj_vmevent.c	9;"	d	file:
LUA_CORE	lj_vmmath.c	7;"	d	file:
LUA_CORE	ljamalg.c	17;"	d	file:
LUA_CPATH	luaconf.h	50;"	d
LUA_CPATH_DEFAULT	luaconf.h	22;"	d
LUA_CPATH_DEFAULT	luaconf.h	44;"	d
LUA_DBLIBNAME	lualib.h	20;"	d
LUA_DIRSEP	luaconf.h	55;"	d
LUA_DIRSEP	luaconf.h	57;"	d
LUA_ENVIRONINDEX	lua.h	37;"	d
LUA_ERRERR	lua.h	47;"	d
LUA_ERRFILE	lauxlib.h	22;"	d
LUA_ERRMEM	lua.h	46;"	d
LUA_ERRRUN	lua.h	44;"	d
LUA_ERRSYNTAX	lua.h	45;"	d
LUA_EXECDIR	luaconf.h	61;"	d
LUA_FFILIBNAME	lualib.h	23;"	d
LUA_FILEHANDLE	lualib.h	11;"	d
LUA_GCCOLLECT	lua.h	223;"	d
LUA_GCCOUNT	lua.h	224;"	d
LUA_GCCOUNTB	lua.h	225;"	d
LUA_GCRESTART	lua.h	222;"	d
LUA_GCSETPAUSE	lua.h	227;"	d
LUA_GCSETSTEPMUL	lua.h	228;"	d
LUA_GCSTEP	lua.h	226;"	d
LUA_GCSTOP	lua.h	221;"	d
LUA_GLOBALSINDEX	lua.h	38;"	d
LUA_HOOKCALL	lua.h	311;"	d
LUA_HOOKCOUNT	lua.h	314;"	d
LUA_HOOKLINE	lua.h	313;"	d
LUA_HOOKRET	lua.h	312;"	d
LUA_HOOKTAILRET	lua.h	315;"	d
LUA_IDSIZE	luaconf.h	92;"	d
LUA_IGMARK	luaconf.h	62;"	d
LUA_INIT	luaconf.h	51;"	d
LUA_INTEGER	luaconf.h	91;"	d
LUA_INTFRMLEN	luaconf.h	105;"	d
LUA_INTFRM_T	luaconf.h	106;"	d
LUA_IOLIBNAME	lualib.h	17;"	d
LUA_JDIR	luaconf.h	33;"	d
LUA_JDIR	luaconf.h	38;"	d
LUA_JITLIBNAME	lualib.h	22;"	d
LUA_LDIR	luaconf.h	18;"	d
LUA_LDIR	luaconf.h	30;"	d
LUA_LIB	lib_aux.c	14;"	d	file:
LUA_LIB	lib_base.c	12;"	d	file:
LUA_LIB	lib_bit.c	7;"	d	file:
LUA_LIB	lib_debug.c	10;"	d	file:
LUA_LIB	lib_ffi.c	7;"	d	file:
LUA_LIB	lib_init.c	8;"	d	file:
LUA_LIB	lib_io.c	13;"	d	file:
LUA_LIB	lib_jit.c	7;"	d	file:
LUA_LIB	lib_math.c	9;"	d	file:
LUA_LIB	lib_os.c	14;"	d	file:
LUA_LIB	lib_package.c	10;"	d	file:
LUA_LIB	lib_string.c	12;"	d	file:
LUA_LIB	lib_table.c	10;"	d	file:
LUA_LOADLIBNAME	lualib.h	19;"	d
LUA_MASKCALL	lua.h	321;"	d
LUA_MASKCOUNT	lua.h	324;"	d
LUA_MASKLINE	lua.h	323;"	d
LUA_MASKRET	lua.h	322;"	d
LUA_MATHLIBNAME	lualib.h	14;"	d
LUA_MAXCAPTURES	luaconf.h	76;"	d
LUA_MAXINPUT	luaconf.h	87;"	d
LUA_MINSTACK	lua.h	87;"	d
LUA_MULTRET	lua.h	30;"	d
LUA_NOREF	lauxlib.h	154;"	d
LUA_NUMBER	luaconf.h	99;"	d
LUA_NUMBER_DOUBLE	luaconf.h	98;"	d
LUA_NUMBER_FMT	luaconf.h	102;"	d
LUA_NUMBER_SCAN	luaconf.h	101;"	d
LUA_OSLIBNAME	lualib.h	18;"	d
LUA_PATH	luaconf.h	49;"	d
LUA_PATHSEP	luaconf.h	59;"	d
LUA_PATH_CONFIG	luaconf.h	63;"	d
LUA_PATH_DEFAULT	luaconf.h	20;"	d
LUA_PATH_DEFAULT	luaconf.h	42;"	d
LUA_PATH_MARK	luaconf.h	60;"	d
LUA_PROGNAME	luaconf.h	84;"	d
LUA_PROMPT	luaconf.h	85;"	d
LUA_PROMPT2	luaconf.h	86;"	d
LUA_QL	host/minilua.c	142;"	d	file:
LUA_QL	luaconf.h	68;"	d
LUA_QS	luaconf.h	69;"	d
LUA_REFNIL	lauxlib.h	155;"	d
LUA_REGISTRYINDEX	lua.h	36;"	d
LUA_RELEASE	lua.h	20;"	d
LUA_ROOT	luaconf.h	29;"	d
LUA_SIGNATURE	lua.h	27;"	d
LUA_STRLIBNAME	lualib.h	15;"	d
LUA_TABLIBNAME	lualib.h	16;"	d
LUA_TBOOLEAN	lua.h	75;"	d
LUA_TCDATA	lj_obj.h	171;"	d
LUA_TFUNCTION	lua.h	80;"	d
LUA_TLIGHTUSERDATA	lua.h	76;"	d
LUA_TNIL	lua.h	74;"	d
LUA_TNONE	lua.h	72;"	d
LUA_TNUMBER	lua.h	77;"	d
LUA_TPROTO	lj_obj.h	170;"	d
LUA_TSTRING	lua.h	78;"	d
LUA_TTABLE	lua.h	79;"	d
LUA_TTHREAD	lua.h	82;"	d
LUA_TUSERDATA	lua.h	81;"	d
LUA_VERSION	lua.h	19;"	d
LUA_VERSION_NUM	lua.h	21;"	d
LUA_XCPATH	luaconf.h	36;"	d
LUA_XCPATH	luaconf.h	40;"	d
LUA_XPATH	luaconf.h	34;"	d
LUA_XPATH	luaconf.h	39;"	d
LUA_YIELD	lua.h	43;"	d
L_ESC	lib_string.c	185;"	d	file:
L_Umaxalign	host/minilua.c	/^typedef union{double u;void*s;long l;}L_Umaxalign;$/;"	t	typeref:union:__anon7	file:
LanguageHandler	lj_err.c	/^  PEXCEPTION_ROUTINE LanguageHandler;$/;"	m	struct:UndocumentedDispatcherContext	file:
LexState	host/minilua.c	/^typedef struct LexState{$/;"	s	file:
LexState	host/minilua.c	/^}LexState;$/;"	t	typeref:struct:LexState	file:
LexState	lj_lex.h	/^typedef struct LexState {$/;"	s
LexState	lj_lex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LexToken	lj_lex.h	/^typedef int LexToken;$/;"	t
LibDefFunc	host/buildvm_lib.c	/^typedef void (*LibDefFunc)(BuildCtx *ctx, char *p, int arg);$/;"	t	file:
LibDefHandler	host/buildvm_lib.c	/^typedef struct LibDefHandler {$/;"	s	file:
LibDefHandler	host/buildvm_lib.c	/^} LibDefHandler;$/;"	t	typeref:struct:LibDefHandler	file:
LoadF	host/minilua.c	/^typedef struct LoadF{$/;"	s	file:
LoadF	host/minilua.c	/^}LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadS	host/minilua.c	/^typedef struct LoadS{$/;"	s	file:
LoadS	host/minilua.c	/^}LoadS;$/;"	t	typeref:struct:LoadS	file:
LocVar	host/minilua.c	/^typedef struct LocVar{$/;"	s	file:
LocVar	host/minilua.c	/^}LocVar;$/;"	t	typeref:struct:LocVar	file:
LoopEvent	lj_record.c	/^} LoopEvent;$/;"	t	typeref:enum:__anon110	file:
MACOSX_DEPLOYMENT_TARGET	Makefile	/^    export MACOSX_DEPLOYMENT_TARGET=10.4$/;"	m
MAJVER	Makefile	/^MAJVER=  2$/;"	m
MALLOC_ALIGNMENT	lj_alloc.c	38;"	d	file:
MAP_ANONYMOUS	lj_alloc.c	173;"	d	file:
MAP_ANONYMOUS	lj_ccallback.c	214;"	d	file:
MAP_ANONYMOUS	lj_mcode.c	92;"	d	file:
MASK0	host/minilua.c	927;"	d	file:
MASK1	host/minilua.c	926;"	d	file:
MAX_FMTITEM	lib_string.c	702;"	d	file:
MAX_FMTSPEC	lib_string.c	709;"	d	file:
MAX_FOLD	lj_iropt.h	/^  MAX_FOLD$/;"	e	enum:__anon23
MAX_RELEASE_CHECK_RATE	lj_alloc.c	43;"	d	file:
MAX_REQUEST	lj_alloc.c	333;"	d	file:
MAX_SIZE_T	lj_alloc.c	37;"	d	file:
MAX_SMALL_REQUEST	lj_alloc.c	433;"	d	file:
MAX_SMALL_SIZE	lj_alloc.c	432;"	d	file:
MCHUNK_SIZE	lj_alloc.c	313;"	d	file:
MCLIM_REDZONE	lj_asm.c	112;"	d	file:
MCLabel	lj_emit_arm.h	/^typedef MCode *MCLabel;$/;"	t
MCLabel	lj_emit_mips.h	/^typedef MCode *MCLabel;$/;"	t
MCLabel	lj_emit_ppc.h	/^typedef MCode *MCLabel;$/;"	t
MCLabel	lj_emit_x86.h	/^typedef MCode *MCLabel;$/;"	t
MCLink	lj_mcode.c	/^typedef struct MCLink {$/;"	s	file:
MCLink	lj_mcode.c	/^} MCLink;$/;"	t	typeref:struct:MCLink	file:
MCPROT_GEN	lj_mcode.c	160;"	d	file:
MCPROT_GEN	lj_mcode.c	178;"	d	file:
MCPROT_RUN	lj_mcode.c	161;"	d	file:
MCPROT_RUN	lj_mcode.c	179;"	d	file:
MCPROT_RW	lj_mcode.c	126;"	d	file:
MCPROT_RW	lj_mcode.c	62;"	d	file:
MCPROT_RW	lj_mcode.c	95;"	d	file:
MCPROT_RWX	lj_mcode.c	128;"	d	file:
MCPROT_RWX	lj_mcode.c	64;"	d	file:
MCPROT_RWX	lj_mcode.c	97;"	d	file:
MCPROT_RX	lj_mcode.c	127;"	d	file:
MCPROT_RX	lj_mcode.c	63;"	d	file:
MCPROT_RX	lj_mcode.c	96;"	d	file:
MCode	lj_jit.h	/^typedef uint32_t MCode;$/;"	t
MCode	lj_jit.h	/^typedef uint8_t MCode;$/;"	t
MFAIL	lj_alloc.c	70;"	d	file:
MINCOST	lj_asm.c	394;"	d	file:
MINILUA_LIBS	Makefile	/^MINILUA_LIBS= -lm$/;"	m
MINILUA_O	Makefile	/^MINILUA_O= host\/minilua.o$/;"	m
MINILUA_T	Makefile	/^  MINILUA_T= host\/minilua.exe$/;"	m
MINILUA_T	Makefile	/^MINILUA_T= host\/minilua$/;"	m
MINILUA_X	Makefile	/^    MINILUA_X= host\\minilua$/;"	m
MINILUA_X	Makefile	/^MINILUA_X= $(MINILUA_T)$/;"	m
MINVER	Makefile	/^MINVER=  0$/;"	m
MIN_CHUNK_SIZE	lj_alloc.c	323;"	d	file:
MIN_LARGE_SIZE	lj_alloc.c	431;"	d	file:
MIN_REQUEST	lj_alloc.c	334;"	d	file:
MIN_SMALL_INDEX	lj_alloc.c	511;"	d	file:
MIPSF_A	lj_target_mips.h	142;"	d
MIPSF_D	lj_target_mips.h	137;"	d
MIPSF_F	lj_target_mips.h	141;"	d
MIPSF_G	lj_target_mips.h	140;"	d
MIPSF_H	lj_target_mips.h	139;"	d
MIPSF_M	lj_target_mips.h	143;"	d
MIPSF_R	lj_target_mips.h	138;"	d
MIPSF_S	lj_target_mips.h	135;"	d
MIPSF_T	lj_target_mips.h	136;"	d
MIPSI_ABS_D	lj_target_mips.h	/^  MIPSI_ABS_D = 0x46200005,$/;"	e	enum:MIPSIns
MIPSI_ADDIU	lj_target_mips.h	/^  MIPSI_ADDIU = 0x24000000,$/;"	e	enum:MIPSIns
MIPSI_ADDU	lj_target_mips.h	/^  MIPSI_ADDU = 0x00000021,$/;"	e	enum:MIPSIns
MIPSI_ADD_D	lj_target_mips.h	/^  MIPSI_ADD_D = 0x46200000,$/;"	e	enum:MIPSIns
MIPSI_ADD_S	lj_target_mips.h	/^  MIPSI_ADD_S = 0x46000000,$/;"	e	enum:MIPSIns
MIPSI_AND	lj_target_mips.h	/^  MIPSI_AND = 0x00000024,$/;"	e	enum:MIPSIns
MIPSI_ANDI	lj_target_mips.h	/^  MIPSI_ANDI = 0x30000000,$/;"	e	enum:MIPSIns
MIPSI_B	lj_target_mips.h	/^  MIPSI_B = 0x10000000,$/;"	e	enum:MIPSIns
MIPSI_BC1F	lj_target_mips.h	/^  MIPSI_BC1F = 0x45000000,$/;"	e	enum:MIPSIns
MIPSI_BC1T	lj_target_mips.h	/^  MIPSI_BC1T = 0x45010000,$/;"	e	enum:MIPSIns
MIPSI_BEQ	lj_target_mips.h	/^  MIPSI_BEQ = 0x10000000,$/;"	e	enum:MIPSIns
MIPSI_BGEZ	lj_target_mips.h	/^  MIPSI_BGEZ = 0x04010000,$/;"	e	enum:MIPSIns
MIPSI_BGTZ	lj_target_mips.h	/^  MIPSI_BGTZ = 0x1c000000,$/;"	e	enum:MIPSIns
MIPSI_BLEZ	lj_target_mips.h	/^  MIPSI_BLEZ = 0x18000000,$/;"	e	enum:MIPSIns
MIPSI_BLTZ	lj_target_mips.h	/^  MIPSI_BLTZ = 0x04000000,$/;"	e	enum:MIPSIns
MIPSI_BNE	lj_target_mips.h	/^  MIPSI_BNE = 0x14000000,$/;"	e	enum:MIPSIns
MIPSI_CVT_D_S	lj_target_mips.h	/^  MIPSI_CVT_D_S = 0x46000021,$/;"	e	enum:MIPSIns
MIPSI_CVT_D_W	lj_target_mips.h	/^  MIPSI_CVT_D_W = 0x46800021,$/;"	e	enum:MIPSIns
MIPSI_CVT_S_D	lj_target_mips.h	/^  MIPSI_CVT_S_D = 0x46200020,$/;"	e	enum:MIPSIns
MIPSI_CVT_S_W	lj_target_mips.h	/^  MIPSI_CVT_S_W = 0x46800020,$/;"	e	enum:MIPSIns
MIPSI_CVT_W_D	lj_target_mips.h	/^  MIPSI_CVT_W_D = 0x46200024,$/;"	e	enum:MIPSIns
MIPSI_CVT_W_S	lj_target_mips.h	/^  MIPSI_CVT_W_S = 0x46000024,$/;"	e	enum:MIPSIns
MIPSI_C_EQ_D	lj_target_mips.h	/^  MIPSI_C_EQ_D = 0x46200032,$/;"	e	enum:MIPSIns
MIPSI_C_OLE_D	lj_target_mips.h	/^  MIPSI_C_OLE_D = 0x46200036,$/;"	e	enum:MIPSIns
MIPSI_C_OLT_D	lj_target_mips.h	/^  MIPSI_C_OLT_D = 0x46200034,$/;"	e	enum:MIPSIns
MIPSI_C_ULE_D	lj_target_mips.h	/^  MIPSI_C_ULE_D = 0x46200037,$/;"	e	enum:MIPSIns
MIPSI_C_ULT_D	lj_target_mips.h	/^  MIPSI_C_ULT_D = 0x46200035,$/;"	e	enum:MIPSIns
MIPSI_DIV_D	lj_target_mips.h	/^  MIPSI_DIV_D = 0x46200003,$/;"	e	enum:MIPSIns
MIPSI_FLOOR_W_D	lj_target_mips.h	/^  MIPSI_FLOOR_W_D = 0x4620000f,$/;"	e	enum:MIPSIns
MIPSI_FLOOR_W_S	lj_target_mips.h	/^  MIPSI_FLOOR_W_S = 0x4600000f,$/;"	e	enum:MIPSIns
MIPSI_J	lj_target_mips.h	/^  MIPSI_J = 0x08000000,$/;"	e	enum:MIPSIns
MIPSI_JAL	lj_target_mips.h	/^  MIPSI_JAL = 0x0c000000,$/;"	e	enum:MIPSIns
MIPSI_JALR	lj_target_mips.h	/^  MIPSI_JALR = 0x0000f809,$/;"	e	enum:MIPSIns
MIPSI_JR	lj_target_mips.h	/^  MIPSI_JR = 0x00000008,$/;"	e	enum:MIPSIns
MIPSI_LB	lj_target_mips.h	/^  MIPSI_LB = 0x80000000,$/;"	e	enum:MIPSIns
MIPSI_LBU	lj_target_mips.h	/^  MIPSI_LBU = 0x90000000,$/;"	e	enum:MIPSIns
MIPSI_LDC1	lj_target_mips.h	/^  MIPSI_LDC1 = 0xd4000000,$/;"	e	enum:MIPSIns
MIPSI_LH	lj_target_mips.h	/^  MIPSI_LH = 0x84000000,$/;"	e	enum:MIPSIns
MIPSI_LHU	lj_target_mips.h	/^  MIPSI_LHU = 0x94000000,$/;"	e	enum:MIPSIns
MIPSI_LI	lj_target_mips.h	/^  MIPSI_LI = 0x24000000,$/;"	e	enum:MIPSIns
MIPSI_LU	lj_target_mips.h	/^  MIPSI_LU = 0x34000000,$/;"	e	enum:MIPSIns
MIPSI_LUI	lj_target_mips.h	/^  MIPSI_LUI = 0x3c000000,$/;"	e	enum:MIPSIns
MIPSI_LW	lj_target_mips.h	/^  MIPSI_LW = 0x8c000000,$/;"	e	enum:MIPSIns
MIPSI_LWC1	lj_target_mips.h	/^  MIPSI_LWC1 = 0xc4000000,$/;"	e	enum:MIPSIns
MIPSI_MFC1	lj_target_mips.h	/^  MIPSI_MFC1 = 0x44000000,$/;"	e	enum:MIPSIns
MIPSI_MOVE	lj_target_mips.h	/^  MIPSI_MOVE = 0x00000021,$/;"	e	enum:MIPSIns
MIPSI_MOVF_D	lj_target_mips.h	/^  MIPSI_MOVF_D = 0x46200011,$/;"	e	enum:MIPSIns
MIPSI_MOVN	lj_target_mips.h	/^  MIPSI_MOVN = 0x0000000b,$/;"	e	enum:MIPSIns
MIPSI_MOVT_D	lj_target_mips.h	/^  MIPSI_MOVT_D = 0x46210011,$/;"	e	enum:MIPSIns
MIPSI_MOVZ	lj_target_mips.h	/^  MIPSI_MOVZ = 0x0000000a,$/;"	e	enum:MIPSIns
MIPSI_MOV_D	lj_target_mips.h	/^  MIPSI_MOV_D = 0x46200006,$/;"	e	enum:MIPSIns
MIPSI_MOV_S	lj_target_mips.h	/^  MIPSI_MOV_S = 0x46000006,$/;"	e	enum:MIPSIns
MIPSI_MTC1	lj_target_mips.h	/^  MIPSI_MTC1 = 0x44800000,$/;"	e	enum:MIPSIns
MIPSI_MUL	lj_target_mips.h	/^  MIPSI_MUL = 0x70000002,$/;"	e	enum:MIPSIns
MIPSI_MUL_D	lj_target_mips.h	/^  MIPSI_MUL_D = 0x46200002,$/;"	e	enum:MIPSIns
MIPSI_NEG_D	lj_target_mips.h	/^  MIPSI_NEG_D = 0x46200007,$/;"	e	enum:MIPSIns
MIPSI_NOP	lj_target_mips.h	/^  MIPSI_NOP = 0x00000000,$/;"	e	enum:MIPSIns
MIPSI_NOR	lj_target_mips.h	/^  MIPSI_NOR = 0x00000027,$/;"	e	enum:MIPSIns
MIPSI_OR	lj_target_mips.h	/^  MIPSI_OR = 0x00000025,$/;"	e	enum:MIPSIns
MIPSI_ORI	lj_target_mips.h	/^  MIPSI_ORI = 0x34000000,$/;"	e	enum:MIPSIns
MIPSI_ROTR	lj_target_mips.h	/^  MIPSI_ROTR = 0x00200002,	\/* MIPS32R2 *\/$/;"	e	enum:MIPSIns
MIPSI_ROTRV	lj_target_mips.h	/^  MIPSI_ROTRV = 0x00000046,	\/* MIPS32R2 *\/$/;"	e	enum:MIPSIns
MIPSI_SB	lj_target_mips.h	/^  MIPSI_SB = 0xa0000000,$/;"	e	enum:MIPSIns
MIPSI_SDC1	lj_target_mips.h	/^  MIPSI_SDC1 = 0xf4000000,$/;"	e	enum:MIPSIns
MIPSI_SEB	lj_target_mips.h	/^  MIPSI_SEB = 0x7c000420,	\/* MIPS32R2 *\/$/;"	e	enum:MIPSIns
MIPSI_SEH	lj_target_mips.h	/^  MIPSI_SEH = 0x7c000620,	\/* MIPS32R2 *\/$/;"	e	enum:MIPSIns
MIPSI_SH	lj_target_mips.h	/^  MIPSI_SH = 0xa4000000,$/;"	e	enum:MIPSIns
MIPSI_SLL	lj_target_mips.h	/^  MIPSI_SLL = 0x00000000,$/;"	e	enum:MIPSIns
MIPSI_SLLV	lj_target_mips.h	/^  MIPSI_SLLV = 0x00000004,$/;"	e	enum:MIPSIns
MIPSI_SLT	lj_target_mips.h	/^  MIPSI_SLT = 0x0000002a,$/;"	e	enum:MIPSIns
MIPSI_SLTI	lj_target_mips.h	/^  MIPSI_SLTI = 0x28000000,$/;"	e	enum:MIPSIns
MIPSI_SLTIU	lj_target_mips.h	/^  MIPSI_SLTIU = 0x2c000000,$/;"	e	enum:MIPSIns
MIPSI_SLTU	lj_target_mips.h	/^  MIPSI_SLTU = 0x0000002b,$/;"	e	enum:MIPSIns
MIPSI_SQRT_D	lj_target_mips.h	/^  MIPSI_SQRT_D = 0x46200004,$/;"	e	enum:MIPSIns
MIPSI_SRA	lj_target_mips.h	/^  MIPSI_SRA = 0x00000003,$/;"	e	enum:MIPSIns
MIPSI_SRAV	lj_target_mips.h	/^  MIPSI_SRAV = 0x00000007,$/;"	e	enum:MIPSIns
MIPSI_SRL	lj_target_mips.h	/^  MIPSI_SRL = 0x00000002,$/;"	e	enum:MIPSIns
MIPSI_SRLV	lj_target_mips.h	/^  MIPSI_SRLV = 0x00000006,$/;"	e	enum:MIPSIns
MIPSI_SUBU	lj_target_mips.h	/^  MIPSI_SUBU = 0x00000023,$/;"	e	enum:MIPSIns
MIPSI_SUB_D	lj_target_mips.h	/^  MIPSI_SUB_D = 0x46200001,$/;"	e	enum:MIPSIns
MIPSI_SUB_S	lj_target_mips.h	/^  MIPSI_SUB_S = 0x46000001,$/;"	e	enum:MIPSIns
MIPSI_SW	lj_target_mips.h	/^  MIPSI_SW = 0xac000000,$/;"	e	enum:MIPSIns
MIPSI_SWC1	lj_target_mips.h	/^  MIPSI_SWC1 = 0xe4000000,$/;"	e	enum:MIPSIns
MIPSI_TRUNC_W_D	lj_target_mips.h	/^  MIPSI_TRUNC_W_D = 0x4620000d,$/;"	e	enum:MIPSIns
MIPSI_TRUNC_W_S	lj_target_mips.h	/^  MIPSI_TRUNC_W_S = 0x4600000d,$/;"	e	enum:MIPSIns
MIPSI_WSBH	lj_target_mips.h	/^  MIPSI_WSBH = 0x7c0000a0,	\/* MIPS32R2 *\/$/;"	e	enum:MIPSIns
MIPSI_XOR	lj_target_mips.h	/^  MIPSI_XOR = 0x00000026,$/;"	e	enum:MIPSIns
MIPSI_XORI	lj_target_mips.h	/^  MIPSI_XORI = 0x38000000,$/;"	e	enum:MIPSIns
MIPSIns	lj_target_mips.h	/^typedef enum MIPSIns {$/;"	g
MIPSIns	lj_target_mips.h	/^} MIPSIns;$/;"	t	typeref:enum:MIPSIns
MIPS_SPAREJUMP	lj_asm_mips.h	62;"	d
MMAP_FLAGS	lj_alloc.c	175;"	d	file:
MMAP_PROT	lj_alloc.c	171;"	d	file:
MMAP_REGION_END	lj_alloc.c	204;"	d	file:
MMAP_REGION_START	lj_alloc.c	200;"	d	file:
MMAP_REGION_START	lj_alloc.c	202;"	d	file:
MMDEF	lj_obj.h	/^MMDEF(MMENUM)$/;"	e	enum:__anon108
MMDEF	lj_obj.h	458;"	d
MMDEF_FFI	lj_obj.h	445;"	d
MMDEF_FFI	lj_obj.h	447;"	d
MMDEF_PAIRS	lj_obj.h	451;"	d
MMDEF_PAIRS	lj_obj.h	453;"	d
MMENUM	lj_obj.h	468;"	d
MMENUM	lj_obj.h	470;"	d
MMNAME	lj_meta.c	28;"	d	file:
MMNAME	lj_meta.c	30;"	d	file:
MMS	lj_obj.h	/^} MMS;$/;"	t	typeref:enum:__anon108
MM_FAST	lj_obj.h	/^  MM_FAST = MM_len$/;"	e	enum:__anon108
MM__MAX	lj_obj.h	/^  MM__MAX,$/;"	e	enum:__anon108
MM____	lj_obj.h	/^  MM____ = MM__MAX,$/;"	e	enum:__anon108
MM_ipairs	lj_obj.h	455;"	d
MM_pairs	lj_obj.h	454;"	d
MODRM	lj_emit_x86.h	8;"	d
MRef	lj_obj.h	/^typedef struct MRef {$/;"	s
MRef	lj_obj.h	/^} MRef;$/;"	t	typeref:struct:MRef
MSize	lj_obj.h	/^typedef uint32_t MSize;$/;"	t
MTDLL	msvcbuild.bat	/^:MTDLL$/;"	l
MatchState	host/minilua.c	/^typedef struct MatchState{$/;"	s	file:
MatchState	host/minilua.c	/^}MatchState;$/;"	t	typeref:struct:MatchState	file:
MatchState	lib_string.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	lib_string.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	host/minilua.c	/^typedef struct Mbuffer{$/;"	s	file:
Mbuffer	host/minilua.c	/^}Mbuffer;$/;"	t	typeref:struct:Mbuffer	file:
NAME_BREAK	lj_parse.c	109;"	d	file:
NARROWINS	lj_opt_narrow.c	199;"	d	file:
NARROW_CONV	lj_opt_narrow.c	/^  NARROW_CONV,		\/* Push conversion of ref. *\/$/;"	e	enum:__anon111	file:
NARROW_INT	lj_opt_narrow.c	/^  NARROW_INT		\/* Push KINT ref. The next code holds an int32_t. *\/$/;"	e	enum:__anon111	file:
NARROW_MAX_BACKPROP	lj_opt_narrow.c	183;"	d	file:
NARROW_MAX_STACK	lj_opt_narrow.c	184;"	d	file:
NARROW_REF	lj_opt_narrow.c	/^  NARROW_REF,		\/* Push ref. *\/$/;"	e	enum:__anon111	file:
NARROW_SEXT	lj_opt_narrow.c	/^  NARROW_SEXT,		\/* Push sign-extension of ref. *\/$/;"	e	enum:__anon111	file:
NEXTFOLD	lj_iropt.h	/^  NEXTFOLD,		\/* Couldn't fold, pass on. *\/$/;"	e	enum:__anon23
NODEBUG	msvcbuild.bat	/^:NODEBUG$/;"	l
NODOTABIVER	Makefile	/^NODOTABIVER= 51$/;"	m
NO_BCPOS	lj_debug.c	49;"	d	file:
NO_JMP	lj_bc.h	31;"	d
NO_REG	lj_bc.h	30;"	d
NRELOCSYM	host/buildvm.c	119;"	d	file:
NSMALLBINS	lj_alloc.c	426;"	d	file:
NTAVM_ZEROBITS	lj_alloc.c	90;"	d	file:
NTREEBINS	lj_alloc.c	427;"	d	file:
NarrowConv	lj_opt_narrow.c	/^typedef struct NarrowConv {$/;"	s	file:
NarrowConv	lj_opt_narrow.c	/^} NarrowConv;$/;"	t	typeref:struct:NarrowConv	file:
NarrowIns	lj_opt_narrow.c	/^typedef uint32_t NarrowIns;$/;"	t	file:
Node	host/minilua.c	/^typedef struct Node{$/;"	s	file:
Node	host/minilua.c	/^}Node;$/;"	t	typeref:struct:Node	file:
Node	lj_obj.h	/^typedef struct Node {$/;"	s
Node	lj_obj.h	/^} Node;$/;"	t	typeref:struct:Node
OPR_ADD	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_ADD	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OPR_AND	host/minilua.c	/^OPR_AND,OPR_OR,$/;"	e	enum:BinOpr	file:
OPR_AND	lj_parse.c	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr	file:
OPR_CONCAT	host/minilua.c	/^OPR_CONCAT,$/;"	e	enum:BinOpr	file:
OPR_CONCAT	lj_parse.c	/^  OPR_CONCAT,$/;"	e	enum:BinOpr	file:
OPR_DIV	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_DIV	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OPR_EQ	host/minilua.c	/^OPR_NE,OPR_EQ,$/;"	e	enum:BinOpr	file:
OPR_EQ	lj_parse.c	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr	file:
OPR_GE	host/minilua.c	/^OPR_LT,OPR_LE,OPR_GT,OPR_GE,$/;"	e	enum:BinOpr	file:
OPR_GE	lj_parse.c	/^  OPR_LT, OPR_GE, OPR_LE, OPR_GT,$/;"	e	enum:BinOpr	file:
OPR_GT	host/minilua.c	/^OPR_LT,OPR_LE,OPR_GT,OPR_GE,$/;"	e	enum:BinOpr	file:
OPR_GT	lj_parse.c	/^  OPR_LT, OPR_GE, OPR_LE, OPR_GT,$/;"	e	enum:BinOpr	file:
OPR_LE	host/minilua.c	/^OPR_LT,OPR_LE,OPR_GT,OPR_GE,$/;"	e	enum:BinOpr	file:
OPR_LE	lj_parse.c	/^  OPR_LT, OPR_GE, OPR_LE, OPR_GT,$/;"	e	enum:BinOpr	file:
OPR_LEN	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	e	enum:UnOpr	file:
OPR_LT	host/minilua.c	/^OPR_LT,OPR_LE,OPR_GT,OPR_GE,$/;"	e	enum:BinOpr	file:
OPR_LT	lj_parse.c	/^  OPR_LT, OPR_GE, OPR_LE, OPR_GT,$/;"	e	enum:BinOpr	file:
OPR_MINUS	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	e	enum:UnOpr	file:
OPR_MOD	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_MOD	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OPR_MUL	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_MUL	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OPR_NE	host/minilua.c	/^OPR_NE,OPR_EQ,$/;"	e	enum:BinOpr	file:
OPR_NE	lj_parse.c	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr	file:
OPR_NOBINOPR	host/minilua.c	/^OPR_NOBINOPR$/;"	e	enum:BinOpr	file:
OPR_NOBINOPR	lj_parse.c	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr	file:
OPR_NOT	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	e	enum:UnOpr	file:
OPR_NOUNOPR	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	e	enum:UnOpr	file:
OPR_OR	host/minilua.c	/^OPR_AND,OPR_OR,$/;"	e	enum:BinOpr	file:
OPR_OR	lj_parse.c	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr	file:
OPR_POW	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_POW	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OPR_SUB	host/minilua.c	/^OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,$/;"	e	enum:BinOpr	file:
OPR_SUB	lj_parse.c	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,  \/* ORDER ARITH *\/$/;"	e	enum:BinOpr	file:
OP_ADD	host/minilua.c	/^OP_ADD,$/;"	e	enum:__anon5	file:
OP_CALL	host/minilua.c	/^OP_CALL,$/;"	e	enum:__anon5	file:
OP_CLOSE	host/minilua.c	/^OP_CLOSE,$/;"	e	enum:__anon5	file:
OP_CLOSURE	host/minilua.c	/^OP_CLOSURE,$/;"	e	enum:__anon5	file:
OP_CONCAT	host/minilua.c	/^OP_CONCAT,$/;"	e	enum:__anon5	file:
OP_DIV	host/minilua.c	/^OP_DIV,$/;"	e	enum:__anon5	file:
OP_EQ	host/minilua.c	/^OP_EQ,$/;"	e	enum:__anon5	file:
OP_FORLOOP	host/minilua.c	/^OP_FORLOOP,$/;"	e	enum:__anon5	file:
OP_FORPREP	host/minilua.c	/^OP_FORPREP,$/;"	e	enum:__anon5	file:
OP_GETGLOBAL	host/minilua.c	/^OP_GETGLOBAL,$/;"	e	enum:__anon5	file:
OP_GETTABLE	host/minilua.c	/^OP_GETTABLE,$/;"	e	enum:__anon5	file:
OP_GETUPVAL	host/minilua.c	/^OP_GETUPVAL,$/;"	e	enum:__anon5	file:
OP_JMP	host/minilua.c	/^OP_JMP,$/;"	e	enum:__anon5	file:
OP_LE	host/minilua.c	/^OP_LE,$/;"	e	enum:__anon5	file:
OP_LEN	host/minilua.c	/^OP_LEN,$/;"	e	enum:__anon5	file:
OP_LOADBOOL	host/minilua.c	/^OP_LOADBOOL,$/;"	e	enum:__anon5	file:
OP_LOADK	host/minilua.c	/^OP_LOADK,$/;"	e	enum:__anon5	file:
OP_LOADNIL	host/minilua.c	/^OP_LOADNIL,$/;"	e	enum:__anon5	file:
OP_LT	host/minilua.c	/^OP_LT,$/;"	e	enum:__anon5	file:
OP_MOD	host/minilua.c	/^OP_MOD,$/;"	e	enum:__anon5	file:
OP_MOVE	host/minilua.c	/^OP_MOVE,$/;"	e	enum:__anon5	file:
OP_MUL	host/minilua.c	/^OP_MUL,$/;"	e	enum:__anon5	file:
OP_NEWTABLE	host/minilua.c	/^OP_NEWTABLE,$/;"	e	enum:__anon5	file:
OP_NOT	host/minilua.c	/^OP_NOT,$/;"	e	enum:__anon5	file:
OP_POW	host/minilua.c	/^OP_POW,$/;"	e	enum:__anon5	file:
OP_RETURN	host/minilua.c	/^OP_RETURN,$/;"	e	enum:__anon5	file:
OP_SELF	host/minilua.c	/^OP_SELF,$/;"	e	enum:__anon5	file:
OP_SETGLOBAL	host/minilua.c	/^OP_SETGLOBAL,$/;"	e	enum:__anon5	file:
OP_SETLIST	host/minilua.c	/^OP_SETLIST,$/;"	e	enum:__anon5	file:
OP_SETTABLE	host/minilua.c	/^OP_SETTABLE,$/;"	e	enum:__anon5	file:
OP_SETUPVAL	host/minilua.c	/^OP_SETUPVAL,$/;"	e	enum:__anon5	file:
OP_SUB	host/minilua.c	/^OP_SUB,$/;"	e	enum:__anon5	file:
OP_TAILCALL	host/minilua.c	/^OP_TAILCALL,$/;"	e	enum:__anon5	file:
OP_TEST	host/minilua.c	/^OP_TEST,$/;"	e	enum:__anon5	file:
OP_TESTSET	host/minilua.c	/^OP_TESTSET,$/;"	e	enum:__anon5	file:
OP_TFORLOOP	host/minilua.c	/^OP_TFORLOOP,$/;"	e	enum:__anon5	file:
OP_UNM	host/minilua.c	/^OP_UNM,$/;"	e	enum:__anon5	file:
OP_VARARG	host/minilua.c	/^OP_VARARG$/;"	e	enum:__anon5	file:
OpArgK	host/minilua.c	/^OpArgK$/;"	e	enum:OpArgMask	file:
OpArgMask	host/minilua.c	/^enum OpArgMask{$/;"	g	file:
OpArgN	host/minilua.c	/^OpArgN,$/;"	e	enum:OpArgMask	file:
OpArgR	host/minilua.c	/^OpArgR,$/;"	e	enum:OpArgMask	file:
OpArgU	host/minilua.c	/^OpArgU,$/;"	e	enum:OpArgMask	file:
OpCode	host/minilua.c	/^}OpCode;$/;"	t	typeref:enum:__anon5	file:
OpMode	host/minilua.c	/^enum OpMode{iABC,iABx,iAsBx};$/;"	g	file:
PACKAGE_ERR_FUNC	lib_package.c	24;"	d	file:
PACKAGE_ERR_LIB	lib_package.c	23;"	d	file:
PACKAGE_ERR_LOAD	lib_package.c	25;"	d	file:
PACKAGE_LIB_FAIL	lib_package.c	146;"	d	file:
PACKAGE_LIB_FAIL	lib_package.c	147;"	d	file:
PACKAGE_LIB_FAIL	lib_package.c	28;"	d	file:
PC2PROTO	host/buildvm_arch.h	1462;"	d
PENALTY_MAX	lj_jit.h	267;"	d
PENALTY_MIN	lj_jit.h	266;"	d
PENALTY_RNDBITS	lj_jit.h	268;"	d
PENALTY_SLOTS	lj_jit.h	265;"	d
PEOBJ_ARCH_TARGET	host/buildvm_peobj.c	84;"	d	file:
PEOBJ_ARCH_TARGET	host/buildvm_peobj.c	88;"	d	file:
PEOBJ_NSECTIONS	host/buildvm_peobj.c	/^  PEOBJ_NSECTIONS$/;"	e	enum:__anon3	file:
PEOBJ_RELOC_ADDR32NB	host/buildvm_peobj.c	91;"	d	file:
PEOBJ_RELOC_DIR32	host/buildvm_peobj.c	86;"	d	file:
PEOBJ_RELOC_DIR32	host/buildvm_peobj.c	90;"	d	file:
PEOBJ_RELOC_REL32	host/buildvm_peobj.c	85;"	d	file:
PEOBJ_RELOC_REL32	host/buildvm_peobj.c	89;"	d	file:
PEOBJ_RELOC_SIZE	host/buildvm_peobj.c	53;"	d	file:
PEOBJ_SCL_EXTERN	host/buildvm_peobj.c	112;"	d	file:
PEOBJ_SCL_STATIC	host/buildvm_peobj.c	113;"	d	file:
PEOBJ_SECT_ABS	host/buildvm_peobj.c	/^  PEOBJ_SECT_ABS = -2,$/;"	e	enum:__anon3	file:
PEOBJ_SECT_PDATA	host/buildvm_peobj.c	/^  PEOBJ_SECT_PDATA,$/;"	e	enum:__anon3	file:
PEOBJ_SECT_RDATA_Z	host/buildvm_peobj.c	/^  PEOBJ_SECT_RDATA_Z,$/;"	e	enum:__anon3	file:
PEOBJ_SECT_TEXT	host/buildvm_peobj.c	/^  PEOBJ_SECT_TEXT,$/;"	e	enum:__anon3	file:
PEOBJ_SECT_UNDEF	host/buildvm_peobj.c	/^  PEOBJ_SECT_UNDEF = -1,$/;"	e	enum:__anon3	file:
PEOBJ_SECT_XDATA	host/buildvm_peobj.c	/^  PEOBJ_SECT_XDATA,$/;"	e	enum:__anon3	file:
PEOBJ_SYM_SIZE	host/buildvm_peobj.c	80;"	d	file:
PEOBJ_TYPE_FUNC	host/buildvm_peobj.c	109;"	d	file:
PEOBJ_TYPE_NULL	host/buildvm_peobj.c	108;"	d	file:
PEheader	host/buildvm_peobj.c	/^typedef struct PEheader {$/;"	s	file:
PEheader	host/buildvm_peobj.c	/^} PEheader;$/;"	t	typeref:struct:PEheader	file:
PEreloc	host/buildvm_peobj.c	/^typedef struct PEreloc {$/;"	s	file:
PEreloc	host/buildvm_peobj.c	/^} PEreloc;$/;"	t	typeref:struct:PEreloc	file:
PEsection	host/buildvm_peobj.c	/^typedef struct PEsection {$/;"	s	file:
PEsection	host/buildvm_peobj.c	/^} PEsection;$/;"	t	typeref:struct:PEsection	file:
PEsym	host/buildvm_peobj.c	/^typedef struct PEsym {$/;"	s	file:
PEsym	host/buildvm_peobj.c	/^} PEsym;$/;"	t	typeref:struct:PEsym	file:
PEsymaux	host/buildvm_peobj.c	/^typedef struct PEsymaux {$/;"	s	file:
PEsymaux	host/buildvm_peobj.c	/^} PEsymaux;$/;"	t	typeref:struct:PEsymaux	file:
PHIBARRIER	lj_opt_fold.c	154;"	d	file:
PINUSE_BIT	lj_alloc.c	346;"	d	file:
PNTAVM	lj_alloc.c	/^typedef long (*PNTAVM)(HANDLE handle, void **addr, ULONG zbits,$/;"	t	file:
PPCCC	lj_target_ppc.h	/^typedef enum PPCCC {$/;"	g
PPCCC	lj_target_ppc.h	/^} PPCCC;$/;"	t	typeref:enum:PPCCC
PPCF_A	lj_target_ppc.h	129;"	d
PPCF_B	lj_target_ppc.h	130;"	d
PPCF_C	lj_target_ppc.h	131;"	d
PPCF_CC	lj_target_ppc.h	127;"	d
PPCF_DOT	lj_target_ppc.h	135;"	d
PPCF_MB	lj_target_ppc.h	132;"	d
PPCF_ME	lj_target_ppc.h	133;"	d
PPCF_T	lj_target_ppc.h	128;"	d
PPCF_Y	lj_target_ppc.h	134;"	d
PPCI_ADD	lj_target_ppc.h	/^  PPCI_ADD = 0x7c000214,$/;"	e	enum:PPCIns
PPCI_ADDC	lj_target_ppc.h	/^  PPCI_ADDC = 0x7c000014,$/;"	e	enum:PPCIns
PPCI_ADDE	lj_target_ppc.h	/^  PPCI_ADDE = 0x7c000114,$/;"	e	enum:PPCIns
PPCI_ADDI	lj_target_ppc.h	/^  PPCI_ADDI = 0x38000000,$/;"	e	enum:PPCIns
PPCI_ADDIC	lj_target_ppc.h	/^  PPCI_ADDIC = 0x30000000,$/;"	e	enum:PPCIns
PPCI_ADDICDOT	lj_target_ppc.h	/^  PPCI_ADDICDOT = 0x34000000,$/;"	e	enum:PPCIns
PPCI_ADDIS	lj_target_ppc.h	/^  PPCI_ADDIS = 0x3c000000,$/;"	e	enum:PPCIns
PPCI_ADDME	lj_target_ppc.h	/^  PPCI_ADDME = 0x7c0001d4,$/;"	e	enum:PPCIns
PPCI_ADDO	lj_target_ppc.h	/^  PPCI_ADDO = 0x7c000614,$/;"	e	enum:PPCIns
PPCI_ADDZE	lj_target_ppc.h	/^  PPCI_ADDZE = 0x7c000194,$/;"	e	enum:PPCIns
PPCI_AND	lj_target_ppc.h	/^  PPCI_AND = 0x7c000038,$/;"	e	enum:PPCIns
PPCI_ANDC	lj_target_ppc.h	/^  PPCI_ANDC = 0x7c000078,$/;"	e	enum:PPCIns
PPCI_ANDIDOT	lj_target_ppc.h	/^  PPCI_ANDIDOT = 0x70000000,$/;"	e	enum:PPCIns
PPCI_ANDISDOT	lj_target_ppc.h	/^  PPCI_ANDISDOT = 0x74000000,$/;"	e	enum:PPCIns
PPCI_B	lj_target_ppc.h	/^  PPCI_B = 0x48000000,$/;"	e	enum:PPCIns
PPCI_BC	lj_target_ppc.h	/^  PPCI_BC = 0x40800000,$/;"	e	enum:PPCIns
PPCI_BCL	lj_target_ppc.h	/^  PPCI_BCL = 0x40800001,$/;"	e	enum:PPCIns
PPCI_BCTR	lj_target_ppc.h	/^  PPCI_BCTR = 0x4e800420,$/;"	e	enum:PPCIns
PPCI_BCTRL	lj_target_ppc.h	/^  PPCI_BCTRL = 0x4e800421,$/;"	e	enum:PPCIns
PPCI_BL	lj_target_ppc.h	/^  PPCI_BL = 0x48000001,$/;"	e	enum:PPCIns
PPCI_CMPLW	lj_target_ppc.h	/^  PPCI_CMPLW = 0x7c000040,$/;"	e	enum:PPCIns
PPCI_CMPLWI	lj_target_ppc.h	/^  PPCI_CMPLWI = 0x28000000,$/;"	e	enum:PPCIns
PPCI_CMPW	lj_target_ppc.h	/^  PPCI_CMPW = 0x7c000000,$/;"	e	enum:PPCIns
PPCI_CMPWI	lj_target_ppc.h	/^  PPCI_CMPWI = 0x2c000000,$/;"	e	enum:PPCIns
PPCI_CRAND	lj_target_ppc.h	/^  PPCI_CRAND = 0x4c000202,$/;"	e	enum:PPCIns
PPCI_CRANDC	lj_target_ppc.h	/^  PPCI_CRANDC = 0x4c000102,$/;"	e	enum:PPCIns
PPCI_CREQV	lj_target_ppc.h	/^  PPCI_CREQV = 0x4c000242,$/;"	e	enum:PPCIns
PPCI_CROR	lj_target_ppc.h	/^  PPCI_CROR = 0x4c000382,$/;"	e	enum:PPCIns
PPCI_CRORC	lj_target_ppc.h	/^  PPCI_CRORC = 0x4c000342,$/;"	e	enum:PPCIns
PPCI_CRXOR	lj_target_ppc.h	/^  PPCI_CRXOR = 0x4c000182,$/;"	e	enum:PPCIns
PPCI_EQV	lj_target_ppc.h	/^  PPCI_EQV = 0x7c000238,$/;"	e	enum:PPCIns
PPCI_EXTSB	lj_target_ppc.h	/^  PPCI_EXTSB = 0x7c000774,$/;"	e	enum:PPCIns
PPCI_EXTSH	lj_target_ppc.h	/^  PPCI_EXTSH = 0x7c000734,$/;"	e	enum:PPCIns
PPCI_FABS	lj_target_ppc.h	/^  PPCI_FABS = 0xfc000210,$/;"	e	enum:PPCIns
PPCI_FADD	lj_target_ppc.h	/^  PPCI_FADD = 0xfc00002a,$/;"	e	enum:PPCIns
PPCI_FCMPU	lj_target_ppc.h	/^  PPCI_FCMPU = 0xfc000000,$/;"	e	enum:PPCIns
PPCI_FCTIWZ	lj_target_ppc.h	/^  PPCI_FCTIWZ = 0xfc00001e,$/;"	e	enum:PPCIns
PPCI_FDIV	lj_target_ppc.h	/^  PPCI_FDIV = 0xfc000024,$/;"	e	enum:PPCIns
PPCI_FMADD	lj_target_ppc.h	/^  PPCI_FMADD = 0xfc00003a,$/;"	e	enum:PPCIns
PPCI_FMR	lj_target_ppc.h	/^  PPCI_FMR = 0xfc000090,$/;"	e	enum:PPCIns
PPCI_FMSUB	lj_target_ppc.h	/^  PPCI_FMSUB = 0xfc000038,$/;"	e	enum:PPCIns
PPCI_FMUL	lj_target_ppc.h	/^  PPCI_FMUL = 0xfc000032,$/;"	e	enum:PPCIns
PPCI_FNEG	lj_target_ppc.h	/^  PPCI_FNEG = 0xfc000050,$/;"	e	enum:PPCIns
PPCI_FNMSUB	lj_target_ppc.h	/^  PPCI_FNMSUB = 0xfc00003c,$/;"	e	enum:PPCIns
PPCI_FRSP	lj_target_ppc.h	/^  PPCI_FRSP = 0xfc000018,$/;"	e	enum:PPCIns
PPCI_FSEL	lj_target_ppc.h	/^  PPCI_FSEL = 0xfc00002e,$/;"	e	enum:PPCIns
PPCI_FSQRT	lj_target_ppc.h	/^  PPCI_FSQRT = 0xfc00002c,$/;"	e	enum:PPCIns
PPCI_FSUB	lj_target_ppc.h	/^  PPCI_FSUB = 0xfc000028,$/;"	e	enum:PPCIns
PPCI_LBZ	lj_target_ppc.h	/^  PPCI_LBZ = 0x88000000,$/;"	e	enum:PPCIns
PPCI_LBZX	lj_target_ppc.h	/^  PPCI_LBZX = 0x7c0000ae,$/;"	e	enum:PPCIns
PPCI_LFD	lj_target_ppc.h	/^  PPCI_LFD = 0xc8000000,$/;"	e	enum:PPCIns
PPCI_LFDX	lj_target_ppc.h	/^  PPCI_LFDX = 0x7c0004ae,$/;"	e	enum:PPCIns
PPCI_LFS	lj_target_ppc.h	/^  PPCI_LFS = 0xc0000000,$/;"	e	enum:PPCIns
PPCI_LFSX	lj_target_ppc.h	/^  PPCI_LFSX = 0x7c00042e,$/;"	e	enum:PPCIns
PPCI_LHA	lj_target_ppc.h	/^  PPCI_LHA = 0xa8000000,$/;"	e	enum:PPCIns
PPCI_LHAX	lj_target_ppc.h	/^  PPCI_LHAX = 0x7c0002ae,$/;"	e	enum:PPCIns
PPCI_LHZ	lj_target_ppc.h	/^  PPCI_LHZ = 0xa0000000,$/;"	e	enum:PPCIns
PPCI_LHZX	lj_target_ppc.h	/^  PPCI_LHZX = 0x7c00022e,$/;"	e	enum:PPCIns
PPCI_LI	lj_target_ppc.h	/^  PPCI_LI = 0x38000000,$/;"	e	enum:PPCIns
PPCI_LIS	lj_target_ppc.h	/^  PPCI_LIS = 0x3c000000,$/;"	e	enum:PPCIns
PPCI_LWBRX	lj_target_ppc.h	/^  PPCI_LWBRX = 0x7c00042c,$/;"	e	enum:PPCIns
PPCI_LWZ	lj_target_ppc.h	/^  PPCI_LWZ = 0x80000000,$/;"	e	enum:PPCIns
PPCI_LWZX	lj_target_ppc.h	/^  PPCI_LWZX = 0x7c00002e,$/;"	e	enum:PPCIns
PPCI_MCRXR	lj_target_ppc.h	/^  PPCI_MCRXR = 0x7c000400,$/;"	e	enum:PPCIns
PPCI_MFLR	lj_target_ppc.h	/^  PPCI_MFLR = 0x7c0802a6,$/;"	e	enum:PPCIns
PPCI_MR	lj_target_ppc.h	/^  PPCI_MR = 0x7c000378,$/;"	e	enum:PPCIns
PPCI_MTCTR	lj_target_ppc.h	/^  PPCI_MTCTR = 0x7c0903a6,$/;"	e	enum:PPCIns
PPCI_MULLI	lj_target_ppc.h	/^  PPCI_MULLI = 0x1c000000,$/;"	e	enum:PPCIns
PPCI_MULLW	lj_target_ppc.h	/^  PPCI_MULLW = 0x7c0001d6,$/;"	e	enum:PPCIns
PPCI_MULLWO	lj_target_ppc.h	/^  PPCI_MULLWO = 0x7c0005d6,$/;"	e	enum:PPCIns
PPCI_NAND	lj_target_ppc.h	/^  PPCI_NAND = 0x7c0003b8,$/;"	e	enum:PPCIns
PPCI_NEG	lj_target_ppc.h	/^  PPCI_NEG = 0x7c0000d0,$/;"	e	enum:PPCIns
PPCI_NOP	lj_target_ppc.h	/^  PPCI_NOP = 0x60000000,$/;"	e	enum:PPCIns
PPCI_NOR	lj_target_ppc.h	/^  PPCI_NOR = 0x7c0000f8,$/;"	e	enum:PPCIns
PPCI_OR	lj_target_ppc.h	/^  PPCI_OR = 0x7c000378,$/;"	e	enum:PPCIns
PPCI_ORI	lj_target_ppc.h	/^  PPCI_ORI = 0x60000000,$/;"	e	enum:PPCIns
PPCI_ORIS	lj_target_ppc.h	/^  PPCI_ORIS = 0x64000000,$/;"	e	enum:PPCIns
PPCI_RLWIMI	lj_target_ppc.h	/^  PPCI_RLWIMI = 0x50000000,$/;"	e	enum:PPCIns
PPCI_RLWINM	lj_target_ppc.h	/^  PPCI_RLWINM = 0x54000000,$/;"	e	enum:PPCIns
PPCI_RLWNM	lj_target_ppc.h	/^  PPCI_RLWNM = 0x5c000000,$/;"	e	enum:PPCIns
PPCI_SLW	lj_target_ppc.h	/^  PPCI_SLW = 0x7c000030,$/;"	e	enum:PPCIns
PPCI_SRAW	lj_target_ppc.h	/^  PPCI_SRAW = 0x7c000630,$/;"	e	enum:PPCIns
PPCI_SRAWI	lj_target_ppc.h	/^  PPCI_SRAWI = 0x7c000670,$/;"	e	enum:PPCIns
PPCI_SRW	lj_target_ppc.h	/^  PPCI_SRW = 0x7c000430,$/;"	e	enum:PPCIns
PPCI_STB	lj_target_ppc.h	/^  PPCI_STB = 0x98000000,$/;"	e	enum:PPCIns
PPCI_STBX	lj_target_ppc.h	/^  PPCI_STBX = 0x7c0001ae,$/;"	e	enum:PPCIns
PPCI_STFD	lj_target_ppc.h	/^  PPCI_STFD = 0xd8000000,$/;"	e	enum:PPCIns
PPCI_STFDX	lj_target_ppc.h	/^  PPCI_STFDX = 0x7c0005ae,$/;"	e	enum:PPCIns
PPCI_STFS	lj_target_ppc.h	/^  PPCI_STFS = 0xd0000000,$/;"	e	enum:PPCIns
PPCI_STFSX	lj_target_ppc.h	/^  PPCI_STFSX = 0x7c00052e,$/;"	e	enum:PPCIns
PPCI_STH	lj_target_ppc.h	/^  PPCI_STH = 0xb0000000,$/;"	e	enum:PPCIns
PPCI_STHX	lj_target_ppc.h	/^  PPCI_STHX = 0x7c00032e,$/;"	e	enum:PPCIns
PPCI_STW	lj_target_ppc.h	/^  PPCI_STW = 0x90000000,$/;"	e	enum:PPCIns
PPCI_STWBRX	lj_target_ppc.h	/^  PPCI_STWBRX = 0x7c00052c,$/;"	e	enum:PPCIns
PPCI_STWU	lj_target_ppc.h	/^  PPCI_STWU = 0x94000000,$/;"	e	enum:PPCIns
PPCI_STWX	lj_target_ppc.h	/^  PPCI_STWX = 0x7c00012e,$/;"	e	enum:PPCIns
PPCI_SUBF	lj_target_ppc.h	/^  PPCI_SUBF = 0x7c000050,$/;"	e	enum:PPCIns
PPCI_SUBFC	lj_target_ppc.h	/^  PPCI_SUBFC = 0x7c000010,$/;"	e	enum:PPCIns
PPCI_SUBFE	lj_target_ppc.h	/^  PPCI_SUBFE = 0x7c000110,$/;"	e	enum:PPCIns
PPCI_SUBFIC	lj_target_ppc.h	/^  PPCI_SUBFIC = 0x20000000,$/;"	e	enum:PPCIns
PPCI_SUBFME	lj_target_ppc.h	/^  PPCI_SUBFME = 0x7c0001d0,$/;"	e	enum:PPCIns
PPCI_SUBFO	lj_target_ppc.h	/^  PPCI_SUBFO = 0x7c000450,$/;"	e	enum:PPCIns
PPCI_SUBFZE	lj_target_ppc.h	/^  PPCI_SUBFZE = 0x7c000190,$/;"	e	enum:PPCIns
PPCI_XOR	lj_target_ppc.h	/^  PPCI_XOR = 0x7c000278,$/;"	e	enum:PPCIns
PPCI_XORI	lj_target_ppc.h	/^  PPCI_XORI = 0x68000000,$/;"	e	enum:PPCIns
PPCI_XORIS	lj_target_ppc.h	/^  PPCI_XORIS = 0x6c000000,$/;"	e	enum:PPCIns
PPCIns	lj_target_ppc.h	/^typedef enum PPCIns {$/;"	g
PPCIns	lj_target_ppc.h	/^} PPCIns;$/;"	t	typeref:enum:PPCIns
PROTO_CHILD	lj_obj.h	313;"	d
PROTO_CLCOUNT	lj_obj.h	322;"	d
PROTO_CLC_BITS	lj_obj.h	323;"	d
PROTO_CLC_POLY	lj_obj.h	324;"	d
PROTO_FFI	lj_obj.h	315;"	d
PROTO_FIXUP_RETURN	lj_obj.h	320;"	d
PROTO_HAS_RETURN	lj_obj.h	319;"	d
PROTO_ILOOP	lj_obj.h	317;"	d
PROTO_NOJIT	lj_obj.h	316;"	d
PROTO_UV_IMMUTABLE	lj_obj.h	327;"	d
PROTO_UV_LOCAL	lj_obj.h	326;"	d
PROTO_VARARG	lj_obj.h	314;"	d
Pfunc	host/minilua.c	/^typedef void(*Pfunc)(lua_State*L,void*ud);$/;"	t	file:
PostProc	lj_jit.h	/^} PostProc;$/;"	t	typeref:enum:__anon79
Protect	host/minilua.c	4941;"	d	file:
Proto	host/minilua.c	/^typedef struct Proto{$/;"	s	file:
Proto	host/minilua.c	/^}Proto;$/;"	t	typeref:struct:Proto	file:
Q	Makefile	/^Q= @$/;"	m
RA	host/minilua.c	4935;"	d	file:
RA_DBGX	lj_asm.c	256;"	d	file:
RA_DBGX	lj_asm.c	262;"	d	file:
RA_DBG_FLUSH	lj_asm.c	252;"	d	file:
RA_DBG_FLUSH	lj_asm.c	260;"	d	file:
RA_DBG_REF	lj_asm.c	253;"	d	file:
RA_DBG_REF	lj_asm.c	261;"	d	file:
RA_DBG_START	lj_asm.c	251;"	d	file:
RA_DBG_START	lj_asm.c	259;"	d	file:
RB	host/minilua.c	4936;"	d	file:
REF_BASE	lj_ir.h	/^  REF_BASE =	REF_BIAS,	\/* \/--- IR grows upwards. *\/$/;"	e	enum:__anon59
REF_BIAS	lj_ir.h	/^  REF_BIAS =	0x8000,$/;"	e	enum:__anon59
REF_DROP	lj_ir.h	/^  REF_DROP =	0xffff$/;"	e	enum:__anon59
REF_FALSE	lj_ir.h	/^  REF_FALSE =	REF_BIAS-2,$/;"	e	enum:__anon59
REF_FIRST	lj_ir.h	/^  REF_FIRST =	REF_BIAS+1,$/;"	e	enum:__anon59
REF_NIL	lj_ir.h	/^  REF_NIL =	REF_BIAS-1,	\/* \\--- Constants grow downwards. *\/$/;"	e	enum:__anon59
REF_TRUE	lj_ir.h	/^  REF_TRUE =	REF_BIAS-3,$/;"	e	enum:__anon59
REGARG_FIRSTFPR	lj_target_arm.h	102;"	d
REGARG_FIRSTFPR	lj_target_arm.h	98;"	d
REGARG_FIRSTFPR	lj_target_mips.h	89;"	d
REGARG_FIRSTFPR	lj_target_ppc.h	73;"	d
REGARG_FIRSTFPR	lj_target_x86.h	101;"	d
REGARG_FIRSTFPR	lj_target_x86.h	89;"	d
REGARG_FIRSTGPR	lj_target_arm.h	94;"	d
REGARG_FIRSTGPR	lj_target_mips.h	86;"	d
REGARG_FIRSTGPR	lj_target_ppc.h	70;"	d
REGARG_GPRS	lj_target_x86.h	108;"	d
REGARG_GPRS	lj_target_x86.h	85;"	d
REGARG_GPRS	lj_target_x86.h	96;"	d
REGARG_LASTFPR	lj_target_arm.h	103;"	d
REGARG_LASTFPR	lj_target_arm.h	99;"	d
REGARG_LASTFPR	lj_target_mips.h	90;"	d
REGARG_LASTFPR	lj_target_ppc.h	74;"	d
REGARG_LASTFPR	lj_target_x86.h	102;"	d
REGARG_LASTFPR	lj_target_x86.h	90;"	d
REGARG_LASTGPR	lj_target_arm.h	95;"	d
REGARG_LASTGPR	lj_target_mips.h	87;"	d
REGARG_LASTGPR	lj_target_ppc.h	71;"	d
REGARG_NUMFPR	lj_target_arm.h	100;"	d
REGARG_NUMFPR	lj_target_arm.h	104;"	d
REGARG_NUMFPR	lj_target_mips.h	91;"	d
REGARG_NUMFPR	lj_target_ppc.h	75;"	d
REGARG_NUMFPR	lj_target_x86.h	100;"	d
REGARG_NUMFPR	lj_target_x86.h	110;"	d
REGARG_NUMFPR	lj_target_x86.h	88;"	d
REGARG_NUMGPR	lj_target_arm.h	96;"	d
REGARG_NUMGPR	lj_target_mips.h	88;"	d
REGARG_NUMGPR	lj_target_ppc.h	72;"	d
REGARG_NUMGPR	lj_target_x86.h	109;"	d
REGARG_NUMGPR	lj_target_x86.h	87;"	d
REGARG_NUMGPR	lj_target_x86.h	99;"	d
REGCOST	lj_target.h	128;"	d
REGCOST_PHI_WEIGHT	lj_target.h	122;"	d
REGCOST_REF_T	lj_target.h	133;"	d
REGCOST_T	lj_target.h	131;"	d
REGFUNC_NOREG	host/buildvm_lib.c	/^  REGFUNC_NOREG,$/;"	e	enum:__anon20	file:
REGFUNC_NOREGUV	host/buildvm_lib.c	/^  REGFUNC_NOREGUV$/;"	e	enum:__anon20	file:
REGFUNC_OK	host/buildvm_lib.c	/^  REGFUNC_OK,$/;"	e	enum:__anon20	file:
REGSP	lj_target.h	44;"	d
REGSP_HINT	lj_target.h	45;"	d
REGSP_INIT	lj_target.h	46;"	d
REG_RA	host/buildvm_arch.h	7836;"	d
REG_SP	host/buildvm_arch.h	7835;"	d
RELVER	Makefile	/^RELVER=  0$/;"	m
RESERVED	host/minilua.c	/^enum RESERVED{$/;"	g	file:
RETRYFOLD	lj_iropt.h	/^  RETRYFOLD,		\/* Retry fold with modified fins. *\/$/;"	e	enum:__anon23
REXRB	lj_emit_x86.h	11;"	d
REXRB	lj_emit_x86.h	17;"	d
REX_64	lj_emit_x86.h	15;"	d
REX_64	lj_emit_x86.h	19;"	d
REX_64IR	lj_emit_x86.h	418;"	d
REX_64IR	lj_emit_x86.h	420;"	d
RID2RSET	lj_target.h	64;"	d
RIDENUM	lj_target_arm.h	23;"	d
RIDENUM	lj_target_mips.h	23;"	d
RIDENUM	lj_target_ppc.h	23;"	d
RIDENUM	lj_target_x86.h	27;"	d
RIDNAME	lj_asm.c	170;"	d	file:
RIDNAME	lj_asm.c	177;"	d	file:
RID_BASE	lj_target_arm.h	/^  RID_BASE = RID_R9,		\/* Interpreter BASE. *\/$/;"	e	enum:__anon30
RID_BASE	lj_target_mips.h	/^  RID_BASE = RID_R16,		\/* Interpreter BASE. *\/$/;"	e	enum:__anon38
RID_BASE	lj_target_ppc.h	/^  RID_BASE = RID_R14,		\/* Interpreter BASE. *\/$/;"	e	enum:__anon28
RID_BASE	lj_target_x86.h	/^  RID_BASE = RID_EDX,		\/* Interpreter BASE. *\/$/;"	e	enum:__anon44
RID_CFUNCADDR	lj_target_mips.h	/^  RID_CFUNCADDR = RID_R25,$/;"	e	enum:__anon38
RID_DISPATCH	lj_target_arm.h	/^  RID_DISPATCH = RID_R7,	\/* Interpreter DISPATCH table. *\/$/;"	e	enum:__anon30
RID_DISPATCH	lj_target_mips.h	/^  RID_DISPATCH = RID_R19,	\/* Interpreter DISPATCH table. *\/$/;"	e	enum:__anon38
RID_DISPATCH	lj_target_ppc.h	/^  RID_DISPATCH = RID_R17,	\/* Interpreter DISPATCH table. *\/$/;"	e	enum:__anon28
RID_DISPATCH	lj_target_x86.h	/^  RID_DISPATCH = RID_R14D,	\/* Interpreter DISPATCH table. *\/$/;"	e	enum:__anon44
RID_FPRET	lj_target_arm.h	/^  RID_FPRET = RID_R0,$/;"	e	enum:__anon30
RID_FPRET	lj_target_mips.h	/^  RID_FPRET = RID_F0,$/;"	e	enum:__anon38
RID_FPRET	lj_target_ppc.h	/^  RID_FPRET = RID_F1,$/;"	e	enum:__anon28
RID_FPRET	lj_target_x86.h	/^  RID_FPRET = RID_XMM0,$/;"	e	enum:__anon44
RID_INIT	lj_target.h	23;"	d
RID_JGL	lj_target_mips.h	/^  RID_JGL = RID_R30,		\/* On-trace: global_State + 32768. *\/$/;"	e	enum:__anon38
RID_JGL	lj_target_ppc.h	/^  RID_JGL = RID_R31,		\/* On-trace: global_State + 32768. *\/$/;"	e	enum:__anon28
RID_LPC	lj_target_arm.h	/^  RID_LPC = RID_R6,		\/* Interpreter PC. *\/$/;"	e	enum:__anon30
RID_LPC	lj_target_mips.h	/^  RID_LPC = RID_R18,		\/* Interpreter PC. *\/$/;"	e	enum:__anon38
RID_LPC	lj_target_ppc.h	/^  RID_LPC = RID_R16,		\/* Interpreter PC. *\/$/;"	e	enum:__anon28
RID_LPC	lj_target_x86.h	/^  RID_LPC = RID_EBX,		\/* Interpreter PC. *\/$/;"	e	enum:__anon44
RID_LREG	lj_target_arm.h	/^  RID_LREG = RID_R8,		\/* Interpreter L. *\/$/;"	e	enum:__anon30
RID_LREG	lj_target_mips.h	/^  RID_LREG = RID_R20,		\/* Interpreter L. *\/$/;"	e	enum:__anon38
RID_LREG	lj_target_ppc.h	/^  RID_LREG = RID_R18,		\/* Interpreter L. *\/$/;"	e	enum:__anon28
RID_MASK	lj_target.h	22;"	d
RID_MAX	lj_target_arm.h	/^  RID_MAX,$/;"	e	enum:__anon30
RID_MAX	lj_target_mips.h	/^  RID_MAX,$/;"	e	enum:__anon38
RID_MAX	lj_target_ppc.h	/^  RID_MAX,$/;"	e	enum:__anon28
RID_MAX	lj_target_x86.h	/^  RID_MAX,$/;"	e	enum:__anon44
RID_MAX_FPR	lj_target_arm.h	/^  RID_MAX_FPR = RID_MIN_FPR,$/;"	e	enum:__anon30
RID_MAX_FPR	lj_target_mips.h	/^  RID_MAX_FPR = RID_F31+1,$/;"	e	enum:__anon38
RID_MAX_FPR	lj_target_ppc.h	/^  RID_MAX_FPR = RID_F31+1,$/;"	e	enum:__anon28
RID_MAX_FPR	lj_target_x86.h	/^  RID_MAX_FPR = RID_MAX,$/;"	e	enum:__anon44
RID_MAX_GPR	lj_target_arm.h	/^  RID_MAX_GPR = RID_PC+1,$/;"	e	enum:__anon30
RID_MAX_GPR	lj_target_mips.h	/^  RID_MAX_GPR = RID_RA+1,$/;"	e	enum:__anon38
RID_MAX_GPR	lj_target_ppc.h	/^  RID_MAX_GPR = RID_R31+1,$/;"	e	enum:__anon28
RID_MAX_GPR	lj_target_x86.h	/^  RID_MAX_GPR = RID_MIN_FPR,$/;"	e	enum:__anon44
RID_MIN_FPR	lj_target_arm.h	/^  RID_MIN_FPR = RID_MAX_GPR,$/;"	e	enum:__anon30
RID_MIN_FPR	lj_target_mips.h	/^  RID_MIN_FPR = RID_F0,$/;"	e	enum:__anon38
RID_MIN_FPR	lj_target_ppc.h	/^  RID_MIN_FPR = RID_F0,$/;"	e	enum:__anon28
RID_MIN_FPR	lj_target_x86.h	/^  RID_MIN_FPR = RID_XMM0,$/;"	e	enum:__anon44
RID_MIN_GPR	lj_target_arm.h	/^  RID_MIN_GPR = RID_R0,$/;"	e	enum:__anon30
RID_MIN_GPR	lj_target_mips.h	/^  RID_MIN_GPR = RID_R0,$/;"	e	enum:__anon38
RID_MIN_GPR	lj_target_ppc.h	/^  RID_MIN_GPR = RID_R0,$/;"	e	enum:__anon28
RID_MIN_GPR	lj_target_x86.h	/^  RID_MIN_GPR = RID_EAX,$/;"	e	enum:__anon44
RID_MIN_KREF	lj_target_arm.h	61;"	d
RID_MIN_KREF	lj_target_mips.h	61;"	d
RID_MIN_KREF	lj_target_ppc.h	54;"	d
RID_MRM	lj_target_x86.h	/^  RID_MRM = RID_MAX,		\/* Pseudo-id for ModRM operand. *\/$/;"	e	enum:__anon44
RID_NONE	lj_target.h	21;"	d
RID_NUM_FPR	lj_target_arm.h	/^  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR$/;"	e	enum:__anon30
RID_NUM_FPR	lj_target_mips.h	/^  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR	\/* Only even regs are used. *\/$/;"	e	enum:__anon38
RID_NUM_FPR	lj_target_ppc.h	/^  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR$/;"	e	enum:__anon28
RID_NUM_FPR	lj_target_x86.h	/^  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR,$/;"	e	enum:__anon44
RID_NUM_GPR	lj_target_arm.h	/^  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,$/;"	e	enum:__anon30
RID_NUM_GPR	lj_target_mips.h	/^  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,$/;"	e	enum:__anon38
RID_NUM_GPR	lj_target_ppc.h	/^  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,$/;"	e	enum:__anon28
RID_NUM_GPR	lj_target_x86.h	/^  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,$/;"	e	enum:__anon44
RID_NUM_KREF	lj_target_arm.h	60;"	d
RID_NUM_KREF	lj_target_mips.h	60;"	d
RID_NUM_KREF	lj_target_ppc.h	53;"	d
RID_RET	lj_target_arm.h	/^  RID_RET = RID_R0,$/;"	e	enum:__anon30
RID_RET	lj_target_mips.h	/^  RID_RET = RID_R2,$/;"	e	enum:__anon38
RID_RET	lj_target_ppc.h	/^  RID_RET = RID_R3,$/;"	e	enum:__anon28
RID_RET	lj_target_x86.h	/^  RID_RET = RID_EAX,$/;"	e	enum:__anon44
RID_RETHI	lj_target_arm.h	/^  RID_RETHI = RID_R1,$/;"	e	enum:__anon30
RID_RETHI	lj_target_mips.h	/^  RID_RETHI = RID_R3,$/;"	e	enum:__anon38
RID_RETHI	lj_target_ppc.h	/^  RID_RETHI = RID_R3,$/;"	e	enum:__anon28
RID_RETLO	lj_target_arm.h	/^  RID_RETLO = RID_R0,$/;"	e	enum:__anon30
RID_RETLO	lj_target_mips.h	/^  RID_RETLO = RID_R2,$/;"	e	enum:__anon38
RID_RETLO	lj_target_ppc.h	/^  RID_RETLO = RID_R4,$/;"	e	enum:__anon28
RID_SINK	lj_target.h	24;"	d
RID_SUNK	lj_target.h	25;"	d
RID_TMP	lj_target_arm.h	/^  RID_TMP = RID_LR,$/;"	e	enum:__anon30
RID_TMP	lj_target_mips.h	/^  RID_TMP = RID_RA,$/;"	e	enum:__anon38
RID_TMP	lj_target_ppc.h	/^  RID_TMP = RID_R0,$/;"	e	enum:__anon28
RID_ZERO	lj_target_mips.h	/^  RID_ZERO = RID_R0,$/;"	e	enum:__anon38
RIGHTFOLD	lj_iropt.h	112;"	d
RKASK	host/minilua.c	944;"	d	file:
RKB	host/minilua.c	4937;"	d	file:
RKC	host/minilua.c	4938;"	d	file:
RSET_ACD	lj_target_x86.h	79;"	d
RSET_ALL	lj_target_arm.h	78;"	d
RSET_ALL	lj_target_mips.h	75;"	d
RSET_ALL	lj_target_ppc.h	64;"	d
RSET_ALL	lj_target_x86.h	68;"	d
RSET_EMPTY	lj_target.h	65;"	d
RSET_FIXED	lj_target_mips.h	66;"	d
RSET_FIXED	lj_target_ppc.h	59;"	d
RSET_FPR	lj_target_arm.h	74;"	d
RSET_FPR	lj_target_arm.h	76;"	d
RSET_FPR	lj_target_mips.h	70;"	d
RSET_FPR	lj_target_ppc.h	63;"	d
RSET_FPR	lj_target_x86.h	67;"	d
RSET_GPR	lj_target_arm.h	66;"	d
RSET_GPR	lj_target_mips.h	69;"	d
RSET_GPR	lj_target_ppc.h	62;"	d
RSET_GPR	lj_target_x86.h	66;"	d
RSET_GPR8	lj_target_x86.h	73;"	d
RSET_GPR8	lj_target_x86.h	75;"	d
RSET_GPREVEN	lj_target_arm.h	67;"	d
RSET_GPRODD	lj_target_arm.h	70;"	d
RSET_INIT	lj_target_arm.h	79;"	d
RSET_INIT	lj_target_mips.h	76;"	d
RSET_INIT	lj_target_ppc.h	65;"	d
RSET_INIT	lj_target_x86.h	69;"	d
RSET_RANGE	lj_target.h	66;"	d
RSET_SCRATCH	lj_target_arm.h	93;"	d
RSET_SCRATCH	lj_target_mips.h	85;"	d
RSET_SCRATCH	lj_target_ppc.h	69;"	d
RSET_SCRATCH	lj_target_x86.h	107;"	d
RSET_SCRATCH	lj_target_x86.h	83;"	d
RSET_SCRATCH	lj_target_x86.h	94;"	d
RSET_SCRATCH_FPR	lj_target_arm.h	89;"	d
RSET_SCRATCH_FPR	lj_target_arm.h	91;"	d
RSET_SCRATCH_FPR	lj_target_mips.h	81;"	d
RSET_SCRATCH_FPR	lj_target_ppc.h	68;"	d
RSET_SCRATCH_GPR	lj_target_arm.h	84;"	d
RSET_SCRATCH_GPR	lj_target_arm.h	86;"	d
RSET_SCRATCH_GPR	lj_target_mips.h	78;"	d
RSET_SCRATCH_GPR	lj_target_ppc.h	67;"	d
RSET_SCRATCH_GPR_	lj_target_arm.h	82;"	d
RandomState	lj_lib.h	/^typedef struct RandomState RandomState;$/;"	t	typeref:struct:RandomState
RecordFFData	lj_ffrecord.h	/^typedef struct RecordFFData {$/;"	s
RecordFFData	lj_ffrecord.h	/^} RecordFFData;$/;"	t	typeref:struct:RecordFFData
RecordFunc	lj_ffrecord.c	/^typedef void (LJ_FASTCALL *RecordFunc)(jit_State *J, RecordFFData *rd);$/;"	t	file:
RecordIndex	lj_record.h	/^typedef struct RecordIndex {$/;"	s
RecordIndex	lj_record.h	/^} RecordIndex;$/;"	t	typeref:struct:RecordIndex
Reg	lj_target.h	/^typedef uint32_t Reg;$/;"	t
RegCost	lj_target.h	/^typedef uint32_t RegCost;$/;"	t
RegSP	lj_target.h	/^typedef uint32_t RegSP;$/;"	t
RegSet	lj_target.h	/^typedef uint32_t RegSet;$/;"	t
RegSet	lj_target.h	/^typedef uint64_t RegSet;$/;"	t
SBuf	lj_obj.h	/^typedef struct SBuf {$/;"	s
SBuf	lj_obj.h	/^} SBuf;$/;"	t	typeref:struct:SBuf
SCALE_NUM_GCO	lj_obj.h	286;"	d
SECTALIGN	lj_gdbjit.c	700;"	d	file:
SECTALIGN	lj_gdbjit.c	724;"	d	file:
SECTDEF	lj_gdbjit.c	470;"	d	file:
SECTDEF	lj_gdbjit.c	499;"	d	file:
SETARG_A	host/minilua.c	931;"	d	file:
SETARG_B	host/minilua.c	933;"	d	file:
SETARG_Bx	host/minilua.c	937;"	d	file:
SETARG_C	host/minilua.c	935;"	d	file:
SETARG_sBx	host/minilua.c	939;"	d	file:
SET_OPCODE	host/minilua.c	929;"	d	file:
SIX_SIZE_T_SIZES	lj_alloc.c	58;"	d	file:
SIZE_T_BITSIZE	lj_alloc.c	49;"	d	file:
SIZE_T_ONE	lj_alloc.c	54;"	d	file:
SIZE_T_SIZE	lj_alloc.c	48;"	d	file:
SIZE_T_TWO	lj_alloc.c	55;"	d	file:
SIZE_T_ZERO	lj_alloc.c	53;"	d	file:
SMALLBIN_SHIFT	lj_alloc.c	428;"	d	file:
SMALLBIN_WIDTH	lj_alloc.c	429;"	d	file:
SNAP	lj_jit.h	180;"	d
SNAPCOUNT_DONE	lj_jit.h	168;"	d
SNAP_CONT	lj_jit.h	174;"	d
SNAP_FRAME	lj_jit.h	173;"	d
SNAP_MKFTSZ	lj_jit.h	184;"	d
SNAP_MKPC	lj_jit.h	183;"	d
SNAP_NORESTORE	lj_jit.h	175;"	d
SNAP_SOFTFPNUM	lj_jit.h	176;"	d
SNAP_TR	lj_jit.h	181;"	d
SNAP_USEDEF_SLOTS	lj_snap.c	167;"	d	file:
SPECIALS	lib_string.c	186;"	d	file:
SPOFS_TMP	lj_target_arm.h	119;"	d
SPOFS_TMP	lj_target_mips.h	105;"	d
SPOFS_TMP	lj_target_ppc.h	95;"	d
SPOFS_TMP	lj_target_x86.h	142;"	d
SPOFS_TMPHI	lj_target_ppc.h	96;"	d
SPOFS_TMPLO	lj_target_ppc.h	97;"	d
SPOFS_TMPW	lj_target_ppc.h	94;"	d
SPS_FIRST	lj_target_arm.h	117;"	d
SPS_FIRST	lj_target_mips.h	103;"	d
SPS_FIRST	lj_target_ppc.h	91;"	d
SPS_FIRST	lj_target_x86.h	132;"	d
SPS_FIRST	lj_target_x86.h	135;"	d
SPS_FIRST	lj_target_x86.h	139;"	d
SPS_FIXED	lj_target_arm.h	116;"	d
SPS_FIXED	lj_target_mips.h	102;"	d
SPS_FIXED	lj_target_ppc.h	90;"	d
SPS_FIXED	lj_target_x86.h	131;"	d
SPS_FIXED	lj_target_x86.h	134;"	d
SPS_FIXED	lj_target_x86.h	138;"	d
SPS_NONE	lj_target.h	37;"	d
SParser	host/minilua.c	/^struct SParser{$/;"	s	file:
STACKARG_OFS	lj_target_x86.h	103;"	d
STACKARG_OFS	lj_target_x86.h	111;"	d
STACKARG_OFS	lj_target_x86.h	91;"	d
STATIC	msvcbuild.bat	/^:STATIC$/;"	l
STATIC_CC	Makefile	/^STATIC_CC = $(CROSS)$(CC)$/;"	m
STRSCAN_DDIG	lj_strscan.c	64;"	d	file:
STRSCAN_DIG	lj_strscan.c	62;"	d	file:
STRSCAN_DMASK	lj_strscan.c	65;"	d	file:
STRSCAN_ERROR	lj_strscan.h	/^  STRSCAN_ERROR,$/;"	e	enum:__anon63
STRSCAN_I64	lj_strscan.h	/^  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64, STRSCAN_U64,$/;"	e	enum:__anon63
STRSCAN_IMAG	lj_strscan.h	/^  STRSCAN_NUM, STRSCAN_IMAG,$/;"	e	enum:__anon63
STRSCAN_INT	lj_strscan.h	/^  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64, STRSCAN_U64,$/;"	e	enum:__anon63
STRSCAN_MAXDIG	lj_strscan.c	63;"	d	file:
STRSCAN_NUM	lj_strscan.h	/^  STRSCAN_NUM, STRSCAN_IMAG,$/;"	e	enum:__anon63
STRSCAN_OPT_C	lj_strscan.h	16;"	d
STRSCAN_OPT_IMAG	lj_strscan.h	14;"	d
STRSCAN_OPT_LL	lj_strscan.h	15;"	d
STRSCAN_OPT_TOINT	lj_strscan.h	12;"	d
STRSCAN_OPT_TONUM	lj_strscan.h	13;"	d
STRSCAN_U32	lj_strscan.h	/^  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64, STRSCAN_U64,$/;"	e	enum:__anon63
STRSCAN_U64	lj_strscan.h	/^  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64, STRSCAN_U64,$/;"	e	enum:__anon63
SYMPREFIX_BC	lib_package.c	33;"	d	file:
SYMPREFIX_CF	lib_package.c	32;"	d	file:
SZPTR	host/buildvm_arch.h	7833;"	d
ScEvEntry	lj_jit.h	/^typedef struct ScEvEntry {$/;"	s
ScEvEntry	lj_jit.h	/^} ScEvEntry;$/;"	t	typeref:struct:ScEvEntry
ScopeIndex	lj_err.c	/^  ULONG ScopeIndex;$/;"	m	struct:UndocumentedDispatcherContext	file:
SemInfo	host/minilua.c	/^}SemInfo;$/;"	t	typeref:union:__anon16	file:
Smain	luajit.c	/^struct Smain {$/;"	s	file:
SnapEntry	lj_jit.h	/^typedef uint32_t SnapEntry;$/;"	t
SnapNo	lj_jit.h	/^typedef uint32_t SnapNo;$/;"	t
SnapShot	lj_jit.h	/^typedef struct SnapShot {$/;"	s
SnapShot	lj_jit.h	/^} SnapShot;$/;"	t	typeref:struct:SnapShot
StkId	host/minilua.c	/^typedef TValue*StkId;$/;"	t	file:
StrScanFmt	lj_strscan.h	/^} StrScanFmt;$/;"	t	typeref:enum:__anon63
StringReaderCtx	lj_load.c	/^typedef struct StringReaderCtx {$/;"	s	file:
StringReaderCtx	lj_load.c	/^} StringReaderCtx;$/;"	t	typeref:struct:StringReaderCtx	file:
T	lj_asm.c	/^  GCtrace *T;		\/* Trace to assemble. *\/$/;"	m	struct:ASMState	file:
T	lj_gdbjit.c	/^  GCtrace *T;		\/* Generate symbols for this trace. *\/$/;"	m	struct:GDBJITctx	file:
TARGET_ACFLAGS	Makefile	/^TARGET_ACFLAGS= $(CCOPTIONS) $(TARGET_XCFLAGS) $(TARGET_FLAGS) $(TARGET_CFLAGS)$/;"	m
TARGET_ALDFLAGS	Makefile	/^TARGET_ALDFLAGS= $(LDOPTIONS) $(TARGET_XLDFLAGS) $(TARGET_FLAGS) $(TARGET_LDFLAGS)$/;"	m
TARGET_ALIBS	Makefile	/^TARGET_ALIBS= $(TARGET_XLIBS) $(LIBS) $(TARGET_LIBS)$/;"	m
TARGET_AR	Makefile	/^TARGET_AR= $(CROSS)ar rcus$/;"	m
TARGET_ARCH	Makefile	/^    TARGET_ARCH= -D__MIPSEL__=1$/;"	m
TARGET_ASHLDFLAGS	Makefile	/^TARGET_ASHLDFLAGS= $(LDOPTIONS) $(TARGET_XSHLDFLAGS) $(TARGET_FLAGS) $(TARGET_SHLDFLAGS)$/;"	m
TARGET_CC	Makefile	/^    TARGET_CC= $(DYNAMIC_CC)$/;"	m
TARGET_CC	Makefile	/^TARGET_CC= $(STATIC_CC)$/;"	m
TARGET_DEP	Makefile	/^  TARGET_DEP= $(LIB_VMDEF)$/;"	m
TARGET_DEP	Makefile	/^TARGET_DEP= $(LIB_VMDEF) $(LUAJIT_SO)$/;"	m
TARGET_DLLNAME	Makefile	/^TARGET_DLLNAME= lua$(NODOTABIVER).dll$/;"	m
TARGET_DYLIBNAME	Makefile	/^TARGET_DYLIBNAME= libluajit-$(ABIVER).$(MAJVER).dylib$/;"	m
TARGET_DYLIBPATH	Makefile	/^TARGET_DYLIBPATH= $(or $(PREFIX),\/usr\/local)\/lib\/$(TARGET_DYLIBNAME)$/;"	m
TARGET_DYNCC	Makefile	/^  TARGET_DYNCC= $(STATIC_CC)$/;"	m
TARGET_DYNCC	Makefile	/^  TARGET_DYNCC= @:$/;"	m
TARGET_DYNCC	Makefile	/^TARGET_DYNCC= $(DYNAMIC_CC)$/;"	m
TARGET_DYNXLDOPTS	Makefile	/^    TARGET_DYNXLDOPTS= -Wl,-rpath,$(PREFIX)\/lib$/;"	m
TARGET_DYNXLDOPTS	Makefile	/^  TARGET_DYNXLDOPTS=$/;"	m
TARGET_DYNXLDOPTS	Makefile	/^TARGET_DYNXLDOPTS=$/;"	m
TARGET_LD	Makefile	/^TARGET_LD= $(CROSS)$(CC)$/;"	m
TARGET_LFSFLAGS	Makefile	/^TARGET_LFSFLAGS= -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= arm$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= mips$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= ppc$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= ppcspe$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= x64$/;"	m
TARGET_LJARCH	Makefile	/^  TARGET_LJARCH= x86$/;"	m
TARGET_O	Makefile	/^  TARGET_O= $(LUAJIT_SO)$/;"	m
TARGET_O	Makefile	/^TARGET_O= $(LUAJIT_A)$/;"	m
TARGET_SONAME	Makefile	/^TARGET_SONAME= libluajit-$(ABIVER).so.$(MAJVER)$/;"	m
TARGET_STCC	Makefile	/^TARGET_STCC= $(STATIC_CC)$/;"	m
TARGET_STRIP	Makefile	/^  TARGET_STRIP= @:$/;"	m
TARGET_STRIP	Makefile	/^TARGET_STRIP= $(CROSS)strip$/;"	m
TARGET_SYS	Makefile	/^  TARGET_SYS= PS3$/;"	m
TARGET_SYS	Makefile	/^TARGET_SYS?= $(HOST_SYS)$/;"	m
TARGET_T	Makefile	/^  TARGET_T= $(LUAJIT_T)$/;"	m
TARGET_T	Makefile	/^TARGET_T= $(LUAJIT_T) $(LUAJIT_SO)$/;"	m
TARGET_TCFLAGS	Makefile	/^TARGET_TCFLAGS= $(CCOPTIONS) $(TARGET_XCFLAGS) $(TARGET_FLAGS) $(TARGET_CFLAGS)$/;"	m
TARGET_TESTARCH	Makefile	/^TARGET_TESTARCH=$(shell $(TARGET_CC) $(TARGET_TCFLAGS) -E lj_arch.h -dM)$/;"	m
TARGET_XCFLAGS	Makefile	/^TARGET_XCFLAGS= $(TARGET_LFSFLAGS) -U_FORTIFY_SOURCE$/;"	m
TARGET_XLDFLAGS	Makefile	/^TARGET_XLDFLAGS=$/;"	m
TARGET_XLIBS	Makefile	/^TARGET_XLIBS= -lm$/;"	m
TARGET_XSHLDFLAGS	Makefile	/^  TARGET_XSHLDFLAGS= -dynamiclib -single_module -undefined dynamic_lookup -fPIC$/;"	m
TARGET_XSHLDFLAGS	Makefile	/^  TARGET_XSHLDFLAGS= -shared$/;"	m
TARGET_XSHLDFLAGS	Makefile	/^TARGET_XSHLDFLAGS= -shared -fPIC -Wl,-soname,$(TARGET_SONAME)$/;"	m
TKDEF	lj_lex.h	/^TKDEF(TKENUM1, TKENUM2)$/;"	e	enum:__anon36
TKDEF	lj_lex.h	16;"	d
TKENUM1	lj_lex.h	26;"	d
TKENUM1	lj_lex.h	29;"	d
TKENUM2	lj_lex.h	27;"	d
TKENUM2	lj_lex.h	30;"	d
TKSTR1	lj_lex.c	30;"	d	file:
TKSTR1	lj_lex.c	33;"	d	file:
TKSTR2	lj_lex.c	31;"	d	file:
TKSTR2	lj_lex.c	34;"	d	file:
TK_AND	host/minilua.c	/^TK_AND=257,TK_BREAK,$/;"	e	enum:RESERVED	file:
TK_BREAK	host/minilua.c	/^TK_AND=257,TK_BREAK,$/;"	e	enum:RESERVED	file:
TK_CONCAT	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_DO	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_DOTS	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_ELSE	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_ELSEIF	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_END	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_EOS	host/minilua.c	/^TK_NAME,TK_STRING,TK_EOS$/;"	e	enum:RESERVED	file:
TK_EQ	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_FALSE	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_FOR	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_FUNCTION	host/minilua.c	/^TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,$/;"	e	enum:RESERVED	file:
TK_GE	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_IF	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_IN	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_LE	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_LOCAL	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_NAME	host/minilua.c	/^TK_NAME,TK_STRING,TK_EOS$/;"	e	enum:RESERVED	file:
TK_NE	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_NIL	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_NOT	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_NUMBER	host/minilua.c	/^TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,$/;"	e	enum:RESERVED	file:
TK_OFS	lj_lex.h	/^  TK_OFS = 256,$/;"	e	enum:__anon36
TK_OR	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_REPEAT	host/minilua.c	/^TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,$/;"	e	enum:RESERVED	file:
TK_RESERVED	lj_lex.h	/^  TK_RESERVED = TK_while - TK_OFS$/;"	e	enum:__anon36
TK_RETURN	host/minilua.c	/^TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,$/;"	e	enum:RESERVED	file:
TK_STRING	host/minilua.c	/^TK_NAME,TK_STRING,TK_EOS$/;"	e	enum:RESERVED	file:
TK_THEN	host/minilua.c	/^TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,$/;"	e	enum:RESERVED	file:
TK_TRUE	host/minilua.c	/^TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,$/;"	e	enum:RESERVED	file:
TK_UNTIL	host/minilua.c	/^TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,$/;"	e	enum:RESERVED	file:
TK_WHILE	host/minilua.c	/^TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,$/;"	e	enum:RESERVED	file:
TKey	host/minilua.c	/^typedef union TKey{$/;"	u	file:
TKey	host/minilua.c	/^}TKey;$/;"	t	typeref:union:TKey	file:
TMS	host/minilua.c	/^}TMS;$/;"	t	typeref:enum:__anon4	file:
TM_ADD	host/minilua.c	/^TM_ADD,$/;"	e	enum:__anon4	file:
TM_CALL	host/minilua.c	/^TM_CALL,$/;"	e	enum:__anon4	file:
TM_CONCAT	host/minilua.c	/^TM_CONCAT,$/;"	e	enum:__anon4	file:
TM_DIV	host/minilua.c	/^TM_DIV,$/;"	e	enum:__anon4	file:
TM_EQ	host/minilua.c	/^TM_EQ,$/;"	e	enum:__anon4	file:
TM_GC	host/minilua.c	/^TM_GC,$/;"	e	enum:__anon4	file:
TM_INDEX	host/minilua.c	/^TM_INDEX,$/;"	e	enum:__anon4	file:
TM_LE	host/minilua.c	/^TM_LE,$/;"	e	enum:__anon4	file:
TM_LEN	host/minilua.c	/^TM_LEN,$/;"	e	enum:__anon4	file:
TM_LT	host/minilua.c	/^TM_LT,$/;"	e	enum:__anon4	file:
TM_MOD	host/minilua.c	/^TM_MOD,$/;"	e	enum:__anon4	file:
TM_MODE	host/minilua.c	/^TM_MODE,$/;"	e	enum:__anon4	file:
TM_MUL	host/minilua.c	/^TM_MUL,$/;"	e	enum:__anon4	file:
TM_N	host/minilua.c	/^TM_N$/;"	e	enum:__anon4	file:
TM_NEWINDEX	host/minilua.c	/^TM_NEWINDEX,$/;"	e	enum:__anon4	file:
TM_POW	host/minilua.c	/^TM_POW,$/;"	e	enum:__anon4	file:
TM_SUB	host/minilua.c	/^TM_SUB,$/;"	e	enum:__anon4	file:
TM_UNM	host/minilua.c	/^TM_UNM,$/;"	e	enum:__anon4	file:
TOP_FOOT_SIZE	lj_alloc.c	503;"	d	file:
TRACEBACK_LEVELS1	lj_debug.c	547;"	d	file:
TRACEBACK_LEVELS2	lj_debug.c	548;"	d	file:
TRACE_APPENDVEC	lj_trace.c	80;"	d	file:
TREDEF	host/buildvm.c	276;"	d	file:
TREDEF	lj_trace.h	17;"	d
TREDEF	lj_traceerr.h	57;"	d
TREEBIN_SHIFT	lj_alloc.c	430;"	d	file:
TREF	lj_ir.h	455;"	d
TREF_CONT	lj_ir.h	453;"	d
TREF_FALSE	lj_ir.h	488;"	d
TREF_FRAME	lj_ir.h	452;"	d
TREF_NIL	lj_ir.h	487;"	d
TREF_PRI	lj_ir.h	486;"	d
TREF_REFMASK	lj_ir.h	451;"	d
TREF_TRUE	lj_ir.h	489;"	d
TRef	lj_ir.h	/^typedef uint32_t TRef;$/;"	t
TString	host/minilua.c	/^typedef union TString{$/;"	u	file:
TString	host/minilua.c	/^}TString;$/;"	t	typeref:union:TString	file:
TV2MARKED	lj_gc.c	756;"	d	file:
TV2MARKED	lj_gc.c	762;"	d	file:
TV2MARKOFS	host/buildvm_arch.h	6167;"	d
TV2MARKOFS	host/buildvm_arch.h	6207;"	d
TValue	host/minilua.c	/^}TValue;$/;"	t	typeref:struct:lua_TValue	file:
TValue	lj_obj.h	/^typedef LJ_ALIGN(8) union TValue {$/;"	u
TValue	lj_obj.h	/^} TValue;$/;"	v	typeref:union:TValue
TW223_GEN	lib_math.c	121;"	d	file:
TWO_SIZE_T_SIZES	lj_alloc.c	56;"	d	file:
Table	host/minilua.c	/^typedef struct Table{$/;"	s	file:
Table	host/minilua.c	/^}Table;$/;"	t	typeref:struct:Table	file:
TargetIp	lj_err.c	/^  ULONG64 TargetIp;$/;"	m	struct:UndocumentedDispatcherContext	file:
Token	host/minilua.c	/^typedef struct Token{$/;"	s	file:
Token	host/minilua.c	/^}Token;$/;"	t	typeref:struct:Token	file:
TraceError	lj_trace.h	/^} TraceError;$/;"	t	typeref:enum:__anon83
TraceLink	lj_jit.h	/^} TraceLink;$/;"	t	typeref:enum:__anon80
TraceNo	lj_jit.h	/^typedef uint32_t TraceNo;	\/* Used to pass around trace numbers. *\/$/;"	t
TraceNo1	lj_jit.h	/^typedef uint16_t TraceNo1;	\/* Stored trace number. *\/$/;"	t
TraceState	lj_jit.h	/^} TraceState;$/;"	t	typeref:enum:__anon78
U64	host/minilua.c	/^typedef unsigned __int64 U64;$/;"	t	file:
U64	host/minilua.c	/^typedef unsigned long long U64;$/;"	t	file:
U64double	lib_math.c	/^typedef union { uint64_t u64; double d; } U64double;$/;"	t	typeref:union:__anon84	file:
U64x	lj_def.h	91;"	d
UB	host/minilua.c	/^typedef unsigned int UB;$/;"	t	file:
UDTYPE_FFI_CLIB	lj_obj.h	/^  UDTYPE_FFI_CLIB,	\/* FFI C library namespace. *\/$/;"	e	enum:__anon104
UDTYPE_IO_FILE	lj_obj.h	/^  UDTYPE_IO_FILE,	\/* I\/O library FILE. *\/$/;"	e	enum:__anon104
UDTYPE_USERDATA	lj_obj.h	/^  UDTYPE_USERDATA,	\/* Regular userdata. *\/$/;"	e	enum:__anon104
UDTYPE__MAX	lj_obj.h	/^  UDTYPE__MAX$/;"	e	enum:__anon104
UNARY_PRIORITY	lj_parse.c	2083;"	d	file:
UNUSED	host/minilua.c	213;"	d	file:
UNUSED	lj_def.h	88;"	d
USE_SLOT	lj_snap.c	192;"	d	file:
USE_SLOT	lj_snap.c	261;"	d	file:
Udata	host/minilua.c	/^typedef union Udata{$/;"	u	file:
Udata	host/minilua.c	/^}Udata;$/;"	t	typeref:union:Udata	file:
UnOpr	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	g	file:
UnOpr	host/minilua.c	/^typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;$/;"	t	typeref:enum:UnOpr	file:
Unaligned16	lj_def.h	/^typedef union __attribute__((packed)) Unaligned16 {$/;"	u
Unaligned16	lj_def.h	/^} Unaligned16;$/;"	t	typeref:union:Unaligned16
Unaligned32	lj_def.h	/^typedef union __attribute__((packed)) Unaligned32 {$/;"	u
Unaligned32	lj_def.h	/^} Unaligned32;$/;"	t	typeref:union:Unaligned32
UndocumentedDispatcherContext	lj_err.c	/^typedef struct UndocumentedDispatcherContext {$/;"	s	file:
UndocumentedDispatcherContext	lj_err.c	/^} UndocumentedDispatcherContext;$/;"	t	typeref:struct:UndocumentedDispatcherContext	file:
UpVal	host/minilua.c	/^typedef struct UpVal{$/;"	s	file:
UpVal	host/minilua.c	/^}UpVal;$/;"	t	typeref:struct:UpVal	file:
VARNAMEDEF	lj_debug.h	/^  VARNAMEDEF(VARNAMEENUM)$/;"	e	enum:__anon37
VARNAMEDEF	lj_debug.h	45;"	d
VARNAMEENUM	lj_debug.h	55;"	d
VARNAMEENUM	lj_debug.h	57;"	d
VARNAMESTR	lj_debug.c	170;"	d	file:
VARNAMESTR	lj_debug.c	172;"	d	file:
VARNAME_END	lj_debug.h	/^  VARNAME_END,$/;"	e	enum:__anon37
VARNAME__MAX	lj_debug.h	/^  VARNAME__MAX$/;"	e	enum:__anon37
VCALL	host/minilua.c	/^VCALL,$/;"	e	enum:__anon6	file:
VCALL	lj_parse.c	/^  VCALL,	\/* info = instruction PC, aux = base *\/$/;"	e	enum:__anon40	file:
VCC_P	lj_asm_x86.h	2007;"	d
VCC_PS	lj_asm_x86.h	2009;"	d
VCC_S	lj_asm_x86.h	2008;"	d
VCC_U	lj_asm_x86.h	2006;"	d
VFALSE	host/minilua.c	/^VFALSE,$/;"	e	enum:__anon6	file:
VGLOBAL	host/minilua.c	/^VGLOBAL,$/;"	e	enum:__anon6	file:
VGLOBAL	lj_parse.c	/^  VGLOBAL,	\/* sval = string value *\/$/;"	e	enum:__anon40	file:
VINDEXED	host/minilua.c	/^VINDEXED,$/;"	e	enum:__anon6	file:
VINDEXED	lj_parse.c	/^  VINDEXED,	\/* info = table register, aux = index reg\/byte\/string const *\/$/;"	e	enum:__anon40	file:
VJMP	host/minilua.c	/^VJMP,$/;"	e	enum:__anon6	file:
VJMP	lj_parse.c	/^  VJMP,		\/* info = instruction PC *\/$/;"	e	enum:__anon40	file:
VK	host/minilua.c	/^VK,$/;"	e	enum:__anon6	file:
VKCDATA	lj_parse.c	/^  VKCDATA,	\/* nval = cdata value, not treated as a constant expression *\/$/;"	e	enum:__anon40	file:
VKFALSE	lj_parse.c	/^  VKFALSE,$/;"	e	enum:__anon40	file:
VKLAST	lj_parse.c	/^  VKLAST = VKNUM,$/;"	e	enum:__anon40	file:
VKNIL	lj_parse.c	/^  VKNIL,$/;"	e	enum:__anon40	file:
VKNUM	host/minilua.c	/^VKNUM,$/;"	e	enum:__anon6	file:
VKNUM	lj_parse.c	/^  VKNUM,	\/* nval = number value *\/$/;"	e	enum:__anon40	file:
VKSTR	lj_parse.c	/^  VKSTR,	\/* sval = string value *\/$/;"	e	enum:__anon40	file:
VKTRUE	lj_parse.c	/^  VKTRUE,$/;"	e	enum:__anon40	file:
VLOCAL	host/minilua.c	/^VLOCAL,$/;"	e	enum:__anon6	file:
VLOCAL	lj_parse.c	/^  VLOCAL,	\/* info = local register, aux = vstack index *\/$/;"	e	enum:__anon40	file:
VMEVENT_DEF	lj_vmevent.h	/^  VMEVENT_DEF(BC,	0x00003883),$/;"	e	enum:__anon22
VMEVENT_DEF	lj_vmevent.h	/^  VMEVENT_DEF(RECORD,	0x9284bf4f),$/;"	e	enum:__anon22
VMEVENT_DEF	lj_vmevent.h	/^  VMEVENT_DEF(TEXIT,	0xb29df2b0),$/;"	e	enum:__anon22
VMEVENT_DEF	lj_vmevent.h	/^  VMEVENT_DEF(TRACE,	0xb2d91467),$/;"	e	enum:__anon22
VMEVENT_DEF	lj_vmevent.h	20;"	d
VMEVENT_HASH	lj_vmevent.h	16;"	d
VMEVENT_HASHIDX	lj_vmevent.h	17;"	d
VMEVENT_MASK	lj_vmevent.h	15;"	d
VMEVENT_NOCACHE	lj_vmevent.h	18;"	d
VMEvent	lj_vmevent.h	/^} VMEvent;$/;"	t	typeref:enum:__anon22
VNIL	host/minilua.c	/^VNIL,$/;"	e	enum:__anon6	file:
VNONRELOC	host/minilua.c	/^VNONRELOC,$/;"	e	enum:__anon6	file:
VNONRELOC	lj_parse.c	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon40	file:
VRELOCABLE	host/minilua.c	/^VRELOCABLE,$/;"	e	enum:__anon6	file:
VRELOCABLE	lj_parse.c	/^  VRELOCABLE,	\/* info = instruction PC *\/$/;"	e	enum:__anon40	file:
VRIDDEF	lj_target_arm.h	21;"	d
VRIDDEF	lj_target_mips.h	21;"	d
VRIDDEF	lj_target_ppc.h	21;"	d
VRIDDEF	lj_target_x86.h	24;"	d
VSTACK_GOTO	lj_parse.c	117;"	d	file:
VSTACK_LABEL	lj_parse.c	118;"	d	file:
VSTACK_VAR_RW	lj_parse.c	116;"	d	file:
VTRUE	host/minilua.c	/^VTRUE,$/;"	e	enum:__anon6	file:
VUPVAL	host/minilua.c	/^VUPVAL,$/;"	e	enum:__anon6	file:
VUPVAL	lj_parse.c	/^  VUPVAL,	\/* info = upvalue index, aux = vstack index *\/$/;"	e	enum:__anon40	file:
VVARARG	host/minilua.c	/^VVARARG$/;"	e	enum:__anon6	file:
VVOID	host/minilua.c	/^VVOID,$/;"	e	enum:__anon6	file:
VVOID	lj_parse.c	/^  VVOID$/;"	e	enum:__anon40	file:
Value	host/minilua.c	/^}Value;$/;"	t	typeref:union:__anon8	file:
VarIndex	lj_parse.c	/^typedef uint16_t VarIndex;$/;"	t	file:
VarInfo	lj_lex.h	/^typedef struct VarInfo {$/;"	s
VarInfo	lj_lex.h	/^} VarInfo;$/;"	t	typeref:struct:VarInfo
WIN32_LEAN_AND_MEAN	lib_package.c	70;"	d	file:
WIN32_LEAN_AND_MEAN	lj_alloc.c	77;"	d	file:
WIN32_LEAN_AND_MEAN	lj_ccallback.c	207;"	d	file:
WIN32_LEAN_AND_MEAN	lj_clib.c	146;"	d	file:
WIN32_LEAN_AND_MEAN	lj_dispatch.h	118;"	d
WIN32_LEAN_AND_MEAN	lj_err.c	369;"	d	file:
WIN32_LEAN_AND_MEAN	lj_mcode.c	59;"	d	file:
WINVER	lib_package.c	72;"	d	file:
WINVER	lj_clib.c	148;"	d	file:
WINVER	ljamalg.c	25;"	d	file:
WIN_RM	Makefile	/^WIN_RM= *.obj *.lib *.exp *.dll *.exe *.manifest *.pdb *.ilk$/;"	m
X64	msvcbuild.bat	/^:X64$/;"	l
XCFLAGS	Makefile	/^XCFLAGS=$/;"	m
XG_	lj_target_x86.h	307;"	d
XG_ARITHi	lj_target_x86.h	308;"	d
XG_TOXOi	lj_target_x86.h	309;"	d
XG_TOXOi8	lj_target_x86.h	310;"	d
XI_ARITHi	lj_target_x86.h	/^  XI_ARITHi =	0x81,$/;"	e	enum:__anon48
XI_ARITHi8	lj_target_x86.h	/^  XI_ARITHi8 =	0x83,$/;"	e	enum:__anon48
XI_ARITHib	lj_target_x86.h	/^  XI_ARITHib =	0x80,$/;"	e	enum:__anon48
XI_CALL	lj_target_x86.h	/^  XI_CALL =	0xe8,$/;"	e	enum:__anon48
XI_FCOS	lj_target_x86.h	/^  XI_FCOS =	0xffd9,$/;"	e	enum:__anon48
XI_FDUP	lj_target_x86.h	/^  XI_FDUP =	0xc0d9,  \/* Really fld st0. *\/$/;"	e	enum:__anon48
XI_FLD1	lj_target_x86.h	/^  XI_FLD1 =	0xe8d9,$/;"	e	enum:__anon48
XI_FLDLG2	lj_target_x86.h	/^  XI_FLDLG2 =	0xecd9,$/;"	e	enum:__anon48
XI_FLDLN2	lj_target_x86.h	/^  XI_FLDLN2 =	0xedd9,$/;"	e	enum:__anon48
XI_FLDZ	lj_target_x86.h	/^  XI_FLDZ =	0xeed9,$/;"	e	enum:__anon48
XI_FPATAN	lj_target_x86.h	/^  XI_FPATAN =	0xf3d9,$/;"	e	enum:__anon48
XI_FPOP	lj_target_x86.h	/^  XI_FPOP =	0xd8dd,  \/* Really fstp st0. *\/$/;"	e	enum:__anon48
XI_FPOP1	lj_target_x86.h	/^  XI_FPOP1 =	0xd9dd,  \/* Really fstp st1. *\/$/;"	e	enum:__anon48
XI_FPTAN	lj_target_x86.h	/^  XI_FPTAN =	0xf2d9,$/;"	e	enum:__anon48
XI_FRNDINT	lj_target_x86.h	/^  XI_FRNDINT =	0xfcd9,$/;"	e	enum:__anon48
XI_FSCALE	lj_target_x86.h	/^  XI_FSCALE =	0xfdd9,$/;"	e	enum:__anon48
XI_FSIN	lj_target_x86.h	/^  XI_FSIN =	0xfed9,$/;"	e	enum:__anon48
XI_FYL2X	lj_target_x86.h	/^  XI_FYL2X =	0xf1d9,$/;"	e	enum:__anon48
XI_GROUP5	lj_target_x86.h	/^  XI_GROUP5 =	0xff,$/;"	e	enum:__anon48
XI_JCCn	lj_target_x86.h	/^  XI_JCCn =	0x80, \/* Really 0f8x. *\/$/;"	e	enum:__anon48
XI_JCCs	lj_target_x86.h	/^  XI_JCCs =	0x70, \/* Really 7x. *\/$/;"	e	enum:__anon48
XI_JMP	lj_target_x86.h	/^  XI_JMP =	0xe9,$/;"	e	enum:__anon48
XI_JMPs	lj_target_x86.h	/^  XI_JMPs =	0xeb,$/;"	e	enum:__anon48
XI_LEA	lj_target_x86.h	/^  XI_LEA =	0x8d,$/;"	e	enum:__anon48
XI_MOVmi	lj_target_x86.h	/^  XI_MOVmi =	0xc7,$/;"	e	enum:__anon48
XI_MOVri	lj_target_x86.h	/^  XI_MOVri =	0xb8, \/* Really b8+r. *\/$/;"	e	enum:__anon48
XI_MOVrib	lj_target_x86.h	/^  XI_MOVrib =	0xb0, \/* Really b0+r. *\/$/;"	e	enum:__anon48
XI_NOP	lj_target_x86.h	/^  XI_NOP =	0x90,$/;"	e	enum:__anon48
XI_PUSH	lj_target_x86.h	/^  XI_PUSH =	0x50, \/* Really 50+r. *\/$/;"	e	enum:__anon48
XI_PUSHi8	lj_target_x86.h	/^  XI_PUSHi8 =	0x6a,$/;"	e	enum:__anon48
XI_TEST	lj_target_x86.h	/^  XI_TEST =	0x85,$/;"	e	enum:__anon48
XI_TESTb	lj_target_x86.h	/^  XI_TESTb =	0x84,$/;"	e	enum:__anon48
XI_XCHGa	lj_target_x86.h	/^  XI_XCHGa =	0x90,$/;"	e	enum:__anon48
XMM_MOVRM	lj_emit_x86.h	246;"	d
XMM_MOVRR	lj_emit_x86.h	245;"	d
XM_MASK	lj_target_x86.h	/^  XM_MASK = 0xc0$/;"	e	enum:__anon46
XM_OFS0	lj_target_x86.h	/^  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG = 0xc0,$/;"	e	enum:__anon46
XM_OFS32	lj_target_x86.h	/^  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG = 0xc0,$/;"	e	enum:__anon46
XM_OFS8	lj_target_x86.h	/^  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG = 0xc0,$/;"	e	enum:__anon46
XM_REG	lj_target_x86.h	/^  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG = 0xc0,$/;"	e	enum:__anon46
XM_SCALE1	lj_target_x86.h	/^  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 = 0xc0,$/;"	e	enum:__anon46
XM_SCALE2	lj_target_x86.h	/^  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 = 0xc0,$/;"	e	enum:__anon46
XM_SCALE4	lj_target_x86.h	/^  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 = 0xc0,$/;"	e	enum:__anon46
XM_SCALE8	lj_target_x86.h	/^  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 = 0xc0,$/;"	e	enum:__anon46
XO_	lj_target_x86.h	179;"	d
XO_0f	lj_target_x86.h	181;"	d
XO_66	lj_target_x86.h	182;"	d
XO_660f	lj_target_x86.h	183;"	d
XO_ADDSD	lj_target_x86.h	/^  XO_ADDSD =	XO_f20f(58),$/;"	e	enum:__anon48
XO_ADDSS	lj_target_x86.h	/^  XO_ADDSS =	XO_f30f(58),$/;"	e	enum:__anon48
XO_ANDPS	lj_target_x86.h	/^  XO_ANDPS =	XO_0f(54),$/;"	e	enum:__anon48
XO_ARITH	lj_target_x86.h	312;"	d
XO_ARITHi	lj_target_x86.h	/^  XO_ARITHi =	XO_(81),$/;"	e	enum:__anon48
XO_ARITHi8	lj_target_x86.h	/^  XO_ARITHi8 =	XO_(83),$/;"	e	enum:__anon48
XO_ARITHib	lj_target_x86.h	/^  XO_ARITHib =	XO_(80),$/;"	e	enum:__anon48
XO_ARITHiw8	lj_target_x86.h	/^  XO_ARITHiw8 =	XO_66(83),$/;"	e	enum:__anon48
XO_ARITHw	lj_target_x86.h	313;"	d
XO_BSWAP	lj_target_x86.h	/^  XO_BSWAP =	XO_0f(c8),$/;"	e	enum:__anon48
XO_CMOV	lj_target_x86.h	/^  XO_CMOV =	XO_0f(40),$/;"	e	enum:__anon48
XO_CMP	lj_target_x86.h	/^  XO_CMP =	XO_(3b),$/;"	e	enum:__anon48
XO_CVTSD2SI	lj_target_x86.h	/^  XO_CVTSD2SI =	XO_f20f(2d),$/;"	e	enum:__anon48
XO_CVTSD2SS	lj_target_x86.h	/^  XO_CVTSD2SS =	XO_f20f(5a),$/;"	e	enum:__anon48
XO_CVTSI2SD	lj_target_x86.h	/^  XO_CVTSI2SD =	XO_f20f(2a),$/;"	e	enum:__anon48
XO_CVTSI2SS	lj_target_x86.h	/^  XO_CVTSI2SS =	XO_f30f(2a),$/;"	e	enum:__anon48
XO_CVTSS2SD	lj_target_x86.h	/^  XO_CVTSS2SD =	XO_f30f(5a),$/;"	e	enum:__anon48
XO_CVTSS2SI	lj_target_x86.h	/^  XO_CVTSS2SI =	XO_f30f(2d),$/;"	e	enum:__anon48
XO_CVTTSD2SI	lj_target_x86.h	/^  XO_CVTTSD2SI=	XO_f20f(2c),$/;"	e	enum:__anon48
XO_CVTTSS2SI	lj_target_x86.h	/^  XO_CVTTSS2SI=	XO_f30f(2c),$/;"	e	enum:__anon48
XO_DIVSD	lj_target_x86.h	/^  XO_DIVSD =	XO_f20f(5e),$/;"	e	enum:__anon48
XO_FADDq	lj_target_x86.h	/^  XO_FADDq =	XO_(dc), XOg_FADDq = 0,$/;"	e	enum:__anon48
XO_FILDd	lj_target_x86.h	/^  XO_FILDd =	XO_(db), XOg_FILDd = 0,$/;"	e	enum:__anon48
XO_FILDq	lj_target_x86.h	/^  XO_FILDq =	XO_(df), XOg_FILDq = 5,$/;"	e	enum:__anon48
XO_FISTPq	lj_target_x86.h	/^  XO_FISTPq =	XO_(df), XOg_FISTPq = 7,$/;"	e	enum:__anon48
XO_FISTTPq	lj_target_x86.h	/^  XO_FISTTPq =	XO_(dd), XOg_FISTTPq = 1,$/;"	e	enum:__anon48
XO_FLDCW	lj_target_x86.h	/^  XO_FLDCW =	XO_(d9), XOg_FLDCW = 5,$/;"	e	enum:__anon48
XO_FLDd	lj_target_x86.h	/^  XO_FLDd =	XO_(d9), XOg_FLDd = 0,$/;"	e	enum:__anon48
XO_FLDq	lj_target_x86.h	/^  XO_FLDq =	XO_(dd), XOg_FLDq = 0,$/;"	e	enum:__anon48
XO_FNSTCW	lj_target_x86.h	/^  XO_FNSTCW =	XO_(d9), XOg_FNSTCW = 7$/;"	e	enum:__anon48
XO_FPU	lj_target_x86.h	180;"	d
XO_FSTPd	lj_target_x86.h	/^  XO_FSTPd =	XO_(d9), XOg_FSTPd = 3,$/;"	e	enum:__anon48
XO_FSTPq	lj_target_x86.h	/^  XO_FSTPq =	XO_(dd), XOg_FSTPq = 3,$/;"	e	enum:__anon48
XO_GROUP3	lj_target_x86.h	/^  XO_GROUP3 =	XO_(f7),$/;"	e	enum:__anon48
XO_GROUP3b	lj_target_x86.h	/^  XO_GROUP3b =	XO_(f6),$/;"	e	enum:__anon48
XO_GROUP5	lj_target_x86.h	/^  XO_GROUP5 =	XO_(ff),$/;"	e	enum:__anon48
XO_GROUP5b	lj_target_x86.h	/^  XO_GROUP5b =	XO_(fe),$/;"	e	enum:__anon48
XO_IMUL	lj_target_x86.h	/^  XO_IMUL =	XO_0f(af),$/;"	e	enum:__anon48
XO_IMULi	lj_target_x86.h	/^  XO_IMULi =	XO_(69),$/;"	e	enum:__anon48
XO_IMULi8	lj_target_x86.h	/^  XO_IMULi8 =	XO_(6b),$/;"	e	enum:__anon48
XO_LEA	lj_target_x86.h	/^  XO_LEA =	XO_(8d),$/;"	e	enum:__anon48
XO_MAXSD	lj_target_x86.h	/^  XO_MAXSD =	XO_f20f(5f),$/;"	e	enum:__anon48
XO_MINSD	lj_target_x86.h	/^  XO_MINSD =	XO_f20f(5d),$/;"	e	enum:__anon48
XO_MOV	lj_target_x86.h	/^  XO_MOV =	XO_(8b),$/;"	e	enum:__anon48
XO_MOVAPS	lj_target_x86.h	/^  XO_MOVAPS =	XO_0f(28),$/;"	e	enum:__anon48
XO_MOVD	lj_target_x86.h	/^  XO_MOVD =	XO_660f(6e),$/;"	e	enum:__anon48
XO_MOVDto	lj_target_x86.h	/^  XO_MOVDto =	XO_660f(7e),$/;"	e	enum:__anon48
XO_MOVLPD	lj_target_x86.h	/^  XO_MOVLPD =	XO_660f(12),$/;"	e	enum:__anon48
XO_MOVSD	lj_target_x86.h	/^  XO_MOVSD =	XO_f20f(10),$/;"	e	enum:__anon48
XO_MOVSDto	lj_target_x86.h	/^  XO_MOVSDto =	XO_f20f(11),$/;"	e	enum:__anon48
XO_MOVSS	lj_target_x86.h	/^  XO_MOVSS =	XO_f30f(10),$/;"	e	enum:__anon48
XO_MOVSSto	lj_target_x86.h	/^  XO_MOVSSto =	XO_f30f(11),$/;"	e	enum:__anon48
XO_MOVSXb	lj_target_x86.h	/^  XO_MOVSXb =	XO_0f(be),$/;"	e	enum:__anon48
XO_MOVSXd	lj_target_x86.h	/^  XO_MOVSXd =	XO_(63),$/;"	e	enum:__anon48
XO_MOVSXw	lj_target_x86.h	/^  XO_MOVSXw =	XO_0f(bf),$/;"	e	enum:__anon48
XO_MOVZXb	lj_target_x86.h	/^  XO_MOVZXb =	XO_0f(b6),$/;"	e	enum:__anon48
XO_MOVZXw	lj_target_x86.h	/^  XO_MOVZXw =	XO_0f(b7),$/;"	e	enum:__anon48
XO_MOVmi	lj_target_x86.h	/^  XO_MOVmi =	XO_(c7),$/;"	e	enum:__anon48
XO_MOVmib	lj_target_x86.h	/^  XO_MOVmib =	XO_(c6),$/;"	e	enum:__anon48
XO_MOVto	lj_target_x86.h	/^  XO_MOVto =	XO_(89),$/;"	e	enum:__anon48
XO_MOVtob	lj_target_x86.h	/^  XO_MOVtob =	XO_(88),$/;"	e	enum:__anon48
XO_MOVtow	lj_target_x86.h	/^  XO_MOVtow =	XO_66(89),$/;"	e	enum:__anon48
XO_MULSD	lj_target_x86.h	/^  XO_MULSD =	XO_f20f(59),$/;"	e	enum:__anon48
XO_ROUNDSD	lj_target_x86.h	/^  XO_ROUNDSD =	0x0b3a0ffc,  \/* Really 66 0f 3a 0b. See asm_fpmath. *\/$/;"	e	enum:__anon48
XO_SHIFT1	lj_target_x86.h	/^  XO_SHIFT1 =	XO_(d1),$/;"	e	enum:__anon48
XO_SHIFTcl	lj_target_x86.h	/^  XO_SHIFTcl =	XO_(d3),$/;"	e	enum:__anon48
XO_SHIFTi	lj_target_x86.h	/^  XO_SHIFTi =	XO_(c1),$/;"	e	enum:__anon48
XO_SQRTSD	lj_target_x86.h	/^  XO_SQRTSD =	XO_f20f(51),$/;"	e	enum:__anon48
XO_SUBSD	lj_target_x86.h	/^  XO_SUBSD =	XO_f20f(5c),$/;"	e	enum:__anon48
XO_TEST	lj_target_x86.h	/^  XO_TEST =	XO_(85),$/;"	e	enum:__anon48
XO_TESTb	lj_target_x86.h	/^  XO_TESTb =	XO_(84),$/;"	e	enum:__anon48
XO_UCOMISD	lj_target_x86.h	/^  XO_UCOMISD =	XO_660f(2e),$/;"	e	enum:__anon48
XO_XORPS	lj_target_x86.h	/^  XO_XORPS =	XO_0f(57),$/;"	e	enum:__anon48
XO_f20f	lj_target_x86.h	184;"	d
XO_f30f	lj_target_x86.h	185;"	d
XOg_ADC	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_ADD	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_AND	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_CALL	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_CALLfar	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_CMP	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_DEC	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_DIV	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_FADDq	lj_target_x86.h	/^  XO_FADDq =	XO_(dc), XOg_FADDq = 0,$/;"	e	enum:__anon48
XOg_FILDd	lj_target_x86.h	/^  XO_FILDd =	XO_(db), XOg_FILDd = 0,$/;"	e	enum:__anon48
XOg_FILDq	lj_target_x86.h	/^  XO_FILDq =	XO_(df), XOg_FILDq = 5,$/;"	e	enum:__anon48
XOg_FISTPq	lj_target_x86.h	/^  XO_FISTPq =	XO_(df), XOg_FISTPq = 7,$/;"	e	enum:__anon48
XOg_FISTTPq	lj_target_x86.h	/^  XO_FISTTPq =	XO_(dd), XOg_FISTTPq = 1,$/;"	e	enum:__anon48
XOg_FLDCW	lj_target_x86.h	/^  XO_FLDCW =	XO_(d9), XOg_FLDCW = 5,$/;"	e	enum:__anon48
XOg_FLDd	lj_target_x86.h	/^  XO_FLDd =	XO_(d9), XOg_FLDd = 0,$/;"	e	enum:__anon48
XOg_FLDq	lj_target_x86.h	/^  XO_FLDq =	XO_(dd), XOg_FLDq = 0,$/;"	e	enum:__anon48
XOg_FNSTCW	lj_target_x86.h	/^  XO_FNSTCW =	XO_(d9), XOg_FNSTCW = 7$/;"	e	enum:__anon48
XOg_FSTPd	lj_target_x86.h	/^  XO_FSTPd =	XO_(d9), XOg_FSTPd = 3,$/;"	e	enum:__anon48
XOg_FSTPq	lj_target_x86.h	/^  XO_FSTPq =	XO_(dd), XOg_FSTPq = 3,$/;"	e	enum:__anon48
XOg_IDIV	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_IMUL	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_INC	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_JMP	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_JMPfar	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_MUL	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_NEG	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_NOT	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_OR	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_PUSH	lj_target_x86.h	/^  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH$/;"	e	enum:__anon52
XOg_RCL	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_RCR	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_ROL	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_ROR	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_SAL	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_SAR	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_SBB	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_SHL	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_SHR	lj_target_x86.h	/^  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR$/;"	e	enum:__anon50
XOg_SUB	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_TEST	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_TEST_	lj_target_x86.h	/^  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV$/;"	e	enum:__anon51
XOg_XOR	lj_target_x86.h	/^  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,$/;"	e	enum:__anon49
XOg_X_IMUL	lj_target_x86.h	/^  XOg_X_IMUL$/;"	e	enum:__anon49
ZIO	host/minilua.c	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio	file:
Zio	host/minilua.c	/^struct Zio{$/;"	s	file:
["!"] 	jit/dis_x86.lua	/^  ["!"] = function(ctx, name, pat)$/;"	f
[""] 	jit/dis_x86.lua	/^  [""] = function(ctx, name, pat)$/;"	f
["*"] 	jit/dis_x86.lua	/^  ["*"] = function(ctx, name, pat)$/;"	f
[":"] 	jit/dis_x86.lua	/^  [":"] = function(ctx, name, pat)$/;"	f
["CONV  "] 	jit/dump.lua	/^  ["CONV  "] = setmetatable({}, { __index = function(t, mode)$/;"	f
["SLOAD "] 	jit/dump.lua	/^  ["SLOAD "] = setmetatable({}, { __index = function(t, mode)$/;"	f
_BUILDVM_H	host/buildvm.h	7;"	d
_GNU_SOURCE	lj_alloc.c	28;"	d	file:
_GNU_SOURCE	ljamalg.c	21;"	d	file:
_LJ_ALLOC_H	lj_alloc.h	7;"	d
_LJ_ARCH_H	lj_arch.h	7;"	d
_LJ_ASM_H	lj_asm.h	7;"	d
_LJ_BCDUMP_H	lj_bcdump.h	7;"	d
_LJ_BC_H	lj_bc.h	7;"	d
_LJ_CARITH_H	lj_carith.h	7;"	d
_LJ_CCALLBACK_H	lj_ccallback.h	7;"	d
_LJ_CCALL_H	lj_ccall.h	7;"	d
_LJ_CCONV_H	lj_cconv.h	7;"	d
_LJ_CDATA_H	lj_cdata.h	7;"	d
_LJ_CHAR_H	lj_char.h	7;"	d
_LJ_CLIB_H	lj_clib.h	7;"	d
_LJ_CPARSE_H	lj_cparse.h	7;"	d
_LJ_CRECORD_H	lj_crecord.h	7;"	d
_LJ_CTYPE_H	lj_ctype.h	7;"	d
_LJ_DEBUG_H	lj_debug.h	7;"	d
_LJ_DEF_H	lj_def.h	7;"	d
_LJ_DISPATCH_H	lj_dispatch.h	7;"	d
_LJ_ERR_H	lj_err.h	7;"	d
_LJ_FFRECORD_H	lj_ffrecord.h	7;"	d
_LJ_FF_H	lj_ff.h	7;"	d
_LJ_FRAME_H	lj_frame.h	7;"	d
_LJ_FUNC_H	lj_func.h	7;"	d
_LJ_GC_H	lj_gc.h	7;"	d
_LJ_GDBJIT_H	lj_gdbjit.h	7;"	d
_LJ_IRCALL_H	lj_ircall.h	7;"	d
_LJ_IROPT_H	lj_iropt.h	7;"	d
_LJ_IR_H	lj_ir.h	7;"	d
_LJ_JIT_H	lj_jit.h	7;"	d
_LJ_LEX_H	lj_lex.h	8;"	d
_LJ_LIB_H	lj_lib.h	7;"	d
_LJ_MCODE_H	lj_mcode.h	7;"	d
_LJ_META_H	lj_meta.h	7;"	d
_LJ_OBJ_H	lj_obj.h	10;"	d
_LJ_PARSE_H	lj_parse.h	7;"	d
_LJ_RECORD_H	lj_record.h	7;"	d
_LJ_SNAP_H	lj_snap.h	7;"	d
_LJ_STATE_H	lj_state.h	7;"	d
_LJ_STRSCAN_H	lj_strscan.h	7;"	d
_LJ_STR_H	lj_str.h	7;"	d
_LJ_TAB_H	lj_tab.h	7;"	d
_LJ_TARGET_ARM_H	lj_target_arm.h	7;"	d
_LJ_TARGET_H	lj_target.h	7;"	d
_LJ_TARGET_MIPS_H	lj_target_mips.h	7;"	d
_LJ_TARGET_PPC_H	lj_target_ppc.h	7;"	d
_LJ_TARGET_X86_H	lj_target_x86.h	7;"	d
_LJ_TRACE_H	lj_trace.h	7;"	d
_LJ_UDATA_H	lj_udata.h	7;"	d
_LJ_VMEVENT_H	lj_vmevent.h	7;"	d
_LJ_VM_H	lj_vm.h	7;"	d
_LUAJIT_H	luajit.h	29;"	d
_LUALIB_H	lualib.h	7;"	d
_UA_CLEANUP_PHASE	lj_err.c	220;"	d	file:
_UA_FORCE_UNWIND	lj_err.c	222;"	d	file:
_UA_HANDLER_FRAME	lj_err.c	221;"	d	file:
_UA_SEARCH_PHASE	lj_err.c	219;"	d	file:
_URC_CONTINUE_UNWIND	lj_err.c	208;"	d	file:
_URC_FAILURE	lj_err.c	209;"	d	file:
_URC_FATAL_PHASE1_ERROR	lj_err.c	205;"	d	file:
_URC_HANDLER_FOUND	lj_err.c	206;"	d	file:
_URC_INSTALL_CONTEXT	lj_err.c	207;"	d	file:
_URC_OK	lj_err.c	204;"	d	file:
_US_ACTION_MASK	lj_err.c	328;"	d	file:
_US_FORCE_UNWIND	lj_err.c	329;"	d	file:
_US_UNWIND_FRAME_STARTING	lj_err.c	327;"	d	file:
_US_VIRTUAL_UNWIND_FRAME	lj_err.c	326;"	d	file:
_Unwind_Context	lj_err.c	/^typedef struct _Unwind_Context _Unwind_Context;$/;"	t	typeref:struct:_Unwind_Context	file:
_Unwind_Exception	lj_err.c	/^typedef struct _Unwind_Exception$/;"	s	file:
_Unwind_Exception	lj_err.c	/^} __attribute__((__aligned__)) _Unwind_Exception;$/;"	t	typeref:struct:_Unwind_Exception	file:
_Unwind_GetGR	lj_err.c	/^static inline uint32_t _Unwind_GetGR(_Unwind_Context *ctx, int r)$/;"	f	file:
_Unwind_SetGR	lj_err.c	/^static inline void _Unwind_SetGR(_Unwind_Context *ctx, int r, uint32_t v)$/;"	f	file:
__jit_debug_descriptor	lj_gdbjit.c	/^GDBJITdesc __jit_debug_descriptor = {$/;"	v
__jit_debug_register_code	lj_gdbjit.c	/^void LJ_NOINLINE __jit_debug_register_code()$/;"	f
aa_ahref	lj_opt_mem.c	/^static AliasRet aa_ahref(jit_State *J, IRIns *refa, IRIns *refb)$/;"	f	file:
aa_cnew	lj_opt_mem.c	/^static AliasRet aa_cnew(jit_State *J, IRIns *refa, IRIns *refb)$/;"	f	file:
aa_escape	lj_opt_mem.c	/^static AliasRet aa_escape(jit_State *J, IRIns *ir, IRIns *stop)$/;"	f	file:
aa_findcnew	lj_opt_mem.c	/^static IRIns *aa_findcnew(jit_State *J, IRIns *ir)$/;"	f	file:
aa_fref	lj_opt_mem.c	/^static AliasRet aa_fref(jit_State *J, IRIns *refa, IRIns *refb)$/;"	f	file:
aa_table	lj_opt_mem.c	/^static AliasRet aa_table(jit_State *J, IRRef ta, IRRef tb)$/;"	f	file:
aa_uref	lj_opt_mem.c	/^static AliasRet aa_uref(IRIns *refa, IRIns *refb)$/;"	f	file:
aa_xref	lj_opt_mem.c	/^static AliasRet aa_xref(jit_State *J, IRIns *refa, IRIns *xa, IRIns *xb)$/;"	f	file:
abs_index	lib_aux.c	255;"	d	file:
action_flag	lj_gdbjit.c	/^  uint32_t action_flag;$/;"	m	struct:GDBJITdesc	file:
actvar	host/minilua.c	/^unsigned short actvar[200];$/;"	m	struct:FuncState	file:
add_s	host/minilua.c	/^static void add_s(MatchState*ms,luaL_Buffer*b,const char*s,$/;"	f	file:
add_s	lib_string.c	/^static void add_s(MatchState *ms, luaL_Buffer *b, const char *s, const char *e)$/;"	f	file:
add_segment	lj_alloc.c	/^static void add_segment(mstate m, char *tbase, size_t tsize)$/;"	f	file:
add_value	host/minilua.c	/^static void add_value(MatchState*ms,luaL_Buffer*b,const char*s,$/;"	f	file:
add_value	lib_string.c	/^static void add_value(MatchState *ms, luaL_Buffer *b,$/;"	f	file:
addchar	lj_str.c	/^static void addchar(lua_State *L, SBuf *sb, int c)$/;"	f	file:
addfield	host/minilua.c	/^static void addfield(lua_State*L,luaL_Buffer*b,int i){$/;"	f	file:
addinfo	host/minilua.c	/^static void addinfo(lua_State*L,const char*msg){$/;"	f	file:
addintlen	host/minilua.c	/^static void addintlen(char*form){$/;"	f	file:
addintlen	lib_string.c	/^static void addintlen(char *form)$/;"	f	file:
addk	host/minilua.c	/^static int addk(FuncState*fs,TValue*k,TValue*v){$/;"	f	file:
addquoted	host/minilua.c	/^static void addquoted(lua_State*L,luaL_Buffer*b,int arg){$/;"	f	file:
addquoted	lib_string.c	/^static void addquoted(lua_State *L, luaL_Buffer *b, int arg)$/;"	f	file:
addr	lj_gdbjit.c	/^  uintptr_t addr;$/;"	m	struct:ELFsectheader	file:
addstr	lj_str.c	/^static void addstr(lua_State *L, SBuf *sb, const char *str, MSize len)$/;"	f	file:
adjust_assign	host/minilua.c	/^static void adjust_assign(LexState*ls,int nvars,int nexps,expdesc*e){$/;"	f	file:
adjust_varargs	host/minilua.c	/^static StkId adjust_varargs(lua_State*L,Proto*p,int actual){$/;"	f	file:
adjustlocalvars	host/minilua.c	/^static void adjustlocalvars(LexState*ls,int nvars){$/;"	f	file:
adjustresults	host/minilua.c	5750;"	d	file:
adjuststack	host/minilua.c	/^static void adjuststack(luaL_Buffer*B){$/;"	f	file:
adjuststack	lib_aux.c	/^static void adjuststack(luaL_Buffer *B)$/;"	f	file:
align	lj_gdbjit.c	/^  uintptr_t align;$/;"	m	struct:ELFsectheader	file:
align1	lj_ccall.h	/^  int32_t align1;$/;"	m	struct:CCallState
align1	lj_obj.h	/^  uint32_t align1;	\/* To force 8 byte alignment of the payload. *\/$/;"	m	struct:GCudata
align_as_chunk	lj_alloc.c	330;"	d	file:
align_offset	lj_alloc.c	64;"	d	file:
alloc_sys	lj_alloc.c	/^static void *alloc_sys(mstate m, size_t nb)$/;"	f	file:
alloc_trim	lj_alloc.c	/^static int alloc_trim(mstate m, size_t pad)$/;"	f	file:
allocd	lj_obj.h	/^  void *allocd;		\/* Memory allocator data. *\/$/;"	m	struct:global_State
allocf	lj_obj.h	/^  lua_Alloc allocf;	\/* Memory allocator. *\/$/;"	m	struct:global_State
allowhook	host/minilua.c	/^lu_byte allowhook;$/;"	m	struct:lua_State	file:
anchor_token	host/minilua.c	/^static void anchor_token(LexState*ls){$/;"	f	file:
api_check	lj_def.h	303;"	d
api_check	lj_def.h	307;"	d
api_checknelems	host/minilua.c	5309;"	d	file:
api_checknelems	lj_api.c	30;"	d	file:
api_checkvalidindex	host/minilua.c	5310;"	d	file:
api_checkvalidindex	lj_api.c	31;"	d	file:
api_incr_top	host/minilua.c	5311;"	d	file:
arch	host/buildvm_peobj.c	/^  uint16_t arch;$/;"	m	struct:PEheader	file:
arg	host/buildvm_lib.c	/^  const int arg;$/;"	m	struct:LibDefHandler	file:
argc	luajit.c	/^  int argc;$/;"	m	struct:Smain	file:
args	host/buildvm.h	/^  char **args;$/;"	m	struct:BuildCtx
argv	lj_ffrecord.h	/^  TValue *argv;		\/* Runtime argument values. *\/$/;"	m	struct:RecordFFData
argv	luajit.c	/^  char **argv;$/;"	m	struct:Smain	file:
argv2cdata	lj_crecord.c	/^static GCcdata *argv2cdata(jit_State *J, TRef tr, cTValue *o)$/;"	f	file:
argv2ctype	lj_crecord.c	/^static CTypeID argv2ctype(jit_State *J, TRef tr, cTValue *o)$/;"	f	file:
argv2int	lj_ffrecord.c	/^static int32_t argv2int(jit_State *J, TValue *o)$/;"	f	file:
argv2str	lj_ffrecord.c	/^static GCstr *argv2str(jit_State *J, TValue *o)$/;"	f	file:
arith_op	host/minilua.c	4942;"	d	file:
array	host/minilua.c	/^TValue*array;$/;"	m	struct:Table	file:
array	lj_obj.h	/^  MRef array;		\/* Array part. *\/$/;"	m	struct:GCtab
arrayindex	host/minilua.c	/^static int arrayindex(const TValue*key){$/;"	f	file:
arrayslot	lj_tab.h	58;"	d
arshift	host/minilua.c	/^static int arshift(lua_State*L){$/;"	f	file:
asize	lj_obj.h	/^  uint32_t asize;	\/* Size of array part (keys [0, asize-1]). *\/$/;"	m	struct:GCtab
asm_add	lj_asm_arm.h	/^static void asm_add(ASMState *as, IRIns *ir)$/;"	f
asm_add	lj_asm_mips.h	/^static void asm_add(ASMState *as, IRIns *ir)$/;"	f
asm_add	lj_asm_ppc.h	/^static void asm_add(ASMState *as, IRIns *ir)$/;"	f
asm_add	lj_asm_x86.h	/^static void asm_add(ASMState *as, IRIns *ir)$/;"	f
asm_add64	lj_asm_mips.h	/^static void asm_add64(ASMState *as, IRIns *ir)$/;"	f
asm_add64	lj_asm_ppc.h	/^static void asm_add64(ASMState *as, IRIns *ir)$/;"	f
asm_ahustore	lj_asm_arm.h	/^static void asm_ahustore(ASMState *as, IRIns *ir)$/;"	f
asm_ahustore	lj_asm_mips.h	/^static void asm_ahustore(ASMState *as, IRIns *ir)$/;"	f
asm_ahustore	lj_asm_ppc.h	/^static void asm_ahustore(ASMState *as, IRIns *ir)$/;"	f
asm_ahustore	lj_asm_x86.h	/^static void asm_ahustore(ASMState *as, IRIns *ir)$/;"	f
asm_ahuvload	lj_asm_arm.h	/^static void asm_ahuvload(ASMState *as, IRIns *ir)$/;"	f
asm_ahuvload	lj_asm_mips.h	/^static void asm_ahuvload(ASMState *as, IRIns *ir)$/;"	f
asm_ahuvload	lj_asm_ppc.h	/^static void asm_ahuvload(ASMState *as, IRIns *ir)$/;"	f
asm_ahuvload	lj_asm_x86.h	/^static void asm_ahuvload(ASMState *as, IRIns *ir)$/;"	f
asm_aref	lj_asm_arm.h	/^static void asm_aref(ASMState *as, IRIns *ir)$/;"	f
asm_aref	lj_asm_mips.h	/^static void asm_aref(ASMState *as, IRIns *ir)$/;"	f
asm_aref	lj_asm_ppc.h	/^static void asm_aref(ASMState *as, IRIns *ir)$/;"	f
asm_aref	lj_asm_x86.h	/^static void asm_aref(ASMState *as, IRIns *ir)$/;"	f
asm_arith64	lj_asm_x86.h	/^static void asm_arith64(ASMState *as, IRIns *ir, IRCallID id)$/;"	f
asm_arithov	lj_asm_mips.h	/^static void asm_arithov(ASMState *as, IRIns *ir)$/;"	f
asm_arithov	lj_asm_ppc.h	/^static void asm_arithov(ASMState *as, IRIns *ir, PPCIns pi)$/;"	f
asm_baseslot	lj_asm.c	/^static BCReg asm_baseslot(ASMState *as, SnapShot *snap, int *gotframe)$/;"	f	file:
asm_bitand	lj_asm_ppc.h	/^static void asm_bitand(ASMState *as, IRIns *ir)$/;"	f
asm_bitnot	lj_asm_mips.h	/^static void asm_bitnot(ASMState *as, IRIns *ir)$/;"	f
asm_bitnot	lj_asm_ppc.h	/^static void asm_bitnot(ASMState *as, IRIns *ir)$/;"	f
asm_bitop	lj_asm_arm.h	/^static void asm_bitop(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_bitop	lj_asm_mips.h	/^static void asm_bitop(ASMState *as, IRIns *ir, MIPSIns mi, MIPSIns mik)$/;"	f
asm_bitop	lj_asm_ppc.h	/^static void asm_bitop(ASMState *as, IRIns *ir, PPCIns pi, PPCIns pik)$/;"	f
asm_bitror	lj_asm_mips.h	/^static void asm_bitror(ASMState *as, IRIns *ir)$/;"	f
asm_bitshift	lj_asm_arm.h	/^static void asm_bitshift(ASMState *as, IRIns *ir, ARMShift sh)$/;"	f
asm_bitshift	lj_asm_mips.h	/^static void asm_bitshift(ASMState *as, IRIns *ir, MIPSIns mi, MIPSIns mik)$/;"	f
asm_bitshift	lj_asm_ppc.h	/^static void asm_bitshift(ASMState *as, IRIns *ir, PPCIns pi, PPCIns pik)$/;"	f
asm_bitshift	lj_asm_x86.h	/^static void asm_bitshift(ASMState *as, IRIns *ir, x86Shift xs)$/;"	f
asm_bitswap	lj_asm_arm.h	/^static void asm_bitswap(ASMState *as, IRIns *ir)$/;"	f
asm_bitswap	lj_asm_mips.h	/^static void asm_bitswap(ASMState *as, IRIns *ir)$/;"	f
asm_bitswap	lj_asm_ppc.h	/^static void asm_bitswap(ASMState *as, IRIns *ir)$/;"	f
asm_bitswap	lj_asm_x86.h	/^static void asm_bitswap(ASMState *as, IRIns *ir)$/;"	f
asm_call	lj_asm_arm.h	/^static void asm_call(ASMState *as, IRIns *ir)$/;"	f
asm_call	lj_asm_mips.h	/^static void asm_call(ASMState *as, IRIns *ir)$/;"	f
asm_call	lj_asm_ppc.h	/^static void asm_call(ASMState *as, IRIns *ir)$/;"	f
asm_call	lj_asm_x86.h	/^static void asm_call(ASMState *as, IRIns *ir)$/;"	f
asm_callid	lj_asm_arm.h	/^static void asm_callid(ASMState *as, IRIns *ir, IRCallID id)$/;"	f
asm_callid	lj_asm_mips.h	/^static void asm_callid(ASMState *as, IRIns *ir, IRCallID id)$/;"	f
asm_callid	lj_asm_ppc.h	/^static void asm_callid(ASMState *as, IRIns *ir, IRCallID id)$/;"	f
asm_callround	lj_asm_arm.h	/^static void asm_callround(ASMState *as, IRIns *ir, int id)$/;"	f
asm_callround	lj_asm_mips.h	/^static void asm_callround(ASMState *as, IRIns *ir, IRCallID id)$/;"	f
asm_callx	lj_asm_arm.h	/^static void asm_callx(ASMState *as, IRIns *ir)$/;"	f
asm_callx	lj_asm_mips.h	/^static void asm_callx(ASMState *as, IRIns *ir)$/;"	f
asm_callx	lj_asm_ppc.h	/^static void asm_callx(ASMState *as, IRIns *ir)$/;"	f
asm_callx	lj_asm_x86.h	/^static void asm_callx(ASMState *as, IRIns *ir)$/;"	f
asm_callx_flags	lj_asm.c	/^static uint32_t asm_callx_flags(ASMState *as, IRIns *ir)$/;"	f	file:
asm_callx_func	lj_asm_x86.h	/^static void *asm_callx_func(ASMState *as, IRIns *irf, IRRef func)$/;"	f
asm_cnew	lj_asm_arm.h	/^static void asm_cnew(ASMState *as, IRIns *ir)$/;"	f
asm_cnew	lj_asm_arm.h	1323;"	d
asm_cnew	lj_asm_mips.h	/^static void asm_cnew(ASMState *as, IRIns *ir)$/;"	f
asm_cnew	lj_asm_mips.h	1089;"	d
asm_cnew	lj_asm_ppc.h	/^static void asm_cnew(ASMState *as, IRIns *ir)$/;"	f
asm_cnew	lj_asm_ppc.h	1128;"	d
asm_cnew	lj_asm_x86.h	/^static void asm_cnew(ASMState *as, IRIns *ir)$/;"	f
asm_cnew	lj_asm_x86.h	1546;"	d
asm_collectargs	lj_asm.c	/^static void asm_collectargs(ASMState *as, IRIns *ir,$/;"	f	file:
asm_comp	lj_asm_mips.h	/^static void asm_comp(ASMState *as, IRIns *ir)$/;"	f
asm_comp	lj_asm_ppc.h	/^static void asm_comp(ASMState *as, IRIns *ir)$/;"	f
asm_comp	lj_asm_x86.h	/^static void asm_comp(ASMState *as, IRIns *ir, uint32_t cc)$/;"	f
asm_comp64	lj_asm_mips.h	/^static void asm_comp64(ASMState *as, IRIns *ir)$/;"	f
asm_comp64	lj_asm_ppc.h	/^static void asm_comp64(ASMState *as, IRIns *ir)$/;"	f
asm_comp64eq	lj_asm_mips.h	/^static void asm_comp64eq(ASMState *as, IRIns *ir)$/;"	f
asm_comp_int64	lj_asm_x86.h	/^static void asm_comp_int64(ASMState *as, IRIns *ir)$/;"	f
asm_compeq	lj_asm_mips.h	/^static void asm_compeq(ASMState *as, IRIns *ir)$/;"	f
asm_compmap	lj_asm_arm.h	/^static const uint8_t asm_compmap[IR_ABC+1] = {$/;"	v
asm_compmap	lj_asm_ppc.h	/^static const uint8_t asm_compmap[IR_ABC+1] = {$/;"	v
asm_compmap	lj_asm_x86.h	/^static const uint16_t asm_compmap[IR_ABC+1] = {$/;"	v
asm_conv	lj_asm_arm.h	/^static void asm_conv(ASMState *as, IRIns *ir)$/;"	f
asm_conv	lj_asm_mips.h	/^static void asm_conv(ASMState *as, IRIns *ir)$/;"	f
asm_conv	lj_asm_ppc.h	/^static void asm_conv(ASMState *as, IRIns *ir)$/;"	f
asm_conv	lj_asm_x86.h	/^static void asm_conv(ASMState *as, IRIns *ir)$/;"	f
asm_conv64	lj_asm_arm.h	/^static void asm_conv64(ASMState *as, IRIns *ir)$/;"	f
asm_conv64	lj_asm_mips.h	/^static void asm_conv64(ASMState *as, IRIns *ir)$/;"	f
asm_conv64	lj_asm_ppc.h	/^static void asm_conv64(ASMState *as, IRIns *ir)$/;"	f
asm_conv_fp_int64	lj_asm_x86.h	/^static void asm_conv_fp_int64(ASMState *as, IRIns *ir)$/;"	f
asm_conv_int64_fp	lj_asm_x86.h	/^static void asm_conv_int64_fp(ASMState *as, IRIns *ir)$/;"	f
asm_count_call_slots	lj_asm_x86.h	/^static int asm_count_call_slots(ASMState *as, const CCallInfo *ci, IRRef *args)$/;"	f
asm_exitstub_addr	lj_asm_mips.h	93;"	d
asm_exitstub_addr	lj_asm_ppc.h	/^static MCode *asm_exitstub_addr(ASMState *as, ExitNo exitno)$/;"	f
asm_exitstub_gen	lj_asm_arm.h	/^static MCode *asm_exitstub_gen(ASMState *as, ExitNo group)$/;"	f
asm_exitstub_gen	lj_asm_x86.h	/^static MCode *asm_exitstub_gen(ASMState *as, ExitNo group)$/;"	f
asm_exitstub_setup	lj_asm_arm.h	/^static void asm_exitstub_setup(ASMState *as, ExitNo nexits)$/;"	f
asm_exitstub_setup	lj_asm_mips.h	/^static void asm_exitstub_setup(ASMState *as)$/;"	f
asm_exitstub_setup	lj_asm_ppc.h	/^static void asm_exitstub_setup(ASMState *as, ExitNo nexits)$/;"	f
asm_exitstub_setup	lj_asm_x86.h	/^static void asm_exitstub_setup(ASMState *as, ExitNo nexits)$/;"	f
asm_fload	lj_asm_arm.h	/^static void asm_fload(ASMState *as, IRIns *ir)$/;"	f
asm_fload	lj_asm_mips.h	/^static void asm_fload(ASMState *as, IRIns *ir)$/;"	f
asm_fload	lj_asm_ppc.h	/^static void asm_fload(ASMState *as, IRIns *ir)$/;"	f
asm_fparith	lj_asm_arm.h	/^static void asm_fparith(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_fparith	lj_asm_mips.h	/^static void asm_fparith(ASMState *as, IRIns *ir, MIPSIns mi)$/;"	f
asm_fparith	lj_asm_ppc.h	/^static void asm_fparith(ASMState *as, IRIns *ir, PPCIns pi)$/;"	f
asm_fparith	lj_asm_x86.h	/^static void asm_fparith(ASMState *as, IRIns *ir, x86Op xo)$/;"	f
asm_fpcomp	lj_asm_arm.h	/^static void asm_fpcomp(ASMState *as, IRIns *ir)$/;"	f
asm_fpjoin_pow	lj_asm_arm.h	/^static int asm_fpjoin_pow(ASMState *as, IRIns *ir)$/;"	f
asm_fpjoin_pow	lj_asm_mips.h	/^static int asm_fpjoin_pow(ASMState *as, IRIns *ir)$/;"	f
asm_fpjoin_pow	lj_asm_ppc.h	/^static int asm_fpjoin_pow(ASMState *as, IRIns *ir)$/;"	f
asm_fpmath	lj_asm_x86.h	/^static void asm_fpmath(ASMState *as, IRIns *ir)$/;"	f
asm_fpmin_max	lj_asm_arm.h	/^static void asm_fpmin_max(ASMState *as, IRIns *ir, int cc)$/;"	f
asm_fppowi	lj_asm_x86.h	/^static void asm_fppowi(ASMState *as, IRIns *ir)$/;"	f
asm_fpunary	lj_asm_arm.h	/^static void asm_fpunary(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_fpunary	lj_asm_mips.h	/^static void asm_fpunary(ASMState *as, IRIns *ir, MIPSIns mi)$/;"	f
asm_fpunary	lj_asm_ppc.h	/^static void asm_fpunary(ASMState *as, IRIns *ir, PPCIns pi)$/;"	f
asm_fref	lj_asm_arm.h	/^static void asm_fref(ASMState *as, IRIns *ir)$/;"	f
asm_fref	lj_asm_mips.h	/^static void asm_fref(ASMState *as, IRIns *ir)$/;"	f
asm_fref	lj_asm_ppc.h	/^static void asm_fref(ASMState *as, IRIns *ir)$/;"	f
asm_fref	lj_asm_x86.h	/^static void asm_fref(ASMState *as, IRIns *ir)$/;"	f
asm_fstore	lj_asm_arm.h	/^static void asm_fstore(ASMState *as, IRIns *ir)$/;"	f
asm_fstore	lj_asm_mips.h	/^static void asm_fstore(ASMState *as, IRIns *ir)$/;"	f
asm_fstore	lj_asm_ppc.h	/^static void asm_fstore(ASMState *as, IRIns *ir)$/;"	f
asm_fuseabase	lj_asm_arm.h	/^static int32_t asm_fuseabase(ASMState *as, IRRef ref)$/;"	f
asm_fuseabase	lj_asm_mips.h	/^static int32_t asm_fuseabase(ASMState *as, IRRef ref)$/;"	f
asm_fuseabase	lj_asm_ppc.h	/^static int32_t asm_fuseabase(ASMState *as, IRRef ref)$/;"	f
asm_fuseabase	lj_asm_x86.h	/^static IRRef asm_fuseabase(ASMState *as, IRRef ref)$/;"	f
asm_fuseahuref	lj_asm_arm.h	/^static Reg asm_fuseahuref(ASMState *as, IRRef ref, int32_t *ofsp, RegSet allow,$/;"	f
asm_fuseahuref	lj_asm_mips.h	/^static Reg asm_fuseahuref(ASMState *as, IRRef ref, int32_t *ofsp, RegSet allow)$/;"	f
asm_fuseahuref	lj_asm_ppc.h	/^static Reg asm_fuseahuref(ASMState *as, IRRef ref, int32_t *ofsp, RegSet allow)$/;"	f
asm_fuseahuref	lj_asm_x86.h	/^static void asm_fuseahuref(ASMState *as, IRRef ref, RegSet allow)$/;"	f
asm_fuseandsh	lj_asm_ppc.h	/^static void asm_fuseandsh(ASMState *as, PPCIns pi, int32_t mask, IRRef ref)$/;"	f
asm_fusearef	lj_asm_x86.h	/^static void asm_fusearef(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
asm_fusefref	lj_asm_x86.h	/^static void asm_fusefref(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
asm_fuseload	lj_asm_x86.h	/^static Reg asm_fuseload(ASMState *as, IRRef ref, RegSet allow)$/;"	f
asm_fuselsl2	lj_asm_arm.h	/^static IRRef asm_fuselsl2(ASMState *as, IRRef ref)$/;"	f
asm_fusemadd	lj_asm_arm.h	/^static int asm_fusemadd(ASMState *as, IRIns *ir, ARMIns ai, ARMIns air)$/;"	f
asm_fusemadd	lj_asm_ppc.h	/^static int asm_fusemadd(ASMState *as, IRIns *ir, PPCIns pi, PPCIns pir)$/;"	f
asm_fuseopm	lj_asm_arm.h	/^static uint32_t asm_fuseopm(ASMState *as, ARMIns ai, IRRef ref, RegSet allow)$/;"	f
asm_fusestrref	lj_asm_x86.h	/^static void asm_fusestrref(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
asm_fusexref	lj_asm_arm.h	/^static void asm_fusexref(ASMState *as, ARMIns ai, Reg rd, IRRef ref,$/;"	f
asm_fusexref	lj_asm_mips.h	/^static void asm_fusexref(ASMState *as, MIPSIns mi, Reg rt, IRRef ref,$/;"	f
asm_fusexref	lj_asm_ppc.h	/^static void asm_fusexref(ASMState *as, PPCIns pi, Reg rt, IRRef ref,$/;"	f
asm_fusexref	lj_asm_x86.h	/^static void asm_fusexref(ASMState *as, IRRef ref, RegSet allow)$/;"	f
asm_fusexrefx	lj_asm_ppc.h	/^static void asm_fusexrefx(ASMState *as, PPCIns pi, Reg rt, IRRef ref,$/;"	f
asm_fxload	lj_asm_x86.h	/^static void asm_fxload(ASMState *as, IRIns *ir)$/;"	f
asm_fxloadins	lj_asm_arm.h	/^static ARMIns asm_fxloadins(IRIns *ir)$/;"	f
asm_fxloadins	lj_asm_mips.h	/^static MIPSIns asm_fxloadins(IRIns *ir)$/;"	f
asm_fxloadins	lj_asm_ppc.h	/^static PPCIns asm_fxloadins(IRIns *ir)$/;"	f
asm_fxstore	lj_asm_x86.h	/^static void asm_fxstore(ASMState *as, IRIns *ir)$/;"	f
asm_fxstoreins	lj_asm_arm.h	/^static ARMIns asm_fxstoreins(IRIns *ir)$/;"	f
asm_fxstoreins	lj_asm_mips.h	/^static MIPSIns asm_fxstoreins(IRIns *ir)$/;"	f
asm_fxstoreins	lj_asm_ppc.h	/^static PPCIns asm_fxstoreins(IRIns *ir)$/;"	f
asm_gc_check	lj_asm_arm.h	/^static void asm_gc_check(ASMState *as)$/;"	f
asm_gc_check	lj_asm_mips.h	/^static void asm_gc_check(ASMState *as)$/;"	f
asm_gc_check	lj_asm_ppc.h	/^static void asm_gc_check(ASMState *as)$/;"	f
asm_gc_check	lj_asm_x86.h	/^static void asm_gc_check(ASMState *as)$/;"	f
asm_gcstep	lj_asm.c	/^static void asm_gcstep(ASMState *as, IRIns *ir)$/;"	f	file:
asm_gencall	lj_asm_arm.h	/^static void asm_gencall(ASMState *as, const CCallInfo *ci, IRRef *args)$/;"	f
asm_gencall	lj_asm_mips.h	/^static void asm_gencall(ASMState *as, const CCallInfo *ci, IRRef *args)$/;"	f
asm_gencall	lj_asm_ppc.h	/^static void asm_gencall(ASMState *as, const CCallInfo *ci, IRRef *args)$/;"	f
asm_gencall	lj_asm_x86.h	/^static void asm_gencall(ASMState *as, const CCallInfo *ci, IRRef *args)$/;"	f
asm_guard	lj_asm_mips.h	/^static void asm_guard(ASMState *as, MIPSIns mi, Reg rs, Reg rt)$/;"	f
asm_guardcc	lj_asm_arm.h	/^static void asm_guardcc(ASMState *as, ARMCC cc)$/;"	f
asm_guardcc	lj_asm_ppc.h	/^static void asm_guardcc(ASMState *as, PPCCC cc)$/;"	f
asm_guardcc	lj_asm_x86.h	/^static void asm_guardcc(ASMState *as, int cc)$/;"	f
asm_head_lreg	lj_asm_arm.h	/^static void asm_head_lreg(ASMState *as)$/;"	f
asm_head_root	lj_asm.c	/^static void asm_head_root(ASMState *as)$/;"	f	file:
asm_head_root_base	lj_asm_arm.h	/^static void asm_head_root_base(ASMState *as)$/;"	f
asm_head_root_base	lj_asm_mips.h	/^static void asm_head_root_base(ASMState *as)$/;"	f
asm_head_root_base	lj_asm_ppc.h	/^static void asm_head_root_base(ASMState *as)$/;"	f
asm_head_root_base	lj_asm_x86.h	/^static void asm_head_root_base(ASMState *as)$/;"	f
asm_head_side	lj_asm.c	/^static void asm_head_side(ASMState *as)$/;"	f	file:
asm_head_side_base	lj_asm_arm.h	/^static RegSet asm_head_side_base(ASMState *as, IRIns *irp, RegSet allow)$/;"	f
asm_head_side_base	lj_asm_mips.h	/^static RegSet asm_head_side_base(ASMState *as, IRIns *irp, RegSet allow)$/;"	f
asm_head_side_base	lj_asm_ppc.h	/^static RegSet asm_head_side_base(ASMState *as, IRIns *irp, RegSet allow)$/;"	f
asm_head_side_base	lj_asm_x86.h	/^static RegSet asm_head_side_base(ASMState *as, IRIns *irp, RegSet allow)$/;"	f
asm_hiop	lj_asm_arm.h	/^static void asm_hiop(ASMState *as, IRIns *ir)$/;"	f
asm_hiop	lj_asm_mips.h	/^static void asm_hiop(ASMState *as, IRIns *ir)$/;"	f
asm_hiop	lj_asm_ppc.h	/^static void asm_hiop(ASMState *as, IRIns *ir)$/;"	f
asm_hiop	lj_asm_x86.h	/^static void asm_hiop(ASMState *as, IRIns *ir)$/;"	f
asm_href	lj_asm_arm.h	/^static void asm_href(ASMState *as, IRIns *ir, IROp merge)$/;"	f
asm_href	lj_asm_mips.h	/^static void asm_href(ASMState *as, IRIns *ir)$/;"	f
asm_href	lj_asm_ppc.h	/^static void asm_href(ASMState *as, IRIns *ir, IROp merge)$/;"	f
asm_href	lj_asm_x86.h	/^static void asm_href(ASMState *as, IRIns *ir)$/;"	f
asm_hrefk	lj_asm_arm.h	/^static void asm_hrefk(ASMState *as, IRIns *ir)$/;"	f
asm_hrefk	lj_asm_mips.h	/^static void asm_hrefk(ASMState *as, IRIns *ir)$/;"	f
asm_hrefk	lj_asm_ppc.h	/^static void asm_hrefk(ASMState *as, IRIns *ir)$/;"	f
asm_hrefk	lj_asm_x86.h	/^static void asm_hrefk(ASMState *as, IRIns *ir)$/;"	f
asm_int64comp	lj_asm_arm.h	/^static void asm_int64comp(ASMState *as, IRIns *ir)$/;"	f
asm_intarith	lj_asm_x86.h	/^static void asm_intarith(ASMState *as, IRIns *ir, x86Arith xa)$/;"	f
asm_intcomp	lj_asm_arm.h	/^static void asm_intcomp(ASMState *as, IRIns *ir)$/;"	f
asm_intcomp_	lj_asm_ppc.h	/^static void asm_intcomp_(ASMState *as, IRRef lref, IRRef rref, Reg cr, PPCCC cc)$/;"	f
asm_intmin_max	lj_asm_arm.h	/^static void asm_intmin_max(ASMState *as, IRIns *ir, int cc)$/;"	f
asm_intmod	lj_asm_x86.h	/^static void asm_intmod(ASMState *as, IRIns *ir)$/;"	f
asm_intmul	lj_asm_arm.h	/^static void asm_intmul(ASMState *as, IRIns *ir)$/;"	f
asm_intneg	lj_asm_arm.h	/^static void asm_intneg(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_intop	lj_asm_arm.h	/^static void asm_intop(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_intop_s	lj_asm_arm.h	/^static void asm_intop_s(ASMState *as, IRIns *ir, ARMIns ai)$/;"	f
asm_ir	lj_asm_arm.h	/^static void asm_ir(ASMState *as, IRIns *ir)$/;"	f
asm_ir	lj_asm_mips.h	/^static void asm_ir(ASMState *as, IRIns *ir)$/;"	f
asm_ir	lj_asm_ppc.h	/^static void asm_ir(ASMState *as, IRIns *ir)$/;"	f
asm_ir	lj_asm_x86.h	/^static void asm_ir(ASMState *as, IRIns *ir)$/;"	f
asm_isk32	lj_asm_x86.h	/^static int asm_isk32(ASMState *as, IRRef ref, int32_t *k)$/;"	f
asm_lea	lj_asm_x86.h	/^static int asm_lea(ASMState *as, IRIns *ir)$/;"	f
asm_load_lightud64	lj_asm_x86.h	/^static Reg asm_load_lightud64(ASMState *as, IRIns *ir, int typecheck)$/;"	f
asm_loop	lj_asm.c	/^static void asm_loop(ASMState *as)$/;"	f	file:
asm_loop_fixup	lj_asm_arm.h	/^static void asm_loop_fixup(ASMState *as)$/;"	f
asm_loop_fixup	lj_asm_mips.h	/^static void asm_loop_fixup(ASMState *as)$/;"	f
asm_loop_fixup	lj_asm_ppc.h	/^static void asm_loop_fixup(ASMState *as)$/;"	f
asm_loop_fixup	lj_asm_x86.h	/^static void asm_loop_fixup(ASMState *as)$/;"	f
asm_mclimit	lj_asm.c	/^static LJ_NORET LJ_NOINLINE void asm_mclimit(ASMState *as)$/;"	f	file:
asm_min_max	lj_asm_arm.h	/^static void asm_min_max(ASMState *as, IRIns *ir, int cc, int fcc)$/;"	f
asm_min_max	lj_asm_mips.h	/^static void asm_min_max(ASMState *as, IRIns *ir, int ismax)$/;"	f
asm_min_max	lj_asm_ppc.h	/^static void asm_min_max(ASMState *as, IRIns *ir, int ismax)$/;"	f
asm_min_max	lj_asm_x86.h	/^static void asm_min_max(ASMState *as, IRIns *ir, int cc)$/;"	f
asm_mul	lj_asm_arm.h	/^static void asm_mul(ASMState *as, IRIns *ir)$/;"	f
asm_mul	lj_asm_mips.h	/^static void asm_mul(ASMState *as, IRIns *ir)$/;"	f
asm_mul	lj_asm_ppc.h	/^static void asm_mul(ASMState *as, IRIns *ir)$/;"	f
asm_mulov	lj_asm_mips.h	/^static void asm_mulov(ASMState *as, IRIns *ir)$/;"	f
asm_neg	lj_asm_arm.h	/^static void asm_neg(ASMState *as, IRIns *ir)$/;"	f
asm_neg	lj_asm_mips.h	/^static void asm_neg(ASMState *as, IRIns *ir)$/;"	f
asm_neg	lj_asm_ppc.h	/^static void asm_neg(ASMState *as, IRIns *ir)$/;"	f
asm_neg64	lj_asm_mips.h	/^static void asm_neg64(ASMState *as, IRIns *ir)$/;"	f
asm_neg64	lj_asm_ppc.h	/^static void asm_neg64(ASMState *as, IRIns *ir)$/;"	f
asm_neg_not	lj_asm_x86.h	/^static void asm_neg_not(ASMState *as, IRIns *ir, x86Group3 xg)$/;"	f
asm_newref	lj_asm_arm.h	/^static void asm_newref(ASMState *as, IRIns *ir)$/;"	f
asm_newref	lj_asm_mips.h	/^static void asm_newref(ASMState *as, IRIns *ir)$/;"	f
asm_newref	lj_asm_ppc.h	/^static void asm_newref(ASMState *as, IRIns *ir)$/;"	f
asm_newref	lj_asm_x86.h	/^static void asm_newref(ASMState *as, IRIns *ir)$/;"	f
asm_obar	lj_asm_arm.h	/^static void asm_obar(ASMState *as, IRIns *ir)$/;"	f
asm_obar	lj_asm_mips.h	/^static void asm_obar(ASMState *as, IRIns *ir)$/;"	f
asm_obar	lj_asm_ppc.h	/^static void asm_obar(ASMState *as, IRIns *ir)$/;"	f
asm_obar	lj_asm_x86.h	/^static void asm_obar(ASMState *as, IRIns *ir)$/;"	f
asm_phi	lj_asm.c	/^static void asm_phi(ASMState *as, IRIns *ir)$/;"	f	file:
asm_phi_break	lj_asm.c	/^static void asm_phi_break(ASMState *as, RegSet blocked, RegSet blockedby,$/;"	f	file:
asm_phi_copyspill	lj_asm.c	/^static void asm_phi_copyspill(ASMState *as)$/;"	f	file:
asm_phi_fixup	lj_asm.c	/^static void asm_phi_fixup(ASMState *as)$/;"	f	file:
asm_phi_shuffle	lj_asm.c	/^static void asm_phi_shuffle(ASMState *as)$/;"	f	file:
asm_retf	lj_asm_arm.h	/^static void asm_retf(ASMState *as, IRIns *ir)$/;"	f
asm_retf	lj_asm_mips.h	/^static void asm_retf(ASMState *as, IRIns *ir)$/;"	f
asm_retf	lj_asm_ppc.h	/^static void asm_retf(ASMState *as, IRIns *ir)$/;"	f
asm_retf	lj_asm_x86.h	/^static void asm_retf(ASMState *as, IRIns *ir)$/;"	f
asm_setup_call_slots	lj_asm_arm.h	/^static Reg asm_setup_call_slots(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setup_call_slots	lj_asm_mips.h	/^static Reg asm_setup_call_slots(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setup_call_slots	lj_asm_ppc.h	/^static Reg asm_setup_call_slots(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setup_call_slots	lj_asm_x86.h	/^static Reg asm_setup_call_slots(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setup_regsp	lj_asm.c	/^static void asm_setup_regsp(ASMState *as)$/;"	f	file:
asm_setup_target	lj_asm_arm.h	/^static void asm_setup_target(ASMState *as)$/;"	f
asm_setup_target	lj_asm_mips.h	/^static void asm_setup_target(ASMState *as)$/;"	f
asm_setup_target	lj_asm_ppc.h	/^static void asm_setup_target(ASMState *as)$/;"	f
asm_setup_target	lj_asm_x86.h	/^static void asm_setup_target(ASMState *as)$/;"	f
asm_setupresult	lj_asm_arm.h	/^static void asm_setupresult(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setupresult	lj_asm_mips.h	/^static void asm_setupresult(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setupresult	lj_asm_ppc.h	/^static void asm_setupresult(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_setupresult	lj_asm_x86.h	/^static void asm_setupresult(ASMState *as, IRIns *ir, const CCallInfo *ci)$/;"	f
asm_sfpcomp	lj_asm_arm.h	/^static void asm_sfpcomp(ASMState *as, IRIns *ir)$/;"	f
asm_sfpmin_max	lj_asm_arm.h	/^static void asm_sfpmin_max(ASMState *as, IRIns *ir, int cc)$/;"	f
asm_sload	lj_asm_arm.h	/^static void asm_sload(ASMState *as, IRIns *ir)$/;"	f
asm_sload	lj_asm_mips.h	/^static void asm_sload(ASMState *as, IRIns *ir)$/;"	f
asm_sload	lj_asm_ppc.h	/^static void asm_sload(ASMState *as, IRIns *ir)$/;"	f
asm_sload	lj_asm_x86.h	/^static void asm_sload(ASMState *as, IRIns *ir)$/;"	f
asm_snap_alloc	lj_asm.c	/^static void asm_snap_alloc(ASMState *as)$/;"	f	file:
asm_snap_alloc1	lj_asm.c	/^static void asm_snap_alloc1(ASMState *as, IRRef ref)$/;"	f	file:
asm_snap_canremat	lj_asm.c	/^static int asm_snap_canremat(ASMState *as)$/;"	f	file:
asm_snap_checkrename	lj_asm.c	/^static int asm_snap_checkrename(ASMState *as, IRRef ren)$/;"	f	file:
asm_snap_prep	lj_asm.c	/^static void asm_snap_prep(ASMState *as)$/;"	f	file:
asm_snew	lj_asm.c	/^static void asm_snew(ASMState *as, IRIns *ir)$/;"	f	file:
asm_sparejump_setup	lj_asm_mips.h	/^static void asm_sparejump_setup(ASMState *as)$/;"	f
asm_stack_adjust	lj_asm.c	/^static int32_t asm_stack_adjust(ASMState *as)$/;"	f	file:
asm_stack_check	lj_asm_arm.h	/^static void asm_stack_check(ASMState *as, BCReg topslot,$/;"	f
asm_stack_check	lj_asm_mips.h	/^static void asm_stack_check(ASMState *as, BCReg topslot,$/;"	f
asm_stack_check	lj_asm_ppc.h	/^static void asm_stack_check(ASMState *as, BCReg topslot,$/;"	f
asm_stack_check	lj_asm_x86.h	/^static void asm_stack_check(ASMState *as, BCReg topslot,$/;"	f
asm_stack_restore	lj_asm_arm.h	/^static void asm_stack_restore(ASMState *as, SnapShot *snap)$/;"	f
asm_stack_restore	lj_asm_mips.h	/^static void asm_stack_restore(ASMState *as, SnapShot *snap)$/;"	f
asm_stack_restore	lj_asm_ppc.h	/^static void asm_stack_restore(ASMState *as, SnapShot *snap)$/;"	f
asm_stack_restore	lj_asm_x86.h	/^static void asm_stack_restore(ASMState *as, SnapShot *snap)$/;"	f
asm_strref	lj_asm_arm.h	/^static void asm_strref(ASMState *as, IRIns *ir)$/;"	f
asm_strref	lj_asm_mips.h	/^static void asm_strref(ASMState *as, IRIns *ir)$/;"	f
asm_strref	lj_asm_ppc.h	/^static void asm_strref(ASMState *as, IRIns *ir)$/;"	f
asm_strref	lj_asm_x86.h	/^static void asm_strref(ASMState *as, IRIns *ir)$/;"	f
asm_strto	lj_asm_arm.h	/^static void asm_strto(ASMState *as, IRIns *ir)$/;"	f
asm_strto	lj_asm_mips.h	/^static void asm_strto(ASMState *as, IRIns *ir)$/;"	f
asm_strto	lj_asm_ppc.h	/^static void asm_strto(ASMState *as, IRIns *ir)$/;"	f
asm_strto	lj_asm_x86.h	/^static void asm_strto(ASMState *as, IRIns *ir)$/;"	f
asm_sub	lj_asm_arm.h	/^static void asm_sub(ASMState *as, IRIns *ir)$/;"	f
asm_sub	lj_asm_mips.h	/^static void asm_sub(ASMState *as, IRIns *ir)$/;"	f
asm_sub	lj_asm_ppc.h	/^static void asm_sub(ASMState *as, IRIns *ir)$/;"	f
asm_sub64	lj_asm_mips.h	/^static void asm_sub64(ASMState *as, IRIns *ir)$/;"	f
asm_sub64	lj_asm_ppc.h	/^static void asm_sub64(ASMState *as, IRIns *ir)$/;"	f
asm_sunk_store	lj_asm.c	/^static int asm_sunk_store(ASMState *as, IRIns *ira, IRIns *irs)$/;"	f	file:
asm_swapops	lj_asm_arm.h	/^static int asm_swapops(ASMState *as, IRRef lref, IRRef rref)$/;"	f
asm_swapops	lj_asm_x86.h	/^static int asm_swapops(ASMState *as, IRIns *ir)$/;"	f
asm_tail_fixup	lj_asm_arm.h	/^static void asm_tail_fixup(ASMState *as, TraceNo lnk)$/;"	f
asm_tail_fixup	lj_asm_mips.h	/^static void asm_tail_fixup(ASMState *as, TraceNo lnk)$/;"	f
asm_tail_fixup	lj_asm_ppc.h	/^static void asm_tail_fixup(ASMState *as, TraceNo lnk)$/;"	f
asm_tail_fixup	lj_asm_x86.h	/^static void asm_tail_fixup(ASMState *as, TraceNo lnk)$/;"	f
asm_tail_link	lj_asm.c	/^static void asm_tail_link(ASMState *as)$/;"	f	file:
asm_tail_prep	lj_asm_arm.h	/^static void asm_tail_prep(ASMState *as)$/;"	f
asm_tail_prep	lj_asm_mips.h	/^static void asm_tail_prep(ASMState *as)$/;"	f
asm_tail_prep	lj_asm_ppc.h	/^static void asm_tail_prep(ASMState *as)$/;"	f
asm_tail_prep	lj_asm_x86.h	/^static void asm_tail_prep(ASMState *as)$/;"	f
asm_tbar	lj_asm_arm.h	/^static void asm_tbar(ASMState *as, IRIns *ir)$/;"	f
asm_tbar	lj_asm_mips.h	/^static void asm_tbar(ASMState *as, IRIns *ir)$/;"	f
asm_tbar	lj_asm_ppc.h	/^static void asm_tbar(ASMState *as, IRIns *ir)$/;"	f
asm_tbar	lj_asm_x86.h	/^static void asm_tbar(ASMState *as, IRIns *ir)$/;"	f
asm_tdup	lj_asm.c	/^static void asm_tdup(ASMState *as, IRIns *ir)$/;"	f	file:
asm_tnew	lj_asm.c	/^static void asm_tnew(ASMState *as, IRIns *ir)$/;"	f	file:
asm_tobit	lj_asm_arm.h	/^static void asm_tobit(ASMState *as, IRIns *ir)$/;"	f
asm_tobit	lj_asm_mips.h	/^static void asm_tobit(ASMState *as, IRIns *ir)$/;"	f
asm_tobit	lj_asm_ppc.h	/^static void asm_tobit(ASMState *as, IRIns *ir)$/;"	f
asm_tobit	lj_asm_x86.h	/^static void asm_tobit(ASMState *as, IRIns *ir)$/;"	f
asm_tointg	lj_asm_arm.h	/^static void asm_tointg(ASMState *as, IRIns *ir, Reg left)$/;"	f
asm_tointg	lj_asm_mips.h	/^static void asm_tointg(ASMState *as, IRIns *ir, Reg left)$/;"	f
asm_tointg	lj_asm_ppc.h	/^static void asm_tointg(ASMState *as, IRIns *ir, Reg left)$/;"	f
asm_tointg	lj_asm_x86.h	/^static void asm_tointg(ASMState *as, IRIns *ir, Reg left)$/;"	f
asm_tostr	lj_asm_arm.h	/^static void asm_tostr(ASMState *as, IRIns *ir)$/;"	f
asm_tostr	lj_asm_mips.h	/^static void asm_tostr(ASMState *as, IRIns *ir)$/;"	f
asm_tostr	lj_asm_ppc.h	/^static void asm_tostr(ASMState *as, IRIns *ir)$/;"	f
asm_tostr	lj_asm_x86.h	/^static void asm_tostr(ASMState *as, IRIns *ir)$/;"	f
asm_tvptr	lj_asm_arm.h	/^static void asm_tvptr(ASMState *as, Reg dest, IRRef ref)$/;"	f
asm_tvptr	lj_asm_mips.h	/^static void asm_tvptr(ASMState *as, Reg dest, IRRef ref)$/;"	f
asm_tvptr	lj_asm_ppc.h	/^static void asm_tvptr(ASMState *as, Reg dest, IRRef ref)$/;"	f
asm_uref	lj_asm_arm.h	/^static void asm_uref(ASMState *as, IRIns *ir)$/;"	f
asm_uref	lj_asm_mips.h	/^static void asm_uref(ASMState *as, IRIns *ir)$/;"	f
asm_uref	lj_asm_ppc.h	/^static void asm_uref(ASMState *as, IRIns *ir)$/;"	f
asm_uref	lj_asm_x86.h	/^static void asm_uref(ASMState *as, IRIns *ir)$/;"	f
asm_x87load	lj_asm_x86.h	/^static void asm_x87load(ASMState *as, IRRef ref)$/;"	f
asm_xload	lj_asm_arm.h	/^static void asm_xload(ASMState *as, IRIns *ir)$/;"	f
asm_xload	lj_asm_mips.h	/^static void asm_xload(ASMState *as, IRIns *ir)$/;"	f
asm_xload	lj_asm_ppc.h	/^static void asm_xload(ASMState *as, IRIns *ir)$/;"	f
asm_xstore	lj_asm_arm.h	/^static void asm_xstore(ASMState *as, IRIns *ir, int32_t ofs)$/;"	f
asm_xstore	lj_asm_mips.h	/^static void asm_xstore(ASMState *as, IRIns *ir, int32_t ofs)$/;"	f
asm_xstore	lj_asm_ppc.h	/^static void asm_xstore(ASMState *as, IRIns *ir, int32_t ofs)$/;"	f
assign_adjust	lj_parse.c	/^static void assign_adjust(LexState *ls, BCReg nvars, BCReg nexps, ExpDesc *e)$/;"	f	file:
assign_hazard	lj_parse.c	/^static void assign_hazard(LexState *ls, LHSVarList *lh, const ExpDesc *v)$/;"	f	file:
assignment	host/minilua.c	/^static void assignment(LexState*ls,struct LHS_assign*lh,int nvars){$/;"	f	file:
assoc	host/buildvm_peobj.c	/^  uint16_t assoc;$/;"	m	struct:PEsymaux	file:
atomic	host/minilua.c	/^static void atomic(lua_State*L){$/;"	f	file:
atomic	lj_gc.c	/^static void atomic(global_State *g, lua_State *L)$/;"	f	file:
attr	lj_cparse.c	/^  CTInfo attr;		\/* Attributes. *\/$/;"	m	struct:CPDecl	file:
aux	host/minilua.c	/^struct{int info,aux;}s;$/;"	m	struct:expdesc::__anon14::__anon15	file:
aux	lj_parse.c	/^      uint32_t aux;	\/* Secondary info. *\/$/;"	m	struct:ExpDesc::__anon41::__anon42	file:
aux_close	host/minilua.c	/^static int aux_close(lua_State*L){$/;"	f	file:
aux_getn	host/minilua.c	6451;"	d	file:
aux_lines	host/minilua.c	/^static void aux_lines(lua_State*L,int idx,int toclose){$/;"	f	file:
auxgetinfo	host/minilua.c	/^static int auxgetinfo(lua_State*L,const char*what,lua_Debug*ar,$/;"	f	file:
auxopen	host/minilua.c	/^static void auxopen(lua_State*L,const char*name,$/;"	f	file:
auxsort	host/minilua.c	/^static void auxsort(lua_State*L,int l,int u){$/;"	f	file:
auxsort	lib_table.c	/^static void auxsort(lua_State *L, int l, int u)$/;"	f	file:
b	host/minilua.c	/^int b;$/;"	m	union:__anon8	file:
b	host/minilua.c	/^jmp_buf b;$/;"	m	struct:lua_longjmp	file:
b	lj_ccall.h	/^  uint8_t b[16];$/;"	m	union:FPRArg
b	lj_def.h	/^  uint8_t b[2];$/;"	m	union:Unaligned16
b	lj_def.h	/^  uint8_t b[4];$/;"	m	union:Unaligned32
band	host/minilua.c	/^static int band(lua_State*L){$/;"	f	file:
barg	host/minilua.c	/^static UB barg(lua_State*L,int idx){$/;"	f	file:
base	host/minilua.c	/^StkId base;$/;"	m	struct:CallInfo	file:
base	host/minilua.c	/^StkId base;$/;"	m	struct:lua_State	file:
base	lj_alloc.c	/^  char        *base;             \/* base address *\/$/;"	m	struct:malloc_segment	file:
base	lj_jit.h	/^  TRef *base;		\/* Current frame base, points into J->slots. *\/$/;"	m	struct:jit_State
base	lj_obj.h	/^  TValue *base;		\/* Base of currently executing function. *\/$/;"	m	struct:lua_State
base	lj_target_x86.h	/^  uint8_t base;		\/* Base register or RID_NONE. *\/$/;"	m	struct:__anon47
baseCcalls	host/minilua.c	/^unsigned short baseCcalls;$/;"	m	struct:lua_State	file:
base_ci	host/minilua.c	/^CallInfo*base_ci;$/;"	m	struct:lua_State	file:
base_funcs	host/minilua.c	/^static const luaL_Reg base_funcs[]={$/;"	v	file:
base_open	host/minilua.c	/^static void base_open(lua_State*L){$/;"	f	file:
basehookcount	host/minilua.c	/^int basehookcount;$/;"	m	struct:lua_State	file:
basemt_it	lj_obj.h	487;"	d
basemt_obj	lj_obj.h	488;"	d
baseslot	lj_jit.h	/^  BCReg baseslot;	\/* Current frame base, offset into J->slots. *\/$/;"	m	struct:jit_State
bc_a	lj_bc.h	35;"	d
bc_b	lj_bc.h	36;"	d
bc_c	lj_bc.h	37;"	d
bc_cfunc_ext	lj_obj.h	/^  BCIns bc_cfunc_ext;	\/* Bytecode for external C function calls. *\/$/;"	m	struct:global_State
bc_cfunc_int	lj_obj.h	/^  BCIns bc_cfunc_int;	\/* Bytecode for internal C function calls. *\/$/;"	m	struct:global_State
bc_d	lj_bc.h	38;"	d
bc_extent	lj_jit.h	/^  MSize bc_extent;	\/* Extent of the range. *\/$/;"	m	struct:jit_State
bc_isret	lj_bc.h	/^static LJ_AINLINE int bc_isret(BCOp op)$/;"	f
bc_j	lj_bc.h	39;"	d
bc_min	lj_jit.h	/^  const BCIns *bc_min;	\/* Start of allowed bytecode range for root trace. *\/$/;"	m	struct:jit_State
bc_names	host/buildvm.c	/^const char *const bc_names[] = {$/;"	v
bc_ofs	host/buildvm.h	/^  int32_t *bc_ofs;$/;"	m	struct:BuildCtx
bc_op	lj_bc.h	34;"	d
bcbase	lj_parse.c	/^  BCInsLine *bcbase;		\/* Base of bytecode stack. *\/$/;"	m	struct:FuncState	file:
bcdump	jit/bc.lua	/^local function bcdump(func, out, all)$/;"	f
bcemit_ABC	lj_parse.c	426;"	d	file:
bcemit_AD	lj_parse.c	427;"	d	file:
bcemit_AJ	lj_parse.c	428;"	d	file:
bcemit_INS	lj_parse.c	/^static BCPos bcemit_INS(FuncState *fs, BCIns ins)$/;"	f	file:
bcemit_arith	lj_parse.c	/^static void bcemit_arith(FuncState *fs, BinOpr opr, ExpDesc *e1, ExpDesc *e2)$/;"	f	file:
bcemit_binop	lj_parse.c	/^static void bcemit_binop(FuncState *fs, BinOpr op, ExpDesc *e1, ExpDesc *e2)$/;"	f	file:
bcemit_binop_left	lj_parse.c	/^static void bcemit_binop_left(FuncState *fs, BinOpr op, ExpDesc *e)$/;"	f	file:
bcemit_branch	lj_parse.c	/^static BCPos bcemit_branch(FuncState *fs, ExpDesc *e, int cond)$/;"	f	file:
bcemit_branch_f	lj_parse.c	/^static void bcemit_branch_f(FuncState *fs, ExpDesc *e)$/;"	f	file:
bcemit_branch_t	lj_parse.c	/^static void bcemit_branch_t(FuncState *fs, ExpDesc *e)$/;"	f	file:
bcemit_comp	lj_parse.c	/^static void bcemit_comp(FuncState *fs, BinOpr opr, ExpDesc *e1, ExpDesc *e2)$/;"	f	file:
bcemit_jmp	lj_parse.c	/^static BCPos bcemit_jmp(FuncState *fs)$/;"	f	file:
bcemit_method	lj_parse.c	/^static void bcemit_method(FuncState *fs, ExpDesc *e, ExpDesc *key)$/;"	f	file:
bcemit_nil	lj_parse.c	/^static void bcemit_nil(FuncState *fs, BCReg from, BCReg n)$/;"	f	file:
bcemit_store	lj_parse.c	/^static void bcemit_store(FuncState *fs, ExpDesc *var, ExpDesc *e)$/;"	f	file:
bcemit_unop	lj_parse.c	/^static void bcemit_unop(FuncState *fs, BCOp op, ExpDesc *e)$/;"	f	file:
bcff	lj_dispatch.h	/^  BCIns bcff[GG_NUM_ASMFF];		\/* Bytecode for ASM fast functions. *\/$/;"	m	struct:GG_State
bclim	lj_parse.c	/^  BCPos bclim;			\/* Limit of bytecode stack. *\/$/;"	m	struct:FuncState	file:
bcline	jit/bc.lua	/^local function bcline(func, pc, prefix)$/;"	f
bclist	jit/bcsave.lua	/^local function bclist(input, output)$/;"	f
bclistoff	jit/bc.lua	/^local function bclistoff()$/;"	f
bcliston	jit/bc.lua	/^local function bcliston(outfile)$/;"	f
bcmode_a	lj_bc.h	242;"	d
bcmode_b	lj_bc.h	243;"	d
bcmode_c	lj_bc.h	244;"	d
bcmode_d	lj_bc.h	245;"	d
bcmode_hasd	lj_bc.h	246;"	d
bcmode_mm	lj_bc.h	247;"	d
bcopisret	lj_parse.c	/^static int bcopisret(BCOp op)$/;"	f	file:
bcptr	lj_parse.c	430;"	d	file:
bcread_block	lj_bcread.c	/^static void bcread_block(LexState *ls, void *q, MSize len)$/;"	f	file:
bcread_byte	lj_bcread.c	/^static LJ_AINLINE uint32_t bcread_byte(LexState *ls)$/;"	f	file:
bcread_bytecode	lj_bcread.c	/^static void bcread_bytecode(LexState *ls, GCproto *pt, MSize sizebc)$/;"	f	file:
bcread_consume	lj_bcread.c	110;"	d	file:
bcread_dbg	lj_bcread.c	/^static void bcread_dbg(LexState *ls, GCproto *pt, MSize sizedbg)$/;"	f	file:
bcread_dec	lj_bcread.c	109;"	d	file:
bcread_error	lj_bcread.c	/^static LJ_NOINLINE void bcread_error(LexState *ls, ErrMsg em)$/;"	f	file:
bcread_fill	lj_bcread.c	/^static LJ_NOINLINE void bcread_fill(LexState *ls, MSize len, int need)$/;"	f	file:
bcread_flags	lj_bcread.c	24;"	d	file:
bcread_header	lj_bcread.c	/^static int bcread_header(LexState *ls)$/;"	f	file:
bcread_kgc	lj_bcread.c	/^static void bcread_kgc(LexState *ls, GCproto *pt, MSize sizekgc)$/;"	f	file:
bcread_knum	lj_bcread.c	/^static void bcread_knum(LexState *ls, GCproto *pt, MSize sizekn)$/;"	f	file:
bcread_ktab	lj_bcread.c	/^static GCtab *bcread_ktab(LexState *ls)$/;"	f	file:
bcread_ktabk	lj_bcread.c	/^static void bcread_ktabk(LexState *ls, TValue *o)$/;"	f	file:
bcread_mem	lj_bcread.c	/^static uint8_t *bcread_mem(LexState *ls, MSize len)$/;"	f	file:
bcread_need	lj_bcread.c	/^static LJ_AINLINE void bcread_need(LexState *ls, MSize len)$/;"	f	file:
bcread_oldtop	lj_bcread.c	27;"	d	file:
bcread_proto	lj_bcread.c	/^static GCproto *bcread_proto(LexState *ls)$/;"	f	file:
bcread_resize	lj_bcread.c	/^static void bcread_resize(LexState *ls, MSize len)$/;"	f	file:
bcread_savetop	lj_bcread.c	28;"	d	file:
bcread_swap	lj_bcread.c	25;"	d	file:
bcread_uleb128	lj_bcread.c	/^static uint32_t bcread_uleb128(LexState *ls)$/;"	f	file:
bcread_uleb128_33	lj_bcread.c	/^static uint32_t bcread_uleb128_33(LexState *ls)$/;"	f	file:
bcread_uv	lj_bcread.c	/^static void bcread_uv(LexState *ls, GCproto *pt, MSize sizeuv)$/;"	f	file:
bcread_varinfo	lj_bcread.c	/^static const void *bcread_varinfo(GCproto *pt)$/;"	f	file:
bcread_want	lj_bcread.c	/^static LJ_AINLINE void bcread_want(LexState *ls, MSize len)$/;"	f	file:
bcreg_bump	lj_parse.c	/^static void bcreg_bump(FuncState *fs, BCReg n)$/;"	f	file:
bcreg_free	lj_parse.c	/^static void bcreg_free(FuncState *fs, BCReg reg)$/;"	f	file:
bcreg_reserve	lj_parse.c	/^static void bcreg_reserve(FuncState *fs, BCReg n)$/;"	f	file:
bcsave	jit/bcsave.lua	/^local function bcsave(ctx, input, output)$/;"	f
bcsave_c	jit/bcsave.lua	/^local function bcsave_c(ctx, output, s)$/;"	f
bcsave_elfobj	jit/bcsave.lua	/^local function bcsave_elfobj(ctx, output, s, ffi)$/;"	f
bcsave_machobj	jit/bcsave.lua	/^local function bcsave_machobj(ctx, output, s, ffi)$/;"	f
bcsave_obj	jit/bcsave.lua	/^local function bcsave_obj(ctx, output, s)$/;"	f
bcsave_peobj	jit/bcsave.lua	/^local function bcsave_peobj(ctx, output, s, ffi)$/;"	f
bcsave_raw	jit/bcsave.lua	/^local function bcsave_raw(output, s)$/;"	f
bcsave_tail	jit/bcsave.lua	/^local function bcsave_tail(fp, output, s)$/;"	f
bcskip	lj_jit.h	/^  uint8_t bcskip;	\/* Number of bytecode instructions to skip. *\/$/;"	m	struct:jit_State
bcstack	lj_lex.h	/^  BCInsLine *bcstack;	\/* Stack for bytecode instructions\/line numbers. *\/$/;"	m	struct:LexState
bctargets	jit/bc.lua	/^local function bctargets(func)$/;"	f
bcwrite_block	lj_bcwrite.c	/^static void bcwrite_block(BCWriteCtx *ctx, const void *p, MSize len)$/;"	f	file:
bcwrite_byte	lj_bcwrite.c	/^static LJ_AINLINE void bcwrite_byte(BCWriteCtx *ctx, uint8_t b)$/;"	f	file:
bcwrite_bytecode	lj_bcwrite.c	/^static void bcwrite_bytecode(BCWriteCtx *ctx, GCproto *pt)$/;"	f	file:
bcwrite_footer	lj_bcwrite.c	/^static void bcwrite_footer(BCWriteCtx *ctx)$/;"	f	file:
bcwrite_header	lj_bcwrite.c	/^static void bcwrite_header(BCWriteCtx *ctx)$/;"	f	file:
bcwrite_kgc	lj_bcwrite.c	/^static void bcwrite_kgc(BCWriteCtx *ctx, GCproto *pt)$/;"	f	file:
bcwrite_knum	lj_bcwrite.c	/^static void bcwrite_knum(BCWriteCtx *ctx, GCproto *pt)$/;"	f	file:
bcwrite_ktab	lj_bcwrite.c	/^static void bcwrite_ktab(BCWriteCtx *ctx, const GCtab *t)$/;"	f	file:
bcwrite_ktabk	lj_bcwrite.c	/^static void bcwrite_ktabk(BCWriteCtx *ctx, cTValue *o, int narrow)$/;"	f	file:
bcwrite_need	lj_bcwrite.c	/^static LJ_AINLINE void bcwrite_need(BCWriteCtx *ctx, MSize len)$/;"	f	file:
bcwrite_proto	lj_bcwrite.c	/^static void bcwrite_proto(BCWriteCtx *ctx, GCproto *pt)$/;"	f	file:
bcwrite_resize	lj_bcwrite.c	/^static LJ_NOINLINE void bcwrite_resize(BCWriteCtx *ctx, MSize len)$/;"	f	file:
bcwrite_uleb128	lj_bcwrite.c	/^static void bcwrite_uleb128(BCWriteCtx *ctx, uint32_t v)$/;"	f	file:
beginsym	host/buildvm.h	/^  const char *beginsym;$/;"	m	struct:BuildCtx
bestasize	lj_tab.c	/^static uint32_t bestasize(uint32_t bins[], uint32_t *narray)$/;"	f	file:
bindex_t	lj_alloc.c	/^typedef size_t bindex_t;               \/* Described below *\/$/;"	t	file:
binmap_t	lj_alloc.c	/^typedef unsigned int binmap_t;         \/* Described below *\/$/;"	t	file:
bit2mask	host/minilua.c	563;"	d	file:
bit_for_tree_index	lj_alloc.c	532;"	d	file:
bitlib	host/minilua.c	/^static const struct luaL_Reg bitlib[]={$/;"	v	typeref:struct:luaL_Reg	file:
bitmask	host/minilua.c	562;"	d	file:
bits	lj_cparse.c	/^  CTSize bits;		\/* Field size in bits (if any). *\/$/;"	m	struct:CPDecl	file:
bk	lj_alloc.c	/^  struct malloc_chunk *bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
bk	lj_alloc.c	/^  struct malloc_tree_chunk *bk;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
bl	host/minilua.c	/^struct BlockCnt*bl;$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt	file:
bl	lj_parse.c	/^  FuncScope *bl;		\/* Current scope. *\/$/;"	m	struct:FuncState	file:
black2gray	host/minilua.c	1720;"	d	file:
black2gray	lj_gc.h	44;"	d
blacklist_pc	lj_trace.c	/^static void blacklist_pc(GCproto *pt, BCIns *pc)$/;"	f	file:
block	host/minilua.c	/^static void block(LexState*ls){$/;"	f	file:
block_follow	host/minilua.c	/^static int block_follow(int token){$/;"	f	file:
bloombit	lj_def.h	110;"	d
bloomset	lj_def.h	111;"	d
bloomtest	lj_def.h	112;"	d
bnot	host/minilua.c	/^static int bnot(lua_State*L){$/;"	f	file:
body	host/minilua.c	/^static void body(LexState*ls,expdesc*e,int needself,int line){$/;"	f	file:
boolK	host/minilua.c	/^static int boolK(FuncState*fs,int b){$/;"	f	file:
boolV	lj_obj.h	698;"	d
bor	host/minilua.c	/^static int bor(lua_State*L){$/;"	f	file:
bpropcache	lj_jit.h	/^  BPropEntry bpropcache[BPROP_SLOTS];  \/* Backpropagation cache slots. *\/$/;"	m	struct:jit_State
bpropslot	lj_jit.h	/^  uint32_t bpropslot;	\/* Round-robin index into bpropcache slots. *\/$/;"	m	struct:jit_State
breaklist	host/minilua.c	/^int breaklist;$/;"	m	struct:BlockCnt	file:
breakstat	host/minilua.c	/^static void breakstat(LexState*ls){$/;"	f	file:
bswap	host/minilua.c	/^static int bswap(lua_State*L){$/;"	f	file:
buf	lj_ctype.c	/^  char buf[CTREPR_MAX];$/;"	m	struct:CTRepr	file:
buf	lj_load.c	/^  char buf[LUAL_BUFFERSIZE];$/;"	m	struct:FileReaderCtx	file:
buf	lj_obj.h	/^  char *buf;		\/* String buffer base. *\/$/;"	m	struct:SBuf
buff	host/minilua.c	/^Mbuffer buff;$/;"	m	struct:SParser	file:
buff	host/minilua.c	/^Mbuffer buff;$/;"	m	struct:global_State	file:
buff	host/minilua.c	/^Mbuffer*buff;$/;"	m	struct:LexState	file:
buff	host/minilua.c	/^char buff[BUFSIZ];$/;"	m	struct:LoadF	file:
buffer	host/minilua.c	/^char buffer[BUFSIZ];$/;"	m	struct:luaL_Buffer	file:
buffer	host/minilua.c	/^char*buffer;$/;"	m	struct:Mbuffer	file:
buffer	lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer
bufffree	host/minilua.c	6054;"	d	file:
bufffree	lib_aux.c	170;"	d	file:
bufflen	host/minilua.c	6053;"	d	file:
bufflen	lib_aux.c	169;"	d	file:
buffreplace	host/minilua.c	/^static void buffreplace(LexState*ls,char from,char to){$/;"	f	file:
buffsize	host/minilua.c	/^size_t buffsize;$/;"	m	struct:Mbuffer	file:
build_actionlist	host/buildvm_arch.h	/^static const unsigned char build_actionlist[14361] = {$/;"	v
build_backend	host/buildvm_arch.h	/^static int build_backend(BuildCtx *ctx)$/;"	f
build_code	host/buildvm.c	/^static int build_code(BuildCtx *ctx)$/;"	f	file:
build_ins	host/buildvm_arch.h	/^static void build_ins(BuildCtx *ctx, BCOp op, int defop)$/;"	f
build_subroutines	host/buildvm_arch.h	/^static void build_subroutines(BuildCtx *ctx)$/;"	f
bvalue	host/minilua.c	252;"	d	file:
bxor	host/minilua.c	/^static int bxor(lua_State*L){$/;"	f	file:
c	host/minilua.c	/^CClosure c;$/;"	m	union:Closure	file:
c	lj_cparse.h	/^  CPChar c;		\/* Current character. *\/$/;"	m	struct:CPState
c	lj_obj.h	/^  GCfuncC c;$/;"	m	union:GCfunc
cTValue	lj_obj.h	/^typedef const TValue cTValue;$/;"	t
cache	lj_clib.h	/^  GCtab *cache;		\/* Cache for resolved symbols. Anchored in ud->env. *\/$/;"	m	struct:CLibrary
callTM	host/minilua.c	/^static void callTM(lua_State*L,const TValue*f,const TValue*p1,$/;"	f	file:
callTMres	host/minilua.c	/^static void callTMres(lua_State*L,StkId res,const TValue*f,$/;"	f	file:
call_binTM	host/minilua.c	/^static int call_binTM(lua_State*L,const TValue*p1,const TValue*p2,$/;"	f	file:
call_init	lj_dispatch.c	/^static int call_init(lua_State *L, GCfunc *fn)$/;"	f	file:
call_orderTM	host/minilua.c	/^static int call_orderTM(lua_State*L,const TValue*p1,const TValue*p2,$/;"	f	file:
callallgcTM	host/minilua.c	/^static void callallgcTM(lua_State*L,void*ud){$/;"	f	file:
callback_checkfunc	lj_ccallback.c	/^static CType *callback_checkfunc(CTState *cts, CType *ct)$/;"	f	file:
callback_conv_args	lj_ccallback.c	/^static void callback_conv_args(CTState *cts, lua_State *L)$/;"	f	file:
callback_conv_result	lj_ccallback.c	/^static void callback_conv_result(CTState *cts, lua_State *L, TValue *o)$/;"	f	file:
callback_mcode_init	lj_ccallback.c	/^static void callback_mcode_init(global_State *g, uint32_t *page)$/;"	f	file:
callback_mcode_init	lj_ccallback.c	/^static void callback_mcode_init(global_State *g, uint8_t *page)$/;"	f	file:
callback_mcode_init	lj_ccallback.c	105;"	d	file:
callback_mcode_init	lj_ccallback.c	200;"	d	file:
callback_mcode_new	lj_ccallback.c	/^static void callback_mcode_new(CTState *cts)$/;"	f	file:
callback_slot2ptr	lj_ccallback.c	/^static void *callback_slot2ptr(CTState *cts, MSize slot)$/;"	f	file:
callback_slot_new	lj_ccallback.c	/^static MSize callback_slot_new(CTState *cts, CType *ct)$/;"	f	file:
callhook	lj_dispatch.c	/^static void callhook(lua_State *L, int event, BCLine line)$/;"	f	file:
canfuse	lj_asm.c	106;"	d	file:
canonicalize_slots	lj_record.c	/^static void canonicalize_slots(jit_State *J)$/;"	f	file:
capture	host/minilua.c	/^}capture[32];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon18	file:
capture	lib_string.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon85	file:
capture_to_close	host/minilua.c	/^static int capture_to_close(MatchState*ms){$/;"	f	file:
capture_to_close	lib_string.c	/^static int capture_to_close(MatchState *ms)$/;"	f	file:
carith_checkarg	lj_carith.c	/^static int carith_checkarg(lua_State *L, CTState *cts, CDArith *ca)$/;"	f	file:
carith_int64	lj_carith.c	/^static int carith_int64(lua_State *L, CTState *cts, CDArith *ca, MMS mm)$/;"	f	file:
carith_ptr	lj_carith.c	/^static int carith_ptr(lua_State *L, CTState *cts, CDArith *ca, MMS mm)$/;"	f	file:
casecmp	lj_strscan.c	72;"	d	file:
cast	host/minilua.c	214;"	d	file:
cast_byte	host/minilua.c	215;"	d	file:
cast_int	host/minilua.c	217;"	d	file:
cast_num	host/minilua.c	216;"	d	file:
cb	lj_ctype.h	/^  CCallback cb;		\/* Temporary callback state. *\/$/;"	m	struct:CTState
cbid	lj_ctype.h	/^  CTypeID1 *cbid;		\/* Callback type table. *\/$/;"	m	struct:CCallback
ccall_classify_ct	lj_ccall.c	/^static void ccall_classify_ct(CTState *cts, CType *ct, int *rcl, CTSize ofs)$/;"	f	file:
ccall_classify_struct	lj_ccall.c	/^static int ccall_classify_struct(CTState *cts, CType *ct, int *rcl, CTSize ofs)$/;"	f	file:
ccall_classify_struct	lj_ccall.c	/^static unsigned int ccall_classify_struct(CTState *cts, CType *ct, CType *ctf)$/;"	f	file:
ccall_get_results	lj_ccall.c	/^static int ccall_get_results(lua_State *L, CTState *cts, CType *ct,$/;"	f	file:
ccall_set_args	lj_ccall.c	/^static int ccall_set_args(lua_State *L, CTState *cts, CType *ct,$/;"	f	file:
ccall_struct_arg	lj_ccall.c	/^static int ccall_struct_arg(CCallState *cc, CTState *cts, CType *d, int *rcl,$/;"	f	file:
ccall_struct_reg	lj_ccall.c	/^static int ccall_struct_reg(CCallState *cc, GPRArg *dp, int *rcl)$/;"	f	file:
ccall_struct_ret	lj_ccall.c	/^static void ccall_struct_ret(CCallState *cc, int *rcl, uint8_t *dp, CTSize sz)$/;"	f	file:
cconv_array_init	lj_cconv.c	/^static void cconv_array_init(CTState *cts, CType *d, CTSize sz, uint8_t *dp,$/;"	f	file:
cconv_array_tab	lj_cconv.c	/^static void cconv_array_tab(CTState *cts, CType *d,$/;"	f	file:
cconv_childqual	lj_cconv.c	/^static CType *cconv_childqual(CTState *cts, CType *ct, CTInfo *qual)$/;"	f	file:
cconv_err_conv	lj_cconv.c	/^LJ_NORET static void cconv_err_conv(CTState *cts, CType *d, CType *s,$/;"	f	file:
cconv_err_convtv	lj_cconv.c	/^LJ_NORET static void cconv_err_convtv(CTState *cts, CType *d, TValue *o,$/;"	f	file:
cconv_err_initov	lj_cconv.c	/^LJ_NORET static void cconv_err_initov(CTState *cts, CType *d)$/;"	f	file:
cconv_idx	lj_cconv.h	/^static LJ_AINLINE uint32_t cconv_idx(CTInfo info)$/;"	f
cconv_idx2	lj_cconv.h	40;"	d
cconv_struct_init	lj_cconv.c	/^static void cconv_struct_init(CTState *cts, CType *d, CTSize sz, uint8_t *dp,$/;"	f	file:
cconv_struct_tab	lj_cconv.c	/^static void cconv_struct_tab(CTState *cts, CType *d,$/;"	f	file:
cconv_substruct_init	lj_cconv.c	/^static void cconv_substruct_init(CTState *cts, CType *d, uint8_t *dp,$/;"	f	file:
cconv_substruct_tab	lj_cconv.c	/^static void cconv_substruct_tab(CTState *cts, CType *d, uint8_t *dp,$/;"	f	file:
cd	lj_obj.h	/^  GCcdata cd;$/;"	m	union:GCobj
cdataV	lj_obj.h	710;"	d
cdata_getconst	lj_cdata.c	/^static void cdata_getconst(CTState *cts, TValue *o, CType *ct)$/;"	f	file:
cdata_getptr	lj_cdata.h	/^static LJ_AINLINE void *cdata_getptr(void *p, CTSize sz)$/;"	f
cdata_setptr	lj_cdata.h	/^static LJ_AINLINE void cdata_setptr(void *p, CTSize sz, const void *v)$/;"	f
cdataisv	lj_obj.h	278;"	d
cdataptr	lj_obj.h	277;"	d
cdatav	lj_obj.h	279;"	d
cdatavlen	lj_obj.h	280;"	d
ceillog2	host/minilua.c	370;"	d	file:
cframe	lj_obj.h	/^  void *cframe;		\/* End of C stack frame chain. *\/$/;"	m	struct:lua_State
cframe_L	lj_frame.h	161;"	d
cframe_Lpc	lj_frame.h	172;"	d
cframe_canyield	lj_frame.h	169;"	d
cframe_errfunc	lj_frame.h	156;"	d
cframe_multres	lj_frame.h	159;"	d
cframe_multres_n	lj_frame.h	160;"	d
cframe_nres	lj_frame.h	157;"	d
cframe_pc	lj_frame.h	163;"	d
cframe_prev	lj_frame.h	158;"	d
cframe_raw	lj_frame.h	171;"	d
cframe_unwind_ff	lj_frame.h	170;"	d
chain	lj_jit.h	/^  IRRef1 chain[IR__MAX];  \/* IR instruction skip-list chain anchors. *\/$/;"	m	struct:jit_State
changewhite	host/minilua.c	575;"	d	file:
char2int	host/minilua.c	391;"	d	file:
char2int	lj_lex.c	40;"	d	file:
check	host/minilua.c	/^static void check(LexState*ls,int c){$/;"	f	file:
check	jit/bcsave.lua	/^local function check(ok, ...)$/;"	f
checkSizes	host/minilua.c	/^static void checkSizes(lua_State*L){$/;"	f	file:
check_Lproto	lib_jit.c	/^static GCproto *check_Lproto(lua_State *L, int nolua)$/;"	f	file:
check_call_unroll	lj_record.c	/^static void check_call_unroll(jit_State *J, TraceNo lnk)$/;"	f	file:
check_capture	host/minilua.c	/^static int check_capture(MatchState*ms,int l){$/;"	f	file:
check_capture	lib_string.c	/^static int check_capture(MatchState *ms, int l)$/;"	f	file:
check_condition	host/minilua.c	3698;"	d	file:
check_conflict	host/minilua.c	/^static void check_conflict(LexState*ls,struct LHS_assign*lh,expdesc*v){$/;"	f	file:
check_downrec_unroll	lj_record.c	/^static int check_downrec_unroll(jit_State *J, GCproto *pt)$/;"	f	file:
check_exp	host/minilua.c	212;"	d	file:
check_exp	lj_def.h	302;"	d
check_exp	lj_def.h	306;"	d
check_match	host/minilua.c	/^static void check_match(LexState*ls,int what,int who,int where){$/;"	f	file:
check_next	host/minilua.c	/^static int check_next(LexState*ls,const char*set){$/;"	f	file:
checkarg	jit/bcsave.lua	/^local function checkarg(str, map, err)$/;"	f
checkcond	lj_parse.c	186;"	d	file:
checkconsistency	host/minilua.c	255;"	d	file:
checki16	lj_def.h	97;"	d
checki32	lj_def.h	99;"	d
checki8	lj_def.h	95;"	d
checklightudptr	lj_obj.h	731;"	d
checklightudptr	lj_obj.h	736;"	d
checklimit	lj_parse.c	184;"	d	file:
checklimitgt	lj_parse.c	185;"	d	file:
checkliveness	host/minilua.c	256;"	d	file:
checkmclim	lj_asm.c	113;"	d	file:
checkmodname	jit/bcsave.lua	/^local function checkmodname(str)$/;"	f
checkname	host/minilua.c	/^static void checkname(LexState*ls,expdesc*e){$/;"	f	file:
checknext	host/minilua.c	/^static void checknext(LexState*ls,int c){$/;"	f	file:
checkptr32	lj_def.h	101;"	d
checkresults	host/minilua.c	5751;"	d	file:
checkstacksizes	host/minilua.c	/^static void checkstacksizes(lua_State*L,StkId max){$/;"	f	file:
checku16	lj_def.h	98;"	d
checku32	lj_def.h	100;"	d
checku8	lj_def.h	96;"	d
child	lj_alloc.c	/^  struct malloc_tree_chunk *child[2];$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
chunk	host/minilua.c	/^static void chunk(LexState*ls){$/;"	f	file:
chunk2mem	lj_alloc.c	327;"	d	file:
chunk_minus_offset	lj_alloc.c	363;"	d	file:
chunk_plus_offset	lj_alloc.c	362;"	d	file:
chunkarg	lj_lex.h	/^  const char *chunkarg;	\/* Chunk name argument. *\/$/;"	m	struct:LexState
chunkname	lj_lex.h	/^  GCstr *chunkname;	\/* Current chunk name (interned string). *\/$/;"	m	struct:LexState
chunkname	lj_obj.h	/^  GCRef chunkname;	\/* Name of the chunk this function was defined in. *\/$/;"	m	struct:GCproto
chunksize	lj_alloc.c	356;"	d	file:
ci	host/minilua.c	/^CallInfo*ci;$/;"	m	struct:lua_State	file:
ci_func	host/minilua.c	430;"	d	file:
cinuse	lj_alloc.c	354;"	d	file:
cksum	host/buildvm_peobj.c	/^  uint32_t cksum;$/;"	m	struct:PEsymaux	file:
cl	host/minilua.c	/^union Closure cl;$/;"	m	union:GCObject	typeref:union:GCObject::Closure	file:
classend	host/minilua.c	/^static const char*classend(MatchState*ms,const char*p){$/;"	f	file:
classend	lib_string.c	/^static const char *classend(MatchState *ms, const char *p)$/;"	f	file:
clear_cinuse	lj_alloc.c	359;"	d	file:
clear_pinuse	lj_alloc.c	358;"	d	file:
clear_smallmap	lj_alloc.c	552;"	d	file:
clear_treemap	lj_alloc.c	556;"	d	file:
clearapart	lj_tab.c	/^static LJ_AINLINE void clearapart(GCtab *t)$/;"	f	file:
clearhpart	lj_tab.c	/^static LJ_AINLINE void clearhpart(GCtab *t)$/;"	f	file:
clearprefixes	jit/dis_x86.lua	/^local function clearprefixes(ctx)$/;"	f
cleartable	host/minilua.c	/^static void cleartable(GCObject*l){$/;"	f	file:
clib_check_lds	lj_clib.c	/^static const char *clib_check_lds(lua_State *L, const char *buf)$/;"	f	file:
clib_def_handle	lj_clib.c	/^static void *clib_def_handle[CLIB_HANDLE_MAX];$/;"	v	file:
clib_error	lj_clib.c	/^LJ_NORET LJ_NOINLINE static void clib_error(lua_State *L, const char *fmt,$/;"	f	file:
clib_error	lj_clib.c	40;"	d	file:
clib_error_	lj_clib.c	/^LJ_NORET LJ_NOINLINE static void clib_error_(lua_State *L)$/;"	f	file:
clib_extname	lj_clib.c	/^static const char *clib_extname(lua_State *L, const char *name)$/;"	f	file:
clib_extsym	lj_clib.c	/^static const char *clib_extsym(CTState *cts, CType *ct, GCstr *name)$/;"	f	file:
clib_func_argsize	lj_clib.c	/^static CTSize clib_func_argsize(CTState *cts, CType *ct)$/;"	f	file:
clib_getsym	lj_clib.c	/^static void *clib_getsym(CLibrary *cl, const char *name)$/;"	f	file:
clib_loadlib	lj_clib.c	/^static void *clib_loadlib(lua_State *L, const char *name, int global)$/;"	f	file:
clib_needext	lj_clib.c	/^static int clib_needext(const char *s)$/;"	f	file:
clib_new	lj_clib.c	/^static CLibrary *clib_new(lua_State *L, GCtab *mt)$/;"	f	file:
clib_resolve_lds	lj_clib.c	/^static const char *clib_resolve_lds(lua_State *L, const char *name)$/;"	f	file:
clib_unloadlib	lj_clib.c	/^static void clib_unloadlib(CLibrary *cl)$/;"	f	file:
close_func	host/minilua.c	/^static void close_func(LexState*ls){$/;"	f	file:
close_state	host/minilua.c	/^static void close_state(lua_State*L){$/;"	f	file:
close_state	lj_state.c	/^static void close_state(lua_State *L)$/;"	f	file:
closed	lj_obj.h	/^  uint8_t closed;	\/* Set if closed (i.e. uv->v == &uv->u.value). *\/$/;"	m	struct:GCupval
closelistfield	host/minilua.c	/^static void closelistfield(FuncState*fs,struct ConsControl*cc){$/;"	f	file:
clvalue	host/minilua.c	250;"	d	file:
code	host/buildvm.h	/^  uint8_t *code;$/;"	m	struct:BuildCtx
code	host/minilua.c	/^Instruction*code;$/;"	m	struct:Proto	file:
code_label	host/minilua.c	/^static int code_label(FuncState*fs,int A,int b,int jump){$/;"	f	file:
codearith	host/minilua.c	/^static void codearith(FuncState*fs,OpCode op,expdesc*e1,expdesc*e2){$/;"	f	file:
codecomp	host/minilua.c	/^static void codecomp(FuncState*fs,OpCode op,int cond,expdesc*e1,$/;"	f	file:
codenot	host/minilua.c	/^static void codenot(FuncState*fs,expdesc*e){$/;"	f	file:
codestring	host/minilua.c	/^static void codestring(LexState*ls,expdesc*e,TString*s){$/;"	f	file:
codesz	host/buildvm.h	/^  size_t codesz;$/;"	m	struct:BuildCtx
collect_reloc	host/buildvm.c	/^static int collect_reloc(BuildCtx *ctx, uint8_t *addr, int idx, int type)$/;"	f	file:
collectargs	luajit.c	/^static int collectargs(char **argv, int *flags)$/;"	f	file:
collectvalidlines	host/minilua.c	/^static void collectvalidlines(lua_State*L,Closure*f){$/;"	f	file:
colo	lj_obj.h	/^  int8_t colo;		\/* Array colocation. *\/$/;"	m	struct:GCtab
colorize_ansi	jit/dump.lua	/^local function colorize_ansi(s, t)$/;"	f
colorize_html	jit/dump.lua	/^local function colorize_html(s, t)$/;"	f
colorize_text	jit/dump.lua	/^local function colorize_text(s, t)$/;"	f
comdatsel	host/buildvm_peobj.c	/^  uint8_t comdatsel;$/;"	m	struct:PEsymaux	file:
compute_tree_index	lj_alloc.c	518;"	d	file:
computesizes	host/minilua.c	/^static int computesizes(int nums[],int*narray){$/;"	f	file:
cond	host/minilua.c	/^static int cond(LexState*ls){$/;"	f	file:
condfmt	jit/dis_ppc.lua	/^local function condfmt(cond)$/;"	f
condhardstacktests	host/minilua.c	219;"	d	file:
condjump	host/minilua.c	/^static int condjump(FuncState*fs,OpCode op,int A,int B,int C){$/;"	f	file:
const_gc	lj_parse.c	/^static BCReg const_gc(FuncState *fs, GCobj *gc, uint32_t itype)$/;"	f	file:
const_num	lj_parse.c	/^static BCReg const_num(FuncState *fs, ExpDesc *e)$/;"	f	file:
const_pri	lj_parse.c	191;"	d	file:
const_str	lj_parse.c	/^static BCReg const_str(FuncState *fs, ExpDesc *e)$/;"	f	file:
constfolding	host/minilua.c	/^static int constfolding(OpCode op,expdesc*e1,expdesc*e2){$/;"	f	file:
constructor	host/minilua.c	/^static void constructor(LexState*ls,expdesc*t){$/;"	f	file:
copyTV	lj_obj.h	/^static LJ_AINLINE void copyTV(lua_State *L, TValue *o1, const TValue *o2)$/;"	f
correctstack	host/minilua.c	/^static void correctstack(lua_State*L,TValue*oldstack){$/;"	f	file:
cost	lj_asm.c	/^  RegCost cost[RID_MAX];  \/* Reference and blended allocation cost for regs. *\/$/;"	m	struct:ASMState	file:
count	lj_jit.h	/^  uint8_t count;	\/* Count of taken exits for this snapshot. *\/$/;"	m	struct:SnapShot
countarray	lj_tab.c	/^static uint32_t countarray(const GCtab *t, uint32_t *bins)$/;"	f	file:
counthash	lj_tab.c	/^static uint32_t counthash(const GCtab *t, uint32_t *bins, uint32_t *narray)$/;"	f	file:
countint	host/minilua.c	/^static int countint(const TValue*key,int*nums){$/;"	f	file:
countint	lj_tab.c	/^static uint32_t countint(cTValue *key, uint32_t *bins)$/;"	f	file:
cp	lj_cparse.c	/^  CPState *cp;		\/* C parser state. *\/$/;"	m	struct:CPDecl	file:
cp_add	lj_cparse.c	/^static CPDeclIdx cp_add(CPDecl *decl, CTInfo info, CTSize size)$/;"	f	file:
cp_check	lj_cparse.c	/^static void cp_check(CPState *cp, CPToken tok)$/;"	f	file:
cp_cleanup	lj_cparse.c	/^static void cp_cleanup(CPState *cp)$/;"	f	file:
cp_comment_c	lj_cparse.c	/^static void cp_comment_c(CPState *cp)$/;"	f	file:
cp_comment_cpp	lj_cparse.c	/^static void cp_comment_cpp(CPState *cp)$/;"	f	file:
cp_decl_abstract	lj_cparse.c	/^static CTypeID cp_decl_abstract(CPState *cp)$/;"	f	file:
cp_decl_align	lj_cparse.c	/^static void cp_decl_align(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_array	lj_cparse.c	/^static void cp_decl_array(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_asm	lj_cparse.c	/^static void cp_decl_asm(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_attributes	lj_cparse.c	/^static void cp_decl_attributes(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_constinit	lj_cparse.c	/^static CTypeID cp_decl_constinit(CPState *cp, CType **ctp, CTypeID ctypeid)$/;"	f	file:
cp_decl_enum	lj_cparse.c	/^static CTypeID cp_decl_enum(CPState *cp, CPDecl *sdecl)$/;"	f	file:
cp_decl_func	lj_cparse.c	/^static void cp_decl_func(CPState *cp, CPDecl *fdecl)$/;"	f	file:
cp_decl_gccattribute	lj_cparse.c	/^static void cp_decl_gccattribute(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_intern	lj_cparse.c	/^static CTypeID cp_decl_intern(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_mode	lj_cparse.c	/^static void cp_decl_mode(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_msvcattribute	lj_cparse.c	/^static void cp_decl_msvcattribute(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_decl_multi	lj_cparse.c	/^static void cp_decl_multi(CPState *cp)$/;"	f	file:
cp_decl_reset	lj_cparse.c	/^static void cp_decl_reset(CPDecl *decl)$/;"	f	file:
cp_decl_single	lj_cparse.c	/^static void cp_decl_single(CPState *cp)$/;"	f	file:
cp_decl_sizeattr	lj_cparse.c	/^static CTSize cp_decl_sizeattr(CPState *cp)$/;"	f	file:
cp_decl_spec	lj_cparse.c	/^static CPscl cp_decl_spec(CPState *cp, CPDecl *decl, CPscl scl)$/;"	f	file:
cp_decl_struct	lj_cparse.c	/^static CTypeID cp_decl_struct(CPState *cp, CPDecl *sdecl, CTInfo sinfo)$/;"	f	file:
cp_declarator	lj_cparse.c	/^static void cp_declarator(CPState *cp, CPDecl *decl)$/;"	f	file:
cp_err	lj_cparse.c	/^LJ_NORET LJ_NOINLINE static void cp_err(CPState *cp, ErrMsg em)$/;"	f	file:
cp_err_badidx	lj_cparse.c	/^LJ_NORET LJ_NOINLINE static void cp_err_badidx(CPState *cp, CType *ct)$/;"	f	file:
cp_err_token	lj_cparse.c	/^LJ_NORET LJ_NOINLINE static void cp_err_token(CPState *cp, CPToken tok)$/;"	f	file:
cp_errmsg	lj_cparse.c	/^LJ_NORET static void cp_errmsg(CPState *cp, CPToken tok, ErrMsg em, ...)$/;"	f	file:
cp_expr_comma	lj_cparse.c	/^static void cp_expr_comma(CPState *cp, CPValue *k)$/;"	f	file:
cp_expr_infix	lj_cparse.c	/^static void cp_expr_infix(CPState *cp, CPValue *k, int pri)$/;"	f	file:
cp_expr_kint	lj_cparse.c	/^static void cp_expr_kint(CPState *cp, CPValue *k)$/;"	f	file:
cp_expr_ksize	lj_cparse.c	/^static CTSize cp_expr_ksize(CPState *cp)$/;"	f	file:
cp_expr_postfix	lj_cparse.c	/^static void cp_expr_postfix(CPState *cp, CPValue *k)$/;"	f	file:
cp_expr_prefix	lj_cparse.c	/^static void cp_expr_prefix(CPState *cp, CPValue *k)$/;"	f	file:
cp_expr_sizeof	lj_cparse.c	/^static void cp_expr_sizeof(CPState *cp, CPValue *k, int wantsz)$/;"	f	file:
cp_expr_sub	lj_cparse.c	/^static void cp_expr_sub(CPState *cp, CPValue *k, int pri)$/;"	f	file:
cp_expr_unary	lj_cparse.c	/^static void cp_expr_unary(CPState *cp, CPValue *k)$/;"	f	file:
cp_field_align	lj_cparse.c	/^static CTSize cp_field_align(CPState *cp, CType *ct, CTInfo info)$/;"	f	file:
cp_get	lj_cparse.c	/^static LJ_AINLINE CPChar cp_get(CPState *cp)$/;"	f	file:
cp_get_bs	lj_cparse.c	/^static LJ_NOINLINE CPChar cp_get_bs(CPState *cp)$/;"	f	file:
cp_ident	lj_cparse.c	/^static CPToken cp_ident(CPState *cp)$/;"	f	file:
cp_init	lj_cparse.c	/^static void cp_init(CPState *cp)$/;"	f	file:
cp_iseol	lj_cparse.c	/^static LJ_AINLINE int cp_iseol(CPChar c)$/;"	f	file:
cp_istypedecl	lj_cparse.c	/^static int cp_istypedecl(CPState *cp)$/;"	f	file:
cp_newline	lj_cparse.c	/^static void cp_newline(CPState *cp)$/;"	f	file:
cp_next	lj_cparse.c	/^static LJ_NOINLINE CPToken cp_next(CPState *cp)$/;"	f	file:
cp_next_	lj_cparse.c	/^static CPToken cp_next_(CPState *cp)$/;"	f	file:
cp_number	lj_cparse.c	/^static CPToken cp_number(CPState *cp)$/;"	f	file:
cp_opt	lj_cparse.c	/^static int cp_opt(CPState *cp, CPToken tok)$/;"	f	file:
cp_param	lj_cparse.c	/^static CPToken cp_param(CPState *cp)$/;"	f	file:
cp_pragma	lj_cparse.c	/^static void cp_pragma(CPState *cp, BCLine pragmaline)$/;"	f	file:
cp_push	lj_cparse.c	/^static CPDeclIdx cp_push(CPDecl *decl, CTInfo info, CTSize size)$/;"	f	file:
cp_push_attributes	lj_cparse.c	/^static void cp_push_attributes(CPDecl *decl)$/;"	f	file:
cp_push_type	lj_cparse.c	/^static void cp_push_type(CPDecl *decl, CTypeID id)$/;"	f	file:
cp_rawpeek	lj_cparse.c	/^static LJ_AINLINE CPChar cp_rawpeek(CPState *cp)$/;"	f	file:
cp_save	lj_cparse.c	/^static LJ_AINLINE void cp_save(CPState *cp, CPChar c)$/;"	f	file:
cp_save_grow	lj_cparse.c	/^static LJ_NOINLINE void cp_save_grow(CPState *cp, CPChar c)$/;"	f	file:
cp_string	lj_cparse.c	/^static CPToken cp_string(CPState *cp)$/;"	f	file:
cp_struct_layout	lj_cparse.c	/^static void cp_struct_layout(CPState *cp, CTypeID sid, CTInfo sattr)$/;"	f	file:
cp_struct_name	lj_cparse.c	/^static CTypeID cp_struct_name(CPState *cp, CPDecl *sdecl, CTInfo info)$/;"	f	file:
cp_tok2str	lj_cparse.c	/^static const char *cp_tok2str(CPState *cp, CPToken tok)$/;"	f	file:
cpcall	lj_api.c	/^static TValue *cpcall(lua_State *L, lua_CFunction func, void *ud)$/;"	f	file:
cpcparser	lj_cparse.c	/^static TValue *cpcparser(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cpfinalize	lj_state.c	/^static TValue *cpfinalize(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cploop_opt	lj_opt_loop.c	/^static TValue *cploop_opt(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cpluaopen	lj_state.c	/^static TValue *cpluaopen(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cpparser	lj_load.c	/^static TValue *cpparser(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cpsplit	lj_opt_split.c	/^static TValue *cpsplit(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
cpwriter	lj_bcwrite.c	/^static TValue *cpwriter(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
create64_	jit/dis_x86.lua	/^local function create64_(code, addr, out)$/;"	f
create_	jit/dis_arm.lua	/^local function create_(code, addr, out)$/;"	f
create_	jit/dis_mips.lua	/^local function create_(code, addr, out)$/;"	f
create_	jit/dis_ppc.lua	/^local function create_(code, addr, out)$/;"	f
create_	jit/dis_x86.lua	/^local function create_(code, addr, out)$/;"	f
create_el_	jit/dis_mips.lua	/^local function create_el_(code, addr, out)$/;"	f
createmeta	host/minilua.c	/^static void createmeta(lua_State*L){$/;"	f	file:
createmetatable	host/minilua.c	/^static void createmetatable(lua_State*L){$/;"	f	file:
createstdfile	host/minilua.c	/^static void createstdfile(lua_State*L,FILE*f,int k,const char*fname){$/;"	f	file:
crec_alloc	lj_crecord.c	/^static void crec_alloc(jit_State *J, RecordFFData *rd, CTypeID id)$/;"	f	file:
crec_arith_int64	lj_crecord.c	/^static TRef crec_arith_int64(jit_State *J, TRef *sp, CType **s, MMS mm)$/;"	f	file:
crec_arith_meta	lj_crecord.c	/^static void crec_arith_meta(jit_State *J, CTState *cts, RecordFFData *rd)$/;"	f	file:
crec_arith_ptr	lj_crecord.c	/^static TRef crec_arith_ptr(jit_State *J, TRef *sp, CType **s, MMS mm)$/;"	f	file:
crec_call	lj_crecord.c	/^static int crec_call(jit_State *J, RecordFFData *rd, GCcdata *cd)$/;"	f	file:
crec_call_args	lj_crecord.c	/^static TRef crec_call_args(jit_State *J, RecordFFData *rd,$/;"	f	file:
crec_constructor	lj_crecord.c	/^static CTypeID crec_constructor(jit_State *J, GCcdata *cd, TRef tr)$/;"	f	file:
crec_copy	lj_crecord.c	/^static void crec_copy(jit_State *J, TRef trdst, TRef trsrc, TRef trlen,$/;"	f	file:
crec_copy_emit	lj_crecord.c	/^static void crec_copy_emit(jit_State *J, CRecMemList *ml, MSize mlp,$/;"	f	file:
crec_copy_struct	lj_crecord.c	/^static MSize crec_copy_struct(CRecMemList *ml, CTState *cts, CType *ct)$/;"	f	file:
crec_copy_unroll	lj_crecord.c	/^static MSize crec_copy_unroll(CRecMemList *ml, CTSize len, CTSize step,$/;"	f	file:
crec_ct2irt	lj_crecord.c	/^static IRType crec_ct2irt(CTState *cts, CType *ct)$/;"	f	file:
crec_ct_ct	lj_crecord.c	/^static TRef crec_ct_ct(jit_State *J, CType *d, CType *s, TRef dp, TRef sp,$/;"	f	file:
crec_ct_tv	lj_crecord.c	/^static TRef crec_ct_tv(jit_State *J, CType *d, TRef dp, TRef sp, cTValue *sval)$/;"	f	file:
crec_fill	lj_crecord.c	/^static void crec_fill(jit_State *J, TRef trdst, TRef trlen, TRef trfill,$/;"	f	file:
crec_fill_emit	lj_crecord.c	/^static void crec_fill_emit(jit_State *J, CRecMemList *ml, MSize mlp,$/;"	f	file:
crec_fill_unroll	lj_crecord.c	/^static MSize crec_fill_unroll(CRecMemList *ml, CTSize len, CTSize step)$/;"	f	file:
crec_finalizer	lj_crecord.c	/^static void crec_finalizer(jit_State *J, TRef trcd, cTValue *fin)$/;"	f	file:
crec_index_meta	lj_crecord.c	/^static void crec_index_meta(jit_State *J, CTState *cts, CType *ct,$/;"	f	file:
crec_isnonzero	lj_crecord.c	/^static int crec_isnonzero(CType *s, void *p)$/;"	f	file:
crec_reassoc_ofs	lj_crecord.c	/^static TRef crec_reassoc_ofs(jit_State *J, TRef tr, ptrdiff_t *ofsp, MSize sz)$/;"	f	file:
crec_snap_caller	lj_crecord.c	/^static void crec_snap_caller(jit_State *J)$/;"	f	file:
crec_toint	lj_crecord.c	/^static TRef crec_toint(jit_State *J, CTState *cts, TRef sp, TValue *sval)$/;"	f	file:
crec_tv_ct	lj_crecord.c	/^static TRef crec_tv_ct(jit_State *J, CType *s, CTypeID sid, TRef sp)$/;"	f	file:
ct	lj_carith.c	/^  CType *ct[2];$/;"	m	struct:CDArith	file:
ct	lj_cparse.h	/^  CType *ct;		\/* C type table entry. *\/$/;"	m	struct:CPState
ct_hashname	lj_ctype.c	140;"	d	file:
ct_hashtype	lj_ctype.c	139;"	d	file:
ctlsub	jit/bc.lua	/^local function ctlsub(c)$/;"	f
ctlsub	jit/dump.lua	/^local function ctlsub(c)$/;"	f
ctoknames	lj_cparse.c	/^static const char *const ctoknames[] = {$/;"	v	file:
cts	lj_cparse.h	/^  CTState *cts;		\/* C type state. *\/$/;"	m	struct:CPState
cts	lj_ctype.c	/^  CTState *cts;$/;"	m	struct:CTRepr	file:
ctype_addtype	lj_ctype.c	/^static void ctype_addtype(CTState *cts, CType *ct, CTypeID id)$/;"	f	file:
ctype_align	lj_ctype.h	192;"	d
ctype_appc	lj_ctype.c	/^static void ctype_appc(CTRepr *ctr, int c)$/;"	f	file:
ctype_appnum	lj_ctype.c	/^static void ctype_appnum(CTRepr *ctr, uint32_t n)$/;"	f	file:
ctype_attrib	lj_ctype.h	193;"	d
ctype_bitbsz	lj_ctype.h	195;"	d
ctype_bitcsz	lj_ctype.h	196;"	d
ctype_bitpos	lj_ctype.h	194;"	d
ctype_cconv	lj_ctype.h	199;"	d
ctype_check	lj_ctype.h	/^static LJ_AINLINE CTypeID ctype_check(CTState *cts, CTypeID id)$/;"	f
ctype_child	lj_ctype.h	/^static LJ_AINLINE CType *ctype_child(CTState *cts, CType *ct)$/;"	f
ctype_cid	lj_ctype.h	191;"	d
ctype_cts	lj_ctype.h	/^static LJ_AINLINE CTState *ctype_cts(lua_State *L)$/;"	f
ctype_ctsG	lj_ctype.h	376;"	d
ctype_get	lj_ctype.h	/^static LJ_AINLINE CType *ctype_get(CTState *cts, CTypeID id)$/;"	f
ctype_hassize	lj_ctype.h	215;"	d
ctype_isarray	lj_ctype.h	205;"	d
ctype_isattrib	lj_ctype.h	210;"	d
ctype_isbitfield	lj_ctype.h	212;"	d
ctype_isbool	lj_ctype.h	222;"	d
ctype_iscomplex	lj_ctype.h	236;"	d
ctype_isconstval	lj_ctype.h	213;"	d
ctype_isenum	lj_ctype.h	208;"	d
ctype_isextern	lj_ctype.h	214;"	d
ctype_isfield	lj_ctype.h	211;"	d
ctype_isfp	lj_ctype.h	224;"	d
ctype_isfunc	lj_ctype.h	207;"	d
ctype_isinteger	lj_ctype.h	218;"	d
ctype_isinteger_or_bool	lj_ctype.h	220;"	d
ctype_isnum	lj_ctype.h	202;"	d
ctype_ispointer	lj_ctype.h	227;"	d
ctype_isptr	lj_ctype.h	204;"	d
ctype_isref	lj_ctype.h	229;"	d
ctype_isrefarray	lj_ctype.h	232;"	d
ctype_isstruct	lj_ctype.h	206;"	d
ctype_istypedef	lj_ctype.h	209;"	d
ctype_isvector	lj_ctype.h	234;"	d
ctype_isvlarray	lj_ctype.h	242;"	d
ctype_isvltype	lj_ctype.h	239;"	d
ctype_isvoid	lj_ctype.h	203;"	d
ctype_isxattrib	lj_ctype.h	245;"	d
ctype_msizeP	lj_ctype.h	198;"	d
ctype_prepc	lj_ctype.c	/^static void ctype_prepc(CTRepr *ctr, int c)$/;"	f	file:
ctype_preplit	lj_ctype.c	356;"	d	file:
ctype_prepnum	lj_ctype.c	/^static void ctype_prepnum(CTRepr *ctr, uint32_t n)$/;"	f	file:
ctype_prepqual	lj_ctype.c	/^static void ctype_prepqual(CTRepr *ctr, CTInfo info)$/;"	f	file:
ctype_prepstr	lj_ctype.c	/^static void ctype_prepstr(CTRepr *ctr, const char *str, MSize len)$/;"	f	file:
ctype_preptype	lj_ctype.c	/^static void ctype_preptype(CTRepr *ctr, CType *ct, CTInfo qual, const char *t)$/;"	f	file:
ctype_raw	lj_ctype.h	/^static LJ_AINLINE CType *ctype_raw(CTState *cts, CTypeID id)$/;"	f
ctype_rawchild	lj_ctype.h	/^static LJ_AINLINE CType *ctype_rawchild(CTState *cts, CType *ct)$/;"	f
ctype_repr	lj_ctype.c	/^static void ctype_repr(CTRepr *ctr, CTypeID id)$/;"	f	file:
ctype_setname	lj_ctype.h	/^static LJ_AINLINE void ctype_setname(CType *ct, GCstr *s)$/;"	f
ctype_state	lj_obj.h	/^  MRef ctype_state;	\/* Pointer to C type state. *\/$/;"	m	struct:global_State
ctype_type	lj_ctype.h	190;"	d
ctype_typeid	lj_ctype.h	406;"	d
ctype_vsizeP	lj_ctype.h	197;"	d
ctypeid	lj_obj.h	/^  uint16_t ctypeid;	\/* C type ID. *\/$/;"	m	struct:GCcdata
cur	lj_jit.h	/^  GCtrace cur;		\/* Current trace. *\/$/;"	m	struct:jit_State
cur_topslot	lj_dispatch.c	/^static BCReg cur_topslot(GCproto *pt, const BCIns *pc, uint32_t nres)$/;"	f	file:
curins	lj_asm.c	/^  IRRef curins;		\/* Reference of current instruction. *\/$/;"	m	struct:ASMState	file:
curpack	lj_cparse.h	/^  uint8_t curpack;	\/* Current position in pack pragma stack. *\/$/;"	m	struct:CPState
currIsNewline	host/minilua.c	2660;"	d	file:
currIsNewline	lj_lex.c	44;"	d	file:
curr_func	host/minilua.c	429;"	d	file:
curr_func	lj_obj.h	586;"	d
curr_funcisL	lj_obj.h	587;"	d
curr_proto	lj_obj.h	588;"	d
curr_top	lj_obj.h	590;"	d
curr_topL	lj_obj.h	589;"	d
current	host/minilua.c	/^int current;$/;"	m	struct:LexState	file:
current	lj_lex.h	/^  int current;		\/* Current character (charint). *\/$/;"	m	struct:LexState
currentline	host/minilua.c	/^int currentline;$/;"	m	struct:lua_Debug	file:
currentline	host/minilua.c	/^static int currentline(lua_State*L,CallInfo*ci){$/;"	f	file:
currentline	lj_debug.h	/^  int currentline;$/;"	m	struct:lj_Debug
currentline	lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	host/minilua.c	/^static int currentpc(lua_State*L,CallInfo*ci){$/;"	f	file:
currentwhite	host/minilua.c	/^lu_byte currentwhite;$/;"	m	struct:global_State	file:
currentwhite	lj_obj.h	/^  uint8_t currentwhite;	\/* Current white color. *\/$/;"	m	struct:GCState
curwhite	lj_gc.h	39;"	d
d	lib_math.c	/^typedef union { uint64_t u64; double d; } U64double;$/;"	m	union:__anon84	file:
d	lj_ccall.h	/^  double d;$/;"	m	union:FPRArg
d	lj_ccall.h	/^  double d[2];$/;"	m	union:FPRArg
d	lj_ctype.h	/^typedef LJ_ALIGN(8) union FPRCBArg { double d; float f[2]; } FPRCBArg;$/;"	m	union:FPRCBArg
dasm_arch	host/buildvm.h	/^  const char *dasm_arch;$/;"	m	struct:BuildCtx
dasm_ident	host/buildvm.h	/^  const char *dasm_ident;$/;"	m	struct:BuildCtx
data	host/minilua.c	/^void*data;$/;"	m	struct:Zio	file:
data	lj_ffrecord.h	/^  uint32_t data;	\/* Per-ffid auxiliary data (opcode, literal etc.). *\/$/;"	m	struct:RecordFFData
dce_marksnap	lj_opt_dce.c	/^static void dce_marksnap(jit_State *J)$/;"	f	file:
dce_propagate	lj_opt_dce.c	/^static void dce_propagate(jit_State *J)$/;"	f	file:
debt	lj_obj.h	/^  MSize debt;		\/* Debt (how much GC is behind schedule). *\/$/;"	m	struct:GCState
debug_frameline	lj_debug.c	/^static BCLine debug_frameline(lua_State *L, GCfunc *fn, cTValue *nextframe)$/;"	f	file:
debug_framepc	lj_debug.c	/^static BCPos debug_framepc(lua_State *L, GCfunc *fn, cTValue *nextframe)$/;"	f	file:
debug_getupvalue	lib_debug.c	/^static int debug_getupvalue(lua_State *L, int get)$/;"	f	file:
debug_localname	lj_debug.c	/^static TValue *debug_localname(lua_State *L, const lua_Debug *ar,$/;"	f	file:
debug_read_uleb128	lj_debug.c	/^static uint32_t debug_read_uleb128(const uint8_t **pp)$/;"	f	file:
debug_varname	lj_debug.c	/^static const char *debug_varname(const GCproto *pt, BCPos pc, BCReg slot)$/;"	f	file:
decpoint	host/minilua.c	/^char decpoint;$/;"	m	struct:LexState	file:
def_istrue	host/genminilua.lua	/^local function def_istrue(def)$/;"	f
define_setV	lj_obj.h	749;"	d
defs[k] 	host/genminilua.lua	/^	  defs[k] = gsub(v, "%a[%w_]*", function(tok)$/;"	f
depth	lib_string.c	/^  int depth;$/;"	m	struct:MatchState	file:
depth	lj_cparse.h	/^  int depth;		\/* Recursive declaration depth. *\/$/;"	m	struct:CPState
detectmodname	jit/bcsave.lua	/^local function detectmodname(str)$/;"	f
detecttype	jit/bcsave.lua	/^local function detecttype(str)$/;"	f
dhash	lj_obj.h	/^  uint32_t dhash;	\/* Disambiguation hash: dh1 != dh2 => cannot alias. *\/$/;"	m	struct:GCupval
dir	lj_jit.h	/^  uint8_t dir;		\/* Direction. 1: +, 0: -. *\/$/;"	m	struct:ScEvEntry
direct_alloc	lj_alloc.c	/^static void *direct_alloc(size_t nb)$/;"	f	file:
direct_resize	lj_alloc.c	/^static mchunkptr direct_resize(mchunkptr oldp, size_t nb)$/;"	f	file:
disass64_	jit/dis_x86.lua	/^local function disass64_(code, addr, out)$/;"	f
disass_	jit/dis_arm.lua	/^local function disass_(code, addr, out)$/;"	f
disass_	jit/dis_mips.lua	/^local function disass_(code, addr, out)$/;"	f
disass_	jit/dis_ppc.lua	/^local function disass_(code, addr, out)$/;"	f
disass_	jit/dis_x86.lua	/^local function disass_(code, addr, out)$/;"	f
disass_block	jit/dis_arm.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	jit/dis_mips.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	jit/dis_ppc.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	jit/dis_x86.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_el_	jit/dis_mips.lua	/^local function disass_el_(code, addr, out)$/;"	f
disass_ins	jit/dis_arm.lua	/^local function disass_ins(ctx)$/;"	f
disass_ins	jit/dis_mips.lua	/^local function disass_ins(ctx)$/;"	f
disass_ins	jit/dis_ppc.lua	/^local function disass_ins(ctx)$/;"	f
discharge2anyreg	host/minilua.c	/^static void discharge2anyreg(FuncState*fs,expdesc*e){$/;"	f	file:
discharge2reg	host/minilua.c	/^static void discharge2reg(FuncState*fs,expdesc*e,int reg){$/;"	f	file:
dischargejpc	host/minilua.c	/^static void dischargejpc(FuncState*fs){$/;"	f	file:
dispatch	jit/dis_x86.lua	/^local function dispatch(ctx, opat, patgrp)$/;"	f
dispatch	lj_dispatch.h	/^  ASMFunction dispatch[GG_LEN_DISP];	\/* Instruction dispatch tables. *\/$/;"	m	struct:GG_State
dispatch_got	lj_dispatch.c	/^static const ASMFunction dispatch_got[] = {$/;"	v	file:
dispatchmap	jit/dis_x86.lua	/^local function dispatchmap(ctx, opcmap)$/;"	f
dispatchmode	lj_obj.h	/^  uint8_t dispatchmode;	\/* Dispatch mode. *\/$/;"	m	struct:global_State
dobytecode	luajit.c	/^static int dobytecode(lua_State *L, char **argv)$/;"	f	file:
docall	luajit.c	/^static int docall(lua_State *L, int narg, int clear)$/;"	f	file:
docmd	jit/bcsave.lua	/^local function docmd(...)$/;"	f
dofile	luajit.c	/^static int dofile(lua_State *L, const char *name)$/;"	f	file:
dojitcmd	luajit.c	/^static int dojitcmd(lua_State *L, const char *cmd)$/;"	f	file:
dojitopt	luajit.c	/^static int dojitopt(lua_State *L, const char *opt)$/;"	f	file:
dojump	host/minilua.c	4940;"	d	file:
dolibrary	luajit.c	/^static int dolibrary(lua_State *L, const char *name)$/;"	f	file:
dooptions	lib_package.c	/^static void dooptions(lua_State *L, int n)$/;"	f	file:
dostring	luajit.c	/^static int dostring(lua_State *L, const char *s, const char *name)$/;"	f	file:
dotty	luajit.c	/^static void dotty(lua_State *L)$/;"	f	file:
dummy	host/minilua.c	/^L_Umaxalign dummy;$/;"	m	union:TString	file:
dummy	host/minilua.c	/^L_Umaxalign dummy;$/;"	m	union:Udata	file:
dummy_ffid	lj_obj.h	/^  uint8_t dummy_ffid;	\/* Fake FF_C for curr_funcisL() on dummy frames. *\/$/;"	m	struct:lua_State
dummynode_	host/minilua.c	/^static const Node dummynode_={$/;"	v	file:
dump_ir	jit/dump.lua	/^local function dump_ir(tr, dumpsnap, dumpreg)$/;"	f
dump_mcode	jit/dump.lua	/^local function dump_mcode(tr)$/;"	f
dump_record	jit/dump.lua	/^local function dump_record(tr, func, pc, depth, callee)$/;"	f
dump_snap	jit/dump.lua	/^local function dump_snap(tr)$/;"	f
dump_texit	jit/dump.lua	/^local function dump_texit(tr, ex, ngpr, nfpr, ...)$/;"	f
dump_trace	jit/dump.lua	/^local function dump_trace(what, tr, func, pc, otr, oex)$/;"	f
dump_trace	jit/v.lua	/^local function dump_trace(what, tr, func, pc, otr, oex)$/;"	f
dumpcallargs	jit/dump.lua	/^local function dumpcallargs(tr, ins)$/;"	f
dumpcallfunc	jit/dump.lua	/^local function dumpcallfunc(tr, ins)$/;"	f
dumpoff	jit/dump.lua	/^local function dumpoff()$/;"	f
dumpoff	jit/v.lua	/^local function dumpoff()$/;"	f
dumpon	jit/dump.lua	/^local function dumpon(opt, outfile)$/;"	f
dumpon	jit/v.lua	/^local function dumpon(outfile)$/;"	f
dumpwrite	jit/dump.lua	/^local function dumpwrite(s)$/;"	f
dv	lj_alloc.c	/^  mchunkptr  dv;$/;"	m	struct:malloc_state	file:
dvsize	lj_alloc.c	/^  size_t     dvsize;$/;"	m	struct:malloc_state	file:
eabiversion	lj_gdbjit.c	/^  uint8_t eabiversion;$/;"	m	struct:ELFheader	file:
eclass	lj_gdbjit.c	/^  uint8_t eclass;$/;"	m	struct:ELFheader	file:
eendian	lj_gdbjit.c	/^  uint8_t eendian;$/;"	m	struct:ELFheader	file:
ehsize	lj_gdbjit.c	/^  uint16_t ehsize;$/;"	m	struct:ELFheader	file:
elfhdr_template	lj_gdbjit.c	/^static const ELFheader elfhdr_template = {$/;"	v	file:
elseif tn 	jit/dump.lua	/^  elseif tn == "function" then$/;"	f
emagic	lj_gdbjit.c	/^  uint8_t emagic[4];$/;"	m	struct:ELFheader	file:
emit_ab	lj_emit_ppc.h	15;"	d
emit_addptr	lj_emit_arm.h	/^static void emit_addptr(ASMState *as, Reg r, int32_t ofs)$/;"	f
emit_addptr	lj_emit_mips.h	/^static void emit_addptr(ASMState *as, Reg r, int32_t ofs)$/;"	f
emit_addptr	lj_emit_ppc.h	/^static void emit_addptr(ASMState *as, Reg r, int32_t ofs)$/;"	f
emit_addptr	lj_emit_x86.h	/^static void emit_addptr(ASMState *as, Reg r, int32_t ofs)$/;"	f
emit_ai	lj_emit_ppc.h	23;"	d
emit_as	lj_emit_ppc.h	14;"	d
emit_asb	lj_emit_ppc.h	13;"	d
emit_asi	lj_emit_ppc.h	24;"	d
emit_asm	host/buildvm_asm.c	/^void emit_asm(BuildCtx *ctx)$/;"	f
emit_asm_align	host/buildvm_asm.c	/^static void emit_asm_align(BuildCtx *ctx, int bits)$/;"	f	file:
emit_asm_bytes	host/buildvm_asm.c	/^static void emit_asm_bytes(BuildCtx *ctx, uint8_t *p, int n)$/;"	f	file:
emit_asm_debug	host/buildvm_arch.h	/^static void emit_asm_debug(BuildCtx *ctx)$/;"	f
emit_asm_label	host/buildvm_asm.c	/^static void emit_asm_label(BuildCtx *ctx, const char *name, int size, int isfunc)$/;"	f	file:
emit_asm_reloc	host/buildvm_asm.c	/^static void emit_asm_reloc(BuildCtx *ctx, int type, const char *sym)$/;"	f	file:
emit_asm_reloc_mach	host/buildvm_asm.c	/^static void emit_asm_reloc_mach(BuildCtx *ctx, uint8_t *cp, int n,$/;"	f	file:
emit_asm_wordreloc	host/buildvm_asm.c	/^static void emit_asm_wordreloc(BuildCtx *ctx, uint8_t *p, int n,$/;"	f	file:
emit_asm_words	host/buildvm_asm.c	/^static void emit_asm_words(BuildCtx *ctx, uint8_t *p, int n)$/;"	f	file:
emit_bcdef	host/buildvm.c	/^static void emit_bcdef(BuildCtx *ctx)$/;"	f	file:
emit_branch	lj_emit_arm.h	/^static void emit_branch(ASMState *as, ARMIns ai, MCode *target)$/;"	f
emit_branch	lj_emit_mips.h	/^static void emit_branch(ASMState *as, MIPSIns mi, Reg rs, Reg rt, MCode *target)$/;"	f
emit_call	lj_emit_arm.h	/^static void emit_call(ASMState *as, void *target)$/;"	f
emit_call	lj_emit_mips.h	/^static void emit_call(ASMState *as, void *target)$/;"	f
emit_call	lj_emit_ppc.h	/^static void emit_call(ASMState *as, void *target)$/;"	f
emit_call	lj_emit_x86.h	412;"	d
emit_call_	lj_emit_x86.h	/^static void emit_call_(ASMState *as, MCode *target)$/;"	f
emit_canremat	lj_emit_arm.h	118;"	d
emit_canremat	lj_emit_mips.h	50;"	d
emit_canremat	lj_emit_ppc.h	57;"	d
emit_canremat	lj_emit_x86.h	465;"	d
emit_cmpi	lj_emit_ppc.h	/^static void emit_cmpi(ASMState *as, Reg r, int32_t k)$/;"	f
emit_condbranch	lj_emit_ppc.h	/^static void emit_condbranch(ASMState *as, PPCIns pi, PPCCC cc, MCode *target)$/;"	f
emit_d	lj_emit_arm.h	/^static void emit_d(ASMState *as, ARMIns ai, Reg rd)$/;"	f
emit_dm	lj_emit_arm.h	/^static void emit_dm(ASMState *as, ARMIns ai, Reg rd, Reg rm)$/;"	f
emit_dn	lj_emit_arm.h	/^static void emit_dn(ASMState *as, ARMIns ai, Reg rd, Reg rn)$/;"	f
emit_dnm	lj_emit_arm.h	/^static void emit_dnm(ASMState *as, ARMIns ai, Reg rd, Reg rn, Reg rm)$/;"	f
emit_ds	lj_emit_mips.h	18;"	d
emit_dst	lj_emit_mips.h	/^static void emit_dst(ASMState *as, MIPSIns mi, Reg rd, Reg rs, Reg rt)$/;"	f
emit_dta	lj_emit_mips.h	/^static void emit_dta(ASMState *as, MIPSIns mi, Reg rd, Reg rt, uint32_t a)$/;"	f
emit_fab	lj_emit_ppc.h	26;"	d
emit_fac	lj_emit_ppc.h	29;"	d
emit_facb	lj_emit_ppc.h	31;"	d
emit_fai	lj_emit_ppc.h	33;"	d
emit_fb	lj_emit_ppc.h	28;"	d
emit_fg	lj_emit_mips.h	34;"	d
emit_fgh	lj_emit_mips.h	/^static void emit_fgh(ASMState *as, MIPSIns mi, Reg rf, Reg rg, Reg rh)$/;"	f
emit_fold	host/buildvm_fold.c	/^void emit_fold(BuildCtx *ctx)$/;"	f
emit_getgl	lj_emit_arm.h	243;"	d
emit_getgl	lj_emit_mips.h	124;"	d
emit_getgl	lj_emit_ppc.h	127;"	d
emit_getgl	lj_emit_x86.h	262;"	d
emit_gmrmi	lj_emit_x86.h	/^static void emit_gmrmi(ASMState *as, x86Group xg, Reg rb, int32_t i)$/;"	f
emit_gmroi	lj_emit_x86.h	/^static void emit_gmroi(ASMState *as, x86Group xg, Reg rb, int32_t ofs,$/;"	f
emit_gri	lj_emit_x86.h	/^static void emit_gri(ASMState *as, x86Group xg, Reg rb, int32_t i)$/;"	f
emit_hsi	lj_emit_mips.h	27;"	d
emit_i32	lj_emit_x86.h	23;"	d
emit_i8	lj_emit_x86.h	22;"	d
emit_invai	lj_emit_arm.h	/^static uint8_t emit_invai[16] = {$/;"	v
emit_isk12	lj_emit_arm.h	/^static uint32_t emit_isk12(ARMIns ai, int32_t n)$/;"	f
emit_jcc	lj_emit_x86.h	/^static void emit_jcc(ASMState *as, int cc, MCode *target)$/;"	f
emit_jmp	lj_emit_arm.h	268;"	d
emit_jmp	lj_emit_mips.h	/^static void emit_jmp(ASMState *as, MCode *target)$/;"	f
emit_jmp	lj_emit_ppc.h	/^static void emit_jmp(ASMState *as, MCode *target)$/;"	f
emit_jmp	lj_emit_x86.h	/^static void emit_jmp(ASMState *as, MCode *target)$/;"	f
emit_kdelta1	lj_emit_arm.h	/^static int emit_kdelta1(ASMState *as, Reg d, int32_t i)$/;"	f
emit_kdelta1	lj_emit_mips.h	/^static int emit_kdelta1(ASMState *as, Reg t, int32_t i)$/;"	f
emit_kdelta1	lj_emit_ppc.h	/^static int emit_kdelta1(ASMState *as, Reg t, int32_t i)$/;"	f
emit_kdelta2	lj_emit_arm.h	/^static int emit_kdelta2(ASMState *as, Reg d, int32_t i)$/;"	f
emit_label	lj_emit_arm.h	257;"	d
emit_label	lj_emit_mips.h	138;"	d
emit_label	lj_emit_ppc.h	141;"	d
emit_label	lj_emit_x86.h	366;"	d
emit_lib	host/buildvm_lib.c	/^void emit_lib(BuildCtx *ctx)$/;"	f
emit_loada	lj_emit_arm.h	208;"	d
emit_loada	lj_emit_mips.h	95;"	d
emit_loada	lj_emit_ppc.h	99;"	d
emit_loada	lj_emit_x86.h	287;"	d
emit_loadi	lj_emit_arm.h	/^static void emit_loadi(ASMState *as, Reg r, int32_t i)$/;"	f
emit_loadi	lj_emit_mips.h	/^static void emit_loadi(ASMState *as, Reg r, int32_t i)$/;"	f
emit_loadi	lj_emit_ppc.h	/^static void emit_loadi(ASMState *as, Reg r, int32_t i)$/;"	f
emit_loadi	lj_emit_x86.h	/^static void emit_loadi(ASMState *as, Reg r, int32_t i)$/;"	f
emit_loadn	lj_emit_arm.h	/^static void emit_loadn(ASMState *as, Reg r, cTValue *tv)$/;"	f
emit_loadn	lj_emit_mips.h	115;"	d
emit_loadn	lj_emit_ppc.h	118;"	d
emit_loadn	lj_emit_x86.h	/^static void emit_loadn(ASMState *as, Reg r, cTValue *tv)$/;"	f
emit_loadu64	lj_emit_x86.h	/^static void emit_loadu64(ASMState *as, Reg r, uint64_t u64)$/;"	f
emit_lsglptr	lj_emit_mips.h	/^static void emit_lsglptr(ASMState *as, MIPSIns mi, Reg r, int32_t ofs)$/;"	f
emit_lsglptr	lj_emit_ppc.h	/^static void emit_lsglptr(ASMState *as, PPCIns pi, Reg r, int32_t ofs)$/;"	f
emit_lso	lj_emit_arm.h	/^static void emit_lso(ASMState *as, ARMIns ai, Reg rd, Reg rn, int32_t ofs)$/;"	f
emit_lsox	lj_emit_arm.h	/^static void emit_lsox(ASMState *as, ARMIns ai, Reg rd, Reg rn, int32_t ofs)$/;"	f
emit_lsptr	lj_emit_arm.h	/^static void emit_lsptr(ASMState *as, ARMIns ai, Reg r, void *p)$/;"	f
emit_lsptr	lj_emit_mips.h	/^static void emit_lsptr(ASMState *as, MIPSIns mi, Reg r, void *p, RegSet allow)$/;"	f
emit_lsptr	lj_emit_ppc.h	/^static void emit_lsptr(ASMState *as, PPCIns pi, Reg r, void *p, RegSet allow)$/;"	f
emit_m	lj_emit_arm.h	/^static void emit_m(ASMState *as, ARMIns ai, Reg rm)$/;"	f
emit_move	lj_emit_mips.h	169;"	d
emit_movmroi	lj_emit_x86.h	/^static void emit_movmroi(ASMState *as, Reg base, int32_t ofs, int32_t i)$/;"	f
emit_movrr	lj_emit_arm.h	/^static void emit_movrr(ASMState *as, IRIns *ir, Reg dst, Reg src)$/;"	f
emit_movrr	lj_emit_mips.h	/^static void emit_movrr(ASMState *as, IRIns *ir, Reg dst, Reg src)$/;"	f
emit_movrr	lj_emit_ppc.h	/^static void emit_movrr(ASMState *as, IRIns *ir, Reg dst, Reg src)$/;"	f
emit_movrr	lj_emit_x86.h	/^static void emit_movrr(ASMState *as, IRIns *ir, Reg dst, Reg src)$/;"	f
emit_movtomro	lj_emit_x86.h	256;"	d
emit_mr	lj_emit_ppc.h	176;"	d
emit_mrm	lj_emit_x86.h	/^static void emit_mrm(ASMState *as, x86Op xo, Reg rr, Reg rb)$/;"	f
emit_n	lj_emit_arm.h	/^static void emit_n(ASMState *as, ARMIns ai, Reg rn)$/;"	f
emit_nm	lj_emit_arm.h	/^static void emit_nm(ASMState *as, ARMIns ai, Reg rn, Reg rm)$/;"	f
emit_op	lj_emit_x86.h	/^static LJ_AINLINE MCode *emit_op(x86Op xo, Reg rr, Reg rb, Reg rx,$/;"	f
emit_opgl	lj_emit_x86.h	260;"	d
emit_opk	lj_emit_arm.h	/^static void emit_opk(ASMState *as, ARMIns ai, Reg dest, Reg src,$/;"	f
emit_opm	lj_emit_x86.h	60;"	d
emit_opmx	lj_emit_x86.h	65;"	d
emit_peobj	host/buildvm_peobj.c	/^void emit_peobj(BuildCtx *ctx)$/;"	f
emit_peobj_sym	host/buildvm_peobj.c	/^static void emit_peobj_sym(BuildCtx *ctx, const char *name, uint32_t value,$/;"	f	file:
emit_peobj_sym_sect	host/buildvm_peobj.c	/^static void emit_peobj_sym_sect(BuildCtx *ctx, PEsection *pesect, int sect)$/;"	f	file:
emit_raw	host/buildvm.c	/^static void emit_raw(BuildCtx *ctx)$/;"	f	file:
emit_rma	lj_emit_x86.h	/^static void emit_rma(ASMState *as, x86Op xo, Reg rr, const void *addr)$/;"	f
emit_rmro	lj_emit_x86.h	/^static void emit_rmro(ASMState *as, x86Op xo, Reg rr, Reg rb, int32_t ofs)$/;"	f
emit_rmrxo	lj_emit_x86.h	/^static void emit_rmrxo(ASMState *as, x86Op xo, Reg rr, Reg rb, Reg rx,$/;"	f
emit_rot	lj_emit_ppc.h	/^static void emit_rot(ASMState *as, PPCIns pi, Reg ra, Reg rs,$/;"	f
emit_rotlwi	lj_emit_ppc.h	/^static void emit_rotlwi(ASMState *as, Reg ra, Reg rs, int32_t n)$/;"	f
emit_rotr	lj_emit_mips.h	/^static void emit_rotr(ASMState *as, Reg dest, Reg src, Reg tmp, uint32_t shift)$/;"	f
emit_rr	lj_emit_x86.h	/^static void emit_rr(ASMState *as, x86Op xo, Reg r1, Reg r2)$/;"	f
emit_setgl	lj_emit_arm.h	245;"	d
emit_setgl	lj_emit_mips.h	126;"	d
emit_setgl	lj_emit_ppc.h	129;"	d
emit_setgl	lj_emit_x86.h	263;"	d
emit_setvmstate	lj_emit_arm.h	249;"	d
emit_setvmstate	lj_emit_mips.h	130;"	d
emit_setvmstate	lj_emit_ppc.h	133;"	d
emit_setvmstate	lj_emit_x86.h	265;"	d
emit_sfixup	lj_emit_x86.h	/^static void emit_sfixup(ASMState *as, MCLabel source)$/;"	f
emit_shifti	lj_emit_x86.h	184;"	d
emit_sjcc	lj_emit_x86.h	/^static void emit_sjcc(ASMState *as, int cc, MCLabel target)$/;"	f
emit_sjcc_label	lj_emit_x86.h	/^static MCLabel emit_sjcc_label(ASMState *as, int cc)$/;"	f
emit_sjmp	lj_emit_x86.h	/^static void emit_sjmp(ASMState *as, MCLabel target)$/;"	f
emit_slwi	lj_emit_ppc.h	/^static void emit_slwi(ASMState *as, Reg ra, Reg rs, int32_t n)$/;"	f
emit_spload	lj_emit_arm.h	/^static void emit_spload(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spload	lj_emit_mips.h	/^static void emit_spload(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spload	lj_emit_ppc.h	/^static void emit_spload(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spload	lj_emit_x86.h	/^static void emit_spload(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spstore	lj_emit_arm.h	/^static void emit_spstore(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spstore	lj_emit_mips.h	/^static void emit_spstore(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spstore	lj_emit_ppc.h	/^static void emit_spstore(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spstore	lj_emit_x86.h	/^static void emit_spstore(ASMState *as, IRIns *ir, Reg r, int32_t ofs)$/;"	f
emit_spsub	lj_emit_arm.h	355;"	d
emit_spsub	lj_emit_mips.h	210;"	d
emit_spsub	lj_emit_ppc.h	/^static void emit_spsub(ASMState *as, int32_t ofs)$/;"	f
emit_spsub	lj_emit_x86.h	462;"	d
emit_tab	lj_emit_ppc.h	/^static void emit_tab(ASMState *as, PPCIns pi, Reg rt, Reg ra, Reg rb)$/;"	f
emit_tai	lj_emit_ppc.h	/^static void emit_tai(ASMState *as, PPCIns pi, Reg rt, Reg ra, int32_t i)$/;"	f
emit_tg	lj_emit_mips.h	19;"	d
emit_ti	lj_emit_mips.h	26;"	d
emit_ti	lj_emit_ppc.h	22;"	d
emit_tsi	lj_emit_mips.h	/^static void emit_tsi(ASMState *as, MIPSIns mi, Reg rt, Reg rs, int32_t i)$/;"	f
emit_u32	lj_emit_x86.h	24;"	d
emit_vlso	lj_emit_arm.h	/^static void emit_vlso(ASMState *as, ARMIns ai, Reg rd, Reg rn, int32_t ofs)$/;"	f
emit_vmdef	host/buildvm.c	/^static void emit_vmdef(BuildCtx *ctx)$/;"	f	file:
emit_x87op	lj_emit_x86.h	26;"	d
emitconv	lj_crecord.c	1651;"	d	file:
emitconv	lj_crecord.c	41;"	d	file:
emitir	lj_crecord.c	1650;"	d	file:
emitir	lj_crecord.c	39;"	d	file:
emitir	lj_ffrecord.c	35;"	d	file:
emitir	lj_ffrecord.c	887;"	d	file:
emitir	lj_ir.c	39;"	d	file:
emitir	lj_ir.c	499;"	d	file:
emitir	lj_opt_fold.c	142;"	d	file:
emitir	lj_opt_fold.c	2279;"	d	file:
emitir	lj_opt_loop.c	434;"	d	file:
emitir	lj_opt_loop.c	96;"	d	file:
emitir	lj_opt_narrow.c	645;"	d	file:
emitir	lj_opt_narrow.c	97;"	d	file:
emitir	lj_record.c	2245;"	d	file:
emitir	lj_record.c	38;"	d	file:
emitir	lj_snap.c	33;"	d	file:
emitir	lj_snap.c	858;"	d	file:
emitir_raw	lj_opt_loop.c	435;"	d	file:
emitir_raw	lj_opt_loop.c	99;"	d	file:
emitir_raw	lj_opt_narrow.c	646;"	d	file:
emitir_raw	lj_opt_narrow.c	99;"	d	file:
emitir_raw	lj_record.c	2244;"	d	file:
emitir_raw	lj_record.c	41;"	d	file:
emitir_raw	lj_snap.c	36;"	d	file:
emitir_raw	lj_snap.c	857;"	d	file:
emptybuffer	host/minilua.c	/^static int emptybuffer(luaL_Buffer*B){$/;"	f	file:
emptybuffer	lib_aux.c	/^static int emptybuffer(luaL_Buffer *B)$/;"	f	file:
end_capture	host/minilua.c	/^static const char*end_capture(MatchState*ms,const char*s,$/;"	f	file:
end_capture	lib_string.c	/^static const char *end_capture(MatchState *ms, const char *s,$/;"	f	file:
end_ci	host/minilua.c	/^CallInfo*end_ci;$/;"	m	struct:lua_State	file:
endofblock	lj_parse.c	/^static int endofblock(LexToken token)$/;"	f	file:
endpc	host/minilua.c	/^int endpc;$/;"	m	struct:LocVar	file:
endpc	lj_lex.h	/^  BCPos endpc;		\/* First point where the local variable is dead. *\/$/;"	m	struct:VarInfo
enterblock	host/minilua.c	/^static void enterblock(FuncState*fs,BlockCnt*bl,lu_byte isbreakable){$/;"	f	file:
enterlevel	host/minilua.c	/^static void enterlevel(LexState*ls){$/;"	f	file:
entry	lj_gdbjit.c	/^  GDBJITentry entry;$/;"	m	struct:GDBJITentryobj	file:
entry	lj_gdbjit.c	/^  uintptr_t entry;$/;"	m	struct:ELFheader	file:
entsize	lj_gdbjit.c	/^  uintptr_t entsize;$/;"	m	struct:ELFsectheader	file:
env	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	typeref:struct:CClosure::Table	file:
env	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	typeref:struct:LClosure::Table	file:
env	host/minilua.c	/^TValue env;$/;"	m	struct:lua_State	file:
env	host/minilua.c	/^struct Table*env;$/;"	m	struct:Udata::__anon10	typeref:struct:Udata::__anon10::Table	file:
env	lj_obj.h	/^  GCRef env;		\/* Should be at same offset in GCfunc. *\/$/;"	m	struct:GCudata
env	lj_obj.h	/^  GCRef env;		\/* Thread environment (table of globals). *\/$/;"	m	struct:lua_State
env	lj_obj.h	/^  GCRef env;$/;"	m	struct:GChead
eosabi	lj_gdbjit.c	/^  uint8_t eosabi;$/;"	m	struct:ELFheader	file:
epad	lj_gdbjit.c	/^  uint8_t epad[7];$/;"	m	struct:ELFheader	file:
equalobj	host/minilua.c	597;"	d	file:
err2msg	lj_err.h	21;"	d
err_argmsg	lj_err.c	/^LJ_NORET LJ_NOINLINE static void err_argmsg(lua_State *L, int narg,$/;"	f	file:
err_limit	lj_parse.c	/^LJ_NORET static void err_limit(FuncState *fs, uint32_t limit, const char *what)$/;"	f	file:
err_msgv	lj_err.c	/^LJ_NORET LJ_NOINLINE static void err_msgv(lua_State *L, ErrMsg em, ...)$/;"	f	file:
err_raise_ext	lj_err.c	/^static void err_raise_ext(int errcode)$/;"	f	file:
err_syntax	lj_parse.c	/^LJ_NORET LJ_NOINLINE static void err_syntax(LexState *ls, ErrMsg em)$/;"	f	file:
err_token	lj_parse.c	/^LJ_NORET LJ_NOINLINE static void err_token(LexState *ls, LexToken token)$/;"	f	file:
err_unwind	lj_err.c	/^static void *err_unwind(lua_State *L, void *stopcf, int errcode)$/;"	f	file:
errfile	host/minilua.c	/^static int errfile(lua_State*L,const char*what,int fnameindex){$/;"	f	file:
errfunc	host/minilua.c	/^ptrdiff_t errfunc;$/;"	m	struct:lua_State	file:
errinfo	lj_jit.h	/^  TValue errinfo;	\/* Additional info element for trace errors. *\/$/;"	m	struct:jit_State
errorJmp	host/minilua.c	/^struct lua_longjmp*errorJmp;$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp	file:
error_expected	host/minilua.c	/^static void error_expected(LexState*ls,int token){$/;"	f	file:
errorlimit	host/minilua.c	/^static void errorlimit(FuncState*fs,int limit,const char*what){$/;"	f	file:
estimate	host/minilua.c	/^lu_mem estimate;$/;"	m	struct:global_State	file:
estimate	lj_obj.h	/^  MSize estimate;	\/* Estimate of memory actually in use. *\/$/;"	m	struct:GCState
evenspill	lj_asm.c	/^  int32_t evenspill;	\/* Next even spill slot. *\/$/;"	m	struct:ASMState	file:
event	host/minilua.c	/^int event;$/;"	m	struct:lua_Debug	file:
event	lj_debug.h	/^  int event;$/;"	m	struct:lj_Debug
event	lua.h	/^  int event;$/;"	m	struct:lua_Debug
eversion	lj_gdbjit.c	/^  uint8_t eversion;$/;"	m	struct:ELFheader	file:
exclass	lj_err.c	/^  uint64_t exclass;$/;"	m	struct:_Unwind_Exception	file:
excleanup	lj_err.c	/^  void (*excleanup)(int, struct _Unwind_Exception);$/;"	m	struct:_Unwind_Exception	file:
exitno	lj_jit.h	/^  ExitNo exitno;	\/* Exit number in parent of current side trace. *\/$/;"	m	struct:jit_State
exitstub_addr	lj_target.h	158;"	d
exitstub_addr_	lj_target.h	/^static LJ_AINLINE char *exitstub_addr_(char **group, uint32_t exitno)$/;"	f
exitstub_trace_addr	lj_target_mips.h	129;"	d
exitstub_trace_addr	lj_target_ppc.h	121;"	d
exitstub_trace_addr_	lj_target_mips.h	/^static LJ_AINLINE uint32_t *exitstub_trace_addr_(uint32_t *p)$/;"	f
exitstub_trace_addr_	lj_target_ppc.h	/^static LJ_AINLINE uint32_t *exitstub_trace_addr_(uint32_t *p, uint32_t exitno)$/;"	f
exitstubgroup	lj_jit.h	/^  MCode *exitstubgroup[LJ_MAX_EXITSTUBGR];  \/* Exit stub group addresses. *\/$/;"	m	struct:jit_State
exp1	host/minilua.c	/^static int exp1(LexState*ls){$/;"	f	file:
exp2reg	host/minilua.c	/^static void exp2reg(FuncState*fs,expdesc*e,int reg){$/;"	f	file:
expdesc	host/minilua.c	/^typedef struct expdesc{$/;"	s	file:
expdesc	host/minilua.c	/^}expdesc;$/;"	t	typeref:struct:expdesc	file:
expkind	host/minilua.c	/^}expkind;$/;"	t	typeref:enum:__anon6	file:
explist1	host/minilua.c	/^static int explist1(LexState*ls,expdesc*v){$/;"	f	file:
expr	host/minilua.c	/^static void expr(LexState*ls,expdesc*v){$/;"	f	file:
expr	lj_parse.c	/^static void expr(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_binop	lj_parse.c	/^static BinOpr expr_binop(LexState *ls, ExpDesc *v, uint32_t limit)$/;"	f	file:
expr_bracket	lj_parse.c	/^static void expr_bracket(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_cond	lj_parse.c	/^static BCPos expr_cond(LexState *ls)$/;"	f	file:
expr_discharge	lj_parse.c	/^static void expr_discharge(FuncState *fs, ExpDesc *e)$/;"	f	file:
expr_field	lj_parse.c	/^static void expr_field(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_free	lj_parse.c	/^static void expr_free(FuncState *fs, ExpDesc *e)$/;"	f	file:
expr_hasjump	lj_parse.c	69;"	d	file:
expr_index	lj_parse.c	/^static void expr_index(FuncState *fs, ExpDesc *t, ExpDesc *e)$/;"	f	file:
expr_init	lj_parse.c	/^static LJ_AINLINE void expr_init(ExpDesc *e, ExpKind k, uint32_t info)$/;"	f	file:
expr_isk	lj_parse.c	71;"	d	file:
expr_isk_nojump	lj_parse.c	72;"	d	file:
expr_isnumk	lj_parse.c	73;"	d	file:
expr_isnumk_nojump	lj_parse.c	74;"	d	file:
expr_isstrk	lj_parse.c	75;"	d	file:
expr_kvalue	lj_parse.c	/^static void expr_kvalue(TValue *v, ExpDesc *e)$/;"	f	file:
expr_list	lj_parse.c	/^static BCReg expr_list(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_next	lj_parse.c	/^static void expr_next(LexState *ls)$/;"	f	file:
expr_numberV	lj_parse.c	78;"	d	file:
expr_numiszero	lj_parse.c	/^static int expr_numiszero(ExpDesc *e)$/;"	f	file:
expr_numtv	lj_parse.c	77;"	d	file:
expr_primary	lj_parse.c	/^static void expr_primary(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_simple	lj_parse.c	/^static void expr_simple(LexState *ls, ExpDesc *v)$/;"	f	file:
expr_str	lj_parse.c	/^static void expr_str(LexState *ls, ExpDesc *e)$/;"	f	file:
expr_table	lj_parse.c	/^static void expr_table(LexState *ls, ExpDesc *e)$/;"	f	file:
expr_toanyreg	lj_parse.c	/^static BCReg expr_toanyreg(FuncState *fs, ExpDesc *e)$/;"	f	file:
expr_tonextreg	lj_parse.c	/^static void expr_tonextreg(FuncState *fs, ExpDesc *e)$/;"	f	file:
expr_toreg	lj_parse.c	/^static void expr_toreg(FuncState *fs, ExpDesc *e, BCReg reg)$/;"	f	file:
expr_toreg_nobranch	lj_parse.c	/^static void expr_toreg_nobranch(FuncState *fs, ExpDesc *e, BCReg reg)$/;"	f	file:
expr_toval	lj_parse.c	/^static void expr_toval(FuncState *fs, ExpDesc *e)$/;"	f	file:
expr_unop	lj_parse.c	/^static void expr_unop(LexState *ls, ExpDesc *v)$/;"	f	file:
exprstat	host/minilua.c	/^static void exprstat(LexState*ls){$/;"	f	file:
exptr	lj_trace.c	/^  void *exptr;		\/* Pointer to exit state. *\/$/;"	m	struct:ExitDataCP	file:
extnames	host/buildvm_arch.h	/^static const char *const extnames[] = {$/;"	v
extra	lj_obj.h	/^  uint16_t extra;	\/* Extra space allocated (incl. GCcdata + GCcdatav). *\/$/;"	m	struct:GCcdataVar
extraline	host/minilua.c	/^int extraline;$/;"	m	struct:LoadF	file:
f	host/minilua.c	/^FILE*f;$/;"	m	struct:LoadF	file:
f	host/minilua.c	/^Proto*f;$/;"	m	struct:FuncState	file:
f	host/minilua.c	/^int f;$/;"	m	struct:expdesc	file:
f	host/minilua.c	/^lua_CFunction f;$/;"	m	struct:CClosure	file:
f	lj_ccall.h	/^  float f[2];$/;"	m	union:FPRArg
f	lj_ccall.h	/^  float f[4];$/;"	m	union:FPRArg
f	lj_ctype.h	/^typedef LJ_ALIGN(8) union FPRCBArg { double d; float f[2]; } FPRCBArg;$/;"	m	union:FPRCBArg
f	lj_obj.h	/^  lua_CFunction f;	\/* C function to be called. *\/$/;"	m	struct:GCfuncC
f	lj_parse.c	/^  BCPos f;		\/* False condition jump list. *\/$/;"	m	struct:ExpDesc	file:
f16	jit/bcsave.lua	/^    function f16(x) return bit.rshift(bit.bswap(x), 16) end$/;"	f
f32	jit/bcsave.lua	/^  local function f32(x) return x end$/;"	f
f_call	host/minilua.c	/^static void f_call(lua_State*L,void*ud){$/;"	f	file:
f_flush	host/minilua.c	/^static int f_flush(lua_State*L){$/;"	f	file:
f_isLua	host/minilua.c	431;"	d	file:
f_lines	host/minilua.c	/^static int f_lines(lua_State*L){$/;"	f	file:
f_luaopen	host/minilua.c	/^static void f_luaopen(lua_State*L,void*ud){$/;"	f	file:
f_parser	host/minilua.c	/^static void f_parser(lua_State*L,void*ud){$/;"	f	file:
f_read	host/minilua.c	/^static int f_read(lua_State*L){$/;"	f	file:
f_write	host/minilua.c	/^static int f_write(lua_State*L){$/;"	f	file:
fasttm	host/minilua.c	373;"	d	file:
fattr	lj_cparse.c	/^  CTInfo fattr;		\/* Function attributes. *\/$/;"	m	struct:CPDecl	file:
fd	lj_alloc.c	/^  struct malloc_chunk *fd;         \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
fd	lj_alloc.c	/^  struct malloc_tree_chunk *fd;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
ffasmfunc	host/buildvm_lib.c	/^static int ffid, recffid, ffasmfunc;$/;"	v	file:
ffh_pairs	lib_base.c	/^static int ffh_pairs(lua_State *L, MMS mm)$/;"	f	file:
ffh_pairs	lib_base.c	99;"	d	file:
ffh_resume	lib_base.c	/^static int ffh_resume(lua_State *L, lua_State *co, int wrap)$/;"	f	file:
ffi_arith	lib_ffi.c	/^static int ffi_arith(lua_State *L)$/;"	f	file:
ffi_callback_set	lib_ffi.c	/^static int ffi_callback_set(lua_State *L, GCfunc *fn)$/;"	f	file:
ffi_checkcdata	lib_ffi.c	/^static GCcdata *ffi_checkcdata(lua_State *L, int narg)$/;"	f	file:
ffi_checkctype	lib_ffi.c	/^static CTypeID ffi_checkctype(lua_State *L, CTState *cts, TValue *param)$/;"	f	file:
ffi_checkint	lib_ffi.c	/^static int32_t ffi_checkint(lua_State *L, int narg)$/;"	f	file:
ffi_checkptr	lib_ffi.c	/^static void *ffi_checkptr(lua_State *L, int narg, CTypeID id)$/;"	f	file:
ffi_clib_index	lib_ffi.c	/^static TValue *ffi_clib_index(lua_State *L)$/;"	f	file:
ffi_finalizer	lib_ffi.c	/^static GCtab *ffi_finalizer(lua_State *L)$/;"	f	file:
ffi_index_meta	lib_ffi.c	/^static int ffi_index_meta(lua_State *L, CTState *cts, CType *ct, MMS mm)$/;"	f	file:
ffi_pairs	lib_ffi.c	/^static int ffi_pairs(lua_State *L, MMS mm)$/;"	f	file:
ffi_register_module	lib_ffi.c	/^static void ffi_register_module(lua_State *L)$/;"	f	file:
ffid	host/buildvm_lib.c	/^static int ffid, recffid, ffasmfunc;$/;"	v	file:
field	host/minilua.c	/^static void field(LexState*ls,expdesc*v){$/;"	f	file:
field_ofs	lj_asm.c	/^static const uint8_t field_ofs[IRFL__MAX+1] = {$/;"	v	file:
fileerror	host/minilua.c	/^static void fileerror(lua_State*L,int arg,const char*filename){$/;"	f	file:
filename	lj_gdbjit.c	/^  const char *filename;	\/* Starting file name. *\/$/;"	m	struct:GDBJITctx	file:
fillbuf	lj_lex.c	/^static int fillbuf(LexState *ls)$/;"	f	file:
fillsymtab	jit/dump.lua	/^local function fillsymtab(tr, nexit)$/;"	f
fillsymtab_tr	jit/dump.lua	/^local function fillsymtab_tr(tr, nexit)$/;"	f
finalizer	lj_ctype.h	/^  GCtab *finalizer;	\/* Map of cdata to finalizer. *\/$/;"	m	struct:CTState
find_ffofs	host/buildvm_lib.c	/^static int find_ffofs(BuildCtx *ctx, const char *name)$/;"	f	file:
find_kinit	lj_record.c	/^static TRef find_kinit(jit_State *J, const BCIns *endpc, BCReg slot, IRType t)$/;"	f	file:
find_rec	host/buildvm_lib.c	/^static uint32_t find_rec(char *name)$/;"	f	file:
find_sources	host/genminilua.lua	/^local function find_sources()$/;"	f
finderrfunc	lj_err.c	/^static ptrdiff_t finderrfunc(lua_State *L)$/;"	f	file:
findfile	lib_package.c	/^static const char *findfile(lua_State *L, const char *name,$/;"	f	file:
findindex	host/minilua.c	/^static int findindex(lua_State*L,Table*t,StkId key){$/;"	f	file:
fins	lj_ir.c	36;"	d	file:
fins	lj_ir.c	498;"	d	file:
fins	lj_opt_fold.c	135;"	d	file:
fins	lj_opt_fold.c	2274;"	d	file:
fins	lj_opt_mem.c	23;"	d	file:
fins	lj_opt_mem.c	903;"	d	file:
fins	lj_opt_narrow.c	644;"	d	file:
fins	lj_opt_narrow.c	94;"	d	file:
first_entry	lj_gdbjit.c	/^  GDBJITentry *first_entry;$/;"	m	struct:GDBJITdesc	file:
firstline	lj_obj.h	/^  BCLine firstline;	\/* First line of the function definition. *\/$/;"	m	struct:GCproto
fixjump	host/minilua.c	/^static void fixjump(FuncState*fs,int pc,int dest){$/;"	f	file:
fixstring	lj_gc.h	45;"	d
flag_t	lj_alloc.c	/^typedef unsigned int flag_t;           \/* The type of various bit flag sets *\/$/;"	t	file:
flagbits_to_strings	lib_jit.c	/^static void flagbits_to_strings(lua_State *L, uint32_t flags, uint32_t base,$/;"	f	file:
flagmcp	lj_asm.c	/^  MCode *flagmcp;	\/* Pending opportunity to merge flag setting ins. *\/$/;"	m	struct:ASMState	file:
flags	host/buildvm_peobj.c	/^  uint16_t flags;$/;"	m	struct:PEheader	file:
flags	host/buildvm_peobj.c	/^  uint32_t flags;$/;"	m	struct:PEsection	file:
flags	host/minilua.c	/^lu_byte flags;$/;"	m	struct:Table	file:
flags	lj_asm.c	/^  uint32_t flags;	\/* Copy of JIT compiler flags. *\/$/;"	m	struct:ASMState	file:
flags	lj_gdbjit.c	/^  uint32_t flags;$/;"	m	struct:ELFheader	file:
flags	lj_gdbjit.c	/^  uintptr_t flags;$/;"	m	struct:ELFsectheader	file:
flags	lj_ircall.h	/^  uint32_t flags;		\/* Number of arguments and flags. *\/$/;"	m	struct:CCallInfo
flags	lj_jit.h	/^  uint32_t flags;	\/* JIT engine flags. *\/$/;"	m	struct:jit_State
flags	lj_obj.h	/^  uint8_t flags;	\/* Miscellaneous flags (see below). *\/$/;"	m	struct:GCproto
flags	lj_parse.c	/^  uint8_t flags;		\/* Prototype flags. *\/$/;"	m	struct:FuncState	file:
flags	lj_parse.c	/^  uint8_t flags;		\/* Scope flags. *\/$/;"	m	struct:FuncScope	file:
fleft	lj_opt_fold.c	136;"	d	file:
fleft	lj_opt_fold.c	2275;"	d	file:
fleft	lj_opt_mem.c	24;"	d	file:
fleft	lj_opt_mem.c	904;"	d	file:
flib	host/minilua.c	/^static const luaL_Reg flib[]={$/;"	v	file:
flipwhite	lj_gc.h	43;"	d
fmterr	jit/dump.lua	/^local function fmterr(err, info)$/;"	f
fmterr	jit/v.lua	/^local function fmterr(err, info)$/;"	f
fmtfunc	jit/dump.lua	/^local function fmtfunc(func, pc)$/;"	f
fmtfunc	jit/v.lua	/^local function fmtfunc(func, pc)$/;"	f
fmtload	jit/dis_arm.lua	/^local function fmtload(ctx, op, pos)$/;"	f
fmtvload	jit/dis_arm.lua	/^local function fmtvload(ctx, op, pos)$/;"	f
fmtvr	jit/dis_arm.lua	/^local function fmtvr(op, vr, sh0, sh1)$/;"	f
fn	lj_jit.h	/^  GCfunc *fn;		\/* Current function. *\/$/;"	m	struct:jit_State
fn	lj_obj.h	/^  GCfunc fn;$/;"	m	union:GCobj
fnames	host/minilua.c	/^static const char*const fnames[]={"input","output"};$/;"	v	file:
fofs	jit/bcsave.lua	/^      function fofs(x) return bit.bswap(x)*two32 end$/;"	f
fold	lj_jit.h	/^  FoldState fold;	\/* Fold state. *\/$/;"	m	struct:jit_State
fold_func	lj_folddef.h	/^static const FoldFunc fold_func[] = {$/;"	v
fold_hash	lj_folddef.h	/^static const uint32_t fold_hash[916] = {$/;"	v
fold_hashkey	lj_folddef.h	1068;"	d
fold_lines	host/genminilua.lua	/^local function fold_lines(src)$/;"	f
foldarith	lj_parse.c	/^static int foldarith(BinOpr opr, ExpDesc *e1, ExpDesc *e2)$/;"	f	file:
foldkeys	host/buildvm_fold.c	/^static uint32_t foldkeys[BUILD_MAX_FOLD];$/;"	v	file:
foldrule	host/buildvm_fold.c	/^static void foldrule(char *p)$/;"	f	file:
forbody	host/minilua.c	/^static void forbody(LexState*ls,int base,int line,int nvars,int isnum){$/;"	f	file:
fori_arg	lj_record.c	/^static TRef fori_arg(jit_State *J, const BCIns *fori, BCReg slot,$/;"	f	file:
fori_load	lj_record.c	/^static TRef fori_load(jit_State *J, BCReg slot, IRType t, int mode)$/;"	f	file:
forlist	host/minilua.c	/^static void forlist(LexState*ls,TString*indexname){$/;"	f	file:
formatk	jit/dump.lua	/^local function formatk(tr, idx)$/;"	f
fornum	host/minilua.c	/^static void fornum(LexState*ls,TString*varname,int line){$/;"	f	file:
forstat	host/minilua.c	/^static void forstat(LexState*ls,int line){$/;"	f	file:
fp	host/buildvm.h	/^  FILE *fp;$/;"	m	struct:BuildCtx
fp	lib_io.c	/^  FILE *fp;		\/* File handle. *\/$/;"	m	struct:IOFileUD	file:
fp	lj_load.c	/^  FILE *fp;$/;"	m	struct:FileReaderCtx	file:
fp 	jit/dis_x86.lua	/^  fp = function(ctx, name, pat)$/;"	f
fp64_d2l	lj_ircall.h	213;"	d
fp64_d2l	lj_ircall.h	218;"	d
fp64_d2l	lj_ircall.h	251;"	d
fp64_d2ul	lj_ircall.h	214;"	d
fp64_d2ul	lj_ircall.h	219;"	d
fp64_d2ul	lj_ircall.h	252;"	d
fp64_f2l	lj_ircall.h	215;"	d
fp64_f2l	lj_ircall.h	220;"	d
fp64_f2l	lj_ircall.h	253;"	d
fp64_f2ul	lj_ircall.h	216;"	d
fp64_f2ul	lj_ircall.h	221;"	d
fp64_f2ul	lj_ircall.h	254;"	d
fp64_l2d	lj_ircall.h	208;"	d
fp64_l2d	lj_ircall.h	247;"	d
fp64_l2f	lj_ircall.h	210;"	d
fp64_l2f	lj_ircall.h	249;"	d
fp64_ul2d	lj_ircall.h	209;"	d
fp64_ul2d	lj_ircall.h	248;"	d
fp64_ul2f	lj_ircall.h	211;"	d
fp64_ul2f	lj_ircall.h	250;"	d
fpmjoin_pow	lj_asm_x86.h	/^static int fpmjoin_pow(ASMState *as, IRIns *ir)$/;"	f
fpr	lj_ccall.h	/^  FPRArg fpr[CCALL_NUM_FPR];	\/* Arguments\/results in FPRs. *\/$/;"	m	struct:CCallState
fpr	lj_ctype.h	/^  FPRCBArg fpr[CCALL_MAX_FPR];	\/* Arguments\/results in FPRs. *\/$/;"	m	struct:CCallback
fpr	lj_target_arm.h	/^  lua_Number fpr[RID_NUM_FPR];	\/* Floating-point registers. *\/$/;"	m	struct:__anon31
fpr	lj_target_mips.h	/^  lua_Number fpr[RID_NUM_FPR];	\/* Floating-point registers. *\/$/;"	m	struct:__anon39
fpr	lj_target_ppc.h	/^  lua_Number fpr[RID_NUM_FPR];	\/* Floating-point registers. *\/$/;"	m	struct:__anon29
fpr	lj_target_x86.h	/^  lua_Number fpr[RID_NUM_FPR];	\/* Floating-point registers. *\/$/;"	m	struct:__anon45
fr	lj_obj.h	/^  } fr;$/;"	m	union:TValue	typeref:struct:TValue::__anon102
frame_contf	lj_frame.h	39;"	d
frame_contf	lj_frame.h	43;"	d
frame_contpc	lj_frame.h	37;"	d
frame_delta	lj_frame.h	45;"	d
frame_ftsz	lj_frame.h	26;"	d
frame_func	lj_frame.h	25;"	d
frame_gc	lj_frame.h	24;"	d
frame_isc	lj_frame.h	31;"	d
frame_iscont	lj_frame.h	32;"	d
frame_islua	lj_frame.h	30;"	d
frame_ispcall	lj_frame.h	34;"	d
frame_isvarg	lj_frame.h	33;"	d
frame_pc	lj_frame.h	36;"	d
frame_prev	lj_frame.h	50;"	d
frame_prevd	lj_frame.h	49;"	d
frame_prevl	lj_frame.h	48;"	d
frame_sized	lj_frame.h	46;"	d
frame_type	lj_frame.h	28;"	d
frame_typep	lj_frame.h	29;"	d
framedepth	lj_jit.h	/^  int32_t framedepth;	\/* Current frame depth. *\/$/;"	m	struct:jit_State
framesize	lj_obj.h	/^  uint8_t framesize;	\/* Fixed frame size. *\/$/;"	m	struct:GCproto
framesize	lj_parse.c	/^  uint8_t framesize;		\/* Fixed frame size. *\/$/;"	m	struct:FuncState	file:
frealloc	host/minilua.c	/^lua_Alloc frealloc;$/;"	m	struct:global_State	file:
freeexp	host/minilua.c	/^static void freeexp(FuncState*fs,expdesc*e){$/;"	f	file:
freeobj	host/minilua.c	/^static void freeobj(lua_State*L,GCObject*o){$/;"	f	file:
freereg	host/minilua.c	/^int freereg;$/;"	m	struct:FuncState	file:
freereg	host/minilua.c	/^static void freereg(FuncState*fs,int reg){$/;"	f	file:
freereg	lj_parse.c	/^  BCReg freereg;		\/* First free register. *\/$/;"	m	struct:FuncState	file:
freeset	lj_asm.c	/^  RegSet freeset;	\/* Set of free registers. *\/$/;"	m	struct:ASMState	file:
freestack	host/minilua.c	/^static void freestack(lua_State*L,lua_State*L1){$/;"	f	file:
freetop	lj_obj.h	/^  MRef freetop;		\/* Top of free elements (stored in t->node[0]). *\/$/;"	m	struct:Node
freetrace	lj_jit.h	/^  TraceNo freetrace;	\/* Start of scan for next free trace. *\/$/;"	m	struct:jit_State
fright	lj_opt_fold.c	137;"	d	file:
fright	lj_opt_fold.c	2276;"	d	file:
fright	lj_opt_mem.c	25;"	d	file:
fright	lj_opt_mem.c	905;"	d	file:
fromstate	host/minilua.c	2256;"	d	file:
fs	host/minilua.c	/^struct FuncState*fs;$/;"	m	struct:LexState	typeref:struct:LexState::FuncState	file:
fs	lj_lex.h	/^  struct FuncState *fs;	\/* Current FuncState. Defined in lj_parse.c. *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fs_buf_need	lj_parse.c	/^static LJ_AINLINE void fs_buf_need(LexState *ls, MSize len)$/;"	f	file:
fs_buf_resize	lj_parse.c	/^static LJ_NOINLINE void fs_buf_resize(LexState *ls, MSize len)$/;"	f	file:
fs_buf_str	lj_parse.c	/^static void fs_buf_str(LexState *ls, const char *str, MSize len)$/;"	f	file:
fs_buf_uleb128	lj_parse.c	/^static void fs_buf_uleb128(LexState *ls, uint32_t v)$/;"	f	file:
fs_finish	lj_parse.c	/^static GCproto *fs_finish(LexState *ls, BCLine line)$/;"	f	file:
fs_fixup_bc	lj_parse.c	/^static void fs_fixup_bc(FuncState *fs, GCproto *pt, BCIns *bc, MSize n)$/;"	f	file:
fs_fixup_k	lj_parse.c	/^static void fs_fixup_k(FuncState *fs, GCproto *pt, void *kptr)$/;"	f	file:
fs_fixup_line	lj_parse.c	/^static void fs_fixup_line(FuncState *fs, GCproto *pt,$/;"	f	file:
fs_fixup_line	lj_parse.c	1516;"	d	file:
fs_fixup_ret	lj_parse.c	/^static void fs_fixup_ret(FuncState *fs)$/;"	f	file:
fs_fixup_uv1	lj_parse.c	/^static void fs_fixup_uv1(FuncState *fs, GCproto *pt, uint16_t *uv)$/;"	f	file:
fs_fixup_uv2	lj_parse.c	/^static void fs_fixup_uv2(FuncState *fs, GCproto *pt)$/;"	f	file:
fs_fixup_var	lj_parse.c	/^static void fs_fixup_var(LexState *ls, GCproto *pt, uint8_t *p, size_t ofsvar)$/;"	f	file:
fs_fixup_var	lj_parse.c	1519;"	d	file:
fs_init	lj_parse.c	/^static void fs_init(LexState *ls, FuncState *fs)$/;"	f	file:
fs_prep_line	lj_parse.c	/^static size_t fs_prep_line(FuncState *fs, BCLine numline)$/;"	f	file:
fs_prep_line	lj_parse.c	1515;"	d	file:
fs_prep_var	lj_parse.c	/^static size_t fs_prep_var(LexState *ls, FuncState *fs, size_t *ofsvar)$/;"	f	file:
fs_prep_var	lj_parse.c	1518;"	d	file:
fscope_begin	lj_parse.c	/^static void fscope_begin(FuncState *fs, FuncScope *bl, int flags)$/;"	f	file:
fscope_end	lj_parse.c	/^static void fscope_end(FuncState *fs)$/;"	f	file:
fscope_uvmark	lj_parse.c	/^static void fscope_uvmark(FuncState *fs, BCReg level)$/;"	f	file:
ftsz	lj_obj.h	/^  int32_t ftsz;		\/* Frame type and size of previous frame. *\/$/;"	m	union:__anon100
func	host/buildvm_lib.c	/^  const LibDefFunc func;$/;"	m	struct:LibDefHandler	file:
func	host/minilua.c	/^StkId func;$/;"	m	struct:CallInfo	file:
func	host/minilua.c	/^StkId func;$/;"	m	struct:CallS	file:
func	host/minilua.c	/^lua_CFunction func;$/;"	m	struct:luaL_Reg	file:
func	lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	lj_ccall.h	/^  void (*func)(void);		\/* Pointer to called function. *\/$/;"	m	struct:CCallState
func	lj_ircall.h	/^  ASMFunction func;		\/* Function pointer. *\/$/;"	m	struct:CCallInfo
funcV	lj_obj.h	707;"	d
func_collect	host/genminilua.lua	/^local function func_collect(src)$/;"	f
func_emptyuv	lj_func.c	/^static GCupval *func_emptyuv(lua_State *L)$/;"	f	file:
func_finduv	lj_func.c	/^static GCupval *func_finduv(lua_State *L, TValue *slot)$/;"	f	file:
func_gather	host/genminilua.lua	/^local function func_gather(src)$/;"	f
func_newL	lj_func.c	/^static GCfunc *func_newL(lua_State *L, GCproto *pt, GCtab *env)$/;"	f	file:
func_visit	host/genminilua.lua	/^local function func_visit(nodes, list, used, n)$/;"	f
funcargs	host/minilua.c	/^static void funcargs(LexState*ls,expdesc*f){$/;"	f	file:
funcidx	host/buildvm_fold.c	/^static int funcidx;$/;"	v	file:
funcinfo	host/minilua.c	/^static void funcinfo(lua_Debug*ar,Closure*cl){$/;"	f	file:
funcname	host/buildvm_lib.c	/^static char funcname[80];$/;"	v	file:
funcname	host/minilua.c	/^static int funcname(LexState*ls,expdesc*v){$/;"	f	file:
funcproto	lj_obj.h	393;"	d
funcstat	host/minilua.c	/^static void funcstat(LexState*ls,int line){$/;"	f	file:
fuseref	lj_asm.c	/^  IRRef fuseref;	\/* Fusion limit (loopref, 0 or FUSE_DISABLED). *\/$/;"	m	struct:ASMState	file:
fwd_ahload	lj_opt_mem.c	/^static TRef fwd_ahload(jit_State *J, IRRef xref)$/;"	f	file:
fwd_aload_reassoc	lj_opt_mem.c	/^static TRef fwd_aload_reassoc(jit_State *J)$/;"	f	file:
g	host/minilua.c	/^global_State g;$/;"	m	struct:LG	file:
g	lj_ctype.h	/^  global_State *g;	\/* Global state. *\/$/;"	m	struct:CTState
g	lj_dispatch.h	/^  global_State g;			\/* Global state. *\/$/;"	m	struct:GG_State
g_iofile	host/minilua.c	/^static int g_iofile(lua_State*L,int f,const char*mode){$/;"	f	file:
g_read	host/minilua.c	/^static int g_read(lua_State*L,FILE*f,int first){$/;"	f	file:
g_write	host/minilua.c	/^static int g_write(lua_State*L,FILE*f,int arg){$/;"	f	file:
gc	host/minilua.c	/^GCObject*gc;$/;"	m	union:__anon8	file:
gc	lj_obj.h	/^  GCState gc;		\/* Garbage collector. *\/$/;"	m	struct:global_State
gcV	lj_obj.h	705;"	d
gc_call_finalizer	lj_gc.c	/^static void gc_call_finalizer(global_State *g, lua_State *L,$/;"	f	file:
gc_clearweak	lj_gc.c	/^static void gc_clearweak(GCobj *o)$/;"	f	file:
gc_finalize	lj_gc.c	/^static void gc_finalize(lua_State *L)$/;"	f	file:
gc_freefunc	lj_gc.c	/^static const GCFreeFunc gc_freefunc[] = {$/;"	v	file:
gc_fullsweep	lj_gc.c	385;"	d	file:
gc_mark	lj_gc.c	/^static void gc_mark(global_State *g, GCobj *o)$/;"	f	file:
gc_mark_gcroot	lj_gc.c	/^static void gc_mark_gcroot(global_State *g)$/;"	f	file:
gc_mark_mmudata	lj_gc.c	/^static void gc_mark_mmudata(global_State *g)$/;"	f	file:
gc_mark_start	lj_gc.c	/^static void gc_mark_start(global_State *g)$/;"	f	file:
gc_mark_str	lj_gc.c	51;"	d	file:
gc_mark_uv	lj_gc.c	/^static void gc_mark_uv(global_State *g)$/;"	f	file:
gc_markobj	lj_gc.c	47;"	d	file:
gc_marktrace	lj_gc.c	/^static void gc_marktrace(global_State *g, TraceNo traceno)$/;"	f	file:
gc_marktv	lj_gc.c	42;"	d	file:
gc_mayclear	lj_gc.c	/^static int gc_mayclear(cTValue *o, int val)$/;"	f	file:
gc_onestep	lj_gc.c	/^static size_t gc_onestep(lua_State *L)$/;"	f	file:
gc_propagate_gray	lj_gc.c	/^static size_t gc_propagate_gray(global_State *g)$/;"	f	file:
gc_shrink	lj_gc.c	/^static void gc_shrink(global_State *g, lua_State *L)$/;"	f	file:
gc_sweep	lj_gc.c	/^static GCRef *gc_sweep(global_State *g, GCRef *p, uint32_t lim)$/;"	f	file:
gc_traverse_curtrace	lj_gc.c	248;"	d	file:
gc_traverse_curtrace	lj_gc.c	250;"	d	file:
gc_traverse_frames	lj_gc.c	/^static MSize gc_traverse_frames(global_State *g, lua_State *th)$/;"	f	file:
gc_traverse_func	lj_gc.c	/^static void gc_traverse_func(global_State *g, GCfunc *fn)$/;"	f	file:
gc_traverse_proto	lj_gc.c	/^static void gc_traverse_proto(global_State *g, GCproto *pt)$/;"	f	file:
gc_traverse_tab	lj_gc.c	/^static int gc_traverse_tab(global_State *g, GCtab *t)$/;"	f	file:
gc_traverse_thread	lj_gc.c	/^static void gc_traverse_thread(global_State *g, lua_State *th)$/;"	f	file:
gc_traverse_trace	lj_gc.c	/^static void gc_traverse_trace(global_State *g, GCtrace *T)$/;"	f	file:
gcdept	host/minilua.c	/^lu_mem gcdept;$/;"	m	struct:global_State	file:
gch	host/minilua.c	/^GCheader gch;$/;"	m	union:GCObject	file:
gch	lj_obj.h	/^  GChead gch;$/;"	m	union:GCobj
gclist	host/minilua.c	/^GCObject*gclist;$/;"	m	struct:Proto	file:
gclist	host/minilua.c	/^GCObject*gclist;$/;"	m	struct:Table	file:
gclist	host/minilua.c	/^GCObject*gclist;$/;"	m	struct:lua_State	file:
gclist	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
gclist	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
gclist	lj_jit.h	/^  GCRef gclist;$/;"	m	struct:GCtrace
gclist	lj_obj.h	/^  GCRef gclist;		\/* GC chain. *\/$/;"	m	struct:lua_State
gclist	lj_obj.h	/^  GCRef gclist;$/;"	m	struct:GChead
gclist	lj_obj.h	/^  GCRef gclist;$/;"	m	struct:GCproto
gclist	lj_obj.h	/^  GCRef gclist;$/;"	m	struct:GCtab
gcnext	lj_obj.h	47;"	d
gco2cd	lj_obj.h	636;"	d
gco2cl	host/minilua.c	503;"	d	file:
gco2func	lj_obj.h	635;"	d
gco2h	host/minilua.c	504;"	d	file:
gco2p	host/minilua.c	505;"	d	file:
gco2pt	lj_obj.h	634;"	d
gco2str	lj_obj.h	631;"	d
gco2tab	lj_obj.h	637;"	d
gco2th	host/minilua.c	508;"	d	file:
gco2th	lj_obj.h	633;"	d
gco2trace	lj_jit.h	244;"	d
gco2ts	host/minilua.c	500;"	d	file:
gco2u	host/minilua.c	502;"	d	file:
gco2ud	lj_obj.h	638;"	d
gco2uv	host/minilua.c	506;"	d	file:
gco2uv	lj_obj.h	632;"	d
gcpause	host/minilua.c	/^int gcpause;$/;"	m	struct:global_State	file:
gcptr32	lj_obj.h	/^  uint32_t gcptr32;	\/* Pseudo 32 bit pointer. *\/$/;"	m	struct:GCRef
gcr	lj_ir.h	/^  GCRef gcr;		\/* GCobj constant (overlaps op12). *\/$/;"	m	union:IRIns
gcref	lj_obj.h	42;"	d
gcrefeq	lj_obj.h	46;"	d
gcrefi	lj_obj.h	45;"	d
gcrefp	lj_obj.h	43;"	d
gcrefu	lj_obj.h	44;"	d
gcroot	lj_obj.h	/^  GCRef gcroot[GCROOT_MAX];  \/* GC roots. *\/$/;"	m	struct:global_State
gcstate	host/minilua.c	/^lu_byte gcstate;$/;"	m	struct:global_State	file:
gcstep_barrier	lj_opt_fold.c	160;"	d	file:
gcstepmul	host/minilua.c	/^int gcstepmul;$/;"	m	struct:global_State	file:
gcsteps	lj_asm.c	/^  int32_t gcsteps;	\/* Accumulated number of GC steps (per section). *\/$/;"	m	struct:ASMState	file:
gcval	lj_obj.h	697;"	d
gcvalue	host/minilua.c	243;"	d	file:
gdbjit_buildobj	lj_gdbjit.c	/^static void gdbjit_buildobj(GDBJITctx *ctx)$/;"	f	file:
gdbjit_catnum	lj_gdbjit.c	/^static void gdbjit_catnum(GDBJITctx *ctx, uint32_t n)$/;"	f	file:
gdbjit_debugabbrev	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_debugabbrev(GDBJITctx *ctx)$/;"	f	file:
gdbjit_debuginfo	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_debuginfo(GDBJITctx *ctx)$/;"	f	file:
gdbjit_debugline	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_debugline(GDBJITctx *ctx)$/;"	f	file:
gdbjit_ehframe	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_ehframe(GDBJITctx *ctx)$/;"	f	file:
gdbjit_entry	lj_jit.h	/^  void *gdbjit_entry;	\/* GDB JIT entry. *\/$/;"	m	struct:GCtrace
gdbjit_initsect	lj_gdbjit.c	/^static void gdbjit_initsect(GDBJITctx *ctx, int sect, GDBJITinitf initf)$/;"	f	file:
gdbjit_newentry	lj_gdbjit.c	/^static void gdbjit_newentry(lua_State *L, GDBJITctx *ctx)$/;"	f	file:
gdbjit_secthdr	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_secthdr(GDBJITctx *ctx)$/;"	f	file:
gdbjit_sleb128	lj_gdbjit.c	/^static void gdbjit_sleb128(GDBJITctx *ctx, int32_t v)$/;"	f	file:
gdbjit_strz	lj_gdbjit.c	/^static uint32_t gdbjit_strz(GDBJITctx *ctx, const char *str)$/;"	f	file:
gdbjit_symtab	lj_gdbjit.c	/^static void LJ_FASTCALL gdbjit_symtab(GDBJITctx *ctx)$/;"	f	file:
gdbjit_uleb128	lj_gdbjit.c	/^static void gdbjit_uleb128(GDBJITctx *ctx, uint32_t v)$/;"	f	file:
getBMode	host/minilua.c	946;"	d	file:
getCMode	host/minilua.c	947;"	d	file:
getF	host/minilua.c	/^static const char*getF(lua_State*L,void*ud,size_t*size){$/;"	f	file:
getS	host/minilua.c	/^static const char*getS(lua_State*L,void*ud,size_t*size){$/;"	f	file:
get_be	jit/dis_mips.lua	/^local function get_be(ctx)$/;"	f
get_compTM	host/minilua.c	/^static const TValue*get_compTM(lua_State*L,Table*mt1,Table*mt2,$/;"	f	file:
get_foot	lj_alloc.c	373;"	d	file:
get_le	jit/dis_mips.lua	/^local function get_le(ctx)$/;"	f
get_license	host/genminilua.lua	/^local function get_license(src)$/;"	f
getargs	luajit.c	/^static int getargs(lua_State *L, char **argv, int n)$/;"	f	file:
getbinopr	host/minilua.c	/^static BinOpr getbinopr(int op){$/;"	f	file:
getboolfield	lib_os.c	/^static int getboolfield(lua_State *L, const char *key)$/;"	f	file:
getcode	host/minilua.c	2388;"	d	file:
getcurrenv	host/minilua.c	/^static Table*getcurrenv(lua_State*L){$/;"	f	file:
getcurrenv	lj_api.c	/^static GCtab *getcurrenv(lua_State *L)$/;"	f	file:
getcurrf	lj_record.c	/^static TRef getcurrf(jit_State *J)$/;"	f	file:
getfield	lib_os.c	/^static int getfield(lua_State *L, const char *key, int d)$/;"	f	file:
getfreepos	host/minilua.c	/^static Node*getfreepos(Table*t){$/;"	f	file:
getfunc	host/minilua.c	/^static void getfunc(lua_State*L,int opt){$/;"	f	file:
getimm	jit/dis_x86.lua	/^local function getimm(ctx, pos, n)$/;"	f
getiofile	host/minilua.c	/^static FILE*getiofile(lua_State*L,int findex){$/;"	f	file:
getjump	host/minilua.c	/^static int getjump(FuncState*fs,int pc){$/;"	f	file:
getjumpcontrol	host/minilua.c	/^static Instruction*getjumpcontrol(FuncState*fs,int pc){$/;"	f	file:
getline_	host/minilua.c	512;"	d	file:
getlocvar	host/minilua.c	3655;"	d	file:
getluaproto	host/minilua.c	/^static Proto*getluaproto(CallInfo*ci){$/;"	f	file:
getmrm	jit/dis_x86.lua	/^local function getmrm(ctx)$/;"	f
getslot	lj_record.c	154;"	d	file:
getstr	host/minilua.c	279;"	d	file:
getthread	lib_debug.c	/^static lua_State *getthread(lua_State *L, int *arg)$/;"	f	file:
getunopr	host/minilua.c	/^static UnOpr getunopr(int op){$/;"	f	file:
gfasttm	host/minilua.c	372;"	d	file:
gkey	host/minilua.c	764;"	d	file:
glob	host/buildvm.h	/^  void **glob;$/;"	m	struct:BuildCtx
globalL	luajit.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	host/minilua.c	/^typedef struct global_State{$/;"	s	file:
global_State	host/minilua.c	/^}global_State;$/;"	t	typeref:struct:global_State	file:
global_State	lj_obj.h	/^typedef struct global_State {$/;"	s
global_State	lj_obj.h	/^} global_State;$/;"	t	typeref:struct:global_State
globnames	host/buildvm.h	/^  const char *const *globnames;$/;"	m	struct:BuildCtx
globnames	host/buildvm_arch.h	/^static const char *const globnames[] = {$/;"	v
glref	lj_obj.h	/^  MRef glref;		\/* Link to global state. *\/$/;"	m	struct:lua_State
gmatch	host/minilua.c	/^static int gmatch(lua_State*L){$/;"	f	file:
gmatch_aux	host/minilua.c	/^static int gmatch_aux(lua_State*L){$/;"	f	file:
gnext	host/minilua.c	766;"	d	file:
gnode	host/minilua.c	763;"	d	file:
gola_close	lj_parse.c	/^static void gola_close(LexState *ls, VarInfo *vg)$/;"	f	file:
gola_findlabel	lj_parse.c	/^static VarInfo *gola_findlabel(LexState *ls, GCstr *name)$/;"	f	file:
gola_fixup	lj_parse.c	/^static void gola_fixup(LexState *ls, FuncScope *bl)$/;"	f	file:
gola_isgoto	lj_parse.c	1155;"	d	file:
gola_isgotolabel	lj_parse.c	1157;"	d	file:
gola_islabel	lj_parse.c	1156;"	d	file:
gola_new	lj_parse.c	/^static MSize gola_new(LexState *ls, GCstr *name, uint8_t info, BCPos pc)$/;"	f	file:
gola_patch	lj_parse.c	/^static void gola_patch(LexState *ls, VarInfo *vg, VarInfo *vl)$/;"	f	file:
gola_resolve	lj_parse.c	/^static void gola_resolve(LexState *ls, FuncScope *bl, MSize idx)$/;"	f	file:
got	lj_dispatch.h	/^  ASMFunction got[LJ_GOT__MAX];		\/* Global offset table. *\/$/;"	m	struct:GG_State
gpr	lj_ccall.h	/^  GPRArg gpr[CCALL_NUM_GPR];	\/* Arguments\/results in GPRs. *\/$/;"	m	struct:CCallState
gpr	lj_ctype.h	/^  intptr_t gpr[CCALL_MAX_GPR];	\/* Arguments\/results in GPRs. *\/$/;"	m	struct:CCallback
gpr	lj_target_arm.h	/^  int32_t gpr[RID_NUM_GPR];	\/* General-purpose registers. *\/$/;"	m	struct:__anon31
gpr	lj_target_mips.h	/^  int32_t gpr[RID_NUM_GPR];	\/* General-purpose registers. *\/$/;"	m	struct:__anon39
gpr	lj_target_ppc.h	/^  int32_t gpr[RID_NUM_GPR];	\/* General-purpose registers. *\/$/;"	m	struct:__anon29
gpr	lj_target_x86.h	/^  intptr_t gpr[RID_NUM_GPR];	\/* General-purpose registers. *\/$/;"	m	struct:__anon45
granularity_align	lj_alloc.c	460;"	d	file:
gray	host/minilua.c	/^GCObject*gray;$/;"	m	struct:global_State	file:
gray	lj_obj.h	/^  GCRef gray;		\/* List of gray objects. *\/$/;"	m	struct:GCState
gray2black	host/minilua.c	576;"	d	file:
gray2black	lj_gc.c	36;"	d	file:
grayagain	host/minilua.c	/^GCObject*grayagain;$/;"	m	struct:global_State	file:
grayagain	lj_obj.h	/^  GCRef grayagain;	\/* List of objects for atomic traversal. *\/$/;"	m	struct:GCState
growCI	host/minilua.c	/^static CallInfo*growCI(lua_State*L){$/;"	f	file:
gt	host/minilua.c	414;"	d	file:
guardemit	lj_jit.h	/^  IRType1 guardemit;	\/* Accumulated IRT_GUARD for emitted instructions. *\/$/;"	m	struct:jit_State
gval	host/minilua.c	765;"	d	file:
h	host/minilua.c	/^Table*h;$/;"	m	struct:FuncState	file:
h	host/minilua.c	/^struct Table h;$/;"	m	union:GCObject	typeref:struct:GCObject::Table	file:
h_list	jit/bc.lua	/^local function h_list(func)$/;"	f
handle	lj_clib.h	/^  void *handle;		\/* Opaque handle for dynamic library loader. *\/$/;"	m	struct:CLibrary
handle_luainit	luajit.c	/^static int handle_luainit(lua_State *L)$/;"	f	file:
handle_script	luajit.c	/^static int handle_script(lua_State *L, char **argv, int n)$/;"	f	file:
has_segment_link	lj_alloc.c	/^static int has_segment_link(mstate m, msegmentptr ss)$/;"	f	file:
hash	host/minilua.c	/^GCObject**hash;$/;"	m	struct:stringtable	file:
hash	host/minilua.c	/^unsigned int hash;$/;"	m	struct:TString::__anon9	file:
hash	lj_ctype.h	/^  CTypeID1 hash[CTHASH_SIZE];  \/* Hash anchors for C type table. *\/$/;"	m	struct:CTState
hash	lj_obj.h	/^  MSize hash;		\/* Hash of string. *\/$/;"	m	struct:GCstr
hashboolean	host/minilua.c	1339;"	d	file:
hashgcref	lj_tab.c	32;"	d	file:
hashkey	lj_tab.c	/^static Node *hashkey(const GCtab *t, cTValue *key)$/;"	f	file:
hashlohi	lj_tab.c	29;"	d	file:
hashmask	lj_tab.c	/^static LJ_AINLINE Node *hashmask(const GCtab *t, uint32_t hash)$/;"	f	file:
hashmod	host/minilua.c	1340;"	d	file:
hashnum	host/minilua.c	/^static Node*hashnum(const Table*t,lua_Number n){$/;"	f	file:
hashnum	lj_tab.c	30;"	d	file:
hashpointer	host/minilua.c	1341;"	d	file:
hashpow2	host/minilua.c	1337;"	d	file:
hashptr	lj_tab.c	31;"	d	file:
hashrot	lj_tab.h	/^static LJ_AINLINE uint32_t hashrot(uint32_t lo, uint32_t hi)$/;"	f
hashstr	host/minilua.c	1338;"	d	file:
hashstr	lj_tab.c	27;"	d	file:
hasjumps	host/minilua.c	2995;"	d	file:
hasmultret	host/minilua.c	3654;"	d	file:
hdr	lj_gdbjit.c	/^  ELFheader hdr;			\/* ELF header. *\/$/;"	m	struct:GDBJITobj	file:
head	lj_alloc.c	/^  size_t                    head;$/;"	m	struct:malloc_tree_chunk	file:
head	lj_alloc.c	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	m	struct:malloc_chunk	file:
hmask	lj_obj.h	/^  uint32_t hmask;	\/* Hash part mask (size of hash part - 1). *\/$/;"	m	struct:GCtab
hook	host/minilua.c	/^lua_Hook hook;$/;"	m	struct:lua_State	file:
hook_active	lj_obj.h	556;"	d
hook_enter	lj_obj.h	557;"	d
hook_entergc	lj_obj.h	558;"	d
hook_leave	lj_obj.h	560;"	d
hook_restore	lj_obj.h	562;"	d
hook_save	lj_obj.h	561;"	d
hook_vmevent	lj_obj.h	559;"	d
hookcount	host/minilua.c	/^int hookcount;$/;"	m	struct:lua_State	file:
hookcount	lj_obj.h	/^  int32_t hookcount;	\/* Instruction hook countdown. *\/$/;"	m	struct:global_State
hookcstart	lj_obj.h	/^  int32_t hookcstart;	\/* Start count for instruction hook counter. *\/$/;"	m	struct:global_State
hookf	lib_debug.c	/^static void hookf(lua_State *L, lua_Debug *ar)$/;"	f	file:
hookf	lj_obj.h	/^  lua_Hook hookf;	\/* Hook function. *\/$/;"	m	struct:global_State
hookmask	host/minilua.c	/^lu_byte hookmask;$/;"	m	struct:lua_State	file:
hookmask	lj_obj.h	/^  uint8_t hookmask;	\/* Hook mask. *\/$/;"	m	struct:global_State
hotcount	lj_dispatch.h	/^  HotCount hotcount[HOTCOUNT_SIZE];	\/* Hot counters. *\/$/;"	m	struct:GG_State
hotcount_get	lj_dispatch.h	97;"	d
hotcount_set	lj_dispatch.h	99;"	d
hsize2hbits	lj_tab.h	34;"	d
hvalue	host/minilua.c	251;"	d	file:
i	lj_ccall.h	/^  int i[4];$/;"	m	union:FPRArg
i	lj_ir.h	/^  int32_t i;		\/* 32 bit signed integer literal (overlaps op12). *\/$/;"	m	union:IRIns
i32	lj_cparse.h	/^    int32_t i32;	\/* Value for CTID_INT32. *\/$/;"	m	union:CPValue::__anon76
i32ptr	lj_def.h	92;"	d
iABC	host/minilua.c	/^enum OpMode{iABC,iABx,iAsBx};$/;"	e	enum:OpMode	file:
iABx	host/minilua.c	/^enum OpMode{iABC,iABx,iAsBx};$/;"	e	enum:OpMode	file:
iAsBx	host/minilua.c	/^enum OpMode{iABC,iABx,iAsBx};$/;"	e	enum:OpMode	file:
i_ci	host/minilua.c	/^int i_ci;$/;"	m	struct:lua_Debug	file:
i_ci	lj_debug.h	/^  int i_ci;$/;"	m	struct:lj_Debug
i_ci	lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug
i_key	host/minilua.c	/^TKey i_key;$/;"	m	struct:Node	file:
i_val	host/minilua.c	/^TValue i_val;$/;"	m	struct:Node	file:
id	lj_cparse.h	/^  CTypeID id;		\/* C Type ID of the value. *\/$/;"	m	struct:CPValue
idx	lj_jit.h	/^  IRRef1 idx;		\/* Index reference. *\/$/;"	m	struct:ScEvEntry
idx	lj_target_x86.h	/^  uint8_t idx;		\/* Index register or RID_NONE. *\/$/;"	m	struct:__anon47
idx2bit	lj_alloc.c	548;"	d	file:
idxchain	lj_record.h	/^  int idxchain;		\/* Index indirections left or 0 for raw lookup. *\/$/;"	m	struct:RecordIndex
if type(info) 	jit/dump.lua	/^    if type(info) == "function" then info = fmtfunc(info) end$/;"	f
if type(info) 	jit/v.lua	/^    if type(info) == "function" then info = fmtfunc(info) end$/;"	f
if type(input) 	jit/bcsave.lua	/^  if type(input) == "function" then return input end$/;"	f
ifstat	host/minilua.c	/^static void ifstat(LexState*ls,int line){$/;"	f	file:
immutable	lj_obj.h	/^  uint8_t immutable;	\/* Immutable value. *\/$/;"	m	struct:GCupval
inarray	lj_tab.h	57;"	d
inc_ci	host/minilua.c	1123;"	d	file:
inclinenumber	host/minilua.c	/^static void inclinenumber(LexState*ls){$/;"	f	file:
inclinenumber	lj_lex.c	/^static void inclinenumber(LexState *ls)$/;"	f	file:
incomplete	jit/dis_x86.lua	/^local function incomplete(ctx)$/;"	f
incomplete	luajit.c	/^static int incomplete(lua_State *L, int status)$/;"	f	file:
incr_top	host/minilua.c	518;"	d	file:
incr_top	lj_state.h	11;"	d
index	lj_alloc.c	/^  bindex_t                  index;$/;"	m	struct:malloc_tree_chunk	file:
index2adr	host/minilua.c	/^static TValue*index2adr(lua_State*L,int idx){$/;"	f	file:
index2adr	lj_api.c	/^static TValue *index2adr(lua_State *L, int idx)$/;"	f	file:
indexupvalue	host/minilua.c	/^static int indexupvalue(FuncState*fs,TString*name,expdesc*v){$/;"	f	file:
info	host/minilua.c	/^lu_byte info;$/;"	m	struct:upvaldesc	file:
info	host/minilua.c	/^struct{int info,aux;}s;$/;"	m	struct:expdesc::__anon14::__anon15	file:
info	lj_ctype.h	/^  CTInfo info;		\/* Type info. *\/$/;"	m	struct:CType
info	lj_gdbjit.c	/^  uint32_t info;$/;"	m	struct:ELFsectheader	file:
info	lj_gdbjit.c	/^  uint8_t info;$/;"	m	struct:ELFsymbol	file:
info	lj_lex.h	/^  uint8_t info;		\/* Variable\/goto\/label info. *\/$/;"	m	struct:VarInfo
info	lj_parse.c	/^      uint32_t info;	\/* Primary info. *\/$/;"	m	struct:ExpDesc::__anon41::__anon42	file:
info_tailcall	host/minilua.c	/^static void info_tailcall(lua_Debug*ar){$/;"	f	file:
init	host/minilua.c	/^const char*init;$/;"	m	struct:MatchState::__anon18	file:
init	lib_string.c	/^    const char *init;$/;"	m	struct:MatchState::__anon85	file:
init_bins	lj_alloc.c	/^static void init_bins(mstate m)$/;"	f	file:
init_exp	host/minilua.c	/^static void init_exp(expdesc*e,expkind k,int i){$/;"	f	file:
init_top	lj_alloc.c	/^static void init_top(mstate m, mchunkptr p, size_t psize)$/;"	f	file:
innerloopleft	lj_record.c	/^static int innerloopleft(jit_State *J, const BCIns *pc)$/;"	f	file:
ins	lj_jit.h	/^  IRIns ins;		\/* Currently emitted instruction. *\/$/;"	m	struct:FoldState
ins	lj_lex.h	/^  BCIns ins;		\/* Bytecode instruction. *\/$/;"	m	struct:BCInsLine
insert_chunk	lj_alloc.c	719;"	d	file:
insert_large_chunk	lj_alloc.c	632;"	d	file:
insert_small_chunk	lj_alloc.c	579;"	d	file:
instunroll	lj_jit.h	/^  int32_t instunroll;	\/* Unroll counter for instable loops. *\/$/;"	m	struct:jit_State
int16_t	lj_def.h	/^typedef __int16 int16_t;$/;"	t
int16_t	lj_def.h	/^typedef short int int16_t;$/;"	t
int32_t	lj_def.h	/^typedef __int32 int32_t;$/;"	t
int32_t	lj_def.h	/^typedef int int32_t;$/;"	t
int64_t	lj_def.h	/^typedef __int64 int64_t;$/;"	t
int64_t	lj_def.h	/^typedef long long int64_t;$/;"	t
int8_t	lj_def.h	/^typedef __int8 int8_t;$/;"	t
int8_t	lj_def.h	/^typedef signed char int8_t;$/;"	t
intV	lj_obj.h	714;"	d
intptr_t	lj_def.h	/^typedef __int32 intptr_t;$/;"	t
intptr_t	lj_def.h	/^typedef __int64 intptr_t;$/;"	t
intptr_t	lj_def.h	/^typedef int intptr_t;$/;"	t
invertcond	lj_parse.c	/^static void invertcond(FuncState *fs, ExpDesc *e)$/;"	f	file:
invertjump	host/minilua.c	/^static void invertjump(FuncState*fs,expdesc*e){$/;"	f	file:
invmcp	lj_asm.c	/^  MCode *invmcp;	\/* Points to invertible loop branch (or NULL). *\/$/;"	m	struct:ASMState	file:
io_close	host/minilua.c	/^static int io_close(lua_State*L){$/;"	f	file:
io_fclose	host/minilua.c	/^static int io_fclose(lua_State*L){$/;"	f	file:
io_file_close	lib_io.c	/^static int io_file_close(lua_State *L, IOFileUD *iof)$/;"	f	file:
io_file_iter	lib_io.c	/^static int io_file_iter(lua_State *L)$/;"	f	file:
io_file_new	lib_io.c	/^static IOFileUD *io_file_new(lua_State *L)$/;"	f	file:
io_file_open	lib_io.c	/^static IOFileUD *io_file_open(lua_State *L, const char *mode)$/;"	f	file:
io_file_read	lib_io.c	/^static int io_file_read(lua_State *L, FILE *fp, int start)$/;"	f	file:
io_file_readchars	lib_io.c	/^static int io_file_readchars(lua_State *L, FILE *fp, size_t n)$/;"	f	file:
io_file_readline	lib_io.c	/^static int io_file_readline(lua_State *L, FILE *fp, size_t chop)$/;"	f	file:
io_file_readnum	lib_io.c	/^static int io_file_readnum(lua_State *L, FILE *fp)$/;"	f	file:
io_file_testeof	lib_io.c	/^static int io_file_testeof(lua_State *L, FILE *fp)$/;"	f	file:
io_file_write	lib_io.c	/^static int io_file_write(lua_State *L, FILE *fp, int start)$/;"	f	file:
io_flush	host/minilua.c	/^static int io_flush(lua_State*L){$/;"	f	file:
io_gc	host/minilua.c	/^static int io_gc(lua_State*L){$/;"	f	file:
io_input	host/minilua.c	/^static int io_input(lua_State*L){$/;"	f	file:
io_lines	host/minilua.c	/^static int io_lines(lua_State*L){$/;"	f	file:
io_noclose	host/minilua.c	/^static int io_noclose(lua_State*L){$/;"	f	file:
io_open	host/minilua.c	/^static int io_open(lua_State*L){$/;"	f	file:
io_output	host/minilua.c	/^static int io_output(lua_State*L){$/;"	f	file:
io_pclose	host/minilua.c	/^static int io_pclose(lua_State*L){$/;"	f	file:
io_read	host/minilua.c	/^static int io_read(lua_State*L){$/;"	f	file:
io_readline	host/minilua.c	/^static int io_readline(lua_State*L){$/;"	f	file:
io_std_getset	lib_io.c	/^static int io_std_getset(lua_State *L, ptrdiff_t id, const char *mode)$/;"	f	file:
io_std_new	lib_io.c	/^static GCobj *io_std_new(lua_State *L, FILE *fp, const char *name)$/;"	f	file:
io_stdfile	lib_io.c	/^static FILE *io_stdfile(lua_State *L, ptrdiff_t id)$/;"	f	file:
io_tofile	lib_io.c	/^static IOFileUD *io_tofile(lua_State *L)$/;"	f	file:
io_tofilep	lib_io.c	/^static IOFileUD *io_tofilep(lua_State *L)$/;"	f	file:
io_type	host/minilua.c	/^static int io_type(lua_State*L){$/;"	f	file:
io_write	host/minilua.c	/^static int io_write(lua_State*L){$/;"	f	file:
iolib	host/minilua.c	/^static const luaL_Reg iolib[]={$/;"	v	file:
ipairsaux	host/minilua.c	/^static int ipairsaux(lua_State*L){$/;"	f	file:
ir	lj_asm.c	/^  IRIns *ir;		\/* Copy of pointer to IR instructions\/constants. *\/$/;"	m	struct:ASMState	file:
ir	lj_jit.h	/^  IRIns *ir;		\/* IR instructions\/constants. Biased with REF_BIAS. *\/$/;"	m	struct:GCtrace
ir_k64	lj_ir.h	538;"	d
ir_kcdata	lj_ir.h	535;"	d
ir_kfunc	lj_ir.h	534;"	d
ir_kgc	lj_ir.h	531;"	d
ir_khash	lj_asm.c	/^static uint32_t ir_khash(IRIns *ir)$/;"	f	file:
ir_kint64	lj_ir.h	537;"	d
ir_knum	lj_ir.h	536;"	d
ir_kptr	lj_ir.h	540;"	d
ir_kstr	lj_ir.h	532;"	d
ir_ktab	lj_ir.h	533;"	d
ir_names	host/buildvm.c	/^const char *const ir_names[] = {$/;"	v
ir_nextk	lj_ir.c	/^static LJ_AINLINE IRRef ir_nextk(jit_State *J)$/;"	f	file:
ir_sideeff	lj_ir.h	/^static LJ_AINLINE int ir_sideeff(IRIns *ir)$/;"	f
irbotlim	lj_jit.h	/^  IRRef irbotlim;	\/* Lower limit of instuction buffer (biased). *\/$/;"	m	struct:jit_State
irbuf	lj_jit.h	/^  IRIns *irbuf;		\/* Temp. IR instruction buffer. Biased with REF_BIAS. *\/$/;"	m	struct:jit_State
ircall_names	host/buildvm.c	/^const char *const ircall_names[] = {$/;"	v
irfield_names	host/buildvm.c	/^const char *const irfield_names[] = {$/;"	v
irfpm_names	host/buildvm.c	/^const char *const irfpm_names[] = {$/;"	v
irm_iscomm	lj_ir.h	270;"	d
irm_kind	lj_ir.h	271;"	d
irm_op1	lj_ir.h	268;"	d
irm_op2	lj_ir.h	269;"	d
irref_isk	lj_ir.h	439;"	d
irt	lj_ir.h	/^typedef struct IRType1 { uint8_t irt; } IRType1;$/;"	m	struct:IRType1
irt_clearmark	lj_ir.h	401;"	d
irt_clearphi	lj_ir.h	404;"	d
irt_is64	lj_ir.h	364;"	d
irt_is64orfp	lj_ir.h	365;"	d
irt_isaddr	lj_ir.h	353;"	d
irt_iscdata	lj_ir.h	338;"	d
irt_isfloat	lj_ir.h	339;"	d
irt_isfp	lj_ir.h	350;"	d
irt_isgcv	lj_ir.h	352;"	d
irt_isguard	lj_ir.h	398;"	d
irt_isi16	lj_ir.h	344;"	d
irt_isi64	lj_ir.h	347;"	d
irt_isi8	lj_ir.h	342;"	d
irt_isint	lj_ir.h	341;"	d
irt_isint64	lj_ir.h	354;"	d
irt_isinteger	lj_ir.h	351;"	d
irt_islightud	lj_ir.h	335;"	d
irt_ismarked	lj_ir.h	399;"	d
irt_isnil	lj_ir.h	333;"	d
irt_isnum	lj_ir.h	340;"	d
irt_isphi	lj_ir.h	402;"	d
irt_ispri	lj_ir.h	334;"	d
irt_isstr	lj_ir.h	336;"	d
irt_istab	lj_ir.h	337;"	d
irt_isu16	lj_ir.h	345;"	d
irt_isu32	lj_ir.h	346;"	d
irt_isu64	lj_ir.h	348;"	d
irt_isu8	lj_ir.h	343;"	d
irt_names	host/buildvm.c	/^const char *const irt_names[] = {$/;"	v
irt_sametype	lj_ir.h	329;"	d
irt_setmark	lj_ir.h	400;"	d
irt_setphi	lj_ir.h	403;"	d
irt_size	lj_ir.h	367;"	d
irt_t	lj_ir.h	327;"	d
irt_toitype	lj_ir.h	396;"	d
irt_toitype_	lj_ir.h	/^static LJ_AINLINE uint32_t irt_toitype_(IRType t)$/;"	f
irt_type	lj_ir.h	328;"	d
irt_typerange	lj_ir.h	330;"	d
irtoplim	lj_jit.h	/^  IRRef irtoplim;	\/* Upper limit of instuction buffer (biased). *\/$/;"	m	struct:jit_State
irtype_ispri	lj_ir.h	316;"	d
isC	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
isC	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
isLua	host/minilua.c	432;"	d	file:
is_direct	lj_alloc.c	384;"	d	file:
is_initialized	lj_alloc.c	451;"	d	file:
is_small	lj_alloc.c	508;"	d	file:
is_vararg	host/minilua.c	/^lu_byte is_vararg;$/;"	m	struct:Proto	file:
isblack	host/minilua.c	571;"	d	file:
isblack	lj_gc.h	33;"	d
isbreakable	host/minilua.c	/^lu_byte isbreakable;$/;"	m	struct:BlockCnt	file:
iscfunc	lj_obj.h	391;"	d
iscfunction	host/minilua.c	343;"	d	file:
iscleared	host/minilua.c	/^static int iscleared(const TValue*o,int iskey){$/;"	f	file:
iscollectable	host/minilua.c	268;"	d	file:
iscrossref	lj_asm.c	100;"	d	file:
isdead	host/minilua.c	574;"	d	file:
isdead	lj_gc.h	37;"	d
isffunc	lj_obj.h	392;"	d
isfinalized	host/minilua.c	1722;"	d	file:
isfinalized	lj_gc.c	37;"	d	file:
isgray	host/minilua.c	572;"	d	file:
isgray	lj_gc.h	34;"	d
isinstack	host/minilua.c	/^static int isinstack(CallInfo*ci,const TValue*o){$/;"	f	file:
isluafunc	lj_obj.h	390;"	d
isnumeral	host/minilua.c	/^static int isnumeral(expdesc*e){$/;"	f	file:
isvararg	lj_debug.h	/^  int isvararg;$/;"	m	struct:lj_Debug
iswhite	host/minilua.c	570;"	d	file:
iswhite	lj_gc.h	32;"	d
itype	lj_obj.h	650;"	d
itype2irt	lj_ir.h	/^static LJ_AINLINE IRType itype2irt(const TValue *tv)$/;"	f
itypemap	lj_obj.h	690;"	d
itypemap	lj_obj.h	693;"	d
jccnames	host/buildvm_asm.c	/^static const char *const jccnames[] = {$/;"	v	file:
jit_L	lj_obj.h	/^  GCRef jit_L;		\/* Current JIT code lua_State or NULL. *\/$/;"	m	struct:global_State
jit_State	lj_jit.h	/^typedef struct jit_State {$/;"	s
jit_base	lj_obj.h	/^  MRef jit_base;	\/* Current JIT code L->base. *\/$/;"	m	struct:global_State
jit_checktrace	lib_jit.c	/^static GCtrace *jit_checktrace(lua_State *L)$/;"	f	file:
jit_cpudetect	lib_jit.c	/^static uint32_t jit_cpudetect(lua_State *L)$/;"	f	file:
jit_init	lib_jit.c	/^static void jit_init(lua_State *L)$/;"	f	file:
jit_param_default	lib_jit.c	/^static const int32_t jit_param_default[JIT_P__MAX+1] = {$/;"	v	file:
jit_trlinkname	lib_jit.c	/^static const char *const jit_trlinkname[] = {$/;"	v	file:
jitopt_flag	lib_jit.c	/^static int jitopt_flag(jit_State *J, const char *str)$/;"	f	file:
jitopt_level	lib_jit.c	/^static int jitopt_level(jit_State *J, const char *str)$/;"	f	file:
jitopt_param	lib_jit.c	/^static int jitopt_param(jit_State *J, const char *str)$/;"	f	file:
jmp_append	lj_parse.c	/^static void jmp_append(FuncState *fs, BCPos *l1, BCPos l2)$/;"	f	file:
jmp_dropval	lj_parse.c	/^static void jmp_dropval(FuncState *fs, BCPos list)$/;"	f	file:
jmp_next	lj_parse.c	/^static BCPos jmp_next(FuncState *fs, BCPos pc)$/;"	f	file:
jmp_novalue	lj_parse.c	/^static int jmp_novalue(FuncState *fs, BCPos list)$/;"	f	file:
jmp_patch	lj_parse.c	/^static void jmp_patch(FuncState *fs, BCPos list, BCPos target)$/;"	f	file:
jmp_patchins	lj_parse.c	/^static void jmp_patchins(FuncState *fs, BCPos pc, BCPos dest)$/;"	f	file:
jmp_patchtestreg	lj_parse.c	/^static int jmp_patchtestreg(FuncState *fs, BCPos pc, BCReg reg)$/;"	f	file:
jmp_patchval	lj_parse.c	/^static void jmp_patchval(FuncState *fs, BCPos list, BCPos vtarget,$/;"	f	file:
jmp_tohere	lj_parse.c	/^static void jmp_tohere(FuncState *fs, BCPos list)$/;"	f	file:
jmprel	lj_emit_x86.h	/^static LJ_AINLINE int32_t jmprel(MCode *p, MCode *target)$/;"	f
jpc	host/minilua.c	/^int jpc;$/;"	m	struct:FuncState	file:
jpc	lj_parse.c	/^  BCPos jpc;			\/* Pending jump list to next bytecode. *\/$/;"	m	struct:FuncState	file:
jumponcond	host/minilua.c	/^static int jumponcond(FuncState*fs,expdesc*e,int cond){$/;"	f	file:
k	host/minilua.c	/^TValue*k;$/;"	m	struct:Proto	file:
k	host/minilua.c	/^expkind k;$/;"	m	struct:expdesc	file:
k	host/minilua.c	/^lu_byte k;$/;"	m	struct:upvaldesc	file:
k	lj_ir.c	/^  TValue k[LJ_MIN_K64SZ];	\/* Array of constants. *\/$/;"	m	struct:K64Array	file:
k	lj_obj.h	/^  MRef k;		\/* Split constant array (points to the middle). *\/$/;"	m	struct:GCproto
k	lj_parse.c	/^  ExpKind k;$/;"	m	struct:ExpDesc	file:
k64	lj_jit.h	/^  MRef k64;		\/* Pointer to chained array of 64 bit constants. *\/$/;"	m	struct:jit_State
key	lj_jit.h	/^  IRRef1 key;		\/* Key: original reference. *\/$/;"	m	struct:BPropEntry
key	lj_obj.h	/^  TValue key;		\/* Key object. *\/$/;"	m	struct:Node
key	lj_record.h	/^  TRef key;		\/* Key reference. *\/$/;"	m	struct:RecordIndex
key2tval	host/minilua.c	767;"	d	file:
keyindex	lj_tab.c	/^static uint32_t keyindex(lua_State *L, GCtab *t, cTValue *key)$/;"	f	file:
keyv	lj_record.h	/^  TValue keyv;		\/* Runtime value of key. *\/$/;"	m	struct:RecordIndex
kfold_int64arith	lj_opt_fold.c	/^static uint64_t kfold_int64arith(uint64_t k1, uint64_t k2, IROp op)$/;"	f	file:
kfold_intop	lj_opt_fold.c	/^static int32_t kfold_intop(int32_t k1, int32_t k2, IROp op)$/;"	f	file:
kfold_xload	lj_opt_fold.c	/^static TRef kfold_xload(jit_State *J, IRIns *ir, const void *p)$/;"	f	file:
knumleft	lj_opt_fold.c	138;"	d	file:
knumleft	lj_opt_fold.c	2277;"	d	file:
knumright	lj_opt_fold.c	139;"	d	file:
knumright	lj_opt_fold.c	2278;"	d	file:
krefk	lj_asm.c	/^  int32_t krefk[RID_NUM_KREF];$/;"	m	struct:ASMState	file:
ksimd	lj_jit.h	/^  TValue ksimd[LJ_KSIMD__MAX*2+1];  \/* 16 byte aligned SIMD constants. *\/$/;"	m	struct:jit_State
kt	lj_parse.c	/^  GCtab *kt;			\/* Hash table for constants. *\/$/;"	m	struct:FuncState	file:
l	host/minilua.c	/^LClosure l;$/;"	m	union:Closure	file:
l	host/minilua.c	/^lua_State l;$/;"	m	struct:LG	file:
l	host/minilua.c	/^typedef union{double u;void*s;long l;}L_Umaxalign;$/;"	m	union:__anon7	file:
l	host/minilua.c	/^}l;$/;"	m	union:UpVal::__anon11	typeref:struct:UpVal::__anon11::__anon12	file:
l	lj_ccall.h	/^  int64_t l[2];$/;"	m	union:FPRArg
l	lj_obj.h	/^  GCfuncL l;$/;"	m	union:GCfunc
l_G	host/minilua.c	/^global_State*l_G;$/;"	m	struct:lua_State	file:
l_alloc	host/minilua.c	/^static void*l_alloc(void*ud,void*ptr,size_t osize,size_t nsize){$/;"	f	file:
l_gt	host/minilua.c	/^TValue l_gt;$/;"	m	struct:lua_State	file:
l_isfalse	host/minilua.c	254;"	d	file:
l_mem	host/minilua.c	/^typedef ptrdiff_t l_mem;$/;"	t	file:
l_message	luajit.c	/^static void l_message(const char *pname, const char *msg)$/;"	f	file:
l_registry	host/minilua.c	/^TValue l_registry;$/;"	m	struct:global_State	file:
l_setbit	host/minilua.c	564;"	d	file:
l_strcmp	host/minilua.c	/^static int l_strcmp(const TString*ls,const TString*rs){$/;"	f	file:
l_uacNumber	host/minilua.c	/^typedef double l_uacNumber;$/;"	t	file:
laction	luajit.c	/^static void laction(int i)$/;"	f	file:
lastfree	host/minilua.c	/^Node*lastfree;$/;"	m	struct:Table	file:
lastline	host/minilua.c	/^int lastline;$/;"	m	struct:LexState	file:
lastline	lj_lex.h	/^  BCLine lastline;	\/* Line of last token. *\/$/;"	m	struct:LexState
lastlinedefined	host/minilua.c	/^int lastlinedefined;$/;"	m	struct:Proto	file:
lastlinedefined	host/minilua.c	/^int lastlinedefined;$/;"	m	struct:lua_Debug	file:
lastlinedefined	lj_debug.h	/^  int lastlinedefined;$/;"	m	struct:lj_Debug
lastlinedefined	lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	host/minilua.c	/^static void lastlistfield(FuncState*fs,struct ConsControl*cc){$/;"	f	file:
lasttarget	host/minilua.c	/^int lasttarget;$/;"	m	struct:FuncState	file:
lasttarget	lj_parse.c	/^  BCPos lasttarget;		\/* Bytecode position of last jump target. *\/$/;"	m	struct:FuncState	file:
lauxlib_h	lauxlib.h	9;"	d
leaveblock	host/minilua.c	/^static void leaveblock(FuncState*fs){$/;"	f	file:
leavelevel	host/minilua.c	3839;"	d	file:
left	host/minilua.c	/^lu_byte left;$/;"	m	struct:__anon17	file:
left	lj_jit.h	/^  IRIns left;		\/* Instruction referenced by left operand. *\/$/;"	m	struct:FoldState
left	lj_parse.c	/^  uint8_t left;		\/* Left priority. *\/$/;"	m	struct:__anon43	file:
left_bits	lj_alloc.c	560;"	d	file:
leftmost_child	lj_alloc.c	410;"	d	file:
leftshift_for_tree_index	lj_alloc.c	536;"	d	file:
len	host/minilua.c	/^ptrdiff_t len;$/;"	m	struct:MatchState::__anon18	file:
len	host/minilua.c	/^size_t len;$/;"	m	struct:TString::__anon9	file:
len	host/minilua.c	/^size_t len;$/;"	m	struct:Udata::__anon10	file:
len	lib_string.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon85	file:
len	lj_obj.h	/^  MSize len;		\/* Size of payload. *\/$/;"	m	struct:GCcdataVar
len	lj_obj.h	/^  MSize len;		\/* Size of payload. *\/$/;"	m	struct:GCudata
len	lj_obj.h	/^  MSize len;		\/* Size of string. *\/$/;"	m	struct:GCstr
lessequal	host/minilua.c	/^static int lessequal(lua_State*L,const TValue*l,const TValue*r){$/;"	f	file:
level	host/minilua.c	/^int level;$/;"	m	struct:MatchState	file:
level	lib_string.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
level	lj_lex.h	/^  uint32_t level;	\/* Syntactical nesting level. *\/$/;"	m	struct:LexState
lex_check	lj_parse.c	/^static void lex_check(LexState *ls, LexToken tok)$/;"	f	file:
lex_match	lj_parse.c	/^static void lex_match(LexState *ls, LexToken what, LexToken who, BCLine line)$/;"	f	file:
lex_number	lj_lex.c	/^static void lex_number(LexState *ls, TValue *tv)$/;"	f	file:
lex_opt	lj_parse.c	/^static int lex_opt(LexState *ls, LexToken tok)$/;"	f	file:
lex_str	lj_parse.c	/^static GCstr *lex_str(LexState *ls)$/;"	f	file:
lib_aux_c	lib_aux.c	13;"	d	file:
lib_base_c	lib_base.c	11;"	d	file:
lib_bit_c	lib_bit.c	6;"	d	file:
lib_create_table	lj_lib.c	/^static GCtab *lib_create_table(lua_State *L, const char *libname, int hsize)$/;"	f	file:
lib_debug_c	lib_debug.c	9;"	d	file:
lib_ffi_c	lib_ffi.c	6;"	d	file:
lib_init_c	lib_init.c	7;"	d	file:
lib_io_c	lib_io.c	12;"	d	file:
lib_jit_c	lib_jit.c	6;"	d	file:
lib_math_c	lib_math.c	8;"	d	file:
lib_os_c	lib_os.c	13;"	d	file:
lib_package_c	lib_package.c	9;"	d	file:
lib_string_c	lib_string.c	11;"	d	file:
lib_table_c	lib_table.c	9;"	d	file:
libdef_endmodule	host/buildvm_lib.c	/^static void libdef_endmodule(BuildCtx *ctx)$/;"	f	file:
libdef_func	host/buildvm_lib.c	/^static void libdef_func(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libdef_handlers	host/buildvm_lib.c	/^static const LibDefHandler libdef_handlers[] = {$/;"	v	file:
libdef_module	host/buildvm_lib.c	/^static void libdef_module(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libdef_name	host/buildvm_lib.c	/^static void libdef_name(const char *p, int kind)$/;"	f	file:
libdef_push	host/buildvm_lib.c	/^static void libdef_push(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libdef_rec	host/buildvm_lib.c	/^static void libdef_rec(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libdef_regfunc	host/buildvm_lib.c	/^static void libdef_regfunc(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libdef_set	host/buildvm_lib.c	/^static void libdef_set(BuildCtx *ctx, char *p, int arg)$/;"	f	file:
libsize	host/minilua.c	/^static int libsize(const luaL_Reg*l){$/;"	f	file:
libsize	lib_aux.c	/^static int libsize(const luaL_Reg *l)$/;"	f	file:
lightudV	lj_obj.h	700;"	d
lightudV	lj_obj.h	703;"	d
lim	lj_opt_narrow.c	/^  int lim;		\/* Limit on the number of emitted conversions. *\/$/;"	m	struct:NarrowConv	file:
line	lj_lex.h	/^  BCLine line;		\/* Line number for this bytecode. *\/$/;"	m	struct:BCInsLine
linedefined	host/minilua.c	/^int linedefined;$/;"	m	struct:Proto	file:
linedefined	host/minilua.c	/^int linedefined;$/;"	m	struct:lua_Debug	file:
linedefined	lj_debug.h	/^  int linedefined;$/;"	m	struct:lj_Debug
linedefined	lj_parse.c	/^  BCLine linedefined;		\/* First line of the function definition. *\/$/;"	m	struct:FuncState	file:
linedefined	lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	host/minilua.c	/^int*lineinfo;$/;"	m	struct:Proto	file:
lineinfo	lj_obj.h	/^  MRef lineinfo;	\/* Compressed map from bytecode ins. to source line. *\/$/;"	m	struct:GCproto
lineno	host/buildvm_fold.c	/^static int lineno;$/;"	v	file:
lineno	lj_gdbjit.c	/^  BCLine lineno;	\/* Starting line number. *\/$/;"	m	struct:GDBJITctx	file:
linenumber	host/minilua.c	/^int linenumber;$/;"	m	struct:LexState	file:
linenumber	lj_cparse.h	/^  BCLine linenumber;	\/* Input line counter. *\/$/;"	m	struct:CPState
linenumber	lj_lex.h	/^  BCLine linenumber;	\/* Input line counter. *\/$/;"	m	struct:LexState
lineofs	host/buildvm_peobj.c	/^  uint32_t lineofs;$/;"	m	struct:PEsection	file:
link	lj_gdbjit.c	/^  uint32_t link;$/;"	m	struct:ELFsectheader	file:
link	lj_jit.h	/^  TraceNo1 link;	\/* Linked trace (or self for loops). *\/$/;"	m	struct:GCtrace
linktype	lj_jit.h	/^  uint8_t linktype;	\/* Type of link. *\/$/;"	m	struct:GCtrace
listfield	host/minilua.c	/^static void listfield(LexState*ls,struct ConsControl*cc){$/;"	f	file:
lj_BC_ADDNV	lj_vm.s	/^lj_BC_ADDNV:$/;"	l
lj_BC_ADDVN	lj_vm.s	/^lj_BC_ADDVN:$/;"	l
lj_BC_ADDVV	lj_vm.s	/^lj_BC_ADDVV:$/;"	l
lj_BC_CALL	lj_vm.s	/^lj_BC_CALL:$/;"	l
lj_BC_CALLM	lj_vm.s	/^lj_BC_CALLM:$/;"	l
lj_BC_CALLMT	lj_vm.s	/^lj_BC_CALLMT:$/;"	l
lj_BC_CALLT	lj_vm.s	/^lj_BC_CALLT:$/;"	l
lj_BC_CAT	lj_vm.s	/^lj_BC_CAT:$/;"	l
lj_BC_DIVNV	lj_vm.s	/^lj_BC_DIVNV:$/;"	l
lj_BC_DIVVN	lj_vm.s	/^lj_BC_DIVVN:$/;"	l
lj_BC_DIVVV	lj_vm.s	/^lj_BC_DIVVV:$/;"	l
lj_BC_FNEW	lj_vm.s	/^lj_BC_FNEW:$/;"	l
lj_BC_FORI	lj_vm.s	/^lj_BC_FORI:$/;"	l
lj_BC_FORL	lj_vm.s	/^lj_BC_FORL:$/;"	l
lj_BC_FUNCC	lj_vm.s	/^lj_BC_FUNCC:$/;"	l
lj_BC_FUNCCW	lj_vm.s	/^lj_BC_FUNCCW:$/;"	l
lj_BC_FUNCF	lj_vm.s	/^lj_BC_FUNCF:$/;"	l
lj_BC_FUNCV	lj_vm.s	/^lj_BC_FUNCV:$/;"	l
lj_BC_GGET	lj_vm.s	/^lj_BC_GGET:$/;"	l
lj_BC_GSET	lj_vm.s	/^lj_BC_GSET:$/;"	l
lj_BC_IFORL	lj_vm.s	/^lj_BC_IFORL:$/;"	l
lj_BC_IFUNCF	lj_vm.s	/^lj_BC_IFUNCF:$/;"	l
lj_BC_IFUNCV	lj_vm.s	/^lj_BC_IFUNCV:$/;"	l
lj_BC_IITERL	lj_vm.s	/^lj_BC_IITERL:$/;"	l
lj_BC_ILOOP	lj_vm.s	/^lj_BC_ILOOP:$/;"	l
lj_BC_ISEQN	lj_vm.s	/^lj_BC_ISEQN:$/;"	l
lj_BC_ISEQP	lj_vm.s	/^lj_BC_ISEQP:$/;"	l
lj_BC_ISEQS	lj_vm.s	/^lj_BC_ISEQS:$/;"	l
lj_BC_ISEQV	lj_vm.s	/^lj_BC_ISEQV:$/;"	l
lj_BC_ISF	lj_vm.s	/^lj_BC_ISF:$/;"	l
lj_BC_ISFC	lj_vm.s	/^lj_BC_ISFC:$/;"	l
lj_BC_ISGE	lj_vm.s	/^lj_BC_ISGE:$/;"	l
lj_BC_ISGT	lj_vm.s	/^lj_BC_ISGT:$/;"	l
lj_BC_ISLE	lj_vm.s	/^lj_BC_ISLE:$/;"	l
lj_BC_ISLT	lj_vm.s	/^lj_BC_ISLT:$/;"	l
lj_BC_ISNEN	lj_vm.s	/^lj_BC_ISNEN:$/;"	l
lj_BC_ISNEP	lj_vm.s	/^lj_BC_ISNEP:$/;"	l
lj_BC_ISNES	lj_vm.s	/^lj_BC_ISNES:$/;"	l
lj_BC_ISNEV	lj_vm.s	/^lj_BC_ISNEV:$/;"	l
lj_BC_ISNEXT	lj_vm.s	/^lj_BC_ISNEXT:$/;"	l
lj_BC_IST	lj_vm.s	/^lj_BC_IST:$/;"	l
lj_BC_ISTC	lj_vm.s	/^lj_BC_ISTC:$/;"	l
lj_BC_ITERC	lj_vm.s	/^lj_BC_ITERC:$/;"	l
lj_BC_ITERL	lj_vm.s	/^lj_BC_ITERL:$/;"	l
lj_BC_ITERN	lj_vm.s	/^lj_BC_ITERN:$/;"	l
lj_BC_JFORI	lj_vm.s	/^lj_BC_JFORI:$/;"	l
lj_BC_JFORL	lj_vm.s	/^lj_BC_JFORL:$/;"	l
lj_BC_JFUNCF	lj_vm.s	/^lj_BC_JFUNCF:$/;"	l
lj_BC_JFUNCV	lj_vm.s	/^lj_BC_JFUNCV:$/;"	l
lj_BC_JITERL	lj_vm.s	/^lj_BC_JITERL:$/;"	l
lj_BC_JLOOP	lj_vm.s	/^lj_BC_JLOOP:$/;"	l
lj_BC_JMP	lj_vm.s	/^lj_BC_JMP:$/;"	l
lj_BC_KCDATA	lj_vm.s	/^lj_BC_KCDATA:$/;"	l
lj_BC_KNIL	lj_vm.s	/^lj_BC_KNIL:$/;"	l
lj_BC_KNUM	lj_vm.s	/^lj_BC_KNUM:$/;"	l
lj_BC_KPRI	lj_vm.s	/^lj_BC_KPRI:$/;"	l
lj_BC_KSHORT	lj_vm.s	/^lj_BC_KSHORT:$/;"	l
lj_BC_KSTR	lj_vm.s	/^lj_BC_KSTR:$/;"	l
lj_BC_LEN	lj_vm.s	/^lj_BC_LEN:$/;"	l
lj_BC_LOOP	lj_vm.s	/^lj_BC_LOOP:$/;"	l
lj_BC_MODNV	lj_vm.s	/^lj_BC_MODNV:$/;"	l
lj_BC_MODVN	lj_vm.s	/^lj_BC_MODVN:$/;"	l
lj_BC_MODVV	lj_vm.s	/^lj_BC_MODVV:$/;"	l
lj_BC_MOV	lj_vm.s	/^lj_BC_MOV:$/;"	l
lj_BC_MULNV	lj_vm.s	/^lj_BC_MULNV:$/;"	l
lj_BC_MULVN	lj_vm.s	/^lj_BC_MULVN:$/;"	l
lj_BC_MULVV	lj_vm.s	/^lj_BC_MULVV:$/;"	l
lj_BC_NOT	lj_vm.s	/^lj_BC_NOT:$/;"	l
lj_BC_POW	lj_vm.s	/^lj_BC_POW:$/;"	l
lj_BC_RET	lj_vm.s	/^lj_BC_RET:$/;"	l
lj_BC_RET0	lj_vm.s	/^lj_BC_RET0:$/;"	l
lj_BC_RET1	lj_vm.s	/^lj_BC_RET1:$/;"	l
lj_BC_RETM	lj_vm.s	/^lj_BC_RETM:$/;"	l
lj_BC_SUBNV	lj_vm.s	/^lj_BC_SUBNV:$/;"	l
lj_BC_SUBVN	lj_vm.s	/^lj_BC_SUBVN:$/;"	l
lj_BC_SUBVV	lj_vm.s	/^lj_BC_SUBVV:$/;"	l
lj_BC_TDUP	lj_vm.s	/^lj_BC_TDUP:$/;"	l
lj_BC_TGETB	lj_vm.s	/^lj_BC_TGETB:$/;"	l
lj_BC_TGETS	lj_vm.s	/^lj_BC_TGETS:$/;"	l
lj_BC_TGETV	lj_vm.s	/^lj_BC_TGETV:$/;"	l
lj_BC_TNEW	lj_vm.s	/^lj_BC_TNEW:$/;"	l
lj_BC_TSETB	lj_vm.s	/^lj_BC_TSETB:$/;"	l
lj_BC_TSETM	lj_vm.s	/^lj_BC_TSETM:$/;"	l
lj_BC_TSETS	lj_vm.s	/^lj_BC_TSETS:$/;"	l
lj_BC_TSETV	lj_vm.s	/^lj_BC_TSETV:$/;"	l
lj_BC_UCLO	lj_vm.s	/^lj_BC_UCLO:$/;"	l
lj_BC_UGET	lj_vm.s	/^lj_BC_UGET:$/;"	l
lj_BC_UNM	lj_vm.s	/^lj_BC_UNM:$/;"	l
lj_BC_USETN	lj_vm.s	/^lj_BC_USETN:$/;"	l
lj_BC_USETP	lj_vm.s	/^lj_BC_USETP:$/;"	l
lj_BC_USETS	lj_vm.s	/^lj_BC_USETS:$/;"	l
lj_BC_USETV	lj_vm.s	/^lj_BC_USETV:$/;"	l
lj_BC_VARG	lj_vm.s	/^lj_BC_VARG:$/;"	l
lj_Debug	lj_debug.h	/^typedef struct lj_Debug {$/;"	s
lj_Debug	lj_debug.h	/^} lj_Debug;$/;"	t	typeref:struct:lj_Debug
lj_alloc_c	lj_alloc.c	23;"	d	file:
lj_alloc_create	lj_alloc.c	/^void *lj_alloc_create(void)$/;"	f
lj_alloc_destroy	lj_alloc.c	/^void lj_alloc_destroy(void *msp)$/;"	f
lj_alloc_f	lj_alloc.c	/^void *lj_alloc_f(void *msp, void *ptr, size_t osize, size_t nsize)$/;"	f
lj_alloc_free	lj_alloc.c	/^static LJ_NOINLINE void *lj_alloc_free(void *msp, void *ptr)$/;"	f	file:
lj_alloc_malloc	lj_alloc.c	/^static LJ_NOINLINE void *lj_alloc_malloc(void *msp, size_t nsize)$/;"	f	file:
lj_alloc_realloc	lj_alloc.c	/^static LJ_NOINLINE void *lj_alloc_realloc(void *msp, void *ptr, size_t nsize)$/;"	f	file:
lj_api_c	lj_api.c	9;"	d	file:
lj_asm_c	lj_asm.c	6;"	d	file:
lj_asm_patchexit	lj_asm_arm.h	/^void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)$/;"	f
lj_asm_patchexit	lj_asm_mips.h	/^void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)$/;"	f
lj_asm_patchexit	lj_asm_ppc.h	/^void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)$/;"	f
lj_asm_patchexit	lj_asm_x86.h	/^void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)$/;"	f
lj_asm_trace	lj_asm.c	/^void lj_asm_trace(jit_State *J, GCtrace *T)$/;"	f
lj_assert_bad_for_arg_type	lj_vm.s	/^lj_assert_bad_for_arg_type:$/;"	l
lj_bc_c	lj_bc.c	6;"	d	file:
lj_bc_mode	lj_bc.h	/^LJ_DATA const uint16_t lj_bc_mode[];$/;"	v
lj_bc_mode	lj_bcdef.h	/^LJ_DATADEF const uint16_t lj_bc_mode[] = {$/;"	v
lj_bc_ofs	lj_bc.h	/^LJ_DATA const uint16_t lj_bc_ofs[];$/;"	v
lj_bc_ofs	lj_bcdef.h	/^LJ_DATADEF const uint16_t lj_bc_ofs[] = {$/;"	v
lj_bcread	lj_bcread.c	/^GCproto *lj_bcread(LexState *ls)$/;"	f
lj_bcread_c	lj_bcread.c	6;"	d	file:
lj_bcwrite	lj_bcwrite.c	/^int lj_bcwrite(lua_State *L, GCproto *pt, lua_Writer writer, void *data,$/;"	f
lj_bcwrite_c	lj_bcwrite.c	6;"	d	file:
lj_bswap	lj_def.h	/^static LJ_AINLINE uint32_t lj_bswap(uint32_t x)$/;"	f
lj_bswap	lj_def.h	260;"	d
lj_bswap64	lj_def.h	/^static LJ_AINLINE uint64_t lj_bswap64(uint64_t x)$/;"	f
lj_bswap64	lj_def.h	261;"	d
lj_carith_divi64	lj_carith.c	/^int64_t lj_carith_divi64(int64_t a, int64_t b)$/;"	f
lj_carith_divu64	lj_carith.c	/^uint64_t lj_carith_divu64(uint64_t a, uint64_t b)$/;"	f
lj_carith_meta	lj_carith.c	/^static int lj_carith_meta(lua_State *L, CTState *cts, CDArith *ca, MMS mm)$/;"	f	file:
lj_carith_modi64	lj_carith.c	/^int64_t lj_carith_modi64(int64_t a, int64_t b)$/;"	f
lj_carith_modu64	lj_carith.c	/^uint64_t lj_carith_modu64(uint64_t a, uint64_t b)$/;"	f
lj_carith_mul64	lj_carith.c	/^int64_t lj_carith_mul64(int64_t a, int64_t b)$/;"	f
lj_carith_op	lj_carith.c	/^int lj_carith_op(lua_State *L, MMS mm)$/;"	f
lj_carith_powi64	lj_carith.c	/^int64_t lj_carith_powi64(int64_t x, int64_t k)$/;"	f
lj_carith_powu64	lj_carith.c	/^uint64_t lj_carith_powu64(uint64_t x, uint64_t k)$/;"	f
lj_ccall_ctid_vararg	lj_ccall.c	/^CTypeID lj_ccall_ctid_vararg(CTState *cts, cTValue *o)$/;"	f
lj_ccall_func	lj_ccall.c	/^int lj_ccall_func(lua_State *L, GCcdata *cd)$/;"	f
lj_ccallback_enter	lj_ccallback.c	/^lua_State * LJ_FASTCALL lj_ccallback_enter(CTState *cts, void *cf)$/;"	f
lj_ccallback_leave	lj_ccallback.c	/^void LJ_FASTCALL lj_ccallback_leave(CTState *cts, TValue *o)$/;"	f
lj_ccallback_mcode_free	lj_ccallback.c	/^void lj_ccallback_mcode_free(CTState *cts)$/;"	f
lj_ccallback_new	lj_ccallback.c	/^void *lj_ccallback_new(CTState *cts, CType *ct, GCfunc *fn)$/;"	f
lj_ccallback_ptr2slot	lj_ccallback.c	/^MSize lj_ccallback_ptr2slot(CTState *cts, void *p)$/;"	f
lj_cconv_bf_tv	lj_cconv.c	/^void lj_cconv_bf_tv(CTState *cts, CType *d, uint8_t *dp, TValue *o)$/;"	f
lj_cconv_compatptr	lj_cconv.c	/^int lj_cconv_compatptr(CTState *cts, CType *d, CType *s, CTInfo flags)$/;"	f
lj_cconv_ct_ct	lj_cconv.c	/^void lj_cconv_ct_ct(CTState *cts, CType *d, CType *s,$/;"	f
lj_cconv_ct_init	lj_cconv.c	/^void lj_cconv_ct_init(CTState *cts, CType *d, CTSize sz,$/;"	f
lj_cconv_ct_tv	lj_cconv.c	/^void lj_cconv_ct_tv(CTState *cts, CType *d,$/;"	f
lj_cconv_multi_init	lj_cconv.c	/^int lj_cconv_multi_init(CTState *cts, CType *d, TValue *o)$/;"	f
lj_cconv_tv_bf	lj_cconv.c	/^int lj_cconv_tv_bf(CTState *cts, CType *s, TValue *o, uint8_t *sp)$/;"	f
lj_cconv_tv_ct	lj_cconv.c	/^int lj_cconv_tv_ct(CTState *cts, CType *s, CTypeID sid,$/;"	f
lj_cdata_free	lj_cdata.c	/^void LJ_FASTCALL lj_cdata_free(global_State *g, GCcdata *cd)$/;"	f
lj_cdata_get	lj_cdata.c	/^int lj_cdata_get(CTState *cts, CType *s, TValue *o, uint8_t *sp)$/;"	f
lj_cdata_index	lj_cdata.c	/^CType *lj_cdata_index(CTState *cts, GCcdata *cd, cTValue *key, uint8_t **pp,$/;"	f
lj_cdata_new	lj_cdata.h	/^static LJ_AINLINE GCcdata *lj_cdata_new(CTState *cts, CTypeID id, CTSize sz)$/;"	f
lj_cdata_new_	lj_cdata.h	/^static LJ_AINLINE GCcdata *lj_cdata_new_(lua_State *L, CTypeID id, CTSize sz)$/;"	f
lj_cdata_newref	lj_cdata.c	/^GCcdata *lj_cdata_newref(CTState *cts, const void *p, CTypeID id)$/;"	f
lj_cdata_newv	lj_cdata.c	/^GCcdata *lj_cdata_newv(CTState *cts, CTypeID id, CTSize sz, CTSize align)$/;"	f
lj_cdata_set	lj_cdata.c	/^void lj_cdata_set(CTState *cts, CType *d, uint8_t *dp, TValue *o, CTInfo qual)$/;"	f
lj_cdata_setfin	lj_cdata.c	/^TValue * LJ_FASTCALL lj_cdata_setfin(lua_State *L, GCcdata *cd)$/;"	f
lj_cf_package_loader_c	lib_package.c	/^static int lj_cf_package_loader_c(lua_State *L)$/;"	f	file:
lj_cf_package_loader_croot	lib_package.c	/^static int lj_cf_package_loader_croot(lua_State *L)$/;"	f	file:
lj_cf_package_loader_lua	lib_package.c	/^static int lj_cf_package_loader_lua(lua_State *L)$/;"	f	file:
lj_cf_package_loader_preload	lib_package.c	/^static int lj_cf_package_loader_preload(lua_State *L)$/;"	f	file:
lj_cf_package_loadlib	lib_package.c	/^static int lj_cf_package_loadlib(lua_State *L)$/;"	f	file:
lj_cf_package_module	lib_package.c	/^static int lj_cf_package_module(lua_State *L)$/;"	f	file:
lj_cf_package_require	lib_package.c	/^static int lj_cf_package_require(lua_State *L)$/;"	f	file:
lj_cf_package_searchpath	lib_package.c	/^static int lj_cf_package_searchpath(lua_State *L)$/;"	f	file:
lj_cf_package_seeall	lib_package.c	/^static int lj_cf_package_seeall(lua_State *L)$/;"	f	file:
lj_cf_package_unloadlib	lib_package.c	/^static int lj_cf_package_unloadlib(lua_State *L)$/;"	f	file:
lj_char_bits	lj_char.c	/^LJ_DATADEF const uint8_t lj_char_bits[257] = {$/;"	v
lj_char_bits	lj_char.h	/^LJ_DATA const uint8_t lj_char_bits[257];$/;"	v
lj_char_c	lj_char.c	19;"	d	file:
lj_char_isa	lj_char.h	24;"	d
lj_char_isalnum	lj_char.h	34;"	d
lj_char_isalpha	lj_char.h	33;"	d
lj_char_iscntrl	lj_char.h	25;"	d
lj_char_isdigit	lj_char.h	28;"	d
lj_char_isgraph	lj_char.h	35;"	d
lj_char_isident	lj_char.h	32;"	d
lj_char_islower	lj_char.h	31;"	d
lj_char_ispunct	lj_char.h	27;"	d
lj_char_isspace	lj_char.h	26;"	d
lj_char_isupper	lj_char.h	30;"	d
lj_char_isxdigit	lj_char.h	29;"	d
lj_char_tolower	lj_char.h	38;"	d
lj_char_toupper	lj_char.h	37;"	d
lj_clib_default	lj_clib.c	/^void lj_clib_default(lua_State *L, GCtab *mt)$/;"	f
lj_clib_index	lj_clib.c	/^TValue *lj_clib_index(lua_State *L, CLibrary *cl, GCstr *name)$/;"	f
lj_clib_load	lj_clib.c	/^void lj_clib_load(lua_State *L, GCtab *mt, GCstr *name, int global)$/;"	f
lj_clib_unload	lj_clib.c	/^void lj_clib_unload(CLibrary *cl)$/;"	f
lj_cont_cat	lj_vm.s	/^lj_cont_cat:$/;"	l
lj_cont_condf	lj_vm.s	/^lj_cont_condf:$/;"	l
lj_cont_condt	lj_vm.s	/^lj_cont_condt:$/;"	l
lj_cont_dispatch	lj_vm.s	/^lj_cont_dispatch:$/;"	l
lj_cont_ffi_callback	lj_vm.s	/^lj_cont_ffi_callback:$/;"	l
lj_cont_hook	lj_vm.s	/^lj_cont_hook:$/;"	l
lj_cont_nop	lj_vm.s	/^lj_cont_nop:$/;"	l
lj_cont_ra	lj_vm.s	/^lj_cont_ra:$/;"	l
lj_cparse	lj_cparse.c	/^int lj_cparse(CPState *cp)$/;"	f
lj_crecord_tonumber	lj_crecord.c	/^void LJ_FASTCALL lj_crecord_tonumber(jit_State *J, RecordFFData *rd)$/;"	f
lj_ctype_addname	lj_ctype.c	/^void lj_ctype_addname(CTState *cts, CType *ct, CTypeID id)$/;"	f
lj_ctype_freestate	lj_ctype.c	/^void lj_ctype_freestate(global_State *g)$/;"	f
lj_ctype_getfield	lj_ctype.c	/^CType *lj_ctype_getfield(CTState *cts, CType *ct, GCstr *name, CTSize *ofs)$/;"	f
lj_ctype_getname	lj_ctype.c	/^CTypeID lj_ctype_getname(CTState *cts, CType **ctp, GCstr *name, uint32_t tmask)$/;"	f
lj_ctype_info	lj_ctype.c	/^CTInfo lj_ctype_info(CTState *cts, CTypeID id, CTSize *szp)$/;"	f
lj_ctype_init	lj_ctype.c	/^CTState *lj_ctype_init(lua_State *L)$/;"	f
lj_ctype_intern	lj_ctype.c	/^CTypeID lj_ctype_intern(CTState *cts, CTInfo info, CTSize size)$/;"	f
lj_ctype_meta	lj_ctype.c	/^cTValue *lj_ctype_meta(CTState *cts, CTypeID id, MMS mm)$/;"	f
lj_ctype_new	lj_ctype.c	/^CTypeID lj_ctype_new(CTState *cts, CType **ctp)$/;"	f
lj_ctype_rawref	lj_ctype.c	/^CType *lj_ctype_rawref(CTState *cts, CTypeID id)$/;"	f
lj_ctype_repr	lj_ctype.c	/^GCstr *lj_ctype_repr(lua_State *L, CTypeID id, GCstr *name)$/;"	f
lj_ctype_repr_complex	lj_ctype.c	/^GCstr *lj_ctype_repr_complex(lua_State *L, void *sp, CTSize size)$/;"	f
lj_ctype_repr_int64	lj_ctype.c	/^GCstr *lj_ctype_repr_int64(lua_State *L, uint64_t n, int isunsigned)$/;"	f
lj_ctype_size	lj_ctype.c	/^CTSize lj_ctype_size(CTState *cts, CTypeID id)$/;"	f
lj_ctype_typeinfo	lj_ctype.c	/^static CTInfo lj_ctype_typeinfo[] = {$/;"	v	file:
lj_ctype_typenames	lj_ctype.c	/^static const char * const lj_ctype_typenames =$/;"	v	file:
lj_ctype_vlsize	lj_ctype.c	/^CTSize lj_ctype_vlsize(CTState *cts, CType *ct, CTSize nelem)$/;"	f
lj_debug_addloc	lj_debug.c	/^void lj_debug_addloc(lua_State *L, const char *msg,$/;"	f
lj_debug_c	lj_debug.c	6;"	d	file:
lj_debug_frame	lj_debug.c	/^cTValue *lj_debug_frame(lua_State *L, int level, int *size)$/;"	f
lj_debug_funcname	lj_debug.c	/^const char *lj_debug_funcname(lua_State *L, TValue *frame, const char **name)$/;"	f
lj_debug_getinfo	lj_debug.c	/^int lj_debug_getinfo(lua_State *L, const char *what, lj_Debug *ar, int ext)$/;"	f
lj_debug_line	lj_debug.c	/^BCLine LJ_FASTCALL lj_debug_line(GCproto *pt, BCPos pc)$/;"	f
lj_debug_pushloc	lj_debug.c	/^void lj_debug_pushloc(lua_State *L, GCproto *pt, BCPos pc)$/;"	f
lj_debug_shortname	lj_debug.c	/^void lj_debug_shortname(char *out, GCstr *str)$/;"	f
lj_debug_slotname	lj_debug.c	/^const char *lj_debug_slotname(GCproto *pt, const BCIns *ip, BCReg slot,$/;"	f
lj_debug_uvname	lj_debug.c	/^const char *lj_debug_uvname(GCproto *pt, uint32_t idx)$/;"	f
lj_debug_uvnamev	lj_debug.c	/^const char *lj_debug_uvnamev(cTValue *o, uint32_t idx, TValue **tvp)$/;"	f
lj_dispatch_c	lj_dispatch.c	6;"	d	file:
lj_dispatch_call	lj_dispatch.c	/^ASMFunction LJ_FASTCALL lj_dispatch_call(lua_State *L, const BCIns *pc)$/;"	f
lj_dispatch_init	lj_dispatch.c	/^void lj_dispatch_init(GG_State *GG)$/;"	f
lj_dispatch_init_hotcount	lj_dispatch.c	/^void lj_dispatch_init_hotcount(global_State *g)$/;"	f
lj_dispatch_ins	lj_dispatch.c	/^void LJ_FASTCALL lj_dispatch_ins(lua_State *L, const BCIns *pc)$/;"	f
lj_dispatch_update	lj_dispatch.c	/^void lj_dispatch_update(global_State *g)$/;"	f
lj_err_allmsg	lj_err.c	/^LJ_DATADEF const char *lj_err_allmsg =$/;"	v
lj_err_allmsg	lj_err.h	/^LJ_DATA const char *lj_err_allmsg;$/;"	v
lj_err_arg	lj_err.c	/^LJ_NOINLINE void lj_err_arg(lua_State *L, int narg, ErrMsg em)$/;"	f
lj_err_argt	lj_err.c	/^LJ_NOINLINE void lj_err_argt(lua_State *L, int narg, int tt)$/;"	f
lj_err_argtype	lj_err.c	/^LJ_NOINLINE void lj_err_argtype(lua_State *L, int narg, const char *xname)$/;"	f
lj_err_argv	lj_err.c	/^LJ_NOINLINE void lj_err_argv(lua_State *L, int narg, ErrMsg em, ...)$/;"	f
lj_err_c	lj_err.c	6;"	d	file:
lj_err_caller	lj_err.c	/^LJ_NOINLINE void lj_err_caller(lua_State *L, ErrMsg em)$/;"	f
lj_err_callermsg	lj_err.c	/^LJ_NOINLINE void lj_err_callermsg(lua_State *L, const char *msg)$/;"	f
lj_err_callerv	lj_err.c	/^LJ_NOINLINE void lj_err_callerv(lua_State *L, ErrMsg em, ...)$/;"	f
lj_err_comp	lj_err.c	/^LJ_NOINLINE void lj_err_comp(lua_State *L, cTValue *o1, cTValue *o2)$/;"	f
lj_err_lex	lj_err.c	/^LJ_NOINLINE void lj_err_lex(lua_State *L, GCstr *src, const char *tok,$/;"	f
lj_err_mem	lj_err.c	/^LJ_NOINLINE void lj_err_mem(lua_State *L)$/;"	f
lj_err_msg	lj_err.c	/^LJ_NOINLINE void lj_err_msg(lua_State *L, ErrMsg em)$/;"	f
lj_err_optype	lj_err.c	/^LJ_NOINLINE void lj_err_optype(lua_State *L, cTValue *o, ErrMsg opm)$/;"	f
lj_err_optype_call	lj_err.c	/^LJ_NOINLINE void lj_err_optype_call(lua_State *L, TValue *o)$/;"	f
lj_err_run	lj_err.c	/^LJ_NOINLINE void lj_err_run(lua_State *L)$/;"	f
lj_err_str	lj_err.c	/^LJ_NOINLINE GCstr *lj_err_str(lua_State *L, ErrMsg em)$/;"	f
lj_err_throw	lj_err.c	/^LJ_NOINLINE void LJ_FASTCALL lj_err_throw(lua_State *L, int errcode)$/;"	f
lj_err_unwind_arm	lj_err.c	/^LJ_FUNCA int lj_err_unwind_arm(int state, void *ucb, _Unwind_Context *ctx)$/;"	f
lj_err_unwind_dwarf	lj_err.c	/^LJ_FUNCA int lj_err_unwind_dwarf(int version, int actions,$/;"	f
lj_err_unwind_win64	lj_err.c	/^LJ_FUNCA EXCEPTION_DISPOSITION lj_err_unwind_win64(EXCEPTION_RECORD *rec,$/;"	f
lj_ff_assert	lj_vm.s	/^lj_ff_assert:$/;"	l
lj_ff_bit_arshift	lj_vm.s	/^lj_ff_bit_arshift:$/;"	l
lj_ff_bit_band	lj_vm.s	/^lj_ff_bit_band:$/;"	l
lj_ff_bit_bnot	lj_vm.s	/^lj_ff_bit_bnot:$/;"	l
lj_ff_bit_bor	lj_vm.s	/^lj_ff_bit_bor:$/;"	l
lj_ff_bit_bswap	lj_vm.s	/^lj_ff_bit_bswap:$/;"	l
lj_ff_bit_bxor	lj_vm.s	/^lj_ff_bit_bxor:$/;"	l
lj_ff_bit_lshift	lj_vm.s	/^lj_ff_bit_lshift:$/;"	l
lj_ff_bit_rol	lj_vm.s	/^lj_ff_bit_rol:$/;"	l
lj_ff_bit_ror	lj_vm.s	/^lj_ff_bit_ror:$/;"	l
lj_ff_bit_rshift	lj_vm.s	/^lj_ff_bit_rshift:$/;"	l
lj_ff_bit_tobit	lj_vm.s	/^lj_ff_bit_tobit:$/;"	l
lj_ff_coroutine_resume	lj_vm.s	/^lj_ff_coroutine_resume:$/;"	l
lj_ff_coroutine_wrap_aux	lj_vm.s	/^lj_ff_coroutine_wrap_aux:$/;"	l
lj_ff_coroutine_yield	lj_vm.s	/^lj_ff_coroutine_yield:$/;"	l
lj_ff_getmetatable	lj_vm.s	/^lj_ff_getmetatable:$/;"	l
lj_ff_ipairs	lj_vm.s	/^lj_ff_ipairs:$/;"	l
lj_ff_ipairs_aux	lj_vm.s	/^lj_ff_ipairs_aux:$/;"	l
lj_ff_math_abs	lj_vm.s	/^lj_ff_math_abs:$/;"	l
lj_ff_math_acos	lj_vm.s	/^lj_ff_math_acos:$/;"	l
lj_ff_math_asin	lj_vm.s	/^lj_ff_math_asin:$/;"	l
lj_ff_math_atan	lj_vm.s	/^lj_ff_math_atan:$/;"	l
lj_ff_math_atan2	lj_vm.s	/^lj_ff_math_atan2:$/;"	l
lj_ff_math_ceil	lj_vm.s	/^lj_ff_math_ceil:$/;"	l
lj_ff_math_cos	lj_vm.s	/^lj_ff_math_cos:$/;"	l
lj_ff_math_cosh	lj_vm.s	/^lj_ff_math_cosh:$/;"	l
lj_ff_math_deg	lj_vm.s	/^lj_ff_math_deg:$/;"	l
lj_ff_math_exp	lj_vm.s	/^lj_ff_math_exp:$/;"	l
lj_ff_math_floor	lj_vm.s	/^lj_ff_math_floor:$/;"	l
lj_ff_math_fmod	lj_vm.s	/^lj_ff_math_fmod:$/;"	l
lj_ff_math_frexp	lj_vm.s	/^lj_ff_math_frexp:$/;"	l
lj_ff_math_ldexp	lj_vm.s	/^lj_ff_math_ldexp:$/;"	l
lj_ff_math_log	lj_vm.s	/^lj_ff_math_log:$/;"	l
lj_ff_math_log10	lj_vm.s	/^lj_ff_math_log10:$/;"	l
lj_ff_math_max	lj_vm.s	/^lj_ff_math_max:$/;"	l
lj_ff_math_min	lj_vm.s	/^lj_ff_math_min:$/;"	l
lj_ff_math_modf	lj_vm.s	/^lj_ff_math_modf:$/;"	l
lj_ff_math_pow	lj_vm.s	/^lj_ff_math_pow:$/;"	l
lj_ff_math_rad	lj_vm.s	/^lj_ff_math_rad:$/;"	l
lj_ff_math_sin	lj_vm.s	/^lj_ff_math_sin:$/;"	l
lj_ff_math_sinh	lj_vm.s	/^lj_ff_math_sinh:$/;"	l
lj_ff_math_sqrt	lj_vm.s	/^lj_ff_math_sqrt:$/;"	l
lj_ff_math_tan	lj_vm.s	/^lj_ff_math_tan:$/;"	l
lj_ff_math_tanh	lj_vm.s	/^lj_ff_math_tanh:$/;"	l
lj_ff_next	lj_vm.s	/^lj_ff_next:$/;"	l
lj_ff_pairs	lj_vm.s	/^lj_ff_pairs:$/;"	l
lj_ff_pcall	lj_vm.s	/^lj_ff_pcall:$/;"	l
lj_ff_rawget	lj_vm.s	/^lj_ff_rawget:$/;"	l
lj_ff_setmetatable	lj_vm.s	/^lj_ff_setmetatable:$/;"	l
lj_ff_string_byte	lj_vm.s	/^lj_ff_string_byte:$/;"	l
lj_ff_string_char	lj_vm.s	/^lj_ff_string_char:$/;"	l
lj_ff_string_len	lj_vm.s	/^lj_ff_string_len:$/;"	l
lj_ff_string_lower	lj_vm.s	/^lj_ff_string_lower:$/;"	l
lj_ff_string_rep	lj_vm.s	/^lj_ff_string_rep:$/;"	l
lj_ff_string_reverse	lj_vm.s	/^lj_ff_string_reverse:$/;"	l
lj_ff_string_sub	lj_vm.s	/^lj_ff_string_sub:$/;"	l
lj_ff_string_upper	lj_vm.s	/^lj_ff_string_upper:$/;"	l
lj_ff_table_getn	lj_vm.s	/^lj_ff_table_getn:$/;"	l
lj_ff_tonumber	lj_vm.s	/^lj_ff_tonumber:$/;"	l
lj_ff_tostring	lj_vm.s	/^lj_ff_tostring:$/;"	l
lj_ff_type	lj_vm.s	/^lj_ff_type:$/;"	l
lj_ff_xpcall	lj_vm.s	/^lj_ff_xpcall:$/;"	l
lj_fff_emptystr	lj_vm.s	/^lj_fff_emptystr:$/;"	l
lj_fff_fallback	lj_vm.s	/^lj_fff_fallback:$/;"	l
lj_fff_fallback_1	lj_vm.s	/^lj_fff_fallback_1:$/;"	l
lj_fff_fallback_2	lj_vm.s	/^lj_fff_fallback_2:$/;"	l
lj_fff_fallback_bit_op	lj_vm.s	/^lj_fff_fallback_bit_op:$/;"	l
lj_fff_gcstep	lj_vm.s	/^lj_fff_gcstep:$/;"	l
lj_fff_newstr	lj_vm.s	/^lj_fff_newstr:$/;"	l
lj_fff_res	lj_vm.s	/^lj_fff_res:$/;"	l
lj_fff_res0	lj_vm.s	/^lj_fff_res0:$/;"	l
lj_fff_res1	lj_vm.s	/^lj_fff_res1:$/;"	l
lj_fff_res2	lj_vm.s	/^lj_fff_res2:$/;"	l
lj_fff_res_	lj_vm.s	/^lj_fff_res_:$/;"	l
lj_fff_resbit	lj_vm.s	/^lj_fff_resbit:$/;"	l
lj_fff_resi	lj_vm.s	/^lj_fff_resi:$/;"	l
lj_fff_resn	lj_vm.s	/^lj_fff_resn:$/;"	l
lj_fff_resxmm0	lj_vm.s	/^lj_fff_resxmm0:$/;"	l
lj_ffh_coroutine_wrap_err	lib_base.c	/^void LJ_FASTCALL lj_ffh_coroutine_wrap_err(lua_State *L, lua_State *co)$/;"	f
lj_ffrecord_c	lj_crecord.c	6;"	d	file:
lj_ffrecord_c	lj_ffrecord.c	6;"	d	file:
lj_ffrecord_func	lj_ffrecord.c	/^void lj_ffrecord_func(jit_State *J)$/;"	f
lj_ffrecord_select_mode	lj_ffrecord.c	/^int32_t lj_ffrecord_select_mode(jit_State *J, TRef tr, TValue *tv)$/;"	f
lj_ffs	lj_def.h	/^static LJ_AINLINE uint32_t lj_ffs(uint32_t x)$/;"	f
lj_ffs	lj_def.h	139;"	d
lj_fls	lj_def.h	/^static LJ_AINLINE uint32_t lj_fls(uint32_t x)$/;"	f
lj_fls	lj_def.h	147;"	d
lj_func_c	lj_func.c	9;"	d	file:
lj_func_closeuv	lj_func.c	/^void LJ_FASTCALL lj_func_closeuv(lua_State *L, TValue *level)$/;"	f
lj_func_free	lj_func.c	/^void LJ_FASTCALL lj_func_free(global_State *g, GCfunc *fn)$/;"	f
lj_func_freeproto	lj_func.c	/^void LJ_FASTCALL lj_func_freeproto(global_State *g, GCproto *pt)$/;"	f
lj_func_freeuv	lj_func.c	/^void LJ_FASTCALL lj_func_freeuv(global_State *g, GCupval *uv)$/;"	f
lj_func_newC	lj_func.c	/^GCfunc *lj_func_newC(lua_State *L, MSize nelems, GCtab *env)$/;"	f
lj_func_newL_empty	lj_func.c	/^GCfunc *lj_func_newL_empty(lua_State *L, GCproto *pt, GCtab *env)$/;"	f
lj_func_newL_gc	lj_func.c	/^GCfunc *lj_func_newL_gc(lua_State *L, GCproto *pt, GCfuncL *parent)$/;"	f
lj_gc_anybarriert	lj_gc.h	92;"	d
lj_gc_barrier	lj_gc.h	102;"	d
lj_gc_barrierback	lj_gc.h	/^static LJ_AINLINE void lj_gc_barrierback(global_State *g, GCtab *t)$/;"	f
lj_gc_barrierf	lj_gc.c	/^void lj_gc_barrierf(global_State *g, GCobj *o, GCobj *v)$/;"	f
lj_gc_barriert	lj_gc.h	94;"	d
lj_gc_barriertrace	lj_gc.c	/^void lj_gc_barriertrace(global_State *g, uint32_t traceno)$/;"	f
lj_gc_barrieruv	lj_gc.c	/^void LJ_FASTCALL lj_gc_barrieruv(global_State *g, TValue *tv)$/;"	f
lj_gc_c	lj_gc.c	9;"	d	file:
lj_gc_check	lj_gc.h	65;"	d
lj_gc_check_fixtop	lj_gc.h	68;"	d
lj_gc_closeuv	lj_gc.c	/^void lj_gc_closeuv(global_State *g, GCupval *uv)$/;"	f
lj_gc_finalize_cdata	lj_gc.c	/^void lj_gc_finalize_cdata(lua_State *L)$/;"	f
lj_gc_finalize_cdata	lj_gc.h	54;"	d
lj_gc_finalize_udata	lj_gc.c	/^void lj_gc_finalize_udata(lua_State *L)$/;"	f
lj_gc_freeall	lj_gc.c	/^void lj_gc_freeall(global_State *g)$/;"	f
lj_gc_fullgc	lj_gc.c	/^void lj_gc_fullgc(lua_State *L)$/;"	f
lj_gc_objbarrier	lj_gc.h	105;"	d
lj_gc_objbarriert	lj_gc.h	97;"	d
lj_gc_separateudata	lj_gc.c	/^size_t lj_gc_separateudata(global_State *g, int all)$/;"	f
lj_gc_step	lj_gc.c	/^int LJ_FASTCALL lj_gc_step(lua_State *L)$/;"	f
lj_gc_step_fixtop	lj_gc.c	/^void LJ_FASTCALL lj_gc_step_fixtop(lua_State *L)$/;"	f
lj_gc_step_jit	lj_gc.c	/^int LJ_FASTCALL lj_gc_step_jit(global_State *g, MSize steps)$/;"	f
lj_gdbjit_addtrace	lj_gdbjit.c	/^void lj_gdbjit_addtrace(jit_State *J, GCtrace *T)$/;"	f
lj_gdbjit_addtrace	lj_gdbjit.h	18;"	d
lj_gdbjit_c	lj_gdbjit.c	6;"	d	file:
lj_gdbjit_deltrace	lj_gdbjit.c	/^void lj_gdbjit_deltrace(jit_State *J, GCtrace *T)$/;"	f
lj_gdbjit_deltrace	lj_gdbjit.h	19;"	d
lj_getu16	lj_def.h	/^static LJ_AINLINE uint16_t lj_getu16(const void *p)$/;"	f
lj_getu16	lj_def.h	264;"	d
lj_getu32	lj_def.h	/^static LJ_AINLINE uint32_t lj_getu32(const void *p)$/;"	f
lj_getu32	lj_def.h	265;"	d
lj_ir_c	lj_ir.c	6;"	d	file:
lj_ir_call	lj_ir.c	/^TRef lj_ir_call(jit_State *J, IRCallID id, ...)$/;"	f
lj_ir_callinfo	lj_ir.c	/^LJ_DATADEF const CCallInfo lj_ir_callinfo[] = {$/;"	v
lj_ir_callinfo	lj_ircall.h	/^LJ_DATA const CCallInfo lj_ir_callinfo[IRCALL__MAX+1];$/;"	v
lj_ir_emit	lj_ir.c	/^TRef LJ_FASTCALL lj_ir_emit(jit_State *J)$/;"	f
lj_ir_growbot	lj_ir.c	/^static void lj_ir_growbot(jit_State *J)$/;"	f	file:
lj_ir_growtop	lj_ir.c	/^void LJ_FASTCALL lj_ir_growtop(jit_State *J)$/;"	f
lj_ir_k64	lj_ir.c	/^TRef lj_ir_k64(jit_State *J, IROp op, cTValue *tv)$/;"	f
lj_ir_k64_find	lj_ir.c	/^cTValue *lj_ir_k64_find(jit_State *J, uint64_t u64)$/;"	f
lj_ir_k64_freeall	lj_ir.c	/^void lj_ir_k64_freeall(jit_State *J)$/;"	f
lj_ir_kfunc	lj_iropt.h	67;"	d
lj_ir_kgc	lj_ir.c	/^TRef lj_ir_kgc(jit_State *J, GCobj *o, IRType t)$/;"	f
lj_ir_kint	lj_ir.c	/^TRef LJ_FASTCALL lj_ir_kint(jit_State *J, int32_t k)$/;"	f
lj_ir_kint64	lj_ir.c	/^TRef lj_ir_kint64(jit_State *J, uint64_t u64)$/;"	f
lj_ir_kintp	lj_iropt.h	53;"	d
lj_ir_kintp	lj_iropt.h	55;"	d
lj_ir_kkptr	lj_iropt.h	69;"	d
lj_ir_knull	lj_ir.c	/^TRef lj_ir_knull(jit_State *J, IRType t)$/;"	f
lj_ir_knum	lj_iropt.h	/^static LJ_AINLINE TRef lj_ir_knum(jit_State *J, lua_Number n)$/;"	f
lj_ir_knum_abs	lj_iropt.h	77;"	d
lj_ir_knum_neg	lj_iropt.h	78;"	d
lj_ir_knum_one	lj_iropt.h	73;"	d
lj_ir_knum_tobit	lj_iropt.h	74;"	d
lj_ir_knum_u64	lj_ir.c	/^TRef lj_ir_knum_u64(jit_State *J, uint64_t u64)$/;"	f
lj_ir_knum_zero	lj_iropt.h	72;"	d
lj_ir_knumint	lj_ir.c	/^TRef lj_ir_knumint(jit_State *J, lua_Number n)$/;"	f
lj_ir_kptr	lj_iropt.h	68;"	d
lj_ir_kptr_	lj_ir.c	/^TRef lj_ir_kptr_(jit_State *J, IROp op, void *ptr)$/;"	f
lj_ir_kslot	lj_ir.c	/^TRef lj_ir_kslot(jit_State *J, TRef key, IRRef slot)$/;"	f
lj_ir_kstr	lj_iropt.h	65;"	d
lj_ir_ktab	lj_iropt.h	66;"	d
lj_ir_kvalue	lj_ir.c	/^void lj_ir_kvalue(lua_State *L, TValue *tv, const IRIns *ir)$/;"	f
lj_ir_mode	lj_ir.c	/^LJ_DATADEF const uint8_t lj_ir_mode[IR__MAX+1] = {$/;"	v
lj_ir_mode	lj_ir.h	/^LJ_DATA const uint8_t lj_ir_mode[IR__MAX+1];$/;"	v
lj_ir_nextins	lj_iropt.h	/^static LJ_AINLINE IRRef lj_ir_nextins(jit_State *J)$/;"	f
lj_ir_numcmp	lj_ir.c	/^int lj_ir_numcmp(lua_Number a, lua_Number b, IROp op)$/;"	f
lj_ir_rollback	lj_ir.c	/^void lj_ir_rollback(jit_State *J, IRRef ref)$/;"	f
lj_ir_set	lj_iropt.h	25;"	d
lj_ir_set_	lj_iropt.h	/^static LJ_AINLINE void lj_ir_set_(jit_State *J, uint16_t ot, IRRef1 a, IRRef1 b)$/;"	f
lj_ir_strcmp	lj_ir.c	/^int lj_ir_strcmp(GCstr *a, GCstr *b, IROp op)$/;"	f
lj_ir_tonum	lj_ir.c	/^TRef LJ_FASTCALL lj_ir_tonum(jit_State *J, TRef tr)$/;"	f
lj_ir_tonumber	lj_ir.c	/^TRef LJ_FASTCALL lj_ir_tonumber(jit_State *J, TRef tr)$/;"	f
lj_ir_tostr	lj_ir.c	/^TRef LJ_FASTCALL lj_ir_tostr(jit_State *J, TRef tr)$/;"	f
lj_ir_type_size	lj_ir.c	/^LJ_DATADEF const uint8_t lj_ir_type_size[IRT__MAX+1] = {$/;"	v
lj_ir_type_size	lj_ir.h	/^LJ_DATA const uint8_t lj_ir_type_size[];$/;"	v
lj_lex_c	lj_lex.c	9;"	d	file:
lj_lex_cleanup	lj_lex.c	/^void lj_lex_cleanup(lua_State *L, LexState *ls)$/;"	f
lj_lex_error	lj_lex.c	/^void lj_lex_error(LexState *ls, LexToken token, ErrMsg em, ...)$/;"	f
lj_lex_init	lj_lex.c	/^void lj_lex_init(lua_State *L)$/;"	f
lj_lex_lookahead	lj_lex.c	/^LexToken lj_lex_lookahead(LexState *ls)$/;"	f
lj_lex_next	lj_lex.c	/^void lj_lex_next(LexState *ls)$/;"	f
lj_lex_setup	lj_lex.c	/^int lj_lex_setup(lua_State *L, LexState *ls)$/;"	f
lj_lex_token2str	lj_lex.c	/^const char *lj_lex_token2str(LexState *ls, LexToken token)$/;"	f
lj_lib_c	lj_lib.c	6;"	d	file:
lj_lib_cf_base	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_base[] = {$/;"	v
lj_lib_cf_bit	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_bit[] = {$/;"	v
lj_lib_cf_coroutine	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_coroutine[] = {$/;"	v
lj_lib_cf_debug	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_debug[] = {$/;"	v
lj_lib_cf_ffi	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_ffi[] = {$/;"	v
lj_lib_cf_ffi_callback	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_ffi_callback[] = {$/;"	v
lj_lib_cf_ffi_clib	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_ffi_clib[] = {$/;"	v
lj_lib_cf_ffi_meta	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_ffi_meta[] = {$/;"	v
lj_lib_cf_io	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_io[] = {$/;"	v
lj_lib_cf_io_method	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_io_method[] = {$/;"	v
lj_lib_cf_jit	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_jit[] = {$/;"	v
lj_lib_cf_jit_opt	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_jit_opt[] = {$/;"	v
lj_lib_cf_jit_util	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_jit_util[] = {$/;"	v
lj_lib_cf_math	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_math[] = {$/;"	v
lj_lib_cf_os	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_os[] = {$/;"	v
lj_lib_cf_string	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_string[] = {$/;"	v
lj_lib_cf_table	lj_libdef.h	/^static const lua_CFunction lj_lib_cf_table[] = {$/;"	v
lj_lib_checkany	lj_lib.c	/^TValue *lj_lib_checkany(lua_State *L, int narg)$/;"	f
lj_lib_checkbit	lj_lib.c	/^int32_t lj_lib_checkbit(lua_State *L, int narg)$/;"	f
lj_lib_checkfpu	lj_lib.h	55;"	d
lj_lib_checkfpu	lj_lib.h	60;"	d
lj_lib_checkfunc	lj_lib.c	/^GCfunc *lj_lib_checkfunc(lua_State *L, int narg)$/;"	f
lj_lib_checkint	lj_lib.c	/^int32_t lj_lib_checkint(lua_State *L, int narg)$/;"	f
lj_lib_checknum	lj_lib.c	/^lua_Number lj_lib_checknum(lua_State *L, int narg)$/;"	f
lj_lib_checknumber	lj_lib.c	/^void lj_lib_checknumber(lua_State *L, int narg)$/;"	f
lj_lib_checknumber	lj_lib.h	39;"	d
lj_lib_checkopt	lj_lib.c	/^int lj_lib_checkopt(lua_State *L, int narg, int def, const char *lst)$/;"	f
lj_lib_checkstr	lj_lib.c	/^GCstr *lj_lib_checkstr(lua_State *L, int narg)$/;"	f
lj_lib_checktab	lj_lib.c	/^GCtab *lj_lib_checktab(lua_State *L, int narg)$/;"	f
lj_lib_checktabornil	lj_lib.c	/^GCtab *lj_lib_checktabornil(lua_State *L, int narg)$/;"	f
lj_lib_init_base	lj_libdef.h	/^static const uint8_t lj_lib_init_base[] = {$/;"	v
lj_lib_init_bit	lj_libdef.h	/^static const uint8_t lj_lib_init_bit[] = {$/;"	v
lj_lib_init_coroutine	lj_libdef.h	/^static const uint8_t lj_lib_init_coroutine[] = {$/;"	v
lj_lib_init_debug	lj_libdef.h	/^static const uint8_t lj_lib_init_debug[] = {$/;"	v
lj_lib_init_ffi	lj_libdef.h	/^static const uint8_t lj_lib_init_ffi[] = {$/;"	v
lj_lib_init_ffi_callback	lj_libdef.h	/^static const uint8_t lj_lib_init_ffi_callback[] = {$/;"	v
lj_lib_init_ffi_clib	lj_libdef.h	/^static const uint8_t lj_lib_init_ffi_clib[] = {$/;"	v
lj_lib_init_ffi_meta	lj_libdef.h	/^static const uint8_t lj_lib_init_ffi_meta[] = {$/;"	v
lj_lib_init_io	lj_libdef.h	/^static const uint8_t lj_lib_init_io[] = {$/;"	v
lj_lib_init_io_method	lj_libdef.h	/^static const uint8_t lj_lib_init_io_method[] = {$/;"	v
lj_lib_init_jit	lj_libdef.h	/^static const uint8_t lj_lib_init_jit[] = {$/;"	v
lj_lib_init_jit_opt	lj_libdef.h	/^static const uint8_t lj_lib_init_jit_opt[] = {$/;"	v
lj_lib_init_jit_util	lj_libdef.h	/^static const uint8_t lj_lib_init_jit_util[] = {$/;"	v
lj_lib_init_math	lj_libdef.h	/^static const uint8_t lj_lib_init_math[] = {$/;"	v
lj_lib_init_os	lj_libdef.h	/^static const uint8_t lj_lib_init_os[] = {$/;"	v
lj_lib_init_string	lj_libdef.h	/^static const uint8_t lj_lib_init_string[] = {$/;"	v
lj_lib_init_table	lj_libdef.h	/^static const uint8_t lj_lib_init_table[] = {$/;"	v
lj_lib_load	lib_init.c	/^static const luaL_Reg lj_lib_load[] = {$/;"	v	file:
lj_lib_optint	lj_lib.c	/^int32_t lj_lib_optint(lua_State *L, int narg, int32_t def)$/;"	f
lj_lib_optstr	lj_lib.c	/^GCstr *lj_lib_optstr(lua_State *L, int narg)$/;"	f
lj_lib_preload	lib_init.c	/^static const luaL_Reg lj_lib_preload[] = {$/;"	v	file:
lj_lib_pushcc	lj_lib.h	/^static LJ_AINLINE void lj_lib_pushcc(lua_State *L, lua_CFunction f,$/;"	f
lj_lib_pushcf	lj_lib.h	74;"	d
lj_lib_register	lj_lib.c	/^void lj_lib_register(lua_State *L, const char *libname,$/;"	f
lj_lib_upvalue	lj_lib.h	51;"	d
lj_load_c	lj_load.c	9;"	d	file:
lj_math_random_step	lib_math.c	/^LJ_NOINLINE uint64_t LJ_FASTCALL lj_math_random_step(RandomState *rs)$/;"	f
lj_mcode_abort	lj_mcode.c	/^void lj_mcode_abort(jit_State *J)$/;"	f
lj_mcode_c	lj_mcode.c	6;"	d	file:
lj_mcode_commit	lj_mcode.c	/^void lj_mcode_commit(jit_State *J, MCode *top)$/;"	f
lj_mcode_commitbot	lj_mcode.h	26;"	d
lj_mcode_free	lj_mcode.c	/^void lj_mcode_free(jit_State *J)$/;"	f
lj_mcode_limiterr	lj_mcode.c	/^void lj_mcode_limiterr(jit_State *J, size_t need)$/;"	f
lj_mcode_patch	lj_mcode.c	/^MCode *lj_mcode_patch(jit_State *J, MCode *ptr, int finish)$/;"	f
lj_mcode_reserve	lj_mcode.c	/^MCode *lj_mcode_reserve(jit_State *J, MCode **lim)$/;"	f
lj_mcode_sync	lj_mcode.c	/^void lj_mcode_sync(void *start, void *end)$/;"	f
lj_mem_free	lj_gc.h	/^static LJ_AINLINE void lj_mem_free(global_State *g, void *p, size_t osize)$/;"	f
lj_mem_freet	lj_gc.h	132;"	d
lj_mem_freevec	lj_gc.h	128;"	d
lj_mem_grow	lj_gc.c	/^void *lj_mem_grow(lua_State *L, void *p, MSize *szp, MSize lim, MSize esz)$/;"	f
lj_mem_growvec	lj_gc.h	126;"	d
lj_mem_new	lj_gc.h	115;"	d
lj_mem_newgco	lj_gc.c	/^void * LJ_FASTCALL lj_mem_newgco(lua_State *L, MSize size)$/;"	f
lj_mem_newobj	lj_gc.h	130;"	d
lj_mem_newt	lj_gc.h	131;"	d
lj_mem_newvec	lj_gc.h	123;"	d
lj_mem_realloc	lj_gc.c	/^void *lj_mem_realloc(lua_State *L, void *p, MSize osz, MSize nsz)$/;"	f
lj_mem_reallocvec	lj_gc.h	124;"	d
lj_meta_arith	lj_meta.c	/^TValue *lj_meta_arith(lua_State *L, TValue *ra, cTValue *rb, cTValue *rc,$/;"	f
lj_meta_c	lj_meta.c	9;"	d	file:
lj_meta_cache	lj_meta.c	/^cTValue *lj_meta_cache(GCtab *mt, MMS mm, GCstr *name)$/;"	f
lj_meta_call	lj_meta.c	/^void lj_meta_call(lua_State *L, TValue *func, TValue *top)$/;"	f
lj_meta_cat	lj_meta.c	/^TValue *lj_meta_cat(lua_State *L, TValue *top, int left)$/;"	f
lj_meta_comp	lj_meta.c	/^TValue *lj_meta_comp(lua_State *L, cTValue *o1, cTValue *o2, int op)$/;"	f
lj_meta_equal	lj_meta.c	/^TValue *lj_meta_equal(lua_State *L, GCobj *o1, GCobj *o2, int ne)$/;"	f
lj_meta_equal_cd	lj_meta.c	/^TValue * LJ_FASTCALL lj_meta_equal_cd(lua_State *L, BCIns ins)$/;"	f
lj_meta_fast	lj_meta.h	22;"	d
lj_meta_fastg	lj_meta.h	19;"	d
lj_meta_for	lj_meta.c	/^void LJ_FASTCALL lj_meta_for(lua_State *L, TValue *o)$/;"	f
lj_meta_init	lj_meta.c	/^void lj_meta_init(lua_State *L)$/;"	f
lj_meta_len	lj_meta.c	/^TValue * LJ_FASTCALL lj_meta_len(lua_State *L, cTValue *o)$/;"	f
lj_meta_lookup	lj_meta.c	/^cTValue *lj_meta_lookup(lua_State *L, cTValue *o, MMS mm)$/;"	f
lj_meta_tailcall	lj_meta.c	/^int lj_meta_tailcall(lua_State *L, cTValue *tv)$/;"	f
lj_meta_tget	lj_meta.c	/^cTValue *lj_meta_tget(lua_State *L, cTValue *o, cTValue *k)$/;"	f
lj_meta_tset	lj_meta.c	/^TValue *lj_meta_tset(lua_State *L, cTValue *o, cTValue *k)$/;"	f
lj_needsplit	lj_jit.h	303;"	d
lj_needsplit	lj_jit.h	306;"	d
lj_num2bit	lj_obj.h	/^static LJ_AINLINE int32_t lj_num2bit(lua_Number n)$/;"	f
lj_num2int	lj_obj.h	814;"	d
lj_num2int	lj_obj.h	816;"	d
lj_num2u64	lj_obj.h	/^static LJ_AINLINE uint64_t lj_num2u64(lua_Number n)$/;"	f
lj_obj_c	lj_obj.c	6;"	d	file:
lj_obj_equal	lj_obj.c	/^int lj_obj_equal(cTValue *o1, cTValue *o2)$/;"	f
lj_obj_itypename	lj_obj.c	/^LJ_DATADEF const char *const lj_obj_itypename[] = {  \/* ORDER LJ_T *\/$/;"	v
lj_obj_itypename	lj_obj.h	/^LJ_DATA const char *const lj_obj_itypename[~LJ_TNUMX+1];$/;"	v
lj_obj_typename	lj_obj.c	/^LJ_DATADEF const char *const lj_obj_typename[] = {  \/* ORDER LUA_T *\/$/;"	v
lj_obj_typename	lj_obj.h	/^LJ_DATA const char *const lj_obj_typename[1+LUA_TCDATA+1];$/;"	v
lj_opt_cse	lj_opt_fold.c	/^TRef LJ_FASTCALL lj_opt_cse(jit_State *J)$/;"	f
lj_opt_cselim	lj_opt_fold.c	/^TRef LJ_FASTCALL lj_opt_cselim(jit_State *J, IRRef lim)$/;"	f
lj_opt_dce	lj_opt_dce.c	/^void lj_opt_dce(jit_State *J)$/;"	f
lj_opt_dce_c	lj_opt_dce.c	6;"	d	file:
lj_opt_dse_ahstore	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_dse_ahstore(jit_State *J)$/;"	f
lj_opt_dse_fstore	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_dse_fstore(jit_State *J)$/;"	f
lj_opt_dse_ustore	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_dse_ustore(jit_State *J)$/;"	f
lj_opt_dse_xstore	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_dse_xstore(jit_State *J)$/;"	f
lj_opt_fold_c	lj_opt_fold.c	8;"	d	file:
lj_opt_fwd_aload	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_aload(jit_State *J)$/;"	f
lj_opt_fwd_fload	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_fload(jit_State *J)$/;"	f
lj_opt_fwd_hload	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_hload(jit_State *J)$/;"	f
lj_opt_fwd_href_nokey	lj_opt_mem.c	/^int LJ_FASTCALL lj_opt_fwd_href_nokey(jit_State *J)$/;"	f
lj_opt_fwd_hrefk	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_hrefk(jit_State *J)$/;"	f
lj_opt_fwd_tab_len	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_tab_len(jit_State *J)$/;"	f
lj_opt_fwd_tptr	lj_opt_mem.c	/^int LJ_FASTCALL lj_opt_fwd_tptr(jit_State *J, IRRef lim)$/;"	f
lj_opt_fwd_uload	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_uload(jit_State *J)$/;"	f
lj_opt_fwd_wasnonnil	lj_opt_mem.c	/^int lj_opt_fwd_wasnonnil(jit_State *J, IROpT loadop, IRRef xref)$/;"	f
lj_opt_fwd_xload	lj_opt_mem.c	/^TRef LJ_FASTCALL lj_opt_fwd_xload(jit_State *J)$/;"	f
lj_opt_loop	lj_opt_loop.c	/^int lj_opt_loop(jit_State *J)$/;"	f
lj_opt_loop_c	lj_opt_loop.c	6;"	d	file:
lj_opt_mem_c	lj_opt_mem.c	9;"	d	file:
lj_opt_narrow_arith	lj_opt_narrow.c	/^TRef lj_opt_narrow_arith(jit_State *J, TRef rb, TRef rc,$/;"	f
lj_opt_narrow_c	lj_opt_narrow.c	7;"	d	file:
lj_opt_narrow_cindex	lj_opt_narrow.c	/^TRef LJ_FASTCALL lj_opt_narrow_cindex(jit_State *J, TRef tr)$/;"	f
lj_opt_narrow_convert	lj_opt_narrow.c	/^TRef LJ_FASTCALL lj_opt_narrow_convert(jit_State *J)$/;"	f
lj_opt_narrow_forl	lj_opt_narrow.c	/^IRType lj_opt_narrow_forl(jit_State *J, cTValue *tv)$/;"	f
lj_opt_narrow_index	lj_opt_narrow.c	/^TRef LJ_FASTCALL lj_opt_narrow_index(jit_State *J, TRef tr)$/;"	f
lj_opt_narrow_mod	lj_opt_narrow.c	/^TRef lj_opt_narrow_mod(jit_State *J, TRef rb, TRef rc, TValue *vc)$/;"	f
lj_opt_narrow_pow	lj_opt_narrow.c	/^TRef lj_opt_narrow_pow(jit_State *J, TRef rb, TRef rc, TValue *vc)$/;"	f
lj_opt_narrow_tobit	lj_opt_narrow.c	/^TRef LJ_FASTCALL lj_opt_narrow_tobit(jit_State *J, TRef tr)$/;"	f
lj_opt_narrow_toint	lj_opt_narrow.c	/^TRef LJ_FASTCALL lj_opt_narrow_toint(jit_State *J, TRef tr)$/;"	f
lj_opt_narrow_unm	lj_opt_narrow.c	/^TRef lj_opt_narrow_unm(jit_State *J, TRef rc, TValue *vc)$/;"	f
lj_opt_sink	lj_opt_sink.c	/^void lj_opt_sink(jit_State *J)$/;"	f
lj_opt_sink_c	lj_opt_sink.c	6;"	d	file:
lj_opt_split	lj_iropt.h	155;"	d
lj_opt_split	lj_opt_split.c	/^void lj_opt_split(jit_State *J)$/;"	f
lj_opt_split_c	lj_opt_split.c	6;"	d	file:
lj_parse	lj_parse.c	/^GCproto *lj_parse(LexState *ls)$/;"	f
lj_parse_c	lj_parse.c	9;"	d	file:
lj_parse_keepcdata	lj_parse.c	/^void lj_parse_keepcdata(LexState *ls, TValue *tv, GCcdata *cd)$/;"	f
lj_parse_keepstr	lj_parse.c	/^GCstr *lj_parse_keepstr(LexState *ls, const char *str, size_t len)$/;"	f
lj_record_c	lj_record.c	6;"	d	file:
lj_record_call	lj_record.c	/^void lj_record_call(jit_State *J, BCReg func, ptrdiff_t nargs)$/;"	f
lj_record_constify	lj_record.c	/^TRef lj_record_constify(jit_State *J, cTValue *o)$/;"	f
lj_record_idx	lj_record.c	/^TRef lj_record_idx(jit_State *J, RecordIndex *ix)$/;"	f
lj_record_ins	lj_record.c	/^void lj_record_ins(jit_State *J)$/;"	f
lj_record_mm_lookup	lj_record.c	/^int lj_record_mm_lookup(jit_State *J, RecordIndex *ix, MMS mm)$/;"	f
lj_record_objcmp	lj_record.c	/^int lj_record_objcmp(jit_State *J, TRef a, TRef b, cTValue *av, cTValue *bv)$/;"	f
lj_record_ret	lj_record.c	/^void lj_record_ret(jit_State *J, BCReg rbase, ptrdiff_t gotresults)$/;"	f
lj_record_setup	lj_record.c	/^void lj_record_setup(jit_State *J)$/;"	f
lj_record_tailcall	lj_record.c	/^void lj_record_tailcall(jit_State *J, BCReg func, ptrdiff_t nargs)$/;"	f
lj_resetsplit	lj_jit.h	304;"	d
lj_resetsplit	lj_jit.h	307;"	d
lj_rol	lj_def.h	104;"	d
lj_ror	lj_def.h	105;"	d
lj_snap_add	lj_snap.c	/^void lj_snap_add(jit_State *J)$/;"	f
lj_snap_c	lj_snap.c	6;"	d	file:
lj_snap_grow_buf	lj_snap.h	/^static LJ_AINLINE void lj_snap_grow_buf(jit_State *J, MSize need)$/;"	f
lj_snap_grow_buf_	lj_snap.c	/^void lj_snap_grow_buf_(jit_State *J, MSize need)$/;"	f
lj_snap_grow_map	lj_snap.h	/^static LJ_AINLINE void lj_snap_grow_map(jit_State *J, MSize need)$/;"	f
lj_snap_grow_map_	lj_snap.c	/^void lj_snap_grow_map_(jit_State *J, MSize need)$/;"	f
lj_snap_purge	lj_snap.c	/^void lj_snap_purge(jit_State *J)$/;"	f
lj_snap_regspmap	lj_snap.c	/^IRIns *lj_snap_regspmap(GCtrace *T, SnapNo snapno, IRIns *ir)$/;"	f
lj_snap_replay	lj_snap.c	/^void lj_snap_replay(jit_State *J, GCtrace *T)$/;"	f
lj_snap_restore	lj_snap.c	/^const BCIns *lj_snap_restore(jit_State *J, void *exptr)$/;"	f
lj_snap_shrink	lj_snap.c	/^void lj_snap_shrink(jit_State *J)$/;"	f
lj_state_c	lj_state.c	9;"	d	file:
lj_state_checkstack	lj_state.h	/^static LJ_AINLINE void lj_state_checkstack(lua_State *L, MSize need)$/;"	f
lj_state_free	lj_state.c	/^void LJ_FASTCALL lj_state_free(global_State *g, lua_State *L)$/;"	f
lj_state_growstack	lj_state.c	/^void LJ_FASTCALL lj_state_growstack(lua_State *L, MSize need)$/;"	f
lj_state_growstack1	lj_state.c	/^void LJ_FASTCALL lj_state_growstack1(lua_State *L)$/;"	f
lj_state_new	lj_state.c	/^lua_State *lj_state_new(lua_State *L)$/;"	f
lj_state_newstate	lj_state.c	/^lua_State *lj_state_newstate(lua_Alloc f, void *ud)$/;"	f
lj_state_relimitstack	lj_state.c	/^void lj_state_relimitstack(lua_State *L)$/;"	f
lj_state_shrinkstack	lj_state.c	/^void lj_state_shrinkstack(lua_State *L, MSize used)$/;"	f
lj_str_bufint	lj_str.c	/^char * LJ_FASTCALL lj_str_bufint(char *p, int32_t k)$/;"	f
lj_str_bufnum	lj_str.c	/^size_t LJ_FASTCALL lj_str_bufnum(char *s, cTValue *o)$/;"	f
lj_str_c	lj_str.c	11;"	d	file:
lj_str_cmp	lj_str.c	/^int32_t LJ_FASTCALL lj_str_cmp(GCstr *a, GCstr *b)$/;"	f
lj_str_free	lj_str.c	/^void LJ_FASTCALL lj_str_free(global_State *g, GCstr *s)$/;"	f
lj_str_freebuf	lj_str.h	48;"	d
lj_str_fromint	lj_str.c	/^GCstr * LJ_FASTCALL lj_str_fromint(lua_State *L, int32_t k)$/;"	f
lj_str_fromnum	lj_str.c	/^GCstr * LJ_FASTCALL lj_str_fromnum(lua_State *L, const lua_Number *np)$/;"	f
lj_str_fromnumber	lj_str.c	/^GCstr * LJ_FASTCALL lj_str_fromnumber(lua_State *L, cTValue *o)$/;"	f
lj_str_initbuf	lj_str.h	43;"	d
lj_str_needbuf	lj_str.c	/^char *lj_str_needbuf(lua_State *L, SBuf *sb, MSize sz)$/;"	f
lj_str_new	lj_str.c	/^GCstr *lj_str_new(lua_State *L, const char *str, size_t lenx)$/;"	f
lj_str_newlit	lj_str.h	20;"	d
lj_str_newz	lj_str.h	19;"	d
lj_str_pushf	lj_str.c	/^const char *lj_str_pushf(lua_State *L, const char *fmt, ...)$/;"	f
lj_str_pushvf	lj_str.c	/^const char *lj_str_pushvf(lua_State *L, const char *fmt, va_list argp)$/;"	f
lj_str_resetbuf	lj_str.h	44;"	d
lj_str_resize	lj_str.c	/^void lj_str_resize(lua_State *L, MSize newmask)$/;"	f
lj_str_resizebuf	lj_str.h	45;"	d
lj_strscan_c	lj_strscan.c	8;"	d	file:
lj_strscan_num	lj_strscan.c	/^int LJ_FASTCALL lj_strscan_num(GCstr *str, TValue *o)$/;"	f
lj_strscan_number	lj_strscan.c	/^int LJ_FASTCALL lj_strscan_number(GCstr *str, TValue *o)$/;"	f
lj_strscan_number	lj_strscan.h	30;"	d
lj_strscan_numberobj	lj_strscan.h	/^static LJ_AINLINE int lj_strscan_numberobj(TValue *o)$/;"	f
lj_strscan_scan	lj_strscan.c	/^StrScanFmt lj_strscan_scan(const uint8_t *p, TValue *o, uint32_t opt)$/;"	f
lj_tab_c	lj_tab.c	9;"	d	file:
lj_tab_dup	lj_tab.c	/^GCtab * LJ_FASTCALL lj_tab_dup(lua_State *L, const GCtab *kt)$/;"	f
lj_tab_free	lj_tab.c	/^void LJ_FASTCALL lj_tab_free(global_State *g, GCtab *t)$/;"	f
lj_tab_get	lj_tab.c	/^cTValue *lj_tab_get(lua_State *L, GCtab *t, cTValue *key)$/;"	f
lj_tab_getint	lj_tab.h	59;"	d
lj_tab_getinth	lj_tab.c	/^cTValue * LJ_FASTCALL lj_tab_getinth(GCtab *t, int32_t key)$/;"	f
lj_tab_getstr	lj_tab.c	/^cTValue *lj_tab_getstr(GCtab *t, GCstr *key)$/;"	f
lj_tab_len	lj_tab.c	/^MSize LJ_FASTCALL lj_tab_len(GCtab *t)$/;"	f
lj_tab_new	lj_tab.c	/^GCtab *lj_tab_new(lua_State *L, uint32_t asize, uint32_t hbits)$/;"	f
lj_tab_new1	lj_tab.c	/^GCtab * LJ_FASTCALL lj_tab_new1(lua_State *L, uint32_t ahsize)$/;"	f
lj_tab_newkey	lj_tab.c	/^TValue *lj_tab_newkey(lua_State *L, GCtab *t, cTValue *key)$/;"	f
lj_tab_next	lj_tab.c	/^int lj_tab_next(lua_State *L, GCtab *t, TValue *key)$/;"	f
lj_tab_reasize	lj_tab.c	/^void lj_tab_reasize(lua_State *L, GCtab *t, uint32_t nasize)$/;"	f
lj_tab_set	lj_tab.c	/^TValue *lj_tab_set(lua_State *L, GCtab *t, cTValue *key)$/;"	f
lj_tab_setint	lj_tab.h	61;"	d
lj_tab_setinth	lj_tab.c	/^TValue *lj_tab_setinth(lua_State *L, GCtab *t, int32_t key)$/;"	f
lj_tab_setstr	lj_tab.c	/^TValue *lj_tab_setstr(lua_State *L, GCtab *t, GCstr *key)$/;"	f
lj_trace_abort	lj_trace.h	40;"	d
lj_trace_abort	lj_trace.h	48;"	d
lj_trace_c	lj_trace.c	6;"	d	file:
lj_trace_end	lj_trace.h	41;"	d
lj_trace_end	lj_trace.h	49;"	d
lj_trace_err	lj_trace.c	/^void lj_trace_err(jit_State *J, TraceError e)$/;"	f
lj_trace_err_info	lj_trace.c	/^void lj_trace_err_info(jit_State *J, TraceError e)$/;"	f
lj_trace_exit	lj_trace.c	/^int LJ_FASTCALL lj_trace_exit(jit_State *J, void *exptr)$/;"	f
lj_trace_flush	lj_trace.c	/^void lj_trace_flush(jit_State *J, TraceNo traceno)$/;"	f
lj_trace_flushall	lj_trace.c	/^int lj_trace_flushall(lua_State *L)$/;"	f
lj_trace_flushall	lj_trace.h	45;"	d
lj_trace_flushproto	lj_trace.c	/^void lj_trace_flushproto(global_State *g, GCproto *pt)$/;"	f
lj_trace_free	lj_trace.c	/^void LJ_FASTCALL lj_trace_free(global_State *g, GCtrace *T)$/;"	f
lj_trace_freestate	lj_trace.c	/^void lj_trace_freestate(global_State *g)$/;"	f
lj_trace_freestate	lj_trace.h	47;"	d
lj_trace_hot	lj_trace.c	/^void LJ_FASTCALL lj_trace_hot(jit_State *J, const BCIns *pc)$/;"	f
lj_trace_initstate	lj_trace.c	/^void lj_trace_initstate(global_State *g)$/;"	f
lj_trace_initstate	lj_trace.h	46;"	d
lj_trace_ins	lj_trace.c	/^void lj_trace_ins(jit_State *J, const BCIns *pc)$/;"	f
lj_trace_reenableproto	lj_trace.c	/^void lj_trace_reenableproto(GCproto *pt)$/;"	f
lj_typename	lj_obj.h	851;"	d
lj_udata_c	lj_udata.c	6;"	d	file:
lj_udata_free	lj_udata.c	/^void LJ_FASTCALL lj_udata_free(global_State *g, GCudata *ud)$/;"	f
lj_udata_new	lj_udata.c	/^GCudata *lj_udata_new(lua_State *L, MSize sz, GCtab *env)$/;"	f
lj_vm_asm_begin	lj_vm.h	/^LJ_ASMF char lj_vm_asm_begin[];$/;"	v
lj_vm_asm_begin	lj_vm.s	/^lj_vm_asm_begin:$/;"	l
lj_vm_call	lj_vm.s	/^lj_vm_call:$/;"	l
lj_vm_call_dispatch	lj_vm.s	/^lj_vm_call_dispatch:$/;"	l
lj_vm_call_dispatch_f	lj_vm.s	/^lj_vm_call_dispatch_f:$/;"	l
lj_vm_call_tail	lj_vm.s	/^lj_vm_call_tail:$/;"	l
lj_vm_callhook	lj_vm.s	/^lj_vm_callhook:$/;"	l
lj_vm_ceil	lj_vm.h	54;"	d
lj_vm_ceil	lj_vm.s	/^lj_vm_ceil:$/;"	l
lj_vm_ceil_sse	lj_vm.s	/^lj_vm_ceil_sse:$/;"	l
lj_vm_cosh	lj_vmmath.c	/^LJ_FUNCA double lj_vm_cosh(double x) { return cosh(x); }$/;"	f
lj_vm_cpcall	lj_vm.s	/^lj_vm_cpcall:$/;"	l
lj_vm_cpuid	lj_vm.s	/^lj_vm_cpuid:$/;"	l
lj_vm_errno	lj_vmmath.c	/^int lj_vm_errno(void)$/;"	f
lj_vm_exit_handler	lj_vm.s	/^lj_vm_exit_handler:$/;"	l
lj_vm_exit_interp	lj_vm.s	/^lj_vm_exit_interp:$/;"	l
lj_vm_exp2	lj_vm.h	91;"	d
lj_vm_exp2	lj_vmmath.c	/^double lj_vm_exp2(double a)$/;"	f
lj_vm_exp2_x87	lj_vm.s	/^lj_vm_exp2_x87:$/;"	l
lj_vm_exp2raw	lj_vm.s	/^lj_vm_exp2raw:$/;"	l
lj_vm_exp_x87	lj_vm.s	/^lj_vm_exp_x87:$/;"	l
lj_vm_ffi_call	lj_vm.s	/^lj_vm_ffi_call:$/;"	l
lj_vm_ffi_callback	lj_vm.s	/^lj_vm_ffi_callback:$/;"	l
lj_vm_floor	lj_vm.h	53;"	d
lj_vm_floor	lj_vm.s	/^lj_vm_floor:$/;"	l
lj_vm_floor_sse	lj_vm.s	/^lj_vm_floor_sse:$/;"	l
lj_vm_foldarith	lj_vm.s	/^lj_vm_foldarith:$/;"	l
lj_vm_foldarith	lj_vmmath.c	/^double lj_vm_foldarith(double x, double y, int op)$/;"	f
lj_vm_foldfpm	lj_vm.s	/^lj_vm_foldfpm:$/;"	l
lj_vm_foldfpm	lj_vmmath.c	/^double lj_vm_foldfpm(double x, int fpm)$/;"	f
lj_vm_growstack_c	lj_vm.s	/^lj_vm_growstack_c:$/;"	l
lj_vm_growstack_f	lj_vm.s	/^lj_vm_growstack_f:$/;"	l
lj_vm_growstack_v	lj_vm.s	/^lj_vm_growstack_v:$/;"	l
lj_vm_hotcall	lj_vm.s	/^lj_vm_hotcall:$/;"	l
lj_vm_hotloop	lj_vm.s	/^lj_vm_hotloop:$/;"	l
lj_vm_inshook	lj_vm.s	/^lj_vm_inshook:$/;"	l
lj_vm_leave_cp	lj_vm.s	/^lj_vm_leave_cp:$/;"	l
lj_vm_leave_unw	lj_vm.s	/^lj_vm_leave_unw:$/;"	l
lj_vm_log2	lj_vm.h	66;"	d
lj_vm_log2	lj_vm.s	/^lj_vm_log2:$/;"	l
lj_vm_log2	lj_vmmath.c	/^double lj_vm_log2(double a)$/;"	f
lj_vm_mod	lj_vm.s	/^lj_vm_mod:$/;"	l
lj_vm_modi	lj_vmmath.c	/^int32_t LJ_FASTCALL lj_vm_modi(int32_t a, int32_t b)$/;"	f
lj_vm_pcall	lj_vm.s	/^lj_vm_pcall:$/;"	l
lj_vm_pow	lj_vm.s	/^lj_vm_pow:$/;"	l
lj_vm_pow_sse	lj_vm.s	/^lj_vm_pow_sse:$/;"	l
lj_vm_powi	lj_vmmath.c	/^double lj_vm_powi(double x, int32_t k)$/;"	f
lj_vm_powi_sse	lj_vm.s	/^lj_vm_powi_sse:$/;"	l
lj_vm_powui	lj_vmmath.c	/^static double lj_vm_powui(double x, uint32_t k)$/;"	f	file:
lj_vm_record	lj_vm.s	/^lj_vm_record:$/;"	l
lj_vm_resume	lj_vm.s	/^lj_vm_resume:$/;"	l
lj_vm_rethook	lj_vm.s	/^lj_vm_rethook:$/;"	l
lj_vm_return	lj_vm.s	/^lj_vm_return:$/;"	l
lj_vm_returnc	lj_vm.s	/^lj_vm_returnc:$/;"	l
lj_vm_returnp	lj_vm.s	/^lj_vm_returnp:$/;"	l
lj_vm_sinh	lj_vmmath.c	/^LJ_FUNCA double lj_vm_sinh(double x) { return sinh(x); }$/;"	f
lj_vm_tanh	lj_vmmath.c	/^LJ_FUNCA double lj_vm_tanh(double x) { return tanh(x); }$/;"	f
lj_vm_trunc	lj_vm.h	80;"	d
lj_vm_trunc	lj_vm.s	/^lj_vm_trunc:$/;"	l
lj_vm_trunc_sse	lj_vm.s	/^lj_vm_trunc_sse:$/;"	l
lj_vm_unwind_c	lj_vm.s	/^lj_vm_unwind_c:$/;"	l
lj_vm_unwind_c_eh	lj_vm.s	/^lj_vm_unwind_c_eh:$/;"	l
lj_vm_unwind_ff	lj_vm.s	/^lj_vm_unwind_ff:$/;"	l
lj_vm_unwind_ff_eh	lj_vm.s	/^lj_vm_unwind_ff_eh:$/;"	l
lj_vm_unwind_rethrow	lj_vm.s	/^lj_vm_unwind_rethrow:$/;"	l
lj_vm_unwind_yield	lj_vm.s	/^lj_vm_unwind_yield:$/;"	l
lj_vmeta_arith_nv	lj_vm.s	/^lj_vmeta_arith_nv:$/;"	l
lj_vmeta_arith_nvo	lj_vm.s	/^lj_vmeta_arith_nvo:$/;"	l
lj_vmeta_arith_vn	lj_vm.s	/^lj_vmeta_arith_vn:$/;"	l
lj_vmeta_arith_vno	lj_vm.s	/^lj_vmeta_arith_vno:$/;"	l
lj_vmeta_arith_vv	lj_vm.s	/^lj_vmeta_arith_vv:$/;"	l
lj_vmeta_arith_vvo	lj_vm.s	/^lj_vmeta_arith_vvo:$/;"	l
lj_vmeta_binop	lj_vm.s	/^lj_vmeta_binop:$/;"	l
lj_vmeta_call	lj_vm.s	/^lj_vmeta_call:$/;"	l
lj_vmeta_call_ra	lj_vm.s	/^lj_vmeta_call_ra:$/;"	l
lj_vmeta_comp	lj_vm.s	/^lj_vmeta_comp:$/;"	l
lj_vmeta_equal	lj_vm.s	/^lj_vmeta_equal:$/;"	l
lj_vmeta_equal_cd	lj_vm.s	/^lj_vmeta_equal_cd:$/;"	l
lj_vmeta_for	lj_vm.s	/^lj_vmeta_for:$/;"	l
lj_vmeta_len	lj_vm.s	/^lj_vmeta_len:$/;"	l
lj_vmeta_tgetb	lj_vm.s	/^lj_vmeta_tgetb:$/;"	l
lj_vmeta_tgets	lj_vm.s	/^lj_vmeta_tgets:$/;"	l
lj_vmeta_tgetv	lj_vm.s	/^lj_vmeta_tgetv:$/;"	l
lj_vmeta_tsetb	lj_vm.s	/^lj_vmeta_tsetb:$/;"	l
lj_vmeta_tsets	lj_vm.s	/^lj_vmeta_tsets:$/;"	l
lj_vmeta_tsetv	lj_vm.s	/^lj_vmeta_tsetv:$/;"	l
lj_vmeta_unm	lj_vm.s	/^lj_vmeta_unm:$/;"	l
lj_vmevent_c	lj_vmevent.c	8;"	d	file:
lj_vmevent_call	lj_vmevent.c	/^void lj_vmevent_call(lua_State *L, ptrdiff_t argbase)$/;"	f
lj_vmevent_prepare	lj_vmevent.c	/^ptrdiff_t lj_vmevent_prepare(lua_State *L, VMEvent ev)$/;"	f
lj_vmevent_send	lj_vmevent.h	34;"	d
lj_vmevent_send	lj_vmevent.h	37;"	d
lj_vmevent_send_	lj_vmevent.h	35;"	d
lj_vmevent_send_	lj_vmevent.h	45;"	d
lj_vmmath_c	lj_vmmath.c	6;"	d	file:
ljamalg_c	ljamalg.c	16;"	d	file:
ll_bcsym	lib_package.c	/^static const char *ll_bcsym(void *lib, const char *sym)$/;"	f	file:
ll_load	lib_package.c	/^static void *ll_load(lua_State *L, const char *path, int gl)$/;"	f	file:
ll_loadfunc	lib_package.c	/^static int ll_loadfunc(lua_State *L, const char *path, const char *name, int r)$/;"	f	file:
ll_register	lib_package.c	/^static void **ll_register(lua_State *L, const char *path)$/;"	f	file:
ll_sym	lib_package.c	/^static lua_CFunction ll_sym(lua_State *L, void *lib, const char *sym)$/;"	f	file:
ll_unloadlib	lib_package.c	/^static void ll_unloadlib(void *lib)$/;"	f	file:
llex	host/minilua.c	/^static int llex(LexState*ls,SemInfo*seminfo){$/;"	f	file:
llex	lj_lex.c	/^static int llex(LexState *ls, TValue *tv)$/;"	f	file:
lmemfind	host/minilua.c	/^static const char*lmemfind(const char*s1,size_t l1,$/;"	f	file:
lmemfind	lib_string.c	/^static const char *lmemfind(const char *s1, size_t l1,$/;"	f	file:
lmod	host/minilua.c	366;"	d	file:
load_aux	host/minilua.c	/^static int load_aux(lua_State*L,int status){$/;"	f	file:
load_aux	lib_base.c	/^static int load_aux(lua_State *L, int status, int envarg)$/;"	f	file:
loaderror	lib_package.c	/^static void loaderror(lua_State *L, const char *filename)$/;"	f	file:
loadjitmodule	luajit.c	/^static int loadjitmodule(lua_State *L)$/;"	f	file:
loadline	luajit.c	/^static int loadline(lua_State *L)$/;"	f	file:
localfunc	host/minilua.c	/^static void localfunc(LexState*ls){$/;"	f	file:
localstat	host/minilua.c	/^static void localstat(LexState*ls){$/;"	f	file:
locvars	host/minilua.c	/^struct LocVar*locvars;$/;"	m	struct:Proto	typeref:struct:Proto::LocVar	file:
lookahead	host/minilua.c	/^Token lookahead;$/;"	m	struct:LexState	file:
lookahead	lj_lex.h	/^  LexToken lookahead;	\/* Lookahead token. *\/$/;"	m	struct:LexState
lookaheadval	lj_lex.h	/^  TValue lookaheadval;	\/* Lookahead token value. *\/$/;"	m	struct:LexState
loop_emit_phi	lj_opt_loop.c	/^static void loop_emit_phi(jit_State *J, IRRef1 *subst, IRRef1 *phi, IRRef nphi,$/;"	f	file:
loop_subst_snap	lj_opt_loop.c	/^static void loop_subst_snap(jit_State *J, SnapShot *osnap,$/;"	f	file:
loop_undo	lj_opt_loop.c	/^static void loop_undo(jit_State *J, IRRef ins, SnapNo nsnap, MSize nsnapmap)$/;"	f	file:
loop_unroll	lj_opt_loop.c	/^static void loop_unroll(jit_State *J)$/;"	f	file:
loopinv	lj_asm.c	/^  int loopinv;		\/* Loop branch inversion (0:no, 1:yes, 2:yes+CC_P). *\/$/;"	m	struct:ASMState	file:
loopref	lj_asm.c	/^  IRRef loopref;	\/* Reference of LOOP instruction (or 0). *\/$/;"	m	struct:ASMState	file:
loopref	lj_jit.h	/^  IRRef loopref;	\/* Last loop reference or ref of final LOOP (or 0). *\/$/;"	m	struct:jit_State
loopsnapno	lj_asm.c	/^  SnapNo loopsnapno;	\/* Loop snapshot number. *\/$/;"	m	struct:ASMState	file:
loopunroll	lj_jit.h	/^  int32_t loopunroll;	\/* Unroll counter for loop ops in side traces. *\/$/;"	m	struct:jit_State
lower	host/buildvm.c	/^static const char *lower(char *buf, const char *s)$/;"	f	file:
ls	host/minilua.c	/^struct LexState*ls;$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState	file:
ls	lj_parse.c	/^  LexState *ls;			\/* Lexer state. *\/$/;"	m	struct:FuncState	file:
lshift	host/minilua.c	/^static int lshift(lua_State*L){$/;"	f	file:
lsizenode	host/minilua.c	/^lu_byte lsizenode;$/;"	m	struct:Table	file:
lstop	luajit.c	/^static void lstop(lua_State *L, lua_Debug *ar)$/;"	f	file:
lu_byte	host/minilua.c	/^typedef unsigned char lu_byte;$/;"	t	file:
lu_int32	host/minilua.c	/^typedef unsigned int lu_int32;$/;"	t	file:
lu_mem	host/minilua.c	/^typedef size_t lu_mem;$/;"	t	file:
luaB_assert	host/minilua.c	/^static int luaB_assert(lua_State*L){$/;"	f	file:
luaB_error	host/minilua.c	/^static int luaB_error(lua_State*L){$/;"	f	file:
luaB_ipairs	host/minilua.c	/^static int luaB_ipairs(lua_State*L){$/;"	f	file:
luaB_loadfile	host/minilua.c	/^static int luaB_loadfile(lua_State*L){$/;"	f	file:
luaB_loadstring	host/minilua.c	/^static int luaB_loadstring(lua_State*L){$/;"	f	file:
luaB_newproxy	host/minilua.c	/^static int luaB_newproxy(lua_State*L){$/;"	f	file:
luaB_next	host/minilua.c	/^static int luaB_next(lua_State*L){$/;"	f	file:
luaB_pairs	host/minilua.c	/^static int luaB_pairs(lua_State*L){$/;"	f	file:
luaB_pcall	host/minilua.c	/^static int luaB_pcall(lua_State*L){$/;"	f	file:
luaB_rawget	host/minilua.c	/^static int luaB_rawget(lua_State*L){$/;"	f	file:
luaB_setfenv	host/minilua.c	/^static int luaB_setfenv(lua_State*L){$/;"	f	file:
luaB_setmetatable	host/minilua.c	/^static int luaB_setmetatable(lua_State*L){$/;"	f	file:
luaB_tonumber	host/minilua.c	/^static int luaB_tonumber(lua_State*L){$/;"	f	file:
luaB_type	host/minilua.c	/^static int luaB_type(lua_State*L){$/;"	f	file:
luaB_unpack	host/minilua.c	/^static int luaB_unpack(lua_State*L){$/;"	f	file:
luaC_barrier	host/minilua.c	580;"	d	file:
luaC_barrierback	host/minilua.c	/^static void luaC_barrierback(lua_State*L,Table*t){$/;"	f	file:
luaC_barrierf	host/minilua.c	/^static void luaC_barrierf(lua_State*L,GCObject*o,GCObject*v){$/;"	f	file:
luaC_barriert	host/minilua.c	581;"	d	file:
luaC_callGCTM	host/minilua.c	/^static void luaC_callGCTM(lua_State*L){$/;"	f	file:
luaC_checkGC	host/minilua.c	579;"	d	file:
luaC_freeall	host/minilua.c	/^static void luaC_freeall(lua_State*L){$/;"	f	file:
luaC_link	host/minilua.c	/^static void luaC_link(lua_State*L,GCObject*o,lu_byte tt){$/;"	f	file:
luaC_linkupval	host/minilua.c	/^static void luaC_linkupval(lua_State*L,UpVal*uv){$/;"	f	file:
luaC_objbarrier	host/minilua.c	582;"	d	file:
luaC_objbarriert	host/minilua.c	583;"	d	file:
luaC_separateudata	host/minilua.c	/^static size_t luaC_separateudata(lua_State*L,int all){$/;"	f	file:
luaC_step	host/minilua.c	/^static void luaC_step(lua_State*L){$/;"	f	file:
luaC_white	host/minilua.c	578;"	d	file:
luaD_call	host/minilua.c	/^static void luaD_call(lua_State*L,StkId func,int nResults){$/;"	f	file:
luaD_checkstack	host/minilua.c	517;"	d	file:
luaD_growstack	host/minilua.c	/^static void luaD_growstack(lua_State*L,int n){$/;"	f	file:
luaD_pcall	host/minilua.c	/^static int luaD_pcall(lua_State*L,Pfunc func,void*u,$/;"	f	file:
luaD_poscall	host/minilua.c	/^static int luaD_poscall(lua_State*L,StkId firstResult){$/;"	f	file:
luaD_precall	host/minilua.c	/^static int luaD_precall(lua_State*L,StkId func,int nresults){$/;"	f	file:
luaD_protectedparser	host/minilua.c	/^static int luaD_protectedparser(lua_State*L,ZIO*z,const char*name){$/;"	f	file:
luaD_rawrunprotected	host/minilua.c	/^static int luaD_rawrunprotected(lua_State*L,Pfunc f,void*ud){$/;"	f	file:
luaD_reallocCI	host/minilua.c	/^static void luaD_reallocCI(lua_State*L,int newsize){$/;"	f	file:
luaD_reallocstack	host/minilua.c	/^static void luaD_reallocstack(lua_State*L,int newsize){$/;"	f	file:
luaD_seterrorobj	host/minilua.c	/^static void luaD_seterrorobj(lua_State*L,int errcode,StkId oldtop){$/;"	f	file:
luaD_throw	host/minilua.c	/^static void luaD_throw(lua_State*L,int errcode){$/;"	f	file:
luaE_freethread	host/minilua.c	/^static void luaE_freethread(lua_State*L,lua_State*L1){$/;"	f	file:
luaF_close	host/minilua.c	/^static void luaF_close(lua_State*L,StkId level){$/;"	f	file:
luaF_findupval	host/minilua.c	/^static UpVal*luaF_findupval(lua_State*L,StkId level){$/;"	f	file:
luaF_freeclosure	host/minilua.c	/^static void luaF_freeclosure(lua_State*L,Closure*c){$/;"	f	file:
luaF_freeproto	host/minilua.c	/^static void luaF_freeproto(lua_State*L,Proto*f){$/;"	f	file:
luaF_freeupval	host/minilua.c	/^static void luaF_freeupval(lua_State*L,UpVal*uv){$/;"	f	file:
luaF_newCclosure	host/minilua.c	/^static Closure*luaF_newCclosure(lua_State*L,int nelems,Table*e){$/;"	f	file:
luaF_newLclosure	host/minilua.c	/^static Closure*luaF_newLclosure(lua_State*L,int nelems,Table*e){$/;"	f	file:
luaF_newproto	host/minilua.c	/^static Proto*luaF_newproto(lua_State*L){$/;"	f	file:
luaF_newupval	host/minilua.c	/^static UpVal*luaF_newupval(lua_State*L){$/;"	f	file:
luaG_aritherror	host/minilua.c	/^static void luaG_aritherror(lua_State*L,const TValue*p1,const TValue*p2){$/;"	f	file:
luaG_concaterror	host/minilua.c	/^static void luaG_concaterror(lua_State*L,StkId p1,StkId p2){$/;"	f	file:
luaG_errormsg	host/minilua.c	/^static void luaG_errormsg(lua_State*L){$/;"	f	file:
luaG_ordererror	host/minilua.c	/^static int luaG_ordererror(lua_State*L,const TValue*p1,const TValue*p2){$/;"	f	file:
luaG_runerror	host/minilua.c	/^static void luaG_runerror(lua_State*L,const char*fmt,...){$/;"	f	file:
luaG_typeerror	host/minilua.c	/^static void luaG_typeerror(lua_State*L,const TValue*o,const char*op){$/;"	f	file:
luaH_free	host/minilua.c	/^static void luaH_free(lua_State*L,Table*t){$/;"	f	file:
luaH_get	host/minilua.c	/^static const TValue*luaH_get(Table*t,const TValue*key){$/;"	f	file:
luaH_getn	host/minilua.c	/^static int luaH_getn(Table*t){$/;"	f	file:
luaH_getnum	host/minilua.c	/^static const TValue*luaH_getnum(Table*t,int key){$/;"	f	file:
luaH_getstr	host/minilua.c	/^static const TValue*luaH_getstr(Table*t,TString*key){$/;"	f	file:
luaH_new	host/minilua.c	/^static Table*luaH_new(lua_State*L,int narray,int nhash){$/;"	f	file:
luaH_next	host/minilua.c	/^static int luaH_next(lua_State*L,Table*t,StkId key){$/;"	f	file:
luaH_resizearray	host/minilua.c	/^static void luaH_resizearray(lua_State*L,Table*t,int nasize){$/;"	f	file:
luaH_set	host/minilua.c	/^static TValue*luaH_set(lua_State*L,Table*t,const TValue*key){$/;"	f	file:
luaH_setnum	host/minilua.c	/^static TValue*luaH_setnum(lua_State*L,Table*t,int key){$/;"	f	file:
luaH_setstr	host/minilua.c	/^static TValue*luaH_setstr(lua_State*L,Table*t,TString*key){$/;"	f	file:
luaI_openlib	host/minilua.c	/^static void luaI_openlib(lua_State*L,const char*libname,$/;"	f	file:
luaJIT_setmode	lj_dispatch.c	/^int luaJIT_setmode(lua_State *L, int idx, int mode)$/;"	f
luaK_checkstack	host/minilua.c	/^static void luaK_checkstack(FuncState*fs,int n){$/;"	f	file:
luaK_code	host/minilua.c	/^static int luaK_code(FuncState*fs,Instruction i,int line){$/;"	f	file:
luaK_codeABC	host/minilua.c	/^static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){$/;"	f	file:
luaK_codeABx	host/minilua.c	/^static int luaK_codeABx(FuncState*fs,OpCode o,int a,unsigned int bc){$/;"	f	file:
luaK_codeAsBx	host/minilua.c	2389;"	d	file:
luaK_concat	host/minilua.c	/^static void luaK_concat(FuncState*fs,int*l1,int l2){$/;"	f	file:
luaK_dischargevars	host/minilua.c	/^static void luaK_dischargevars(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_exp2RK	host/minilua.c	/^static int luaK_exp2RK(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_exp2anyreg	host/minilua.c	/^static int luaK_exp2anyreg(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_exp2nextreg	host/minilua.c	/^static void luaK_exp2nextreg(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_exp2val	host/minilua.c	/^static void luaK_exp2val(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_fixline	host/minilua.c	/^static void luaK_fixline(FuncState*fs,int line){$/;"	f	file:
luaK_getlabel	host/minilua.c	/^static int luaK_getlabel(FuncState*fs){$/;"	f	file:
luaK_goiffalse	host/minilua.c	/^static void luaK_goiffalse(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_goiftrue	host/minilua.c	/^static void luaK_goiftrue(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_indexed	host/minilua.c	/^static void luaK_indexed(FuncState*fs,expdesc*t,expdesc*k){$/;"	f	file:
luaK_infix	host/minilua.c	/^static void luaK_infix(FuncState*fs,BinOpr op,expdesc*v){$/;"	f	file:
luaK_jump	host/minilua.c	/^static int luaK_jump(FuncState*fs){$/;"	f	file:
luaK_nil	host/minilua.c	/^static void luaK_nil(FuncState*fs,int from,int n){$/;"	f	file:
luaK_numberK	host/minilua.c	/^static int luaK_numberK(FuncState*fs,lua_Number r){$/;"	f	file:
luaK_patchlist	host/minilua.c	/^static void luaK_patchlist(FuncState*fs,int list,int target){$/;"	f	file:
luaK_patchtohere	host/minilua.c	/^static void luaK_patchtohere(FuncState*fs,int list){$/;"	f	file:
luaK_posfix	host/minilua.c	/^static void luaK_posfix(FuncState*fs,BinOpr op,expdesc*e1,expdesc*e2){$/;"	f	file:
luaK_prefix	host/minilua.c	/^static void luaK_prefix(FuncState*fs,UnOpr op,expdesc*e){$/;"	f	file:
luaK_reserveregs	host/minilua.c	/^static void luaK_reserveregs(FuncState*fs,int n){$/;"	f	file:
luaK_ret	host/minilua.c	/^static void luaK_ret(FuncState*fs,int first,int nret){$/;"	f	file:
luaK_self	host/minilua.c	/^static void luaK_self(FuncState*fs,expdesc*e,expdesc*key){$/;"	f	file:
luaK_setlist	host/minilua.c	/^static void luaK_setlist(FuncState*fs,int base,int nelems,int tostore){$/;"	f	file:
luaK_setmultret	host/minilua.c	2390;"	d	file:
luaK_setoneret	host/minilua.c	/^static void luaK_setoneret(FuncState*fs,expdesc*e){$/;"	f	file:
luaK_setreturns	host/minilua.c	/^static void luaK_setreturns(FuncState*fs,expdesc*e,int nresults){$/;"	f	file:
luaK_storevar	host/minilua.c	/^static void luaK_storevar(FuncState*fs,expdesc*var,expdesc*ex){$/;"	f	file:
luaK_stringK	host/minilua.c	/^static int luaK_stringK(FuncState*fs,TString*s){$/;"	f	file:
luaL_Buffer	host/minilua.c	/^typedef struct luaL_Buffer{$/;"	s	file:
luaL_Buffer	host/minilua.c	/^}luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer	file:
luaL_Buffer	lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	host/minilua.c	/^typedef struct luaL_Reg{$/;"	s	file:
luaL_Reg	host/minilua.c	/^}luaL_Reg;$/;"	t	typeref:struct:luaL_Reg	file:
luaL_Reg	lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_addchar	host/minilua.c	5867;"	d	file:
luaL_addchar	lauxlib.h	131;"	d
luaL_addlstring	host/minilua.c	/^static void luaL_addlstring(luaL_Buffer*B,const char*s,size_t l){$/;"	f	file:
luaL_addlstring	lib_aux.c	/^LUALIB_API void luaL_addlstring(luaL_Buffer *B, const char *s, size_t l)$/;"	f
luaL_addsize	host/minilua.c	5868;"	d	file:
luaL_addsize	lauxlib.h	138;"	d
luaL_addstring	lib_aux.c	/^LUALIB_API void luaL_addstring(luaL_Buffer *B, const char *s)$/;"	f
luaL_addvalue	host/minilua.c	/^static void luaL_addvalue(luaL_Buffer*B){$/;"	f	file:
luaL_addvalue	lib_aux.c	/^LUALIB_API void luaL_addvalue(luaL_Buffer *B)$/;"	f
luaL_argcheck	host/minilua.c	5853;"	d	file:
luaL_argcheck	lauxlib.h	95;"	d
luaL_argerror	host/minilua.c	/^static int luaL_argerror(lua_State*L,int narg,const char*extramsg){$/;"	f	file:
luaL_argerror	lj_err.c	/^LUALIB_API int luaL_argerror(lua_State *L, int narg, const char *msg)$/;"	f
luaL_buffinit	host/minilua.c	/^static void luaL_buffinit(lua_State*L,luaL_Buffer*B){$/;"	f	file:
luaL_buffinit	lib_aux.c	/^LUALIB_API void luaL_buffinit(lua_State *L, luaL_Buffer *B)$/;"	f
luaL_callmeta	lj_api.c	/^LUALIB_API int luaL_callmeta(lua_State *L, int idx, const char *field)$/;"	f
luaL_checkany	host/minilua.c	/^static void luaL_checkany(lua_State*L,int narg){$/;"	f	file:
luaL_checkany	lj_api.c	/^LUALIB_API void luaL_checkany(lua_State *L, int idx)$/;"	f
luaL_checkint	host/minilua.c	5856;"	d	file:
luaL_checkint	lauxlib.h	99;"	d
luaL_checkinteger	host/minilua.c	/^static lua_Integer luaL_checkinteger(lua_State*L,int narg){$/;"	f	file:
luaL_checkinteger	lj_api.c	/^LUALIB_API lua_Integer luaL_checkinteger(lua_State *L, int idx)$/;"	f
luaL_checklong	lauxlib.h	101;"	d
luaL_checklstring	host/minilua.c	/^static const char*luaL_checklstring(lua_State*L,int narg,size_t*len){$/;"	f	file:
luaL_checklstring	lj_api.c	/^LUALIB_API const char *luaL_checklstring(lua_State *L, int idx, size_t *len)$/;"	f
luaL_checknumber	host/minilua.c	/^static lua_Number luaL_checknumber(lua_State*L,int narg){$/;"	f	file:
luaL_checknumber	lj_api.c	/^LUALIB_API lua_Number luaL_checknumber(lua_State *L, int idx)$/;"	f
luaL_checkoption	lj_api.c	/^LUALIB_API int luaL_checkoption(lua_State *L, int idx, const char *def,$/;"	f
luaL_checkstack	host/minilua.c	/^static void luaL_checkstack(lua_State*L,int space,const char*mes){$/;"	f	file:
luaL_checkstack	lj_api.c	/^LUALIB_API void luaL_checkstack(lua_State *L, int size, const char *msg)$/;"	f
luaL_checkstring	host/minilua.c	5854;"	d	file:
luaL_checkstring	lauxlib.h	97;"	d
luaL_checktype	host/minilua.c	/^static void luaL_checktype(lua_State*L,int narg,int t){$/;"	f	file:
luaL_checktype	lj_api.c	/^LUALIB_API void luaL_checktype(lua_State *L, int idx, int tt)$/;"	f
luaL_checkudata	host/minilua.c	/^static void*luaL_checkudata(lua_State*L,int ud,const char*tname){$/;"	f	file:
luaL_checkudata	lj_api.c	/^LUALIB_API void *luaL_checkudata(lua_State *L, int idx, const char *tname)$/;"	f
luaL_dofile	lauxlib.h	106;"	d
luaL_dostring	lauxlib.h	109;"	d
luaL_error	host/minilua.c	/^static int luaL_error(lua_State*L,const char*fmt,...){$/;"	f	file:
luaL_error	lj_err.c	/^LUALIB_API int luaL_error(lua_State *L, const char *fmt, ...)$/;"	f
luaL_execresult	lib_aux.c	/^LUALIB_API int luaL_execresult(lua_State *L, int stat)$/;"	f
luaL_fileresult	lib_aux.c	/^LUALIB_API int luaL_fileresult(lua_State *L, int stat, const char *fname)$/;"	f
luaL_findtable	host/minilua.c	/^static const char*luaL_findtable(lua_State*L,int idx,$/;"	f	file:
luaL_findtable	lib_aux.c	/^LUALIB_API const char *luaL_findtable(lua_State *L, int idx,$/;"	f
luaL_getmetafield	host/minilua.c	/^static int luaL_getmetafield(lua_State*L,int obj,const char*event){$/;"	f	file:
luaL_getmetafield	lj_api.c	/^LUALIB_API int luaL_getmetafield(lua_State *L, int idx, const char *field)$/;"	f
luaL_getmetatable	host/minilua.c	5859;"	d	file:
luaL_getmetatable	lauxlib.h	112;"	d
luaL_getn	host/minilua.c	5834;"	d	file:
luaL_getn	lauxlib.h	18;"	d
luaL_gsub	lib_aux.c	/^LUALIB_API const char *luaL_gsub(lua_State *L, const char *s,$/;"	f
luaL_loadbuffer	host/minilua.c	/^static int luaL_loadbuffer(lua_State*L,const char*buff,size_t size,$/;"	f	file:
luaL_loadbuffer	lj_load.c	/^LUALIB_API int luaL_loadbuffer(lua_State *L, const char *buf, size_t size,$/;"	f
luaL_loadbufferx	lj_load.c	/^LUALIB_API int luaL_loadbufferx(lua_State *L, const char *buf, size_t size,$/;"	f
luaL_loadfile	host/minilua.c	/^static int luaL_loadfile(lua_State*L,const char*filename){$/;"	f	file:
luaL_loadfile	lj_load.c	/^LUALIB_API int luaL_loadfile(lua_State *L, const char *filename)$/;"	f
luaL_loadfilex	lj_load.c	/^LUALIB_API int luaL_loadfilex(lua_State *L, const char *filename,$/;"	f
luaL_loadstring	lj_load.c	/^LUALIB_API int luaL_loadstring(lua_State *L, const char *s)$/;"	f
luaL_newmetatable	host/minilua.c	/^static int luaL_newmetatable(lua_State*L,const char*tname){$/;"	f	file:
luaL_newmetatable	lj_api.c	/^LUALIB_API int luaL_newmetatable(lua_State *L, const char *tname)$/;"	f
luaL_newstate	host/minilua.c	/^static lua_State*luaL_newstate(void){$/;"	f	file:
luaL_newstate	lib_aux.c	/^LUALIB_API lua_State *luaL_newstate(void)$/;"	f
luaL_openlib	lib_aux.c	/^LUALIB_API void luaL_openlib(lua_State *L, const char *libname,$/;"	f
luaL_openlibs	host/minilua.c	/^static void luaL_openlibs(lua_State*L){$/;"	f	file:
luaL_openlibs	lib_init.c	/^LUALIB_API void luaL_openlibs(lua_State *L)$/;"	f
luaL_opt	host/minilua.c	5860;"	d	file:
luaL_opt	lauxlib.h	114;"	d
luaL_optint	host/minilua.c	5857;"	d	file:
luaL_optint	lauxlib.h	100;"	d
luaL_optinteger	host/minilua.c	/^static lua_Integer luaL_optinteger(lua_State*L,int narg,$/;"	f	file:
luaL_optinteger	lj_api.c	/^LUALIB_API lua_Integer luaL_optinteger(lua_State *L, int idx, lua_Integer def)$/;"	f
luaL_optlong	lauxlib.h	102;"	d
luaL_optlstring	host/minilua.c	/^static const char*luaL_optlstring(lua_State*L,int narg,$/;"	f	file:
luaL_optlstring	lj_api.c	/^LUALIB_API const char *luaL_optlstring(lua_State *L, int idx,$/;"	f
luaL_optnumber	lj_api.c	/^LUALIB_API lua_Number luaL_optnumber(lua_State *L, int idx, lua_Number def)$/;"	f
luaL_optstring	host/minilua.c	5855;"	d	file:
luaL_optstring	lauxlib.h	98;"	d
luaL_prepbuffer	host/minilua.c	/^static char*luaL_prepbuffer(luaL_Buffer*B){$/;"	f	file:
luaL_prepbuffer	lib_aux.c	/^LUALIB_API char *luaL_prepbuffer(luaL_Buffer *B)$/;"	f
luaL_pushresult	host/minilua.c	/^static void luaL_pushresult(luaL_Buffer*B){$/;"	f	file:
luaL_pushresult	lib_aux.c	/^LUALIB_API void luaL_pushresult(luaL_Buffer *B)$/;"	f
luaL_putchar	lauxlib.h	136;"	d
luaL_ref	lib_aux.c	/^LUALIB_API int luaL_ref(lua_State *L, int t)$/;"	f
luaL_reg	lauxlib.h	165;"	d
luaL_register	host/minilua.c	/^static void luaL_register(lua_State*L,const char*libname,$/;"	f	file:
luaL_register	lib_aux.c	/^LUALIB_API void luaL_register(lua_State *L, const char *libname,$/;"	f
luaL_setn	host/minilua.c	5835;"	d	file:
luaL_setn	lauxlib.h	19;"	d
luaL_traceback	lj_debug.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,$/;"	f
luaL_typename	host/minilua.c	5858;"	d	file:
luaL_typename	lauxlib.h	104;"	d
luaL_typerror	host/minilua.c	/^static int luaL_typerror(lua_State*L,int narg,const char*tname){$/;"	f	file:
luaL_typerror	lj_err.c	/^LUALIB_API int luaL_typerror(lua_State *L, int narg, const char *xname)$/;"	f
luaL_unref	lib_aux.c	/^LUALIB_API void luaL_unref(lua_State *L, int t, int ref)$/;"	f
luaL_where	host/minilua.c	/^static void luaL_where(lua_State*L,int level){$/;"	f	file:
luaL_where	lj_err.c	/^LUALIB_API void luaL_where(lua_State *L, int level)$/;"	f
luaM_free	host/minilua.c	377;"	d	file:
luaM_freearray	host/minilua.c	378;"	d	file:
luaM_freemem	host/minilua.c	376;"	d	file:
luaM_growaux_	host/minilua.c	/^static void*luaM_growaux_(lua_State*L,void*block,int*size,size_t size_elems,$/;"	f	file:
luaM_growvector	host/minilua.c	382;"	d	file:
luaM_malloc	host/minilua.c	379;"	d	file:
luaM_new	host/minilua.c	380;"	d	file:
luaM_newvector	host/minilua.c	381;"	d	file:
luaM_realloc_	host/minilua.c	/^static void*luaM_realloc_(lua_State*L,void*block,size_t osize,size_t nsize){$/;"	f	file:
luaM_reallocv	host/minilua.c	375;"	d	file:
luaM_reallocvector	host/minilua.c	383;"	d	file:
luaM_toobig	host/minilua.c	/^static void*luaM_toobig(lua_State*L){$/;"	f	file:
luaO_chunkid	host/minilua.c	/^static void luaO_chunkid(char*out,const char*source,size_t bufflen){$/;"	f	file:
luaO_fb2int	host/minilua.c	/^static int luaO_fb2int(int x){$/;"	f	file:
luaO_int2fb	host/minilua.c	/^static int luaO_int2fb(unsigned int x){$/;"	f	file:
luaO_log2	host/minilua.c	/^static int luaO_log2(unsigned int x){$/;"	f	file:
luaO_nilobject_	host/minilua.c	/^static const TValue luaO_nilobject_;$/;"	v	file:
luaO_nilobject_	host/minilua.c	/^static const TValue luaO_nilobject_={{NULL},0};$/;"	v	file:
luaO_pushfstring	host/minilua.c	/^static const char*luaO_pushfstring(lua_State*L,const char*fmt,...){$/;"	f	file:
luaO_pushvfstring	host/minilua.c	/^static const char*luaO_pushvfstring(lua_State*L,const char*fmt,va_list argp){$/;"	f	file:
luaO_rawequalObj	host/minilua.c	/^static int luaO_rawequalObj(const TValue*t1,const TValue*t2){$/;"	f	file:
luaO_str2d	host/minilua.c	/^static int luaO_str2d(const char*s,lua_Number*result){$/;"	f	file:
luaP_opmodes	host/minilua.c	/^static const lu_byte luaP_opmodes[(cast(int,OP_VARARG)+1)];$/;"	v	file:
luaP_opmodes	host/minilua.c	/^static const lu_byte luaP_opmodes[(cast(int,OP_VARARG)+1)]={$/;"	v	file:
luaS_fix	host/minilua.c	593;"	d	file:
luaS_new	host/minilua.c	591;"	d	file:
luaS_newliteral	host/minilua.c	592;"	d	file:
luaS_newlstr	host/minilua.c	/^static TString*luaS_newlstr(lua_State*L,const char*str,size_t l){$/;"	f	file:
luaS_newudata	host/minilua.c	/^static Udata*luaS_newudata(lua_State*L,size_t s,Table*e){$/;"	f	file:
luaS_resize	host/minilua.c	/^static void luaS_resize(lua_State*L,int newsize){$/;"	f	file:
luaT_gettm	host/minilua.c	/^static const TValue*luaT_gettm(Table*events,TMS event,TString*ename){$/;"	f	file:
luaT_gettmbyobj	host/minilua.c	/^static const TValue*luaT_gettmbyobj(lua_State*L,const TValue*o,TMS event){$/;"	f	file:
luaT_init	host/minilua.c	/^static void luaT_init(lua_State*L){$/;"	f	file:
luaT_typenames	host/minilua.c	/^static const char*const luaT_typenames[]={$/;"	v	file:
luaV_concat	host/minilua.c	/^static void luaV_concat(lua_State*L,int total,int last){$/;"	f	file:
luaV_equalval	host/minilua.c	/^static int luaV_equalval(lua_State*L,const TValue*t1,const TValue*t2){$/;"	f	file:
luaV_execute	host/minilua.c	/^static void luaV_execute(lua_State*L,int nexeccalls){$/;"	f	file:
luaV_gettable	host/minilua.c	/^static void luaV_gettable(lua_State*L,const TValue*t,TValue*key,StkId val){$/;"	f	file:
luaV_lessthan	host/minilua.c	/^static int luaV_lessthan(lua_State*L,const TValue*l,const TValue*r){$/;"	f	file:
luaV_settable	host/minilua.c	/^static void luaV_settable(lua_State*L,const TValue*t,TValue*key,StkId val){$/;"	f	file:
luaV_tonumber	host/minilua.c	/^static const TValue*luaV_tonumber(const TValue*obj,TValue*n){$/;"	f	file:
luaV_tostring	host/minilua.c	/^static int luaV_tostring(lua_State*L,StkId obj){$/;"	f	file:
luaX_init	host/minilua.c	/^static void luaX_init(lua_State*L){$/;"	f	file:
luaX_lexerror	host/minilua.c	/^static void luaX_lexerror(LexState*ls,const char*msg,int token){$/;"	f	file:
luaX_lookahead	host/minilua.c	/^static void luaX_lookahead(LexState*ls){$/;"	f	file:
luaX_newstring	host/minilua.c	/^static TString*luaX_newstring(LexState*ls,const char*str,size_t l){$/;"	f	file:
luaX_next	host/minilua.c	/^static void luaX_next(LexState*ls){$/;"	f	file:
luaX_setinput	host/minilua.c	/^static void luaX_setinput(lua_State*L,LexState*ls,ZIO*z,TString*source){$/;"	f	file:
luaX_syntaxerror	host/minilua.c	/^static void luaX_syntaxerror(LexState*ls,const char*msg){$/;"	f	file:
luaX_token2str	host/minilua.c	/^static const char*luaX_token2str(LexState*ls,int token){$/;"	f	file:
luaX_tokens	host/minilua.c	/^static const char*const luaX_tokens[]={$/;"	v	file:
luaY_checklimit	host/minilua.c	3656;"	d	file:
luaY_parser	host/minilua.c	/^static Proto*luaY_parser(lua_State*L,ZIO*z,Mbuffer*buff,const char*name){$/;"	f	file:
luaZ_buffer	host/minilua.c	399;"	d	file:
luaZ_bufflen	host/minilua.c	401;"	d	file:
luaZ_fill	host/minilua.c	/^static int luaZ_fill(ZIO*z){$/;"	f	file:
luaZ_freebuffer	host/minilua.c	404;"	d	file:
luaZ_init	host/minilua.c	/^static void luaZ_init(lua_State*L,ZIO*z,lua_Reader reader,void*data){$/;"	f	file:
luaZ_initbuffer	host/minilua.c	398;"	d	file:
luaZ_openspace	host/minilua.c	/^static char*luaZ_openspace(lua_State*L,Mbuffer*buff,size_t n){$/;"	f	file:
luaZ_resetbuffer	host/minilua.c	402;"	d	file:
luaZ_resizebuffer	host/minilua.c	403;"	d	file:
luaZ_sizebuffer	host/minilua.c	400;"	d	file:
lua_Alloc	host/minilua.c	/^typedef void*(*lua_Alloc)(void*ud,void*ptr,size_t osize,size_t nsize);$/;"	t	file:
lua_Alloc	lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	host/minilua.c	/^typedef int(*lua_CFunction)(lua_State*L);$/;"	t	file:
lua_CFunction	lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_CPFunction	lj_vm.h	/^typedef TValue *(*lua_CPFunction)(lua_State *L, lua_CFunction func, void *ud);$/;"	t
lua_Chunkreader	lua.h	293;"	d
lua_Chunkwriter	lua.h	294;"	d
lua_Debug	host/minilua.c	/^struct lua_Debug{$/;"	s	file:
lua_Debug	host/minilua.c	/^typedef struct lua_Debug lua_Debug;$/;"	t	typeref:struct:lua_Debug	file:
lua_Debug	lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	host/minilua.c	/^typedef void(*lua_Hook)(lua_State*L,lua_Debug*ar);$/;"	t	file:
lua_Hook	lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	host/minilua.c	/^typedef ptrdiff_t lua_Integer;$/;"	t	file:
lua_Integer	lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Number	host/minilua.c	/^typedef double lua_Number;$/;"	t	file:
lua_Number	lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	host/minilua.c	/^typedef const char*(*lua_Reader)(lua_State*L,void*ud,size_t*sz);$/;"	t	file:
lua_Reader	lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	host/minilua.c	/^struct lua_State{$/;"	s	file:
lua_State	host/minilua.c	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State	file:
lua_State	lj_obj.h	/^struct lua_State {$/;"	s
lua_State	lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	host/minilua.c	/^typedef struct lua_TValue{$/;"	s	file:
lua_Writer	lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t
lua_assert	lj_def.h	305;"	d
lua_assert	luaconf.h	126;"	d
lua_assert	lualib.h	40;"	d
lua_atpanic	host/minilua.c	/^static lua_CFunction lua_atpanic(lua_State*L,lua_CFunction panicf){$/;"	f	file:
lua_atpanic	lj_err.c	/^LUA_API lua_CFunction lua_atpanic(lua_State *L, lua_CFunction panicf)$/;"	f
lua_call	host/minilua.c	/^static void lua_call(lua_State*L,int nargs,int nresults){$/;"	f	file:
lua_call	lj_api.c	/^LUA_API void lua_call(lua_State *L, int nargs, int nresults)$/;"	f
lua_checkstack	host/minilua.c	/^static int lua_checkstack(lua_State*L,int size){$/;"	f	file:
lua_checkstack	lj_api.c	/^LUA_API int lua_checkstack(lua_State *L, int size)$/;"	f
lua_close	host/minilua.c	/^static void lua_close(lua_State*L){$/;"	f	file:
lua_close	lj_state.c	/^LUA_API void lua_close(lua_State *L)$/;"	f
lua_concat	host/minilua.c	/^static void lua_concat(lua_State*L,int n){$/;"	f	file:
lua_concat	lj_api.c	/^LUA_API void lua_concat(lua_State *L, int n)$/;"	f
lua_cpcall	lj_api.c	/^LUA_API int lua_cpcall(lua_State *L, lua_CFunction func, void *ud)$/;"	f
lua_createtable	host/minilua.c	/^static void lua_createtable(lua_State*L,int narray,int nrec){$/;"	f	file:
lua_createtable	lj_api.c	/^LUA_API void lua_createtable(lua_State *L, int narray, int nrec)$/;"	f
lua_dump	lj_load.c	/^LUA_API int lua_dump(lua_State *L, lua_Writer writer, void *data)$/;"	f
lua_equal	lj_api.c	/^LUA_API int lua_equal(lua_State *L, int idx1, int idx2)$/;"	f
lua_error	host/minilua.c	/^static int lua_error(lua_State*L){$/;"	f	file:
lua_error	lj_err.c	/^LUA_API int lua_error(lua_State *L)$/;"	f
lua_gc	lj_api.c	/^LUA_API int lua_gc(lua_State *L, int what, int data)$/;"	f
lua_getallocf	lj_api.c	/^LUA_API lua_Alloc lua_getallocf(lua_State *L, void **ud)$/;"	f
lua_getfenv	host/minilua.c	/^static void lua_getfenv(lua_State*L,int idx){$/;"	f	file:
lua_getfenv	lj_api.c	/^LUA_API void lua_getfenv(lua_State *L, int idx)$/;"	f
lua_getfield	host/minilua.c	/^static void lua_getfield(lua_State*L,int idx,const char*k){$/;"	f	file:
lua_getfield	lj_api.c	/^LUA_API void lua_getfield(lua_State *L, int idx, const char *k)$/;"	f
lua_getgccount	lua.h	291;"	d
lua_getglobal	lua.h	277;"	d
lua_gethook	lj_dispatch.c	/^LUA_API lua_Hook lua_gethook(lua_State *L)$/;"	f
lua_gethookcount	lj_dispatch.c	/^LUA_API int lua_gethookcount(lua_State *L)$/;"	f
lua_gethookmask	lj_dispatch.c	/^LUA_API int lua_gethookmask(lua_State *L)$/;"	f
lua_getinfo	host/minilua.c	/^static int lua_getinfo(lua_State*L,const char*what,lua_Debug*ar){$/;"	f	file:
lua_getinfo	lj_debug.c	/^LUA_API int lua_getinfo(lua_State *L, const char *what, lua_Debug *ar)$/;"	f
lua_getlocal	lj_debug.c	/^LUA_API const char *lua_getlocal(lua_State *L, const lua_Debug *ar, int n)$/;"	f
lua_getmetatable	host/minilua.c	/^static int lua_getmetatable(lua_State*L,int objindex){$/;"	f	file:
lua_getmetatable	lj_api.c	/^LUA_API int lua_getmetatable(lua_State *L, int idx)$/;"	f
lua_getref	lauxlib.h	162;"	d
lua_getregistry	lua.h	289;"	d
lua_getstack	host/minilua.c	/^static int lua_getstack(lua_State*L,int level,lua_Debug*ar){$/;"	f	file:
lua_getstack	lj_debug.c	/^LUA_API int lua_getstack(lua_State *L, int level, lua_Debug *ar)$/;"	f
lua_gettable	host/minilua.c	/^static void lua_gettable(lua_State*L,int idx){$/;"	f	file:
lua_gettable	lj_api.c	/^LUA_API void lua_gettable(lua_State *L, int idx)$/;"	f
lua_gettop	host/minilua.c	/^static int lua_gettop(lua_State*L){$/;"	f	file:
lua_gettop	lj_api.c	/^LUA_API int lua_gettop(lua_State *L)$/;"	f
lua_getupvalue	lj_api.c	/^LUA_API const char *lua_getupvalue(lua_State *L, int idx, int n)$/;"	f
lua_h	lua.h	10;"	d
lua_insert	host/minilua.c	/^static void lua_insert(lua_State*L,int idx){$/;"	f	file:
lua_insert	lj_api.c	/^LUA_API void lua_insert(lua_State *L, int idx)$/;"	f
lua_isboolean	host/minilua.c	184;"	d	file:
lua_isboolean	lua.h	268;"	d
lua_iscfunction	host/minilua.c	/^static int lua_iscfunction(lua_State*L,int idx){$/;"	f	file:
lua_iscfunction	lj_api.c	/^LUA_API int lua_iscfunction(lua_State *L, int idx)$/;"	f
lua_isfunction	host/minilua.c	181;"	d	file:
lua_isfunction	lua.h	264;"	d
lua_islightuserdata	lua.h	266;"	d
lua_isnil	host/minilua.c	183;"	d	file:
lua_isnil	lua.h	267;"	d
lua_isnone	host/minilua.c	185;"	d	file:
lua_isnone	lua.h	270;"	d
lua_isnoneornil	host/minilua.c	186;"	d	file:
lua_isnoneornil	lua.h	271;"	d
lua_isnumber	host/minilua.c	/^static int lua_isnumber(lua_State*L,int idx){$/;"	f	file:
lua_isnumber	lj_api.c	/^LUA_API int lua_isnumber(lua_State *L, int idx)$/;"	f
lua_isstring	host/minilua.c	/^static int lua_isstring(lua_State*L,int idx){$/;"	f	file:
lua_isstring	lj_api.c	/^LUA_API int lua_isstring(lua_State *L, int idx)$/;"	f
lua_istable	host/minilua.c	182;"	d	file:
lua_istable	lua.h	265;"	d
lua_isthread	lua.h	269;"	d
lua_isuserdata	lj_api.c	/^LUA_API int lua_isuserdata(lua_State *L, int idx)$/;"	f
lua_lessthan	host/minilua.c	/^static int lua_lessthan(lua_State*L,int index1,int index2){$/;"	f	file:
lua_lessthan	lj_api.c	/^LUA_API int lua_lessthan(lua_State *L, int idx1, int idx2)$/;"	f
lua_load	host/minilua.c	/^static int lua_load(lua_State*L,lua_Reader reader,void*data,$/;"	f	file:
lua_load	lj_load.c	/^LUA_API int lua_load(lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_loadx	lj_load.c	/^LUA_API int lua_loadx(lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_longjmp	host/minilua.c	/^struct lua_longjmp{$/;"	s	file:
lua_newstate	host/minilua.c	/^static lua_State*lua_newstate(lua_Alloc f,void*ud){$/;"	f	file:
lua_newstate	lib_aux.c	/^LUA_API lua_State *lua_newstate(lua_Alloc f, void *ud)$/;"	f
lua_newtable	host/minilua.c	178;"	d	file:
lua_newtable	lua.h	256;"	d
lua_newthread	lj_api.c	/^LUA_API lua_State *lua_newthread(lua_State *L)$/;"	f
lua_newuserdata	host/minilua.c	/^static void*lua_newuserdata(lua_State*L,size_t size){$/;"	f	file:
lua_newuserdata	lj_api.c	/^LUA_API void *lua_newuserdata(lua_State *L, size_t size)$/;"	f
lua_next	host/minilua.c	/^static int lua_next(lua_State*L,int idx){$/;"	f	file:
lua_next	lj_api.c	/^LUA_API int lua_next(lua_State *L, int idx)$/;"	f
lua_number2int	host/minilua.c	157;"	d	file:
lua_number2integer	host/minilua.c	158;"	d	file:
lua_number2str	host/minilua.c	144;"	d	file:
lua_number2str	luaconf.h	103;"	d
lua_objlen	host/minilua.c	/^static size_t lua_objlen(lua_State*L,int idx){$/;"	f	file:
lua_objlen	lj_api.c	/^LUA_API size_t lua_objlen(lua_State *L, int idx)$/;"	f
lua_open	lua.h	287;"	d
lua_pcall	host/minilua.c	/^static int lua_pcall(lua_State*L,int nargs,int nresults,int errfunc){$/;"	f	file:
lua_pcall	lj_api.c	/^LUA_API int lua_pcall(lua_State *L, int nargs, int nresults, int errfunc)$/;"	f
lua_pclose	host/minilua.c	161;"	d	file:
lua_pop	host/minilua.c	177;"	d	file:
lua_pop	lua.h	254;"	d
lua_pushboolean	host/minilua.c	/^static void lua_pushboolean(lua_State*L,int b){$/;"	f	file:
lua_pushboolean	lj_api.c	/^LUA_API void lua_pushboolean(lua_State *L, int b)$/;"	f
lua_pushcclosure	host/minilua.c	/^static void lua_pushcclosure(lua_State*L,lua_CFunction fn,int n){$/;"	f	file:
lua_pushcclosure	lj_api.c	/^LUA_API void lua_pushcclosure(lua_State *L, lua_CFunction f, int n)$/;"	f
lua_pushcfunction	host/minilua.c	179;"	d	file:
lua_pushcfunction	lua.h	260;"	d
lua_pushfstring	host/minilua.c	/^static const char*lua_pushfstring(lua_State*L,const char*fmt,...){$/;"	f	file:
lua_pushfstring	lj_api.c	/^LUA_API const char *lua_pushfstring(lua_State *L, const char *fmt, ...)$/;"	f
lua_pushinteger	host/minilua.c	/^static void lua_pushinteger(lua_State*L,lua_Integer n){$/;"	f	file:
lua_pushinteger	lj_api.c	/^LUA_API void lua_pushinteger(lua_State *L, lua_Integer n)$/;"	f
lua_pushlightuserdata	lj_api.c	/^LUA_API void lua_pushlightuserdata(lua_State *L, void *p)$/;"	f
lua_pushliteral	host/minilua.c	187;"	d	file:
lua_pushliteral	lua.h	273;"	d
lua_pushlstring	host/minilua.c	/^static void lua_pushlstring(lua_State*L,const char*s,size_t len){$/;"	f	file:
lua_pushlstring	lj_api.c	/^LUA_API void lua_pushlstring(lua_State *L, const char *str, size_t len)$/;"	f
lua_pushnil	host/minilua.c	/^static void lua_pushnil(lua_State*L){$/;"	f	file:
lua_pushnil	lj_api.c	/^LUA_API void lua_pushnil(lua_State *L)$/;"	f
lua_pushnumber	host/minilua.c	/^static void lua_pushnumber(lua_State*L,lua_Number n){$/;"	f	file:
lua_pushnumber	lj_api.c	/^LUA_API void lua_pushnumber(lua_State *L, lua_Number n)$/;"	f
lua_pushstring	host/minilua.c	/^static void lua_pushstring(lua_State*L,const char*s){$/;"	f	file:
lua_pushstring	lj_api.c	/^LUA_API void lua_pushstring(lua_State *L, const char *str)$/;"	f
lua_pushthread	host/minilua.c	/^static int lua_pushthread(lua_State*L){$/;"	f	file:
lua_pushthread	lj_api.c	/^LUA_API int lua_pushthread(lua_State *L)$/;"	f
lua_pushvalue	host/minilua.c	/^static void lua_pushvalue(lua_State*L,int idx){$/;"	f	file:
lua_pushvalue	lj_api.c	/^LUA_API void lua_pushvalue(lua_State *L, int idx)$/;"	f
lua_pushvfstring	host/minilua.c	/^static const char*lua_pushvfstring(lua_State*L,const char*fmt,$/;"	f	file:
lua_pushvfstring	lj_api.c	/^LUA_API const char *lua_pushvfstring(lua_State *L, const char *fmt,$/;"	f
lua_rawequal	host/minilua.c	/^static int lua_rawequal(lua_State*L,int index1,int index2){$/;"	f	file:
lua_rawequal	lj_api.c	/^LUA_API int lua_rawequal(lua_State *L, int idx1, int idx2)$/;"	f
lua_rawget	host/minilua.c	/^static void lua_rawget(lua_State*L,int idx){$/;"	f	file:
lua_rawget	lj_api.c	/^LUA_API void lua_rawget(lua_State *L, int idx)$/;"	f
lua_rawgeti	host/minilua.c	/^static void lua_rawgeti(lua_State*L,int idx,int n){$/;"	f	file:
lua_rawgeti	lj_api.c	/^LUA_API void lua_rawgeti(lua_State *L, int idx, int n)$/;"	f
lua_rawset	host/minilua.c	/^static void lua_rawset(lua_State*L,int idx){$/;"	f	file:
lua_rawset	lj_api.c	/^LUA_API void lua_rawset(lua_State *L, int idx)$/;"	f
lua_rawseti	host/minilua.c	/^static void lua_rawseti(lua_State*L,int idx,int n){$/;"	f	file:
lua_rawseti	lj_api.c	/^LUA_API void lua_rawseti(lua_State *L, int idx, int n)$/;"	f
lua_ref	lauxlib.h	157;"	d
lua_register	lua.h	258;"	d
lua_remove	host/minilua.c	/^static void lua_remove(lua_State*L,int idx){$/;"	f	file:
lua_remove	lj_api.c	/^LUA_API void lua_remove(lua_State *L, int idx)$/;"	f
lua_replace	host/minilua.c	/^static void lua_replace(lua_State*L,int idx){$/;"	f	file:
lua_replace	lj_api.c	/^LUA_API void lua_replace(lua_State *L, int idx)$/;"	f
lua_resume	lj_api.c	/^LUA_API int lua_resume(lua_State *L, int nargs)$/;"	f
lua_setallocf	lj_api.c	/^LUA_API void lua_setallocf(lua_State *L, lua_Alloc f, void *ud)$/;"	f
lua_setfenv	host/minilua.c	/^static int lua_setfenv(lua_State*L,int idx){$/;"	f	file:
lua_setfenv	lj_api.c	/^LUA_API int lua_setfenv(lua_State *L, int idx)$/;"	f
lua_setfield	host/minilua.c	/^static void lua_setfield(lua_State*L,int idx,const char*k){$/;"	f	file:
lua_setfield	lj_api.c	/^LUA_API void lua_setfield(lua_State *L, int idx, const char *k)$/;"	f
lua_setglobal	host/minilua.c	188;"	d	file:
lua_setglobal	lua.h	276;"	d
lua_sethook	lj_dispatch.c	/^LUA_API int lua_sethook(lua_State *L, lua_Hook func, int mask, int count)$/;"	f
lua_setlocal	lj_debug.c	/^LUA_API const char *lua_setlocal(lua_State *L, const lua_Debug *ar, int n)$/;"	f
lua_setmetatable	host/minilua.c	/^static int lua_setmetatable(lua_State*L,int objindex){$/;"	f	file:
lua_setmetatable	lj_api.c	/^LUA_API int lua_setmetatable(lua_State *L, int idx)$/;"	f
lua_settable	host/minilua.c	/^static void lua_settable(lua_State*L,int idx){$/;"	f	file:
lua_settable	lj_api.c	/^LUA_API void lua_settable(lua_State *L, int idx)$/;"	f
lua_settop	host/minilua.c	/^static void lua_settop(lua_State*L,int idx){$/;"	f	file:
lua_settop	lj_api.c	/^LUA_API void lua_settop(lua_State *L, int idx)$/;"	f
lua_setupvalue	lj_api.c	/^LUA_API const char *lua_setupvalue(lua_State *L, int idx, int n)$/;"	f
lua_status	lj_api.c	/^LUA_API int lua_status(lua_State *L)$/;"	f
lua_stdin_is_tty	luajit.c	24;"	d	file:
lua_stdin_is_tty	luajit.c	28;"	d	file:
lua_stdin_is_tty	luajit.c	30;"	d	file:
lua_stdin_is_tty	luajit.c	33;"	d	file:
lua_str2number	host/minilua.c	145;"	d	file:
lua_strlen	host/minilua.c	180;"	d	file:
lua_strlen	lua.h	262;"	d
lua_toboolean	host/minilua.c	/^static int lua_toboolean(lua_State*L,int idx){$/;"	f	file:
lua_toboolean	lj_api.c	/^LUA_API int lua_toboolean(lua_State *L, int idx)$/;"	f
lua_tocfunction	host/minilua.c	/^static lua_CFunction lua_tocfunction(lua_State*L,int idx){$/;"	f	file:
lua_tocfunction	lj_api.c	/^LUA_API lua_CFunction lua_tocfunction(lua_State *L, int idx)$/;"	f
lua_tointeger	host/minilua.c	/^static lua_Integer lua_tointeger(lua_State*L,int idx){$/;"	f	file:
lua_tointeger	lj_api.c	/^LUA_API lua_Integer lua_tointeger(lua_State *L, int idx)$/;"	f
lua_tolstring	host/minilua.c	/^static const char*lua_tolstring(lua_State*L,int idx,size_t*len){$/;"	f	file:
lua_tolstring	lj_api.c	/^LUA_API const char *lua_tolstring(lua_State *L, int idx, size_t *len)$/;"	f
lua_tonumber	host/minilua.c	/^static lua_Number lua_tonumber(lua_State*L,int idx){$/;"	f	file:
lua_tonumber	lj_api.c	/^LUA_API lua_Number lua_tonumber(lua_State *L, int idx)$/;"	f
lua_topointer	lj_api.c	/^LUA_API const void *lua_topointer(lua_State *L, int idx)$/;"	f
lua_tostring	host/minilua.c	189;"	d	file:
lua_tostring	lua.h	279;"	d
lua_tothread	lj_api.c	/^LUA_API lua_State *lua_tothread(lua_State *L, int idx)$/;"	f
lua_touserdata	host/minilua.c	/^static void*lua_touserdata(lua_State*L,int idx){$/;"	f	file:
lua_touserdata	lj_api.c	/^LUA_API void *lua_touserdata(lua_State *L, int idx)$/;"	f
lua_type	host/minilua.c	/^static int lua_type(lua_State*L,int idx){$/;"	f	file:
lua_type	lj_api.c	/^LUA_API int lua_type(lua_State *L, int idx)$/;"	f
lua_typename	host/minilua.c	/^static const char*lua_typename(lua_State*L,int t){$/;"	f	file:
lua_typename	lj_api.c	/^LUA_API const char *lua_typename(lua_State *L, int t)$/;"	f
lua_unref	lauxlib.h	160;"	d
lua_upvalueid	lj_api.c	/^LUA_API void *lua_upvalueid(lua_State *L, int idx, int n)$/;"	f
lua_upvalueindex	host/minilua.c	162;"	d	file:
lua_upvalueindex	lua.h	39;"	d
lua_upvaluejoin	lj_api.c	/^LUA_API void lua_upvaluejoin(lua_State *L, int idx1, int n1, int idx2, int n2)$/;"	f
lua_xmove	lj_api.c	/^LUA_API void lua_xmove(lua_State *from, lua_State *to, int n)$/;"	f
lua_yield	lj_api.c	/^LUA_API int lua_yield(lua_State *L, int nresults)$/;"	f
luaconf_h	luaconf.h	7;"	d
luai_apicheck	host/minilua.c	143;"	d	file:
luai_apicheck	luaconf.h	129;"	d
luai_apicheck	luaconf.h	131;"	d
luai_numadd	host/minilua.c	146;"	d	file:
luai_numdiv	host/minilua.c	149;"	d	file:
luai_numeq	host/minilua.c	153;"	d	file:
luai_numisnan	host/minilua.c	156;"	d	file:
luai_numle	host/minilua.c	155;"	d	file:
luai_numlt	host/minilua.c	154;"	d	file:
luai_nummod	host/minilua.c	150;"	d	file:
luai_nummul	host/minilua.c	148;"	d	file:
luai_numpow	host/minilua.c	151;"	d	file:
luai_numsub	host/minilua.c	147;"	d	file:
luai_numunm	host/minilua.c	152;"	d	file:
luajit_c	luajit.c	13;"	d	file:
lualibs	host/minilua.c	/^static const luaL_Reg lualibs[]={$/;"	v	file:
luaopen_base	host/minilua.c	/^static int luaopen_base(lua_State*L){$/;"	f	file:
luaopen_base	lib_base.c	/^LUALIB_API int luaopen_base(lua_State *L)$/;"	f
luaopen_bit	lib_bit.c	/^LUALIB_API int luaopen_bit(lua_State *L)$/;"	f
luaopen_debug	lib_debug.c	/^LUALIB_API int luaopen_debug(lua_State *L)$/;"	f
luaopen_ffi	lib_ffi.c	/^LUALIB_API int luaopen_ffi(lua_State *L)$/;"	f
luaopen_io	host/minilua.c	/^static int luaopen_io(lua_State*L){$/;"	f	file:
luaopen_io	lib_io.c	/^LUALIB_API int luaopen_io(lua_State *L)$/;"	f
luaopen_jit	lib_jit.c	/^LUALIB_API int luaopen_jit(lua_State *L)$/;"	f
luaopen_math	lib_math.c	/^LUALIB_API int luaopen_math(lua_State *L)$/;"	f
luaopen_os	host/minilua.c	/^static int luaopen_os(lua_State*L){$/;"	f	file:
luaopen_os	lib_os.c	/^LUALIB_API int luaopen_os(lua_State *L)$/;"	f
luaopen_package	lib_package.c	/^LUALIB_API int luaopen_package(lua_State *L)$/;"	f
luaopen_string	host/minilua.c	/^static int luaopen_string(lua_State*L){$/;"	f	file:
luaopen_string	lib_string.c	/^LUALIB_API int luaopen_string(lua_State *L)$/;"	f
luaopen_table	host/minilua.c	/^static int luaopen_table(lua_State*L){$/;"	f	file:
luaopen_table	lib_table.c	/^LUALIB_API int luaopen_table(lua_State *L)$/;"	f
lvl	host/minilua.c	/^int lvl;$/;"	m	struct:luaL_Buffer	file:
lvl	lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer
machine	lj_gdbjit.c	/^  uint16_t machine;$/;"	m	struct:ELFheader	file:
main	host/buildvm.c	/^int main(int argc, char **argv)$/;"	f
main	host/minilua.c	/^int main(int argc,char**argv){$/;"	f
main	luajit.c	/^int main(int argc, char **argv)$/;"	f
mainposition	host/minilua.c	/^static Node*mainposition(const Table*t,const TValue*key){$/;"	f	file:
mainthread	host/minilua.c	/^struct lua_State*mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State	file:
mainthread	lj_obj.h	544;"	d
mainthref	lj_obj.h	/^  GCRef mainthref;	\/* Link to main thread. *\/$/;"	m	struct:global_State
makeasmfunc	lj_vm.h	114;"	d
makehash	host/buildvm_fold.c	/^static void makehash(BuildCtx *ctx)$/;"	f	file:
makemask	lib_debug.c	/^static int makemask(const char *smask, int count)$/;"	f	file:
makewhite	host/minilua.c	1718;"	d	file:
makewhite	lj_gc.h	41;"	d
malloc_chunk	lj_alloc.c	/^struct malloc_chunk {$/;"	s	file:
malloc_segment	lj_alloc.c	/^struct malloc_segment {$/;"	s	file:
malloc_state	lj_alloc.c	/^struct malloc_state {$/;"	s	file:
malloc_tree_chunk	lj_alloc.c	/^struct malloc_tree_chunk {$/;"	s	file:
mapofs	lj_jit.h	/^  uint16_t mapofs;	\/* Offset into snapshot map. *\/$/;"	m	struct:SnapShot
mark_smallmap	lj_alloc.c	551;"	d	file:
mark_treemap	lj_alloc.c	555;"	d	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:GCheader	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Proto	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:TString::__anon9	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Table	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Udata::__anon10	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:UpVal	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:lua_State	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
marked	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
markfinalized	host/minilua.c	1723;"	d	file:
markfinalized	lj_gc.h	46;"	d
markmt	host/minilua.c	/^static void markmt(global_State*g){$/;"	f	file:
markobject	host/minilua.c	1725;"	d	file:
markroot	host/minilua.c	/^static void markroot(lua_State*L){$/;"	f	file:
marktmu	host/minilua.c	/^static void marktmu(global_State*g){$/;"	f	file:
markupval	host/minilua.c	/^static void markupval(FuncState*fs,int level){$/;"	f	file:
markvalue	host/minilua.c	1724;"	d	file:
match	host/minilua.c	/^static const char*match(MatchState*ms,const char*s,const char*p){$/;"	f	file:
match	lib_string.c	/^static const char *match(MatchState *ms, const char *s, const char *p)$/;"	f	file:
match_capture	host/minilua.c	/^static const char*match_capture(MatchState*ms,const char*s,int l){$/;"	f	file:
match_capture	lib_string.c	/^static const char *match_capture(MatchState *ms, const char *s, int l)$/;"	f	file:
match_class	host/minilua.c	/^static int match_class(int c,int cl){$/;"	f	file:
match_class	lib_string.c	/^static int match_class(int c, int cl)$/;"	f	file:
match_class_map	lib_string.c	/^static const unsigned char match_class_map[32] = {$/;"	v	file:
matchbalance	host/minilua.c	/^static const char*matchbalance(MatchState*ms,const char*s,$/;"	f	file:
matchbalance	lib_string.c	/^static const char *matchbalance(MatchState *ms, const char *s, const char *p)$/;"	f	file:
matchbracketclass	host/minilua.c	/^static int matchbracketclass(int c,const char*p,const char*ec){$/;"	f	file:
matchbracketclass	lib_string.c	/^static int matchbracketclass(int c, const char *p, const char *ec)$/;"	f	file:
max_expand	host/minilua.c	/^static const char*max_expand(MatchState*ms,const char*s,$/;"	f	file:
max_expand	lib_string.c	/^static const char *max_expand(MatchState *ms, const char *s,$/;"	f	file:
maxslot	lj_jit.h	/^  BCReg maxslot;	\/* Relative to baseslot. *\/$/;"	m	struct:jit_State
maxsp	lj_opt_narrow.c	/^  NarrowIns *maxsp;	\/* Maximum stack pointer minus redzone. *\/$/;"	m	struct:NarrowConv	file:
maxstack	lj_obj.h	/^  MRef maxstack;	\/* Last free slot in the stack. *\/$/;"	m	struct:lua_State
maxstacksize	host/minilua.c	/^lu_byte maxstacksize;$/;"	m	struct:Proto	file:
mayfuse	lj_asm.c	104;"	d	file:
mcaddr	lj_gdbjit.c	/^  uintptr_t mcaddr;	\/* Machine code address. *\/$/;"	m	struct:GDBJITctx	file:
mcarea	lj_jit.h	/^  MCode *mcarea;	\/* Base of current mcode area. *\/$/;"	m	struct:jit_State
mcbot	lj_asm.c	/^  MCode *mcbot;		\/* Bottom of reserved MCode. *\/$/;"	m	struct:ASMState	file:
mcbot	lj_jit.h	/^  MCode *mcbot;		\/* Bottom of current mcode area. *\/$/;"	m	struct:jit_State
mchunk	lj_alloc.c	/^typedef struct malloc_chunk  mchunk;$/;"	t	typeref:struct:malloc_chunk	file:
mchunkptr	lj_alloc.c	/^typedef struct malloc_chunk *mchunkptr;$/;"	t	typeref:struct:malloc_chunk	file:
mclim	lj_asm.c	/^  MCode *mclim;		\/* Lower limit for MCode memory + red zone. *\/$/;"	m	struct:ASMState	file:
mcloop	lj_asm.c	/^  MCode *mcloop;	\/* Pointer to loop MCode (or NULL). *\/$/;"	m	struct:ASMState	file:
mcloop	lj_jit.h	/^  MSize mcloop;		\/* Offset of loop start in machine code. *\/$/;"	m	struct:GCtrace
mcode	lj_ctype.h	/^  void *mcode;			\/* Machine code for callback func. pointers. *\/$/;"	m	struct:CCallback
mcode	lj_jit.h	/^  MCode *mcode;		\/* Start of machine code. *\/$/;"	m	struct:GCtrace
mcode_alloc	lj_mcode.c	/^static void *mcode_alloc(jit_State *J, size_t sz)$/;"	f	file:
mcode_alloc	lj_mcode.c	242;"	d	file:
mcode_alloc_at	lj_mcode.c	/^static void *mcode_alloc_at(jit_State *J, uintptr_t hint, size_t sz, DWORD prot)$/;"	f	file:
mcode_alloc_at	lj_mcode.c	/^static void *mcode_alloc_at(jit_State *J, uintptr_t hint, size_t sz, int prot)$/;"	f	file:
mcode_allocarea	lj_mcode.c	/^static void mcode_allocarea(jit_State *J)$/;"	f	file:
mcode_free	lj_mcode.c	/^static void mcode_free(jit_State *J, void *p, size_t sz)$/;"	f	file:
mcode_protect	lj_mcode.c	/^static void mcode_protect(jit_State *J, int prot)$/;"	f	file:
mcode_setprot	lj_mcode.c	/^static void mcode_setprot(void *p, size_t sz, DWORD prot)$/;"	f	file:
mcode_setprot	lj_mcode.c	/^static void mcode_setprot(void *p, size_t sz, int prot)$/;"	f	file:
mcode_setprot	lj_mcode.c	141;"	d	file:
mcode_validptr	lj_mcode.c	195;"	d	file:
mcode_validptr	lj_mcode.c	197;"	d	file:
mcp	lj_asm.c	/^  MCode *mcp;		\/* Current MCode pointer (grows down). *\/$/;"	m	struct:ASMState	file:
mcprot	lj_jit.h	/^  int mcprot;		\/* Protection of current mcode area. *\/$/;"	m	struct:jit_State
mctop	lj_asm.c	/^  MCode *mctop;		\/* Top of generated MCode. *\/$/;"	m	struct:ASMState	file:
mctop	lj_jit.h	/^  MCode *mctop;		\/* Top of current mcode area. *\/$/;"	m	struct:jit_State
mem2chunk	lj_alloc.c	328;"	d	file:
mem_alloc	lib_aux.c	/^static void *mem_alloc(void *ud, void *ptr, size_t osize, size_t nsize)$/;"	f	file:
memcdatav	lj_obj.h	282;"	d
memcpy_endian	host/buildvm_lib.c	/^static void memcpy_endian(void *dst, void *src, size_t n)$/;"	f	file:
merge_header	host/genminilua.lua	/^local function merge_header(src, license)$/;"	f
merge_href_niltv	lj_asm_x86.h	/^static MCode *merge_href_niltv(ASMState *as, IRIns *ir)$/;"	f
merge_includes	host/genminilua.lua	/^local function merge_includes(src)$/;"	f
mergesnap	lj_jit.h	/^  uint8_t mergesnap;	\/* Allowed to merge with next snapshot. *\/$/;"	m	struct:jit_State
meta_tostring	lib_string.c	/^static GCstr *meta_tostring(lua_State *L, int arg)$/;"	f	file:
metatable	host/minilua.c	/^struct Table*metatable;$/;"	m	struct:Table	typeref:struct:Table::Table	file:
metatable	host/minilua.c	/^struct Table*metatable;$/;"	m	struct:Udata::__anon10	typeref:struct:Udata::__anon10::Table	file:
metatable	lj_obj.h	/^  GCRef metatable;	\/* Must be at same offset in GCtab. *\/$/;"	m	struct:GCudata
metatable	lj_obj.h	/^  GCRef metatable;	\/* Must be at same offset in GCudata. *\/$/;"	m	struct:GCtab
metatable	lj_obj.h	/^  GCRef metatable;$/;"	m	struct:GChead
min_expand	host/minilua.c	/^static const char*min_expand(MatchState*ms,const char*s,$/;"	f	file:
min_expand	lib_string.c	/^static const char *min_expand(MatchState *ms, const char *s,$/;"	f	file:
minsize_for_tree_index	lj_alloc.c	541;"	d	file:
miscmap	lj_ctype.h	/^  GCtab *miscmap;	\/* Map of -CTypeID to metatable and cb slot to func. *\/$/;"	m	struct:CTState
mksymname	lib_package.c	/^static const char *mksymname(lua_State *L, const char *modname,$/;"	f	file:
mmap_align	lj_alloc.c	465;"	d	file:
mmap_align	lj_alloc.c	467;"	d	file:
mmcall	lj_meta.c	/^static TValue *mmcall(lua_State *L, ASMFunction cont, cTValue *mo,$/;"	f	file:
mmname_str	lj_obj.h	489;"	d
mmudata	lj_obj.h	/^  GCRef mmudata;	\/* List of userdata (to be finalized). *\/$/;"	m	struct:GCState
mobj	lj_record.h	/^  TRef mobj;		\/* Metamethod object reference. *\/$/;"	m	struct:RecordIndex
mobjv	lj_record.h	/^  TValue mobjv;		\/* Runtime value of metamethod object. *\/$/;"	m	struct:RecordIndex
mode	host/buildvm.h	/^  BuildMode mode;$/;"	m	struct:BuildCtx
mode	lj_cparse.c	/^  uint32_t mode;	\/* Declarator mode. *\/$/;"	m	struct:CPDecl	file:
mode	lj_cparse.h	/^  uint32_t mode;	\/* C parser mode. *\/$/;"	m	struct:CPState
mode	lj_jit.h	/^  IRRef mode;		\/* Mode for this entry (currently IRCONV_*). *\/$/;"	m	struct:BPropEntry
mode	lj_lex.h	/^  const char *mode;	\/* Allow loading bytecode (b) and\/or source text (t). *\/$/;"	m	struct:LexState
mode	lj_opt_narrow.c	/^  IRRef mode;		\/* Conversion mode (IRCONV_*). *\/$/;"	m	struct:NarrowConv	file:
modenames	host/buildvm.c	/^static const char *const modenames[] = {$/;"	v	file:
modinit	lib_package.c	/^static void modinit(lua_State *L, const char *modname)$/;"	f	file:
modname	host/buildvm_lib.c	/^static char modname[80];$/;"	v	file:
modnamelen	host/buildvm_lib.c	/^static size_t modnamelen;$/;"	v	file:
modset	lj_asm.c	/^  RegSet modset;	\/* Set of registers modified inside the loop. *\/$/;"	m	struct:ASMState	file:
modstate	host/buildvm_lib.c	/^static int modstate, regfunc;$/;"	v	file:
mref	lj_obj.h	26;"	d
mrm	lj_asm.c	/^  x86ModRM mrm;		\/* Fused x86 address operand. *\/$/;"	m	struct:ASMState	file:
msegment	lj_alloc.c	/^typedef struct malloc_segment  msegment;$/;"	t	typeref:struct:malloc_segment	file:
msegmentptr	lj_alloc.c	/^typedef struct malloc_segment *msegmentptr;$/;"	t	typeref:struct:malloc_segment	file:
mstate	lj_alloc.c	/^typedef struct malloc_state *mstate;$/;"	t	typeref:struct:malloc_state	file:
mt	host/minilua.c	/^struct Table*mt[(8+1)];$/;"	m	struct:global_State	typeref:struct:global_State::Table	file:
mt	lj_record.h	/^  TRef mt;		\/* Metatable reference. *\/$/;"	m	struct:RecordIndex
mtv	lj_record.h	/^  GCtab *mtv;		\/* Runtime value of metatable object. *\/$/;"	m	struct:RecordIndex
n	host/buildvm_peobj.c	/^  } n;$/;"	m	struct:PEsym	typeref:union:PEsym::__anon2	file:
n	host/minilua.c	/^lua_Number n;$/;"	m	union:__anon8	file:
n	host/minilua.c	/^size_t n;$/;"	m	struct:Mbuffer	file:
n	host/minilua.c	/^size_t n;$/;"	m	struct:Zio	file:
n	lj_lex.h	/^  MSize n;		\/* Bytes left in input buffer. *\/$/;"	m	struct:LexState
n	lj_obj.h	/^  MSize n;		\/* String buffer length. *\/$/;"	m	struct:SBuf
n	lj_obj.h	/^  lua_Number n;		\/* Number object overlaps split tag\/value object. *\/$/;"	m	union:TValue
nCcalls	host/minilua.c	/^unsigned short nCcalls;$/;"	m	struct:lua_State	file:
na	host/minilua.c	/^int na;$/;"	m	struct:ConsControl	file:
nactvar	host/minilua.c	/^lu_byte nactvar;$/;"	m	struct:BlockCnt	file:
nactvar	host/minilua.c	/^lu_byte nactvar;$/;"	m	struct:FuncState	file:
nactvar	lj_parse.c	/^  BCReg nactvar;		\/* Number of active local variables. *\/$/;"	m	struct:FuncState	file:
nactvar	lj_parse.c	/^  uint8_t nactvar;		\/* Number of active vars outside the scope. *\/$/;"	m	struct:FuncScope	file:
name	host/buildvm.h	/^  const char *name;$/;"	m	struct:BuildSym
name	host/buildvm_peobj.c	/^    char name[8];$/;"	m	union:PEsym::__anon2	file:
name	host/buildvm_peobj.c	/^  char name[8];$/;"	m	struct:PEsection	file:
name	host/minilua.c	/^const char*name;$/;"	m	struct:SParser	file:
name	host/minilua.c	/^const char*name;$/;"	m	struct:luaL_Reg	file:
name	host/minilua.c	/^const char*name;$/;"	m	struct:lua_Debug	file:
name	lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	lj_cparse.c	/^  GCstr *name;		\/* Name of declared identifier (if direct). *\/$/;"	m	struct:CPDecl	file:
name	lj_ctype.h	/^  GCRef name;		\/* Element name (GCstr). *\/$/;"	m	struct:CType
name	lj_debug.h	/^  const char *name;$/;"	m	struct:lj_Debug
name	lj_gdbjit.c	/^  uint32_t name;$/;"	m	struct:ELFsectheader	file:
name	lj_gdbjit.c	/^  uint32_t name;$/;"	m	struct:ELFsymbol	file:
name	lj_lex.h	/^  GCRef name;		\/* Local variable name or goto\/label name. *\/$/;"	m	struct:VarInfo
name	lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
nameid	lj_cparse.c	/^  CTypeID nameid;	\/* Existing typedef for declared identifier. *\/$/;"	m	struct:CPDecl	file:
nameref	host/buildvm_peobj.c	/^    uint32_t nameref[2];$/;"	m	union:PEsym::__anon2	file:
namewhat	host/minilua.c	/^const char*namewhat;$/;"	m	struct:lua_Debug	file:
namewhat	lj_debug.h	/^  const char *namewhat;$/;"	m	struct:lj_Debug
namewhat	lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug
narrow_bpc_get	lj_opt_narrow.c	/^static BPropEntry *narrow_bpc_get(jit_State *J, IRRef1 key, IRRef mode)$/;"	f	file:
narrow_bpc_set	lj_opt_narrow.c	/^static void narrow_bpc_set(jit_State *J, IRRef1 key, IRRef1 val, IRRef mode)$/;"	f	file:
narrow_conv_backprop	lj_opt_narrow.c	/^static int narrow_conv_backprop(NarrowConv *nc, IRRef ref, int depth)$/;"	f	file:
narrow_conv_emit	lj_opt_narrow.c	/^static IRRef narrow_conv_emit(jit_State *J, NarrowConv *nc)$/;"	f	file:
narrow_forl	lj_opt_narrow.c	/^static int narrow_forl(jit_State *J, cTValue *o)$/;"	f	file:
narrow_op	lj_opt_narrow.c	200;"	d	file:
narrow_ref	lj_opt_narrow.c	201;"	d	file:
narrow_stripov	lj_opt_narrow.c	/^static TRef narrow_stripov(jit_State *J, TRef tr, int lastop, IRRef mode)$/;"	f	file:
narrow_stripov_backprop	lj_opt_narrow.c	/^static void narrow_stripov_backprop(NarrowConv *nc, IRRef ref, int depth)$/;"	f	file:
naux	host/buildvm_peobj.c	/^  uint8_t naux;$/;"	m	struct:PEsym	file:
nchild	lj_jit.h	/^  uint16_t nchild;	\/* Number of child traces (root trace only). *\/$/;"	m	struct:GCtrace
need_value	host/minilua.c	/^static int need_value(FuncState*fs,int list){$/;"	f	file:
needsnap	lj_jit.h	/^  uint8_t needsnap;	\/* Need snapshot before recording next bytecode. *\/$/;"	m	struct:jit_State
needsp	lj_ctype.c	/^  int needsp;$/;"	m	struct:CTRepr	file:
needsplit	lj_jit.h	/^  int needsplit;	\/* Need SPLIT pass. *\/$/;"	m	struct:jit_State
nent	lj_jit.h	/^  uint8_t nent;		\/* Number of compressed entries. *\/$/;"	m	struct:SnapShot
neverfuse	lj_asm.c	105;"	d	file:
new_localvar	host/minilua.c	/^static void new_localvar(LexState*ls,TString*name,int n){$/;"	f	file:
new_localvarliteral	host/minilua.c	3739;"	d	file:
newfenv	host/minilua.c	/^static void newfenv(lua_State*L,lua_CFunction cls){$/;"	f	file:
newfile	host/minilua.c	/^static FILE**newfile(lua_State*L){$/;"	f	file:
newhpart	lj_tab.c	/^static LJ_AINLINE void newhpart(lua_State *L, GCtab *t, uint32_t hbits)$/;"	f	file:
newkey	host/minilua.c	/^static TValue*newkey(lua_State*L,Table*t,const TValue*key){$/;"	f	file:
newlstr	host/minilua.c	/^static TString*newlstr(lua_State*L,const char*str,size_t l,$/;"	f	file:
newproxy_weaktable	lib_base.c	/^static void newproxy_weaktable(lua_State *L)$/;"	f	file:
newtab	lj_tab.c	/^static GCtab *newtab(lua_State *L, uint32_t asize, uint32_t hbits)$/;"	f	file:
newwhite	lj_gc.h	40;"	d
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:GCheader	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Proto	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:TString::__anon9	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Table	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Udata::__anon10	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:UpVal	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:lua_State	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
next	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
next	host/minilua.c	/^struct Node*next;$/;"	m	struct:TKey::__anon13	typeref:struct:TKey::__anon13::Node	file:
next	host/minilua.c	/^struct UpVal*next;$/;"	m	struct:UpVal::__anon11::__anon12	typeref:struct:UpVal::__anon11::__anon12::UpVal	file:
next	host/minilua.c	2659;"	d	file:
next	lj_alloc.c	/^  struct malloc_segment *next;   \/* ptr to next segment *\/$/;"	m	struct:malloc_segment	typeref:struct:malloc_segment::malloc_segment	file:
next	lj_ctype.h	/^  CTypeID1 next;	\/* Next element in hash chain. *\/$/;"	m	struct:CType
next	lj_ir.c	/^  MRef next;			\/* Pointer to next list. *\/$/;"	m	struct:K64Array	file:
next	lj_lex.c	41;"	d	file:
next	lj_mcode.c	/^  MCode *next;		\/* Next area. *\/$/;"	m	struct:MCLink	file:
next	lj_obj.h	/^      GCRef next;$/;"	m	struct:GCupval::__anon105::__anon106
next	lj_obj.h	/^  MRef next;		\/* Hash chain. *\/$/;"	m	struct:Node
next_chunk	lj_alloc.c	366;"	d	file:
next_entry	lj_gdbjit.c	/^  struct GDBJITentry *next_entry;$/;"	m	struct:GDBJITentry	typeref:struct:GDBJITentry::GDBJITentry	file:
next_pinuse	lj_alloc.c	370;"	d	file:
nextnode	lj_obj.h	425;"	d
nextroot	lj_jit.h	/^  TraceNo1 nextroot;	\/* Next root trace for same prototype. *\/$/;"	m	struct:GCtrace
nextside	lj_jit.h	/^  TraceNo1 nextside;	\/* Next side trace of same root trace. *\/$/;"	m	struct:GCtrace
nexttoken	host/buildvm_fold.c	/^static uint32_t nexttoken(char **pp, int allowlit, int allowany)$/;"	f	file:
nfpr	lj_ccall.h	/^  uint8_t nfpr;			\/* Number of arguments in FPRs. *\/$/;"	m	struct:CCallState
ngcotouv	host/minilua.c	507;"	d	file:
nglob	host/buildvm.h	/^  int npc, nglob, nsym, nreloc, nrelocsym;$/;"	m	struct:BuildCtx
ngpr	lj_ccall.h	/^  uint8_t ngpr;			\/* Number of arguments in GPRs. *\/$/;"	m	struct:CCallState
nh	host/minilua.c	/^int nh;$/;"	m	struct:ConsControl	file:
nilK	host/minilua.c	/^static int nilK(FuncState*fs){$/;"	f	file:
nilnode	lj_obj.h	/^  Node nilnode;		\/* Fallback 1-element hash part (nil key and value). *\/$/;"	m	struct:global_State
niltv	lj_obj.h	545;"	d
niltvg	lj_obj.h	547;"	d
nins	lj_jit.h	/^  IRRef nins;		\/* Next IR instruction. Biased with REF_BIAS. *\/$/;"	m	struct:GCtrace
nk	host/minilua.c	/^int nk;$/;"	m	struct:FuncState	file:
nk	host/minilua.c	/^}nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon13	file:
nk	lj_jit.h	/^  IRRef nk;		\/* Lowest IR constant. Biased with REF_BIAS. *\/$/;"	m	struct:GCtrace
nkeys	host/buildvm_fold.c	/^static uint32_t nkeys;$/;"	v	file:
nkgc	lj_parse.c	/^  BCReg nkn, nkgc;		\/* Number of lua_Number\/GCobj constants *\/$/;"	m	struct:FuncState	file:
nkn	lj_parse.c	/^  BCReg nkn, nkgc;		\/* Number of lua_Number\/GCobj constants *\/$/;"	m	struct:FuncState	file:
nline	host/buildvm_peobj.c	/^  uint16_t nline;$/;"	m	struct:PEsection	file:
nline	host/buildvm_peobj.c	/^  uint16_t nline;$/;"	m	struct:PEsymaux	file:
nlocvars	host/minilua.c	/^short nlocvars;$/;"	m	struct:FuncState	file:
noconflict	lj_asm_arm.h	/^static int noconflict(ASMState *as, IRRef ref, IROp conflict)$/;"	f
noconflict	lj_asm_mips.h	/^static int noconflict(ASMState *as, IRRef ref, IROp conflict)$/;"	f
noconflict	lj_asm_ppc.h	/^static int noconflict(ASMState *as, IRRef ref, IROp conflict)$/;"	f
noconflict	lj_asm_x86.h	/^static int noconflict(ASMState *as, IRRef ref, IROp conflict, int noload)$/;"	f
node	host/minilua.c	/^Node*node;$/;"	m	struct:Table	file:
node	lj_obj.h	/^  MRef node;		\/* Hash part. *\/$/;"	m	struct:GCtab
noderef	lj_obj.h	424;"	d
nomm	lj_obj.h	/^  uint8_t nomm;		\/* Negative cache for fast metamethods. *\/$/;"	m	struct:GCtab
nommstr	lj_record.c	/^static int nommstr(jit_State *J, TRef key)$/;"	f	file:
nop 	jit/dis_x86.lua	/^  nop = function(ctx, name, pat)$/;"	f
notail	luajit.c	392;"	d	file:
np	host/minilua.c	/^int np;$/;"	m	struct:FuncState	file:
nparams	lj_debug.h	/^  int nparams;$/;"	m	struct:lj_Debug
npc	host/buildvm.h	/^  int npc, nglob, nsym, nreloc, nrelocsym;$/;"	m	struct:BuildCtx
nreloc	host/buildvm.h	/^  int npc, nglob, nsym, nreloc, nrelocsym;$/;"	m	struct:BuildCtx
nreloc	host/buildvm_peobj.c	/^  uint16_t nreloc;$/;"	m	struct:PEsection	file:
nreloc	host/buildvm_peobj.c	/^  uint16_t nreloc;$/;"	m	struct:PEsymaux	file:
nrelocsym	host/buildvm.h	/^  int npc, nglob, nsym, nreloc, nrelocsym;$/;"	m	struct:BuildCtx
nres	lj_ffrecord.h	/^  ptrdiff_t nres;	\/* Number of returned results (defaults to 1). *\/$/;"	m	struct:RecordFFData
nresults	host/minilua.c	/^int nresults;$/;"	m	struct:CallInfo	file:
nresults	host/minilua.c	/^int nresults;$/;"	m	struct:CallS	file:
nsects	host/buildvm_peobj.c	/^  uint16_t nsects;$/;"	m	struct:PEheader	file:
nslots	lj_jit.h	/^  uint8_t nslots;	\/* Number of valid slots. *\/$/;"	m	struct:SnapShot
nsnap	lj_jit.h	/^  uint16_t nsnap;	\/* Number of snapshots. *\/$/;"	m	struct:GCtrace
nsnapmap	lj_jit.h	/^  uint16_t nsnapmap;	\/* Number of snapshot map elements. *\/$/;"	m	struct:GCtrace
nsp	lj_ccall.h	/^  uint8_t nsp;			\/* Number of stack slots. *\/$/;"	m	struct:CCallState
nsym	host/buildvm.h	/^  int npc, nglob, nsym, nreloc, nrelocsym;$/;"	m	struct:BuildCtx
nsyms	host/buildvm_peobj.c	/^  uint32_t nsyms;$/;"	m	struct:PEheader	file:
ntavm	lj_alloc.c	/^static PNTAVM ntavm;$/;"	v	file:
num2intfrm	lib_string.c	/^static unsigned LUA_INTFRM_T num2intfrm(lua_State *L, int arg)$/;"	f	file:
num2uintfrm	lib_string.c	/^static unsigned LUA_INTFRM_T num2uintfrm(lua_State *L, int arg)$/;"	f	file:
numV	lj_obj.h	713;"	d
numberVint	lj_obj.h	/^static LJ_AINLINE int32_t numberVint(cTValue *o)$/;"	f
numberVnum	lj_obj.h	/^static LJ_AINLINE lua_Number numberVnum(cTValue *o)$/;"	f
numisint	lj_opt_narrow.c	/^static int numisint(lua_Number n)$/;"	f	file:
numistrueint	lj_ir.c	/^static int numistrueint(lua_Number n, int32_t *kp)$/;"	f	file:
numk	lj_ir.c	/^  MSize numk;			\/* Number of used elements in this array. *\/$/;"	m	struct:K64Array	file:
numline	lj_obj.h	/^  BCLine numline;	\/* Number of lines for the function definition. *\/$/;"	m	struct:GCproto
numparams	host/minilua.c	/^lu_byte numparams;$/;"	m	struct:Proto	file:
numparams	lj_obj.h	/^  uint8_t numparams;	\/* Number of parameters. *\/$/;"	m	struct:GCproto
numparams	lj_parse.c	/^  uint8_t numparams;		\/* Number of parameters. *\/$/;"	m	struct:FuncState	file:
numusearray	host/minilua.c	/^static int numusearray(const Table*t,int*nums){$/;"	f	file:
numusehash	host/minilua.c	/^static int numusehash(const Table*t,int*nums,int*pnasize){$/;"	f	file:
nups	host/minilua.c	/^int nups;$/;"	m	struct:lua_Debug	file:
nups	host/minilua.c	/^lu_byte nups;$/;"	m	struct:Proto	file:
nups	lj_debug.h	/^  int nups;$/;"	m	struct:lj_Debug
nups	lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nupvalues	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
nupvalues	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
nuse	host/minilua.c	/^lu_int32 nuse;$/;"	m	struct:stringtable	file:
nuv	lj_parse.c	/^  uint8_t nuv;			\/* Number of upvalues *\/$/;"	m	struct:FuncState	file:
nval	host/minilua.c	/^lua_Number nval;$/;"	m	union:expdesc::__anon14	file:
nval	lj_parse.c	/^    TValue nval;	\/* Number value. *\/$/;"	m	union:ExpDesc::__anon41	file:
nvalue	host/minilua.c	245;"	d	file:
obj	lj_gdbjit.c	/^  GDBJITobj obj;	\/* In-memory ELF object. *\/$/;"	m	struct:GDBJITctx	file:
obj	lj_gdbjit.c	/^  GDBJITobj obj;$/;"	m	struct:GDBJITentryobj	file:
obj2gco	host/minilua.c	509;"	d	file:
obj2gco	lj_obj.h	641;"	d
objsize	lj_gdbjit.c	/^  size_t objsize;	\/* Final size of ELF object. *\/$/;"	m	struct:GDBJITctx	file:
obuf	host/buildvm_lib.c	/^static uint8_t obuf[8192];$/;"	v	file:
oddspill	lj_asm.c	/^  int32_t oddspill;	\/* Next odd spill slot (or 0). *\/$/;"	m	struct:ASMState	file:
offset	lj_obj.h	/^  uint16_t offset;	\/* Offset to allocated memory (relative to GCcdata). *\/$/;"	m	struct:GCcdataVar
offsetof	lj_jit.h	/^LJ_STATIC_ASSERT(offsetof(GChead, gclist) == offsetof(GCtrace, gclist));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, env) == offsetof(GCfuncL, env));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, env) == offsetof(GCudata, env));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, gclist) == offsetof(GCfuncL, gclist));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, gclist) == offsetof(GCproto, gclist));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, gclist) == offsetof(GCtab, gclist));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, gclist) == offsetof(lua_State, gclist));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, metatable) == offsetof(GCtab, metatable));$/;"	v
offsetof	lj_obj.h	/^LJ_STATIC_ASSERT(offsetof(GChead, metatable) == offsetof(GCudata, metatable));$/;"	v
ofs	host/buildvm.h	/^  int32_t ofs;$/;"	m	struct:BuildReloc
ofs	host/buildvm.h	/^  int32_t ofs;$/;"	m	struct:BuildSym
ofs	host/buildvm_peobj.c	/^  uint32_t ofs;$/;"	m	struct:PEsection	file:
ofs	lj_crecord.c	/^  CTSize ofs;		\/* Offset in bytes. *\/$/;"	m	struct:CRecMemList	file:
ofs	lj_gdbjit.c	/^  uintptr_t ofs;$/;"	m	struct:ELFsectheader	file:
ofs	lj_target_x86.h	/^  int32_t ofs;		\/* Offset. *\/$/;"	m	struct:__anon47
ok	lj_ctype.c	/^  int ok;$/;"	m	struct:CTRepr	file:
oldv	lj_record.h	/^  cTValue *oldv;	\/* Runtime value of previously stored value. *\/$/;"	m	struct:RecordIndex
op12	lj_ir.h	/^    IRRef2 op12;	\/* IR operand 1 and 2 (overlaps op1 and op2). *\/$/;"	m	struct:IRIns::__anon61
opc2 	jit/dis_x86.lua	/^  opc2 = function(ctx, name, pat)$/;"	f
opc3 	jit/dis_x86.lua	/^  opc3 = function(ctx, name, pat)$/;"	f
open_func	host/minilua.c	/^static void open_func(LexState*ls,FuncState*fs){$/;"	f	file:
openupval	host/minilua.c	/^GCObject*openupval;$/;"	m	struct:lua_State	file:
openupval	lj_obj.h	/^  GCRef openupval;	\/* List of open upvalues in the stack. *\/$/;"	m	struct:lua_State
opisfusableload	lj_asm.c	107;"	d	file:
opmode	host/minilua.c	2618;"	d	file:
opt 	jit/dump.lua	/^    opt = gsub(opt, "[TAH]", function(mode) colormode = mode; return ""; end)$/;"	f
opthdrsz	host/buildvm_peobj.c	/^  uint16_t opthdrsz;$/;"	m	struct:PEheader	file:
optr	host/buildvm_lib.c	/^static uint8_t *optr;$/;"	v	file:
orignins	lj_asm.c	/^  IRRef orignins;	\/* Original T->nins. *\/$/;"	m	struct:ASMState	file:
os_exit	host/minilua.c	/^static int os_exit(lua_State*L){$/;"	f	file:
os_pushresult	host/minilua.c	/^static int os_pushresult(lua_State*L,int i,const char*filename){$/;"	f	file:
os_remove	host/minilua.c	/^static int os_remove(lua_State*L){$/;"	f	file:
ot	lj_ir.h	/^    IROpT ot;		\/* IR opcode and type (overlaps t and o). *\/$/;"	m	struct:IRIns::__anon60
other	lj_gdbjit.c	/^  uint8_t other;$/;"	m	struct:ELFsymbol	file:
otherwhite	host/minilua.c	573;"	d	file:
otherwhite	lj_gc.h	36;"	d
outname	host/buildvm.h	/^  const char *outname;$/;"	m	struct:BuildCtx
overhead_for	lj_alloc.c	388;"	d	file:
owrite	host/buildvm.c	/^void owrite(BuildCtx *ctx, const void *ptr, size_t sz)$/;"	f
p	host/minilua.c	/^char*p;$/;"	m	struct:luaL_Buffer	file:
p	host/minilua.c	/^const char*p;$/;"	m	struct:Zio	file:
p	host/minilua.c	/^struct Proto p;$/;"	m	union:GCObject	typeref:struct:GCObject::Proto	file:
p	host/minilua.c	/^struct Proto**p;$/;"	m	struct:Proto	typeref:struct:Proto::Proto	file:
p	host/minilua.c	/^struct Proto*p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto	file:
p	host/minilua.c	/^void*p;$/;"	m	union:__anon8	file:
p	lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer
p	lj_carith.c	/^  uint8_t *p[2];$/;"	m	struct:CDArith	file:
p	lj_cparse.h	/^  const char *p;	\/* Current position in input buffer. *\/$/;"	m	struct:CPState
p	lj_gdbjit.c	/^  uint8_t *p;		\/* Pointer to next address in obj.space. *\/$/;"	m	struct:GDBJITctx	file:
p	lj_lex.h	/^  const char *p;	\/* Current position in input buffer. *\/$/;"	m	struct:LexState
p1	lj_err.c	/^  uintptr_t p1, p2;$/;"	m	struct:_Unwind_Exception	file:
p2	lj_err.c	/^  uintptr_t p1, p2;$/;"	m	struct:_Unwind_Exception	file:
package_global	lib_package.c	/^static const luaL_Reg package_global[] = {$/;"	v	file:
package_lib	lib_package.c	/^static const luaL_Reg package_lib[] = {$/;"	v	file:
package_loaders	lib_package.c	/^static const lua_CFunction package_loaders[] =$/;"	v	file:
packstack	lj_cparse.h	/^  uint8_t packstack[CPARSE_MAX_PACKSTACK];  \/* Stack for pack pragmas. *\/$/;"	m	struct:CPState
pad_request	lj_alloc.c	337;"	d	file:
page_align	lj_alloc.c	456;"	d	file:
panic	host/minilua.c	/^lua_CFunction panic;$/;"	m	struct:global_State	file:
panic	host/minilua.c	/^static int panic(lua_State*L){$/;"	f	file:
panic	lib_aux.c	/^static int panic(lua_State *L)$/;"	f	file:
panic	lj_obj.h	/^  lua_CFunction panic;	\/* Called as a last resort for errors. *\/$/;"	m	struct:global_State
param	lj_cparse.h	/^  TValue *param;	\/* C type parameters. *\/$/;"	m	struct:CPState
param	lj_jit.h	/^  int32_t param[JIT_P__MAX];  \/* JIT engine parameters. *\/$/;"	m	struct:jit_State
parent	lj_alloc.c	/^  struct malloc_tree_chunk *parent;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
parent	lj_asm.c	/^  GCtrace *parent;	\/* Parent trace (or NULL). *\/$/;"	m	struct:ASMState	file:
parent	lj_jit.h	/^  TraceNo parent;	\/* Parent of current side trace (0 for root traces). *\/$/;"	m	struct:jit_State
parentmap	lj_asm.c	/^  uint16_t parentmap[LJ_MAX_JSLOTS];  \/* Parent instruction to RegSP map. *\/$/;"	m	struct:ASMState	file:
parlist	host/minilua.c	/^static void parlist(LexState*ls){$/;"	f	file:
parse_args	lj_parse.c	/^static void parse_args(LexState *ls, ExpDesc *e)$/;"	f	file:
parse_assignment	lj_parse.c	/^static void parse_assignment(LexState *ls, LHSVarList *lh, BCReg nvars)$/;"	f	file:
parse_block	lj_parse.c	/^static void parse_block(LexState *ls)$/;"	f	file:
parse_body	lj_parse.c	/^static void parse_body(LexState *ls, ExpDesc *e, int needself, BCLine line)$/;"	f	file:
parse_break	lj_parse.c	/^static void parse_break(LexState *ls)$/;"	f	file:
parse_call_assign	lj_parse.c	/^static void parse_call_assign(LexState *ls)$/;"	f	file:
parse_chunk	lj_parse.c	/^static void parse_chunk(LexState *ls)$/;"	f	file:
parse_for	lj_parse.c	/^static void parse_for(LexState *ls, BCLine line)$/;"	f	file:
parse_for_iter	lj_parse.c	/^static void parse_for_iter(LexState *ls, GCstr *indexname)$/;"	f	file:
parse_for_num	lj_parse.c	/^static void parse_for_num(LexState *ls, GCstr *varname, BCLine line)$/;"	f	file:
parse_func	lj_parse.c	/^static void parse_func(LexState *ls, BCLine line)$/;"	f	file:
parse_goto	lj_parse.c	/^static void parse_goto(LexState *ls)$/;"	f	file:
parse_if	lj_parse.c	/^static void parse_if(LexState *ls, BCLine line)$/;"	f	file:
parse_label	lj_parse.c	/^static void parse_label(LexState *ls)$/;"	f	file:
parse_local	lj_parse.c	/^static void parse_local(LexState *ls)$/;"	f	file:
parse_params	lj_parse.c	/^static BCReg parse_params(LexState *ls, int needself)$/;"	f	file:
parse_repeat	lj_parse.c	/^static void parse_repeat(LexState *ls, BCLine line)$/;"	f	file:
parse_return	lj_parse.c	/^static void parse_return(LexState *ls)$/;"	f	file:
parse_stmt	lj_parse.c	/^static int parse_stmt(LexState *ls)$/;"	f	file:
parse_then	lj_parse.c	/^static BCPos parse_then(LexState *ls)$/;"	f	file:
parse_while	lj_parse.c	/^static void parse_while(LexState *ls, BCLine line)$/;"	f	file:
parseargs	host/buildvm.c	/^static void parseargs(BuildCtx *ctx, char **argv)$/;"	f	file:
parsemode	host/buildvm.c	/^static BuildMode parsemode(const char *mode)$/;"	f	file:
patchins	lj_jit.h	/^  BCIns patchins;	\/* Instruction for pending re-patch. *\/$/;"	m	struct:jit_State
patchlistaux	host/minilua.c	/^static void patchlistaux(FuncState*fs,int list,int vtarget,int reg,$/;"	f	file:
patchpc	lj_jit.h	/^  BCIns *patchpc;	\/* PC for pending re-patch. *\/$/;"	m	struct:jit_State
patchtestreg	host/minilua.c	/^static int patchtestreg(FuncState*fs,int node,int reg){$/;"	f	file:
pause	lj_obj.h	/^  MSize pause;		\/* Pause between successive GC cycles. *\/$/;"	m	struct:GCState
pb	lj_ctype.c	/^  char *pb, *pe;$/;"	m	struct:CTRepr	file:
pc	host/minilua.c	/^int pc;$/;"	m	struct:FuncState	file:
pc	lj_jit.h	/^  MRef pc;		\/* Starting bytecode PC. *\/$/;"	m	struct:HotPenalty
pc	lj_jit.h	/^  const BCIns *pc;	\/* Current PC. *\/$/;"	m	struct:jit_State
pc	lj_parse.c	/^  BCPos pc;			\/* Next bytecode position. *\/$/;"	m	struct:FuncState	file:
pc	lj_trace.c	/^  const BCIns *pc;	\/* Restart interpreter at this PC. *\/$/;"	m	struct:ExitDataCP	file:
pcRel	host/minilua.c	511;"	d	file:
pcr	lj_obj.h	/^  MRef pcr;		\/* Overlaps PC for Lua frames. *\/$/;"	m	union:__anon100
pe	lj_ctype.c	/^  char *pb, *pe;$/;"	m	struct:CTRepr	file:
penalty	lj_jit.h	/^  HotPenalty penalty[PENALTY_SLOTS];  \/* Penalty slots. *\/$/;"	m	struct:jit_State
penalty_pc	lj_trace.c	/^static void penalty_pc(jit_State *J, GCproto *pt, BCIns *pc, TraceError e)$/;"	f	file:
penaltyslot	lj_jit.h	/^  uint32_t penaltyslot;	\/* Round-robin index into penalty slots. *\/$/;"	m	struct:jit_State
perftools_addtrace	lj_trace.c	/^static void perftools_addtrace(GCtrace *T)$/;"	f	file:
phentsize	lj_gdbjit.c	/^  uint16_t phentsize;$/;"	m	struct:ELFheader	file:
phireg	lj_asm.c	/^  IRRef1 phireg[RID_MAX];  \/* PHI register references. *\/$/;"	m	struct:ASMState	file:
phiset	lj_asm.c	/^  RegSet phiset;	\/* Set of PHI registers. *\/$/;"	m	struct:ASMState	file:
phnum	lj_gdbjit.c	/^  uint16_t phnum;$/;"	m	struct:ELFheader	file:
phofs	lj_gdbjit.c	/^  uintptr_t phofs;$/;"	m	struct:ELFheader	file:
pinuse	lj_alloc.c	355;"	d	file:
pmain	luajit.c	/^static int pmain(lua_State *L)$/;"	f	file:
pos	lj_cparse.c	/^  CPDeclIdx pos;	\/* Insertion position in declaration chain. *\/$/;"	m	struct:CPDecl	file:
posrelat	host/minilua.c	/^static ptrdiff_t posrelat(ptrdiff_t pos,size_t len){$/;"	f	file:
posrelat	lib_string.c	/^static ptrdiff_t posrelat(ptrdiff_t pos, size_t len)$/;"	f	file:
postproc	lj_jit.h	/^  PostProc postproc;	\/* Required post-processing after execution. *\/$/;"	m	struct:jit_State
predict_next	lj_parse.c	/^static int predict_next(LexState *ls, FuncState *fs, BCPos pc)$/;"	f	file:
prefixexp	host/minilua.c	/^static void prefixexp(LexState*ls,expdesc*v){$/;"	f	file:
preinit_state	host/minilua.c	/^static void preinit_state(lua_State*L,global_State*g){$/;"	f	file:
prepend_alloc	lj_alloc.c	/^static void *prepend_alloc(mstate m, char *newbase, char *oldbase, size_t nb)$/;"	f	file:
preprocess	host/genminilua.lua	/^local function preprocess(src)$/;"	f
prev	host/minilua.c	/^struct FuncState*prev;$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState	file:
prev	host/minilua.c	/^struct LHS_assign*prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	host/minilua.c	/^struct UpVal*prev;$/;"	m	struct:UpVal::__anon11::__anon12	typeref:struct:UpVal::__anon11::__anon12::UpVal	file:
prev	lj_ir.h	/^    IRRef1 prev;	\/* Previous ins in same chain (overlaps r and s). *\/$/;"	m	struct:IRIns::__anon60
prev	lj_obj.h	/^      GCRef prev;$/;"	m	struct:GCupval::__anon105::__anon106
prev	lj_parse.c	/^  struct FuncScope *prev;	\/* Link to outer scope. *\/$/;"	m	struct:FuncScope	typeref:struct:FuncScope::FuncScope	file:
prev	lj_parse.c	/^  struct FuncState *prev;	\/* Enclosing function. *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState	file:
prev	lj_parse.c	/^  struct LHSVarList *prev;	\/* Link to previous LHS variable. *\/$/;"	m	struct:LHSVarList	typeref:struct:LHSVarList::LHSVarList	file:
prev_chunk	lj_alloc.c	367;"	d	file:
prev_entry	lj_gdbjit.c	/^  struct GDBJITentry *prev_entry;$/;"	m	struct:GDBJITentry	typeref:struct:GDBJITentry::GDBJITentry	file:
prev_foot	lj_alloc.c	/^  size_t                    prev_foot;$/;"	m	struct:malloc_tree_chunk	file:
prev_foot	lj_alloc.c	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk	file:
previous	host/minilua.c	/^struct BlockCnt*previous;$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous	host/minilua.c	/^struct lua_longjmp*previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
primaryexp	host/minilua.c	/^static void primaryexp(LexState*ls,expdesc*v){$/;"	f	file:
print_jit_status	luajit.c	/^static void print_jit_status(lua_State *L)$/;"	f	file:
print_usage	luajit.c	/^static void print_usage(void)$/;"	f	file:
print_version	luajit.c	/^static void print_version(void)$/;"	f	file:
printhash	host/buildvm_fold.c	/^static void printhash(BuildCtx *ctx, uint32_t *htab, uint32_t sz)$/;"	f	file:
printsnap	jit/dump.lua	/^local function printsnap(tr, snap)$/;"	f
priority	host/minilua.c	/^}priority[]={$/;"	v	typeref:struct:__anon17	file:
priority	lj_parse.c	/^} priority[] = {$/;"	v	typeref:struct:__anon43	file:
prngstate	lj_jit.h	/^  uint32_t prngstate;	\/* PRNG state. *\/$/;"	m	struct:jit_State
progname	luajit.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
propagateall	host/minilua.c	/^static size_t propagateall(global_State*g){$/;"	f	file:
propagatemark	host/minilua.c	/^static l_mem propagatemark(global_State*g){$/;"	f	file:
propagatemark	lj_gc.c	/^static size_t propagatemark(global_State *g)$/;"	f	file:
protoV	lj_obj.h	709;"	d
proto_bc	lj_obj.h	334;"	d
proto_bcpos	lj_obj.h	335;"	d
proto_chunkname	lj_obj.h	338;"	d
proto_chunknamestr	lj_obj.h	339;"	d
proto_kgc	lj_obj.h	329;"	d
proto_knumtv	lj_obj.h	332;"	d
proto_lineinfo	lj_obj.h	340;"	d
proto_uv	lj_obj.h	336;"	d
proto_uvinfo	lj_obj.h	341;"	d
proto_varinfo	lj_obj.h	342;"	d
pt	lj_bcwrite.c	/^  GCproto *pt;			\/* Root prototype. *\/$/;"	m	struct:BCWriteCtx	file:
pt	lj_jit.h	/^  GCproto *pt;		\/* Current prototype. *\/$/;"	m	struct:jit_State
pt	lj_obj.h	/^  GCproto pt;$/;"	m	union:GCobj
ptr	lj_ir.h	/^  MRef ptr;		\/* Pointer constant (overlaps op12). *\/$/;"	m	union:IRIns
ptr2addr	lj_emit_x86.h	/^static int32_t ptr2addr(const void *p)$/;"	f
ptr2addr	lj_emit_x86.h	85;"	d
ptr32	lj_obj.h	/^  uint32_t ptr32;	\/* Pseudo 32 bit pointer. *\/$/;"	m	struct:MRef
push_captures	host/minilua.c	/^static int push_captures(MatchState*ms,const char*s,const char*e){$/;"	f	file:
push_captures	lib_string.c	/^static int push_captures(MatchState *ms, const char *s, const char *e)$/;"	f	file:
push_onecapture	host/minilua.c	/^static void push_onecapture(MatchState*ms,int i,const char*s,$/;"	f	file:
push_onecapture	lib_string.c	/^static void push_onecapture(MatchState *ms, int i, const char *s, const char *e)$/;"	f	file:
pushclosure	host/minilua.c	/^static void pushclosure(LexState*ls,FuncState*func,expdesc*v){$/;"	f	file:
pusherror	lib_package.c	/^static void pusherror(lua_State *L)$/;"	f	file:
pushline	luajit.c	/^static int pushline(lua_State *L, int firstline)$/;"	f	file:
pushnexttemplate	lib_package.c	/^static const char *pushnexttemplate(lua_State *L, const char *path)$/;"	f	file:
pushresult	host/minilua.c	/^static int pushresult(lua_State*L,int i,const char*filename){$/;"	f	file:
pushstr	host/minilua.c	/^static void pushstr(lua_State*L,const char*str){$/;"	f	file:
putop	jit/dis_arm.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	jit/dis_mips.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	jit/dis_ppc.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	jit/dis_x86.lua	/^local function putop(ctx, text, operands)$/;"	f
putpat	jit/dis_x86.lua	/^local function putpat(ctx, name, pat)$/;"	f
pvalue	host/minilua.c	244;"	d	file:
r	host/minilua.c	/^lua_Number r;$/;"	m	union:__anon16	file:
ra_alloc1	lj_asm.c	/^static Reg ra_alloc1(ASMState *as, IRRef ref, RegSet allow)$/;"	f	file:
ra_alloc1z	lj_asm_mips.h	/^static Reg ra_alloc1z(ASMState *as, IRRef ref, RegSet allow)$/;"	f
ra_alloc2	lj_asm_arm.h	/^static Reg ra_alloc2(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
ra_alloc2	lj_asm_mips.h	/^static Reg ra_alloc2(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
ra_alloc2	lj_asm_ppc.h	/^static Reg ra_alloc2(ASMState *as, IRIns *ir, RegSet allow)$/;"	f
ra_allock	lj_asm.c	/^static Reg ra_allock(ASMState *as, int32_t k, RegSet allow)$/;"	f	file:
ra_allockreg	lj_asm.c	/^static void ra_allockreg(ASMState *as, int32_t k, Reg r)$/;"	f	file:
ra_allockreg	lj_asm.c	535;"	d	file:
ra_allocref	lj_asm.c	/^static Reg ra_allocref(ASMState *as, IRRef ref, RegSet allow)$/;"	f	file:
ra_dbg_buf	lj_asm.c	/^static char ra_dbg_buf[65536];$/;"	v	file:
ra_dbg_mcp	lj_asm.c	/^static MCode *ra_dbg_mcp;$/;"	v	file:
ra_dbg_merge	lj_asm.c	/^static char *ra_dbg_merge;$/;"	v	file:
ra_dbg_p	lj_asm.c	/^static char *ra_dbg_p;$/;"	v	file:
ra_dest	lj_asm.c	/^static Reg ra_dest(ASMState *as, IRIns *ir, RegSet allow)$/;"	f	file:
ra_destpair	lj_asm.c	/^static void ra_destpair(ASMState *as, IRIns *ir)$/;"	f	file:
ra_destreg	lj_asm.c	/^static void ra_destreg(ASMState *as, IRIns *ir, Reg r)$/;"	f	file:
ra_dflush	lj_asm.c	/^static void ra_dflush(void)$/;"	f	file:
ra_dprintf	lj_asm.c	/^static void ra_dprintf(ASMState *as, const char *fmt, ...)$/;"	f	file:
ra_dstart	lj_asm.c	/^static void ra_dstart(void)$/;"	f	file:
ra_evict	lj_asm.c	/^static Reg ra_evict(ASMState *as, RegSet allow)$/;"	f	file:
ra_evictk	lj_asm.c	/^static void ra_evictk(ASMState *as)$/;"	f	file:
ra_evictset	lj_asm.c	/^static void ra_evictset(ASMState *as, RegSet drop)$/;"	f	file:
ra_free	lj_asm.c	267;"	d	file:
ra_gethint	lj_target.h	32;"	d
ra_hashint	lj_target.h	31;"	d
ra_hasreg	lj_target.h	28;"	d
ra_hasspill	lj_target.h	39;"	d
ra_hintalloc	lj_asm_arm.h	/^static Reg ra_hintalloc(ASMState *as, IRRef ref, Reg hint, RegSet allow)$/;"	f
ra_hintalloc	lj_asm_mips.h	/^static Reg ra_hintalloc(ASMState *as, IRRef ref, Reg hint, RegSet allow)$/;"	f
ra_hintalloc	lj_asm_ppc.h	/^static Reg ra_hintalloc(ASMState *as, IRRef ref, Reg hint, RegSet allow)$/;"	f
ra_iskref	lj_asm.c	122;"	d	file:
ra_iskref	lj_asm.c	134;"	d	file:
ra_krefk	lj_asm.c	124;"	d	file:
ra_krefk	lj_asm.c	136;"	d	file:
ra_krefreg	lj_asm.c	123;"	d	file:
ra_krefreg	lj_asm.c	135;"	d	file:
ra_left	lj_asm.c	/^static void ra_left(ASMState *as, Reg dest, IRRef lref)$/;"	f	file:
ra_leftov	lj_asm.c	/^static void ra_leftov(ASMState *as, Reg dest, IRRef lref)$/;"	f	file:
ra_modified	lj_asm.c	268;"	d	file:
ra_noreg	lj_target.h	27;"	d
ra_noweak	lj_asm.c	270;"	d	file:
ra_pick	lj_asm.c	/^static Reg ra_pick(ASMState *as, RegSet allow)$/;"	f	file:
ra_regname	lj_asm.c	/^static const char *const ra_regname[] = {$/;"	v	file:
ra_releasetmp	lj_asm.c	/^static Reg ra_releasetmp(ASMState *as, IRRef ref)$/;"	f	file:
ra_rematk	lj_asm.c	/^static Reg ra_rematk(ASMState *as, IRRef ref)$/;"	f	file:
ra_rename	lj_asm.c	/^static void ra_rename(ASMState *as, Reg down, Reg up)$/;"	f	file:
ra_restore	lj_asm.c	/^static Reg ra_restore(ASMState *as, IRRef ref)$/;"	f	file:
ra_samehint	lj_target.h	34;"	d
ra_save	lj_asm.c	/^static void ra_save(ASMState *as, IRIns *ir, Reg r)$/;"	f	file:
ra_scratch	lj_asm.c	/^static Reg ra_scratch(ASMState *as, RegSet allow)$/;"	f	file:
ra_scratchpair	lj_asm_arm.h	/^static Reg ra_scratchpair(ASMState *as, RegSet allow)$/;"	f
ra_sethint	lj_target.h	33;"	d
ra_setkref	lj_asm.c	/^static LJ_AINLINE void ra_setkref(ASMState *as, Reg r, int32_t k)$/;"	f	file:
ra_setup	lj_asm.c	/^static void ra_setup(ASMState *as)$/;"	f	file:
ra_spill	lj_asm.c	/^static int32_t ra_spill(ASMState *as, IRIns *ir)$/;"	f	file:
ra_used	lj_asm.c	272;"	d	file:
ra_weak	lj_asm.c	269;"	d	file:
random_init	lib_math.c	/^static void random_init(RandomState *rs, double d)$/;"	f	file:
rav	lj_record.c	1709;"	d	file:
rav	lj_record.c	2084;"	d	file:
rawgco2ts	host/minilua.c	499;"	d	file:
rawgco2u	host/minilua.c	501;"	d	file:
rawnumequal	lj_obj.h	686;"	d
rawtsvalue	host/minilua.c	246;"	d	file:
rawuvalue	host/minilua.c	248;"	d	file:
rbv	lj_record.c	1710;"	d	file:
rbv	lj_record.c	2085;"	d	file:
rcv	lj_record.c	1711;"	d	file:
rcv	lj_record.c	2086;"	d	file:
rdata	lj_lex.h	/^  void *rdata;		\/* Reader callback data. *\/$/;"	m	struct:LexState
read_chars	host/minilua.c	/^static int read_chars(lua_State*L,FILE*f,size_t n){$/;"	f	file:
read_line	host/minilua.c	/^static int read_line(lua_State*L,FILE*f){$/;"	f	file:
read_long_string	host/minilua.c	/^static void read_long_string(LexState*ls,SemInfo*seminfo,int sep){$/;"	f	file:
read_long_string	lj_lex.c	/^static void read_long_string(LexState *ls, TValue *tv, int sep)$/;"	f	file:
read_number	host/minilua.c	/^static int read_number(lua_State*L,FILE*f){$/;"	f	file:
read_numeral	host/minilua.c	/^static void read_numeral(LexState*ls,SemInfo*seminfo){$/;"	f	file:
read_sources	host/genminilua.lua	/^local function read_sources()$/;"	f
read_string	host/minilua.c	/^static void read_string(LexState*ls,int del,SemInfo*seminfo){$/;"	f	file:
read_string	lj_lex.c	/^static void read_string(LexState *ls, int delim, TValue *tv)$/;"	f	file:
readable	lib_package.c	/^static int readable(const char *filename)$/;"	f	file:
reader	host/minilua.c	/^lua_Reader reader;$/;"	m	struct:Zio	file:
reader_file	lj_load.c	/^static const char *reader_file(lua_State *L, void *ud, size_t *size)$/;"	f	file:
reader_func	lib_base.c	/^static const char *reader_func(lua_State *L, void *ud, size_t *size)$/;"	f	file:
reader_string	lj_load.c	/^static const char *reader_string(lua_State *L, void *ud, size_t *size)$/;"	f	file:
readfile	jit/bcsave.lua	/^local function readfile(input)$/;"	f
realign	lj_asm.c	/^  MCode *realign;	\/* Realign loop if not NULL. *\/$/;"	m	struct:ASMState	file:
reallymarkobject	host/minilua.c	/^static void reallymarkobject(global_State*g,GCObject*o){$/;"	f	file:
reason	lj_jit.h	/^  uint16_t reason;	\/* Abort reason (really TraceErr). *\/$/;"	m	struct:HotPenalty
reassoc_trycse	lj_opt_mem.c	/^static IRRef reassoc_trycse(jit_State *J, IROp op, IRRef op1, IRRef op2)$/;"	f	file:
reassoc_xref	lj_opt_mem.c	/^static IRRef reassoc_xref(jit_State *J, IRIns *ir)$/;"	f	file:
rec_call_setup	lj_record.c	/^static void rec_call_setup(jit_State *J, BCReg func, ptrdiff_t nargs)$/;"	f	file:
rec_call_specialize	lj_record.c	/^static TRef rec_call_specialize(jit_State *J, GCfunc *fn, TRef tr)$/;"	f	file:
rec_check_ir	lj_record.c	/^static void rec_check_ir(jit_State *J)$/;"	f	file:
rec_check_slots	lj_record.c	/^static void rec_check_slots(jit_State *J)$/;"	f	file:
rec_comp_fixup	lj_record.c	/^static void rec_comp_fixup(jit_State *J, const BCIns *pc, int cond)$/;"	f	file:
rec_comp_prep	lj_record.c	/^static void rec_comp_prep(jit_State *J)$/;"	f	file:
rec_for	lj_record.c	/^static LoopEvent rec_for(jit_State *J, const BCIns *fori, int isforl)$/;"	f	file:
rec_for_check	lj_record.c	/^static void rec_for_check(jit_State *J, IRType t, int dir,$/;"	f	file:
rec_for_direction	lj_record.c	/^static int rec_for_direction(cTValue *o)$/;"	f	file:
rec_for_iter	lj_record.c	/^static LoopEvent rec_for_iter(IROp *op, cTValue *o, int isforl)$/;"	f	file:
rec_for_loop	lj_record.c	/^static void rec_for_loop(jit_State *J, const BCIns *fori, ScEvEntry *scev,$/;"	f	file:
rec_func_jit	lj_record.c	/^static void rec_func_jit(jit_State *J, TraceNo lnk)$/;"	f	file:
rec_func_lua	lj_record.c	/^static void rec_func_lua(jit_State *J)$/;"	f	file:
rec_func_setup	lj_record.c	/^static void rec_func_setup(jit_State *J)$/;"	f	file:
rec_func_vararg	lj_record.c	/^static void rec_func_vararg(jit_State *J)$/;"	f	file:
rec_idx_abc	lj_record.c	/^static void rec_idx_abc(jit_State *J, TRef asizeref, TRef ikey, uint32_t asize)$/;"	f	file:
rec_idx_key	lj_record.c	/^static TRef rec_idx_key(jit_State *J, RecordIndex *ix)$/;"	f	file:
rec_iterl	lj_record.c	/^static LoopEvent rec_iterl(jit_State *J, const BCIns iterins)$/;"	f	file:
rec_loop	lj_record.c	/^static LoopEvent rec_loop(jit_State *J, BCReg ra)$/;"	f	file:
rec_loop_interp	lj_record.c	/^static void rec_loop_interp(jit_State *J, const BCIns *pc, LoopEvent ev)$/;"	f	file:
rec_loop_jit	lj_record.c	/^static void rec_loop_jit(jit_State *J, TraceNo lnk, LoopEvent ev)$/;"	f	file:
rec_mm_arith	lj_record.c	/^static TRef rec_mm_arith(jit_State *J, RecordIndex *ix, MMS mm)$/;"	f	file:
rec_mm_callcomp	lj_record.c	/^static void rec_mm_callcomp(jit_State *J, RecordIndex *ix, int op)$/;"	f	file:
rec_mm_comp	lj_record.c	/^static void rec_mm_comp(jit_State *J, RecordIndex *ix, int op)$/;"	f	file:
rec_mm_comp_cdata	lj_record.c	/^static void rec_mm_comp_cdata(jit_State *J, RecordIndex *ix, int op, MMS mm)$/;"	f	file:
rec_mm_equal	lj_record.c	/^static void rec_mm_equal(jit_State *J, RecordIndex *ix, int op)$/;"	f	file:
rec_mm_len	lj_record.c	/^static TRef rec_mm_len(jit_State *J, TRef tr, TValue *tv)$/;"	f	file:
rec_mm_prep	lj_record.c	/^static BCReg rec_mm_prep(jit_State *J, ASMFunction cont)$/;"	f	file:
rec_setup_root	lj_record.c	/^static const BCIns *rec_setup_root(jit_State *J)$/;"	f	file:
rec_stop	lj_record.c	/^static void rec_stop(jit_State *J, TraceLink linktype, TraceNo lnk)$/;"	f	file:
rec_tnew	lj_record.c	/^static TRef rec_tnew(jit_State *J, uint32_t ah)$/;"	f	file:
rec_upvalue	lj_record.c	/^static TRef rec_upvalue(jit_State *J, uint32_t uv, TRef val)$/;"	f	file:
rec_upvalue_constify	lj_record.c	/^static int rec_upvalue_constify(jit_State *J, GCupval *uvp)$/;"	f	file:
rec_varg	lj_record.c	/^static void rec_varg(jit_State *J, BCReg dst, ptrdiff_t nresults)$/;"	f	file:
recdef_lookup	lj_ffrecord.c	/^static uint32_t recdef_lookup(GCfunc *fn)$/;"	f	file:
recff_assert	lj_ffrecord.c	/^static void LJ_FASTCALL recff_assert(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_bit_nary	lj_ffrecord.c	/^static void LJ_FASTCALL recff_bit_nary(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_bit_shift	lj_ffrecord.c	/^static void LJ_FASTCALL recff_bit_shift(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_bit_unary	lj_ffrecord.c	/^static void LJ_FASTCALL recff_bit_unary(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_c	lj_ffrecord.c	/^static void LJ_FASTCALL recff_c(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_cdata_arith	lj_crecord.c	/^void LJ_FASTCALL recff_cdata_arith(jit_State *J, RecordFFData *rd)$/;"	f
recff_cdata_call	lj_crecord.c	/^void LJ_FASTCALL recff_cdata_call(jit_State *J, RecordFFData *rd)$/;"	f
recff_cdata_index	lj_crecord.c	/^void LJ_FASTCALL recff_cdata_index(jit_State *J, RecordFFData *rd)$/;"	f
recff_clib_index	lj_crecord.c	/^void LJ_FASTCALL recff_clib_index(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_abi	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_abi(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_copy	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_copy(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_errno	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_errno(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_fill	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_fill(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_gc	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_gc(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_istype	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_istype(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_new	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_new(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_string	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_string(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_typeof	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_typeof(jit_State *J, RecordFFData *rd)$/;"	f
recff_ffi_xof	lj_crecord.c	/^void LJ_FASTCALL recff_ffi_xof(jit_State *J, RecordFFData *rd)$/;"	f
recff_func	lj_recdef.h	/^static const RecordFunc recff_func[] = {$/;"	v
recff_getmetatable	lj_ffrecord.c	/^static void LJ_FASTCALL recff_getmetatable(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_idmap	lj_recdef.h	/^static const uint16_t recff_idmap[] = {$/;"	v
recff_io_flush	lj_ffrecord.c	/^static void LJ_FASTCALL recff_io_flush(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_io_fp	lj_ffrecord.c	/^static TRef recff_io_fp(jit_State *J, TRef *udp, int32_t id)$/;"	f	file:
recff_io_write	lj_ffrecord.c	/^static void LJ_FASTCALL recff_io_write(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_ipairs	lj_ffrecord.c	/^static void LJ_FASTCALL recff_ipairs(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_ipairs_aux	lj_ffrecord.c	/^static void LJ_FASTCALL recff_ipairs_aux(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_abs	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_abs(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_atan2	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_atan2(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_atrig	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_atrig(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_degrad	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_degrad(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_htrig	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_htrig(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_ldexp	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_ldexp(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_log	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_log(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_minmax	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_minmax(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_modf	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_modf(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_pow	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_pow(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_random	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_random(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_round	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_round(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_math_unary	lj_ffrecord.c	/^static void LJ_FASTCALL recff_math_unary(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_metacall	lj_ffrecord.c	/^static int recff_metacall(jit_State *J, RecordFFData *rd, MMS mm)$/;"	f	file:
recff_metacall_cp	lj_ffrecord.c	/^static TValue *recff_metacall_cp(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
recff_nyi	lj_ffrecord.c	/^static void LJ_FASTCALL recff_nyi(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_nyiu	lj_ffrecord.c	/^LJ_NORET static void recff_nyiu(jit_State *J)$/;"	f	file:
recff_pcall	lj_ffrecord.c	/^static void LJ_FASTCALL recff_pcall(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_rawequal	lj_ffrecord.c	/^static void LJ_FASTCALL recff_rawequal(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_rawget	lj_ffrecord.c	/^static void LJ_FASTCALL recff_rawget(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_rawlen	lj_ffrecord.c	/^static void LJ_FASTCALL recff_rawlen(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_rawset	lj_ffrecord.c	/^static void LJ_FASTCALL recff_rawset(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_select	lj_ffrecord.c	/^static void LJ_FASTCALL recff_select(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_setmetatable	lj_ffrecord.c	/^static void LJ_FASTCALL recff_setmetatable(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_string_len	lj_ffrecord.c	/^static void LJ_FASTCALL recff_string_len(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_string_range	lj_ffrecord.c	/^static void LJ_FASTCALL recff_string_range(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_table_getn	lj_ffrecord.c	/^static void LJ_FASTCALL recff_table_getn(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_table_insert	lj_ffrecord.c	/^static void LJ_FASTCALL recff_table_insert(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_table_remove	lj_ffrecord.c	/^static void LJ_FASTCALL recff_table_remove(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_tonumber	lj_ffrecord.c	/^static void LJ_FASTCALL recff_tonumber(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_tostring	lj_ffrecord.c	/^static void LJ_FASTCALL recff_tostring(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_type	lj_ffrecord.c	/^static void LJ_FASTCALL recff_type(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_xpcall	lj_ffrecord.c	/^static void LJ_FASTCALL recff_xpcall(jit_State *J, RecordFFData *rd)$/;"	f	file:
recff_xpcall_cp	lj_ffrecord.c	/^static TValue *recff_xpcall_cp(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
recffid	host/buildvm_lib.c	/^static int ffid, recffid, ffasmfunc;$/;"	v	file:
recfield	host/minilua.c	/^static void recfield(LexState*ls,struct ConsControl*cc){$/;"	f	file:
redir	lj_cparse.c	/^  GCstr *redir;		\/* Redirected symbol name. *\/$/;"	m	struct:CPDecl	file:
ref	lj_jit.h	/^  IRRef1 ref;		\/* First IR ref for this snapshot. *\/$/;"	m	struct:SnapShot
regcost_ref	lj_target.h	129;"	d
regfunc	host/buildvm_lib.c	/^static int modstate, regfunc;$/;"	v	file:
registerlocalvar	host/minilua.c	/^static int registerlocalvar(LexState*ls,TString*varname){$/;"	f	file:
registry	host/minilua.c	415;"	d	file:
registry	lj_obj.h	583;"	d
registrytv	lj_obj.h	/^  TValue registrytv;	\/* Anchor for registry. *\/$/;"	m	struct:global_State
regname64_	jit/dis_x86.lua	/^local function regname64_(r)$/;"	f
regname_	jit/dis_arm.lua	/^local function regname_(r)$/;"	f
regname_	jit/dis_mips.lua	/^local function regname_(r)$/;"	f
regname_	jit/dis_ppc.lua	/^local function regname_(r)$/;"	f
regname_	jit/dis_x86.lua	/^local function regname_(r)$/;"	f
regsp_reg	lj_target.h	48;"	d
regsp_spill	lj_target.h	49;"	d
regsp_used	lj_target.h	50;"	d
rehash	host/minilua.c	/^static void rehash(lua_State*L,Table*t,const TValue*ek){$/;"	f	file:
rehashtab	lj_tab.c	/^static void rehashtab(lua_State *L, GCtab *t, cTValue *ek)$/;"	f	file:
release_checks	lj_alloc.c	/^  size_t     release_checks;$/;"	m	struct:malloc_state	file:
release_unused_segments	lj_alloc.c	/^static size_t release_unused_segments(mstate m)$/;"	f	file:
relevant_entry	lj_gdbjit.c	/^  GDBJITentry *relevant_entry;$/;"	m	struct:GDBJITdesc	file:
reloc	host/buildvm.h	/^  BuildReloc reloc[BUILD_MAX_RELOC];$/;"	m	struct:BuildCtx
relocmap	host/buildvm.c	/^static int relocmap[NRELOCSYM];$/;"	v	file:
relocofs	host/buildvm_peobj.c	/^  uint32_t relocofs;$/;"	m	struct:PEsection	file:
relocsym	host/buildvm.h	/^  const char **relocsym;$/;"	m	struct:BuildCtx
remarkupvals	host/minilua.c	/^static void remarkupvals(global_State*g){$/;"	f	file:
removeentry	host/minilua.c	/^static void removeentry(Node*n){$/;"	f	file:
removevalues	host/minilua.c	/^static void removevalues(FuncState*fs,int list){$/;"	f	file:
removevars	host/minilua.c	/^static void removevars(LexState*ls,int tolevel){$/;"	f	file:
rename_tokens1	host/genminilua.lua	/^local function rename_tokens1(src)$/;"	f
rename_tokens2	host/genminilua.lua	/^local function rename_tokens2(src)$/;"	f
repeatstat	host/minilua.c	/^static void repeatstat(LexState*ls,int line){$/;"	f	file:
replace_dv	lj_alloc.c	619;"	d	file:
report	luajit.c	/^static int report(lua_State *L, int status)$/;"	f	file:
request2size	lj_alloc.c	341;"	d	file:
reserved	host/minilua.c	/^lu_byte reserved;$/;"	m	struct:TString::__anon9	file:
reserved	lj_obj.h	/^  uint8_t reserved;	\/* Used by lexer for fast lookup of reserved words. *\/$/;"	m	struct:GCstr
reset2bits	host/minilua.c	568;"	d	file:
resetbit	host/minilua.c	565;"	d	file:
resetbits	host/minilua.c	559;"	d	file:
resethookcount	host/minilua.c	513;"	d	file:
resetstack	host/minilua.c	/^static void resetstack(lua_State*L,int status){$/;"	f	file:
resize	host/minilua.c	/^static void resize(lua_State*L,Table*t,int nasize,int nhsize){$/;"	f	file:
resizestack	lj_state.c	/^static void resizestack(lua_State *L, MSize n)$/;"	f	file:
resizetab	lj_tab.c	/^static void resizetab(lua_State *L, GCtab *t, uint32_t asize, uint32_t hbits)$/;"	f	file:
restore_stack_limit	host/minilua.c	/^static void restore_stack_limit(lua_State*L){$/;"	f	file:
restore_strings	host/genminilua.lua	/^local function restore_strings(src)$/;"	f
restoreci	host/minilua.c	522;"	d	file:
restorestack	host/minilua.c	520;"	d	file:
restorestack	lj_state.h	15;"	d
results_wanted	lj_ffrecord.c	/^static ptrdiff_t results_wanted(jit_State *J)$/;"	f	file:
resx87	lj_ccall.h	/^  uint8_t resx87;		\/* Result on x87 stack: 1:float, 2:double. *\/$/;"	m	struct:CCallState
retdepth	lj_jit.h	/^  int32_t retdepth;	\/* Return frame depth (count of RETF). *\/$/;"	m	struct:jit_State
retref	lj_ccall.h	/^  uint8_t retref;		\/* Return value by reference. *\/$/;"	m	struct:CCallState
retstat	host/minilua.c	/^static void retstat(LexState*ls){$/;"	f	file:
rex 	jit/dis_x86.lua	/^  rex = function(ctx, name, pat)$/;"	f
rfunc	lj_lex.h	/^  lua_Reader rfunc;	\/* Reader callback. *\/$/;"	m	struct:LexState
ridsp_name	jit/dump.lua	/^local function ridsp_name(ridsp, ins)$/;"	f
right	host/minilua.c	/^lu_byte right;$/;"	m	struct:__anon17	file:
right	lj_jit.h	/^  IRIns right;		\/* Instruction referenced by right operand. *\/$/;"	m	struct:FoldState
right	lj_parse.c	/^  uint8_t right;	\/* Right priority. *\/$/;"	m	struct:__anon43	file:
rol	host/minilua.c	/^static int rol(lua_State*L){$/;"	f	file:
root	lj_jit.h	/^  TraceNo1 root;	\/* Root trace of side trace (or 0 for root traces). *\/$/;"	m	struct:GCtrace
root	lj_obj.h	/^  GCRef root;		\/* List of all collectable objects. *\/$/;"	m	struct:GCState
rootgc	host/minilua.c	/^GCObject*rootgc;$/;"	m	struct:global_State	file:
ror	host/minilua.c	/^static int ror(lua_State*L){$/;"	f	file:
round_nkgc	lj_obj.h	287;"	d
rset_clear	lj_target.h	70;"	d
rset_exclude	lj_target.h	71;"	d
rset_pickbot	lj_target.h	74;"	d
rset_pickbot	lj_target.h	77;"	d
rset_picktop	lj_target.h	73;"	d
rset_picktop	lj_target.h	76;"	d
rset_picktop	lj_target_x86.h	116;"	d
rset_picktop	lj_target_x86.h	117;"	d
rset_set	lj_target.h	69;"	d
rset_test	lj_target.h	68;"	d
rshift	host/minilua.c	/^static int rshift(lua_State*L){$/;"	f	file:
runargs	luajit.c	/^static int runargs(lua_State *L, char **argv, int n)$/;"	f	file:
runcmdopt	luajit.c	/^static int runcmdopt(lua_State *L, const char *opt)$/;"	f	file:
runtime_check	host/minilua.c	4934;"	d	file:
s	host/minilua.c	/^const char*s;$/;"	m	struct:LoadS	file:
s	host/minilua.c	/^struct{int info,aux;}s;$/;"	m	union:expdesc::__anon14	typeref:struct:expdesc::__anon14::__anon15	file:
s	host/minilua.c	/^typedef union{double u;void*s;long l;}L_Umaxalign;$/;"	m	union:__anon7	file:
s	lj_ccall.h	/^  uint16_t s[8];$/;"	m	union:FPRArg
s	lj_parse.c	/^    } s;$/;"	m	union:ExpDesc::__anon41	typeref:struct:ExpDesc::__anon41::__anon42	file:
save	host/minilua.c	/^static void save(LexState*ls,int c){$/;"	f	file:
save	lj_lex.c	/^static LJ_AINLINE void save(LexState *ls, int c)$/;"	f	file:
save_and_next	host/minilua.c	2670;"	d	file:
save_and_next	lj_lex.c	43;"	d	file:
save_grow	lj_lex.c	/^static LJ_NOINLINE void save_grow(LexState *ls, int c)$/;"	f	file:
save_str	host/genminilua.lua	/^local function save_str(str)$/;"	f
save_strings	host/genminilua.lua	/^local function save_strings(src)$/;"	f
saveci	host/minilua.c	521;"	d	file:
savedpc	host/minilua.c	/^const Instruction*savedpc;$/;"	m	struct:CallInfo	file:
savedpc	host/minilua.c	/^const Instruction*savedpc;$/;"	m	struct:lua_State	file:
savefile	jit/bcsave.lua	/^local function savefile(name, mode)$/;"	f
savestack	host/minilua.c	519;"	d	file:
savestack	lj_state.h	14;"	d
sb	lj_bcwrite.c	/^  SBuf sb;			\/* Output buffer. *\/$/;"	m	struct:BCWriteCtx	file:
sb	lj_cparse.h	/^  SBuf sb;		\/* String buffer for tokens. *\/$/;"	m	struct:CPState
sb	lj_lex.h	/^  SBuf sb;		\/* String buffer for tokens. *\/$/;"	m	struct:LexState
sbinptr	lj_alloc.c	/^typedef struct malloc_chunk *sbinptr;  \/* The type of bins of chunks *\/$/;"	t	typeref:struct:malloc_chunk	file:
scale	lj_target_x86.h	/^  uint8_t scale;	\/* Index scale (XM_SCALE1 .. XM_SCALE8). *\/$/;"	m	struct:__anon47
scanformat	host/minilua.c	/^static const char*scanformat(lua_State*L,const char*strfrmt,char*form){$/;"	f	file:
scanformat	lib_string.c	/^static const char *scanformat(lua_State *L, const char *strfrmt, char *form)$/;"	f	file:
scev	lj_jit.h	/^  ScEvEntry scev;	\/* Scalar evolution analysis cache slots. *\/$/;"	m	struct:jit_State
scl	host/buildvm_peobj.c	/^  uint8_t scl;$/;"	m	struct:PEsym	file:
searchpath	lib_package.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	file:
searchvar	host/minilua.c	/^static int searchvar(FuncState*fs,TString*n){$/;"	f	file:
sect	host/buildvm_peobj.c	/^  int16_t sect;$/;"	m	struct:PEsym	file:
sect	lj_gdbjit.c	/^  ELFsectheader sect[GDBJIT_SECT__MAX];	\/* ELF sections. *\/$/;"	m	struct:GDBJITobj	file:
sectidx	lj_gdbjit.c	/^  uint16_t sectidx;$/;"	m	struct:ELFsymbol	file:
sectref	lj_asm.c	/^  IRRef sectref;	\/* Section base reference (loopref or 0). *\/$/;"	m	struct:ASMState	file:
seg	lj_alloc.c	/^  msegment   seg;$/;"	m	struct:malloc_state	file:
segment_holding	lj_alloc.c	/^static msegmentptr segment_holding(mstate m, char *addr)$/;"	f	file:
segment_holds	lj_alloc.c	471;"	d	file:
select_detect	lj_record.c	/^static int select_detect(jit_State *J)$/;"	f	file:
seminfo	host/minilua.c	/^SemInfo seminfo;$/;"	m	struct:Token	file:
sentinel	lib_package.c	398;"	d	file:
sentinel_	lib_package.c	/^static const int sentinel_ = 0;$/;"	v	file:
set2	host/minilua.c	/^static void set2(lua_State*L,int i,int j){$/;"	f	file:
set2	lib_table.c	/^static void set2(lua_State *L, int i, int j)$/;"	f	file:
set2bits	host/minilua.c	567;"	d	file:
set_foot	lj_alloc.c	374;"	d	file:
set_free_with_pinuse	lj_alloc.c	381;"	d	file:
set_inuse	lj_alloc.c	563;"	d	file:
set_inuse_and_pinuse	lj_alloc.c	568;"	d	file:
set_size_and_pinuse_of_free_chunk	lj_alloc.c	377;"	d	file:
set_size_and_pinuse_of_inuse_chunk	lj_alloc.c	573;"	d	file:
setarrayvector	host/minilua.c	/^static void setarrayvector(lua_State*L,Table*t,int size){$/;"	f	file:
setbc_a	lj_bc.h	45;"	d
setbc_b	lj_bc.h	46;"	d
setbc_byte	lj_bc.h	42;"	d
setbc_c	lj_bc.h	47;"	d
setbc_d	lj_bc.h	48;"	d
setbc_j	lj_bc.h	50;"	d
setbc_op	lj_bc.h	44;"	d
setbits	host/minilua.c	560;"	d	file:
setboolV	lj_obj.h	719;"	d
setboolfield	lib_os.c	/^static void setboolfield(lua_State *L, const char *key, int value)$/;"	f	file:
setbvalue	host/minilua.c	259;"	d	file:
setcframe_L	lj_frame.h	165;"	d
setcframe_pc	lj_frame.h	167;"	d
setclvalue	host/minilua.c	263;"	d	file:
setcont	lj_obj.h	733;"	d
setcont	lj_obj.h	737;"	d
setfenv	lib_package.c	/^static void setfenv(lua_State *L)$/;"	f	file:
setfield	lib_os.c	/^static void setfield(lua_State *L, const char *key, int value)$/;"	f	file:
setframe_ftsz	lj_frame.h	54;"	d
setframe_gc	lj_frame.h	55;"	d
setframe_pc	lj_frame.h	53;"	d
setgcV	lj_obj.h	/^static LJ_AINLINE void setgcV(lua_State *L, TValue *o, GCobj *v, uint32_t itype)$/;"	f
setgcref	lj_obj.h	49;"	d
setgcrefi	lj_obj.h	50;"	d
setgcrefnull	lj_obj.h	52;"	d
setgcrefp	lj_obj.h	51;"	d
setgcrefr	lj_obj.h	53;"	d
sethvalue	host/minilua.c	264;"	d	file:
setint64V	lj_obj.h	/^static LJ_AINLINE void setint64V(TValue *o, int64_t i)$/;"	f
setintV	lj_obj.h	/^static LJ_AINLINE void setintV(TValue *o, int32_t i)$/;"	f
setintfield	lib_jit.c	/^static void setintfield(lua_State *L, GCtab *t, const char *name, int32_t val)$/;"	f	file:
setintptrV	lj_obj.h	785;"	d
setintptrV	lj_obj.h	787;"	d
setitype	lj_obj.h	717;"	d
setjitmode	lib_jit.c	/^static int setjitmode(lua_State *L, int mode)$/;"	f	file:
setlightudV	lj_obj.h	/^static LJ_AINLINE void setlightudV(TValue *o, void *p)$/;"	f
setminfV	lj_obj.h	765;"	d
setmref	lj_obj.h	28;"	d
setmrefr	lj_obj.h	29;"	d
setnanV	lj_obj.h	763;"	d
setnilV	lj_obj.h	718;"	d
setnilvalue	host/minilua.c	257;"	d	file:
setnodevector	host/minilua.c	/^static void setnodevector(lua_State*L,Table*t,int size){$/;"	f	file:
setnumV	lj_obj.h	762;"	d
setnvalue	host/minilua.c	258;"	d	file:
setobj	host/minilua.c	266;"	d	file:
setpath	lib_package.c	/^static void setpath(lua_State *L, const char *fieldname, const char *envname,$/;"	f	file:
setpc_wrap_aux	lib_base.c	/^static void setpc_wrap_aux(lua_State *L, GCfunc *fn)$/;"	f	file:
setpinfV	lj_obj.h	764;"	d
setprogdir	lib_package.c	/^static void setprogdir(lua_State *L)$/;"	f	file:
setprogdir	lib_package.c	29;"	d	file:
setprogdir	lib_package.c	82;"	d	file:
setptmode	lj_dispatch.c	/^static void setptmode(global_State *g, GCproto *pt, int mode)$/;"	f	file:
setptmode_all	lj_dispatch.c	/^static void setptmode_all(global_State *g, GCproto *pt, int mode)$/;"	f	file:
setptvalue	host/minilua.c	265;"	d	file:
setsvalue	host/minilua.c	260;"	d	file:
settabsb	lib_debug.c	/^static void settabsb(lua_State *L, const char *i, int v)$/;"	f	file:
settabsi	lib_debug.c	/^static void settabsi(lua_State *L, const char *i, int v)$/;"	f	file:
settabss	lib_debug.c	/^static void settabss(lua_State *L, const char *i, const char *v)$/;"	f	file:
setthreshold	host/minilua.c	1726;"	d	file:
setthvalue	host/minilua.c	262;"	d	file:
setttype	host/minilua.c	267;"	d	file:
setuvalue	host/minilua.c	261;"	d	file:
setvmstate	lj_obj.h	441;"	d
shentsize	lj_gdbjit.c	/^  uint16_t shentsize;$/;"	m	struct:ELFheader	file:
shnum	lj_gdbjit.c	/^  uint16_t shnum;$/;"	m	struct:ELFheader	file:
shofs	lj_gdbjit.c	/^  uintptr_t shofs;$/;"	m	struct:ELFheader	file:
short_src	host/minilua.c	/^char short_src[60];$/;"	m	struct:lua_Debug	file:
short_src	lj_debug.h	/^  char short_src[LUA_IDSIZE];$/;"	m	struct:lj_Debug
short_src	lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
shstridx	lj_gdbjit.c	/^  uint16_t shstridx;$/;"	m	struct:ELFheader	file:
sib	lj_ctype.h	/^  CTypeID1 sib;		\/* Sibling element. *\/$/;"	m	struct:CType
simpleexp	host/minilua.c	/^static void simpleexp(LexState*ls,expdesc*v){$/;"	f	file:
simplify_intmul_k	lj_opt_fold.c	/^static TRef simplify_intmul_k(jit_State *J, int32_t k)$/;"	f	file:
singlematch	host/minilua.c	/^static int singlematch(int c,const char*p,const char*ep){$/;"	f	file:
singlematch	lib_string.c	/^static int singlematch(int c, const char *p, const char *ep)$/;"	f	file:
singlestep	host/minilua.c	/^static l_mem singlestep(lua_State*L){$/;"	f	file:
singlevar	host/minilua.c	/^static void singlevar(LexState*ls,expdesc*var){$/;"	f	file:
singlevaraux	host/minilua.c	/^static int singlevaraux(FuncState*fs,TString*n,expdesc*var,int base){$/;"	f	file:
sink_checkalloc	lj_opt_sink.c	/^static IRIns *sink_checkalloc(jit_State *J, IRIns *irs)$/;"	f	file:
sink_checkphi	lj_opt_sink.c	/^static int sink_checkphi(jit_State *J, IRIns *ira, IRRef ref)$/;"	f	file:
sink_mark_ins	lj_opt_sink.c	/^static void sink_mark_ins(jit_State *J)$/;"	f	file:
sink_mark_snap	lj_opt_sink.c	/^static void sink_mark_snap(jit_State *J, SnapShot *snap)$/;"	f	file:
sink_phidep	lj_opt_sink.c	/^static int sink_phidep(jit_State *J, IRRef ref)$/;"	f	file:
sink_remark_phi	lj_opt_sink.c	/^static void sink_remark_phi(jit_State *J)$/;"	f	file:
sink_sweep_ins	lj_opt_sink.c	/^static void sink_sweep_ins(jit_State *J)$/;"	f	file:
sinktags	lj_jit.h	/^  uint8_t sinktags;	\/* Trace has SINK tags. *\/$/;"	m	struct:GCtrace
size	host/buildvm_peobj.c	/^  uint32_t size;$/;"	m	struct:PEsection	file:
size	host/buildvm_peobj.c	/^  uint32_t size;$/;"	m	struct:PEsymaux	file:
size	host/minilua.c	/^int size;$/;"	m	struct:stringtable	file:
size	host/minilua.c	/^size_t size;$/;"	m	struct:LoadS	file:
size	lj_alloc.c	/^  size_t       size;             \/* allocated size *\/$/;"	m	struct:malloc_segment	file:
size	lj_ctype.h	/^  CTSize size;		\/* Type size or other info. *\/$/;"	m	struct:CType
size	lj_gdbjit.c	/^  uint64_t size;$/;"	m	struct:ELFsymbol	file:
size	lj_gdbjit.c	/^  uintptr_t size;$/;"	m	struct:ELFsectheader	file:
size	lj_load.c	/^  size_t size;$/;"	m	struct:StringReaderCtx	file:
size	lj_mcode.c	/^  size_t size;		\/* Size of current area. *\/$/;"	m	struct:MCLink	file:
sizeCclosure	host/minilua.c	812;"	d	file:
sizeCfunc	lj_obj.h	395;"	d
sizeLclosure	host/minilua.c	813;"	d	file:
sizeLfunc	lj_obj.h	396;"	d
size_ci	host/minilua.c	/^int size_ci;$/;"	m	struct:lua_State	file:
sizearray	host/minilua.c	/^int sizearray;$/;"	m	struct:Table	file:
sizebc	lj_obj.h	/^  MSize sizebc;		\/* Number of bytecode instructions. *\/$/;"	m	struct:GCproto
sizebcstack	lj_lex.h	/^  MSize sizebcstack;	\/* Size of bytecode stack. *\/$/;"	m	struct:LexState
sizecdatav	lj_obj.h	281;"	d
sizecode	host/minilua.c	/^int sizecode;$/;"	m	struct:Proto	file:
sizeid	lj_ctype.h	/^  MSize sizeid;			\/* Size of callback type table. *\/$/;"	m	struct:CCallback
sizek	host/minilua.c	/^int sizek;$/;"	m	struct:Proto	file:
sizekgc	lj_obj.h	/^  MSize sizekgc;	\/* Number of collectable constants. *\/$/;"	m	struct:GCproto
sizekn	lj_obj.h	/^  MSize sizekn;		\/* Number of lua_Number constants. *\/$/;"	m	struct:GCproto
sizelineinfo	host/minilua.c	/^int sizelineinfo;$/;"	m	struct:Proto	file:
sizelocvars	host/minilua.c	/^int sizelocvars;$/;"	m	struct:Proto	file:
sizenode	host/minilua.c	368;"	d	file:
sizep	host/minilua.c	/^int sizep;$/;"	m	struct:Proto	file:
sizept	lj_obj.h	/^  MSize sizept;		\/* Total size including colocated arrays. *\/$/;"	m	struct:GCproto
sizesnap	lj_jit.h	/^  MSize sizesnap;	\/* Size of temp. snapshot buffer. *\/$/;"	m	struct:jit_State
sizesnapmap	lj_jit.h	/^  MSize sizesnapmap;	\/* Size of temp. snapshot map buffer. *\/$/;"	m	struct:jit_State
sizestring	host/minilua.c	589;"	d	file:
sizestring	lj_obj.h	236;"	d
sizetab	lj_ctype.h	/^  MSize sizetab;	\/* Size of C type table. *\/$/;"	m	struct:CTState
sizetabcolo	lj_obj.h	422;"	d
sizetrace	lj_jit.h	/^  MSize sizetrace;	\/* Size of trace array. *\/$/;"	m	struct:jit_State
sizeudata	host/minilua.c	590;"	d	file:
sizeudata	lj_obj.h	260;"	d
sizeupvalues	host/minilua.c	/^int sizeupvalues;$/;"	m	struct:Proto	file:
sizeuv	lj_obj.h	/^  uint8_t sizeuv;	\/* Number of upvalues. *\/$/;"	m	struct:GCproto
sizevstack	lj_lex.h	/^  MSize sizevstack;	\/* Size of variable stack. *\/$/;"	m	struct:LexState
skip_sep	host/minilua.c	/^static int skip_sep(LexState*ls){$/;"	f	file:
skip_sep	lj_lex.c	/^static int skip_sep(LexState *ls)$/;"	f	file:
sload	lj_record.c	/^static TRef sload(jit_State *J, int32_t slot)$/;"	f	file:
sloadt	lj_record.c	/^static TRef sloadt(jit_State *J, int32_t slot, IRType t, int mode)$/;"	f	file:
slot	lj_ctype.h	/^  MSize slot;			\/* Current callback slot. *\/$/;"	m	struct:CCallback
slot	lj_jit.h	/^  TRef slot[LJ_MAX_JSLOTS+LJ_STACK_EXTRA];  \/* Stack slot map. *\/$/;"	m	struct:jit_State
slot	lj_lex.h	/^  uint8_t slot;		\/* Variable slot. *\/$/;"	m	struct:VarInfo
small_index	lj_alloc.c	509;"	d	file:
small_index2size	lj_alloc.c	510;"	d	file:
smallbin_at	lj_alloc.c	514;"	d	file:
smallbins	lj_alloc.c	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	m	struct:malloc_state	file:
smallmap	lj_alloc.c	/^  binmap_t   smallmap;$/;"	m	struct:malloc_state	file:
smallmap_is_marked	lj_alloc.c	553;"	d	file:
snap	lj_jit.h	/^  SnapShot *snap;	\/* Snapshot array. *\/$/;"	m	struct:GCtrace
snap_dedup	lj_snap.c	/^static TRef snap_dedup(jit_State *J, SnapEntry *map, MSize nmax, IRRef ref)$/;"	f	file:
snap_isframe	lj_jit.h	187;"	d
snap_nextofs	lj_jit.h	/^static LJ_AINLINE MSize snap_nextofs(GCtrace *T, SnapShot *snap)$/;"	f
snap_pc	lj_jit.h	188;"	d
snap_pref	lj_snap.c	/^static TRef snap_pref(jit_State *J, GCtrace *T, SnapEntry *map, MSize nmax,$/;"	f	file:
snap_ref	lj_jit.h	185;"	d
snap_renamefilter	lj_snap.c	/^static BloomFilter snap_renamefilter(GCtrace *T, SnapNo lim)$/;"	f	file:
snap_renameref	lj_snap.c	/^static RegSP snap_renameref(GCtrace *T, SnapNo lim, IRRef ref, RegSP rs)$/;"	f	file:
snap_replay_const	lj_snap.c	/^static TRef snap_replay_const(jit_State *J, IRIns *ir)$/;"	f	file:
snap_restoredata	lj_snap.c	/^static void snap_restoredata(GCtrace *T, ExitState *ex,$/;"	f	file:
snap_restoreval	lj_snap.c	/^static void snap_restoreval(jit_State *J, GCtrace *T, ExitState *ex,$/;"	f	file:
snap_setref	lj_jit.h	189;"	d
snap_slot	lj_jit.h	186;"	d
snap_sunk_store	lj_snap.c	/^static LJ_AINLINE int snap_sunk_store(jit_State *J, IRIns *ira, IRIns *irs)$/;"	f	file:
snap_sunk_store2	lj_snap.c	/^static int snap_sunk_store2(jit_State *J, IRIns *ira, IRIns *irs)$/;"	f	file:
snap_unsink	lj_snap.c	/^static void snap_unsink(jit_State *J, GCtrace *T, ExitState *ex,$/;"	f	file:
snap_usedef	lj_snap.c	/^static BCReg snap_usedef(jit_State *J, uint8_t *udf,$/;"	f	file:
snapbuf	lj_jit.h	/^  SnapShot *snapbuf;	\/* Temp. snapshot buffer. *\/$/;"	m	struct:jit_State
snapmap	lj_jit.h	/^  SnapEntry *snapmap;	\/* Snapshot map. *\/$/;"	m	struct:GCtrace
snapmapbuf	lj_jit.h	/^  SnapEntry *snapmapbuf;  \/* Temp. snapshot map buffer. *\/$/;"	m	struct:jit_State
snapno	lj_asm.c	/^  SnapNo snapno;	\/* Current snapshot number. *\/$/;"	m	struct:ASMState	file:
snapref	lj_asm.c	/^  IRRef snapref;	\/* Current snapshot is active after this reference. *\/$/;"	m	struct:ASMState	file:
snaprename	lj_asm.c	/^  IRRef snaprename;	\/* Rename highwater mark for snapshot check. *\/$/;"	m	struct:ASMState	file:
snapshot_framelinks	lj_snap.c	/^static BCReg snapshot_framelinks(jit_State *J, SnapEntry *map)$/;"	f	file:
snapshot_slots	lj_snap.c	/^static MSize snapshot_slots(jit_State *J, SnapEntry *map, BCReg nslots)$/;"	f	file:
snapshot_stack	lj_snap.c	/^static void snapshot_stack(jit_State *J, SnapShot *snap, MSize nsnapmap)$/;"	f	file:
softfp_add	lj_ircall.h	193;"	d
softfp_cmp	lj_ircall.h	197;"	d
softfp_d2f	lj_ircall.h	203;"	d
softfp_d2i	lj_ircall.h	199;"	d
softfp_d2ui	lj_ircall.h	202;"	d
softfp_div	lj_ircall.h	196;"	d
softfp_f2d	lj_ircall.h	201;"	d
softfp_f2i	lj_ircall.h	206;"	d
softfp_f2ui	lj_ircall.h	207;"	d
softfp_i2d	lj_ircall.h	198;"	d
softfp_i2f	lj_ircall.h	204;"	d
softfp_mul	lj_ircall.h	195;"	d
softfp_sub	lj_ircall.h	194;"	d
softfp_ui2d	lj_ircall.h	200;"	d
softfp_ui2f	lj_ircall.h	205;"	d
sort	host/minilua.c	/^static int sort(lua_State*L){$/;"	f	file:
sort_comp	host/minilua.c	/^static int sort_comp(lua_State*L,int a,int b){$/;"	f	file:
sort_comp	lib_table.c	/^static int sort_comp(lua_State *L, int a, int b)$/;"	f	file:
source	host/minilua.c	/^TString*source;$/;"	m	struct:LexState	file:
source	host/minilua.c	/^TString*source;$/;"	m	struct:Proto	file:
source	host/minilua.c	/^const char*source;$/;"	m	struct:lua_Debug	file:
source	lj_debug.h	/^  const char *source;$/;"	m	struct:lj_Debug
source	lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
sp	lj_opt_narrow.c	/^  NarrowIns *sp;	\/* Current stack pointer. *\/$/;"	m	struct:NarrowConv	file:
space	lj_gdbjit.c	/^  uint8_t space[4096];			\/* Space for various section data. *\/$/;"	m	struct:GDBJITobj	file:
spadj	lj_ccall.h	/^  uint32_t spadj;		\/* Stack pointer adjustment. *\/$/;"	m	struct:CCallState
spadj	lj_gdbjit.c	/^  MSize spadj;		\/* Stack adjustment for trace itself. *\/$/;"	m	struct:GDBJITctx	file:
spadjp	lj_gdbjit.c	/^  MSize spadjp;		\/* Stack adjustment for parent trace or interpreter. *\/$/;"	m	struct:GDBJITctx	file:
spadjust	lj_jit.h	/^  uint16_t spadjust;	\/* Stack pointer adjustment (offset in bytes). *\/$/;"	m	struct:GCtrace
specattr	lj_cparse.c	/^  CTInfo specattr;	\/* Saved attributes. *\/$/;"	m	struct:CPDecl	file:
specfattr	lj_cparse.c	/^  CTInfo specfattr;	\/* Saved function attributes. *\/$/;"	m	struct:CPDecl	file:
specpos	lj_cparse.c	/^  CPDeclIdx specpos;	\/* Saved position for declaration specifier. *\/$/;"	m	struct:CPDecl	file:
spill	lj_target_arm.h	/^  int32_t spill[256];		\/* Spill slots. *\/$/;"	m	struct:__anon31
spill	lj_target_mips.h	/^  int32_t spill[256];		\/* Spill slots. *\/$/;"	m	struct:__anon39
spill	lj_target_ppc.h	/^  int32_t spill[256];		\/* Spill slots. *\/$/;"	m	struct:__anon29
spill	lj_target_x86.h	/^  int32_t spill[256];		\/* Spill slots. *\/$/;"	m	struct:__anon45
split_call_l	lj_opt_split.c	/^static IRRef split_call_l(jit_State *J, IRRef1 *hisubst, IRIns *oir,$/;"	f	file:
split_call_li	lj_opt_split.c	/^static IRRef split_call_li(jit_State *J, IRRef1 *hisubst, IRIns *oir,$/;"	f	file:
split_call_ll	lj_opt_split.c	/^static IRRef split_call_ll(jit_State *J, IRRef1 *hisubst, IRIns *oir,$/;"	f	file:
split_emit	lj_opt_split.c	/^static IRRef split_emit(jit_State *J, uint16_t ot, IRRef1 op1, IRRef1 op2)$/;"	f	file:
split_ir	lj_opt_split.c	/^static void split_ir(jit_State *J)$/;"	f	file:
split_needsplit	lj_opt_split.c	/^static int split_needsplit(jit_State *J)$/;"	f	file:
split_num2int	lj_opt_split.c	/^static IRRef split_num2int(jit_State *J, IRRef lo, IRRef hi, int check)$/;"	f	file:
split_ptr	lj_opt_split.c	/^static IRRef split_ptr(jit_State *J, IRIns *oir, IRRef ref)$/;"	f	file:
sps_align	lj_target_arm.h	122;"	d
sps_align	lj_target_mips.h	108;"	d
sps_align	lj_target_ppc.h	100;"	d
sps_align	lj_target_x86.h	145;"	d
sps_scale	lj_target_arm.h	121;"	d
sps_scale	lj_target_mips.h	107;"	d
sps_scale	lj_target_ppc.h	99;"	d
sps_scale	lj_target_x86.h	144;"	d
src_end	host/minilua.c	/^const char*src_end;$/;"	m	struct:MatchState	file:
src_end	lib_string.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	host/minilua.c	/^const char*src_init;$/;"	m	struct:MatchState	file:
src_init	lib_string.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
srcname	lj_cparse.h	/^  const char *srcname;	\/* Current source name. *\/$/;"	m	struct:CPState
stack	host/minilua.c	/^StkId stack;$/;"	m	struct:lua_State	file:
stack	lj_ccall.h	/^  GPRArg stack[CCALL_MAXSTACK];	\/* Stack slots. *\/$/;"	m	struct:CCallState
stack	lj_cparse.c	/^  CType stack[CPARSE_MAX_DECLSTACK];  \/* Type declaration stack. *\/$/;"	m	struct:CPDecl	file:
stack	lj_ctype.h	/^  intptr_t *stack;		\/* Pointer to arguments on stack. *\/$/;"	m	struct:CCallback
stack	lj_obj.h	/^  MRef stack;		\/* Stack base. *\/$/;"	m	struct:lua_State
stack	lj_opt_narrow.c	/^  NarrowIns stack[NARROW_MAX_STACK];  \/* Stack holding stack-machine code. *\/$/;"	m	struct:NarrowConv	file:
stack_init	host/minilua.c	/^static void stack_init(lua_State*L1,lua_State*L){$/;"	f	file:
stack_init	lj_state.c	/^static void stack_init(lua_State *L1, lua_State *L)$/;"	f	file:
stack_last	host/minilua.c	/^StkId stack_last;$/;"	m	struct:lua_State	file:
stacksize	host/minilua.c	/^int stacksize;$/;"	m	struct:lua_State	file:
stacksize	lj_obj.h	/^  MSize stacksize;	\/* True stack size (incl. LJ_STACK_EXTRA). *\/$/;"	m	struct:lua_State
start	lj_jit.h	/^  IRRef1 start;		\/* Constant start reference. *\/$/;"	m	struct:ScEvEntry
start_capture	host/minilua.c	/^static const char*start_capture(MatchState*ms,const char*s,$/;"	f	file:
start_capture	lib_string.c	/^static const char *start_capture(MatchState *ms, const char *s,$/;"	f	file:
startins	lj_jit.h	/^  BCIns startins;	\/* Original bytecode of starting instruction. *\/$/;"	m	struct:GCtrace
startp	lj_gdbjit.c	/^  uint8_t *startp;	\/* Pointer to start address in obj.space. *\/$/;"	m	struct:GDBJITctx	file:
startpc	host/minilua.c	/^int startpc;$/;"	m	struct:LocVar	file:
startpc	lj_jit.h	/^  MRef startpc;		\/* Bytecode PC of starting instruction. *\/$/;"	m	struct:GCtrace
startpc	lj_jit.h	/^  const BCIns *startpc;	\/* Bytecode PC of starting instruction. *\/$/;"	m	struct:jit_State
startpc	lj_lex.h	/^  BCPos startpc;	\/* First point where the local variable is active. *\/$/;"	m	struct:VarInfo
startpt	lj_jit.h	/^  GCRef startpt;	\/* Starting prototype. *\/$/;"	m	struct:GCtrace
state	lj_jit.h	/^  TraceState state;	\/* Trace compiler state. *\/$/;"	m	struct:jit_State
state	lj_obj.h	/^  uint8_t state;	\/* GC state. *\/$/;"	m	struct:GCState
state_size	host/minilua.c	2255;"	d	file:
statement	host/minilua.c	/^static int statement(LexState*ls){$/;"	f	file:
static_uex	lj_err.c	/^static _Unwind_Exception static_uex;$/;"	v	file:
static_uex	lj_err.c	/^static __thread _Unwind_Exception static_uex;$/;"	v	file:
status	host/minilua.c	/^lu_byte status;$/;"	m	struct:lua_State	file:
status	host/minilua.c	/^volatile int status;$/;"	m	struct:lua_longjmp	file:
status	lj_bcwrite.c	/^  int status;			\/* Status from writer callback. *\/$/;"	m	struct:BCWriteCtx	file:
status	lj_obj.h	/^  uint8_t status;	\/* Thread status. *\/$/;"	m	struct:lua_State
status	luajit.c	/^  int status;$/;"	m	struct:Smain	file:
step	lj_jit.h	/^  IRRef1 step;		\/* Constant step reference. *\/$/;"	m	struct:ScEvEntry
stepmul	lj_obj.h	/^  MSize stepmul;	\/* Incremental GC step granularity. *\/$/;"	m	struct:GCState
stkindex2adr	lj_api.c	/^static TValue *stkindex2adr(lua_State *L, int idx)$/;"	f	file:
stop	host/buildvm_lib.c	/^  const char *stop;$/;"	m	struct:LibDefHandler	file:
stop	lj_jit.h	/^  IRRef1 stop;		\/* Constant stop reference. *\/$/;"	m	struct:ScEvEntry
stopins	lj_asm.c	/^  IRRef stopins;	\/* Stop assembly before hitting this instruction. *\/$/;"	m	struct:ASMState	file:
str	lj_cparse.h	/^  GCstr *str;		\/* Interned string of identifier\/keyword. *\/$/;"	m	struct:CPState
str	lj_load.c	/^  const char *str;$/;"	m	struct:StringReaderCtx	file:
str	lj_obj.h	/^  GCstr str;$/;"	m	union:GCobj
str2num	lj_meta.c	/^static cTValue *str2num(cTValue *o, TValue *n)$/;"	f	file:
strV	lj_obj.h	706;"	d
strVdata	lj_obj.h	235;"	d
str_byte	host/minilua.c	/^static int str_byte(lua_State*L){$/;"	f	file:
str_char	host/minilua.c	/^static int str_char(lua_State*L){$/;"	f	file:
str_checkname	host/minilua.c	/^static TString*str_checkname(LexState*ls){$/;"	f	file:
str_fastcmp	lj_str.c	/^static LJ_AINLINE int str_fastcmp(const char *a, const char *b, MSize len)$/;"	f	file:
str_find	host/minilua.c	/^static int str_find(lua_State*L){$/;"	f	file:
str_find_aux	host/minilua.c	/^static int str_find_aux(lua_State*L,int find){$/;"	f	file:
str_find_aux	lib_string.c	/^static int str_find_aux(lua_State *L, int find)$/;"	f	file:
str_format	host/minilua.c	/^static int str_format(lua_State*L){$/;"	f	file:
str_gsub	host/minilua.c	/^static int str_gsub(lua_State*L){$/;"	f	file:
str_lower	host/minilua.c	/^static int str_lower(lua_State*L){$/;"	f	file:
str_match	host/minilua.c	/^static int str_match(lua_State*L){$/;"	f	file:
str_rep	host/minilua.c	/^static int str_rep(lua_State*L){$/;"	f	file:
str_sub	host/minilua.c	/^static int str_sub(lua_State*L){$/;"	f	file:
str_upper	host/minilua.c	/^static int str_upper(lua_State*L){$/;"	f	file:
strdata	lj_obj.h	233;"	d
strdatawr	lj_obj.h	234;"	d
strempty	lj_obj.h	/^  GCstr strempty;	\/* Empty string. *\/$/;"	m	struct:global_State
stremptyz	lj_obj.h	/^  uint8_t stremptyz;	\/* Zero terminator of empty string. *\/$/;"	m	struct:global_State
strhash	lj_obj.h	/^  GCRef *strhash;	\/* String hash table (hash chain anchors). *\/$/;"	m	struct:global_State
stringmark	host/minilua.c	1721;"	d	file:
stringtable	host/minilua.c	/^typedef struct stringtable{$/;"	s	file:
stringtable	host/minilua.c	/^}stringtable;$/;"	t	typeref:struct:stringtable	file:
strip	lj_bcwrite.c	/^  int strip;			\/* Strip debug info. *\/$/;"	m	struct:BCWriteCtx	file:
strip_comments	host/genminilua.lua	/^local function strip_comments(src)$/;"	f
strip_unused1	host/genminilua.lua	/^local function strip_unused1(src)$/;"	f
strip_unused2	host/genminilua.lua	/^local function strip_unused2(src)$/;"	f
strip_unused3	host/genminilua.lua	/^local function strip_unused3(src)$/;"	f
strip_whitespace	host/genminilua.lua	/^local function strip_whitespace(src)$/;"	f
strlib	host/minilua.c	/^static const luaL_Reg strlib[]={$/;"	v	file:
strmask	lj_obj.h	/^  MSize strmask;	\/* String hash mask (size of hash table - 1). *\/$/;"	m	struct:global_State
strnum	lj_obj.h	/^  MSize strnum;		\/* Number of strings in hash table. *\/$/;"	m	struct:global_State
strref	lj_obj.h	232;"	d
strscan_dec	lj_strscan.c	/^static StrScanFmt strscan_dec(const uint8_t *p, TValue *o,$/;"	f	file:
strscan_double	lj_strscan.c	/^static void strscan_double(uint64_t x, TValue *o, int32_t ex2, int32_t neg)$/;"	f	file:
strscan_hex	lj_strscan.c	/^static StrScanFmt strscan_hex(const uint8_t *p, TValue *o,$/;"	f	file:
strscan_oct	lj_strscan.c	/^static StrScanFmt strscan_oct(const uint8_t *p, TValue *o,$/;"	f	file:
strt	host/minilua.c	/^stringtable strt;$/;"	m	struct:global_State	file:
strtab	host/buildvm_peobj.c	/^static char *strtab;$/;"	v	file:
strtabofs	host/buildvm_peobj.c	/^static size_t strtabofs;$/;"	v	file:
subexpr	host/minilua.c	/^static BinOpr subexpr(LexState*ls,expdesc*v,unsigned int limit){$/;"	f	file:
suffix	host/buildvm_lib.c	/^  const char *suffix;$/;"	m	struct:LibDefHandler	file:
sval	lj_parse.c	/^    GCstr *sval;	\/* String value. *\/$/;"	m	union:ExpDesc::__anon41	file:
svalue	host/minilua.c	280;"	d	file:
sweep	lj_obj.h	/^  MRef sweep;		\/* Sweep position in root list. *\/$/;"	m	struct:GCState
sweepgc	host/minilua.c	/^GCObject**sweepgc;$/;"	m	struct:global_State	file:
sweeplist	host/minilua.c	/^static GCObject**sweeplist(lua_State*L,GCObject**p,lu_mem count){$/;"	f	file:
sweepstr	lj_obj.h	/^  MSize sweepstr;	\/* Sweep position in string table. *\/$/;"	m	struct:GCState
sweepstrgc	host/minilua.c	/^int sweepstrgc;$/;"	m	struct:global_State	file:
sweepwholelist	host/minilua.c	2009;"	d	file:
sym	host/buildvm.h	/^  BuildSym *sym;$/;"	m	struct:BuildCtx
sym	host/buildvm.h	/^  int sym;$/;"	m	struct:BuildReloc
sym	lj_gdbjit.c	/^  ELFsymbol sym[GDBJIT_SYM__MAX];	\/* ELF symbol table. *\/$/;"	m	struct:GDBJITobj	file:
sym_decorate	host/buildvm.c	/^static const char *sym_decorate(BuildCtx *ctx,$/;"	f	file:
sym_insert	host/buildvm.c	/^static void sym_insert(BuildCtx *ctx, int32_t ofs,$/;"	f	file:
symfile_addr	lj_gdbjit.c	/^  const char *symfile_addr;$/;"	m	struct:GDBJITentry	file:
symfile_size	lj_gdbjit.c	/^  uint64_t symfile_size;$/;"	m	struct:GDBJITentry	file:
symidx	host/buildvm_peobj.c	/^  uint32_t symidx;$/;"	m	struct:PEreloc	file:
symtabofs	host/buildvm_peobj.c	/^  uint32_t symtabofs;$/;"	m	struct:PEheader	file:
synlevel_begin	lj_parse.c	/^static void synlevel_begin(LexState *ls)$/;"	f	file:
synlevel_end	lj_parse.c	2046;"	d	file:
syslib	host/minilua.c	/^static const luaL_Reg syslib[]={$/;"	v	file:
sz	lj_gdbjit.c	/^  size_t sz;$/;"	m	struct:GDBJITentryobj	file:
sz	lj_obj.h	/^  MSize sz;		\/* String buffer size. *\/$/;"	m	struct:SBuf
sz 	jit/dis_x86.lua	/^  sz = function(ctx, name, pat)$/;"	f
szallmcarea	lj_jit.h	/^  size_t szallmcarea;	\/* Total size of all allocated mcode areas. *\/$/;"	m	struct:jit_State
szmcarea	lj_jit.h	/^  size_t szmcarea;	\/* Size of current mcode area. *\/$/;"	m	struct:jit_State
szmcode	lj_gdbjit.c	/^  MSize szmcode;	\/* Size of machine code. *\/$/;"	m	struct:GDBJITctx	file:
szmcode	lj_jit.h	/^  MSize szmcode;	\/* Size of machine code. *\/$/;"	m	struct:GCtrace
t	host/minilua.c	/^Token t;$/;"	m	struct:LexState	file:
t	host/minilua.c	/^expdesc*t;$/;"	m	struct:ConsControl	file:
t	host/minilua.c	/^int t;$/;"	m	struct:expdesc	file:
t	lj_jit.h	/^  IRType1 t;		\/* Scalar type. *\/$/;"	m	struct:ScEvEntry
t	lj_opt_narrow.c	/^  IRType t;		\/* Destination type: IRT_INT or IRT_I64. *\/$/;"	m	struct:NarrowConv	file:
t	lj_parse.c	/^  BCPos t;		\/* True condition jump list. *\/$/;"	m	struct:ExpDesc	file:
tab	lj_ctype.h	/^  CType *tab;		\/* C type table. *\/$/;"	m	struct:CTState
tab	lj_obj.h	/^  GCtab tab;$/;"	m	union:GCobj
tab	lj_record.h	/^  TRef tab;		\/* Table (or indexed object) reference. *\/$/;"	m	struct:RecordIndex
tabV	lj_obj.h	711;"	d
tab_funcs	host/minilua.c	/^static const luaL_Reg tab_funcs[]={$/;"	v	file:
tabref	lj_obj.h	423;"	d
tabv	lj_record.h	/^  TValue tabv;		\/* Runtime value of table (or indexed object). *\/$/;"	m	struct:RecordIndex
tag_error	host/minilua.c	/^static void tag_error(lua_State*L,int narg,int tag){$/;"	f	file:
tailcalled	lj_jit.h	/^  int32_t tailcalled;	\/* Number of successive tailcalls. *\/$/;"	m	struct:jit_State
tailcalls	host/minilua.c	/^int tailcalls;$/;"	m	struct:CallInfo	file:
tbinptr	lj_alloc.c	/^typedef struct malloc_tree_chunk *tbinptr; \/* The type of bins of trees *\/$/;"	t	typeref:struct:malloc_tree_chunk	file:
tchunk	lj_alloc.c	/^typedef struct malloc_tree_chunk  tchunk;$/;"	t	typeref:struct:malloc_tree_chunk	file:
tchunkptr	lj_alloc.c	/^typedef struct malloc_tree_chunk *tchunkptr;$/;"	t	typeref:struct:malloc_tree_chunk	file:
tconcat	host/minilua.c	/^static int tconcat(lua_State*L){$/;"	f	file:
test2bits	host/minilua.c	569;"	d	file:
testTMode	host/minilua.c	948;"	d	file:
test_eof	host/minilua.c	/^static int test_eof(lua_State*L,FILE*f){$/;"	f	file:
test_then_block	host/minilua.c	/^static int test_then_block(LexState*ls){$/;"	f	file:
testbit	host/minilua.c	566;"	d	file:
testbits	host/minilua.c	561;"	d	file:
testnext	host/minilua.c	/^static int testnext(LexState*ls,int c){$/;"	f	file:
th	host/minilua.c	/^struct lua_State th;$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State	file:
th	lj_obj.h	/^  lua_State th;$/;"	m	union:GCobj
threadV	lj_obj.h	708;"	d
threshold	lj_obj.h	/^  MSize threshold;	\/* Memory threshold. *\/$/;"	m	struct:GCState
thvalue	host/minilua.c	253;"	d	file:
time	host/buildvm_peobj.c	/^  uint32_t time;$/;"	m	struct:PEheader	file:
tinsert	host/minilua.c	/^static int tinsert(lua_State*L){$/;"	f	file:
tmalloc_large	lj_alloc.c	/^static void *tmalloc_large(mstate m, size_t nb)$/;"	f	file:
tmalloc_small	lj_alloc.c	/^static void *tmalloc_small(mstate m, size_t nb)$/;"	f	file:
tmask	lj_cparse.h	/^  uint32_t tmask;	\/* Type mask for next identifier. *\/$/;"	m	struct:CPState
tmname	host/minilua.c	/^TString*tmname[TM_N];$/;"	m	struct:global_State	file:
tmpbuf	lj_obj.h	/^  SBuf tmpbuf;		\/* Temporary buffer for string concatenation. *\/$/;"	m	struct:global_State
tmptv	lj_obj.h	/^  TValue tmptv, tmptv2;	\/* Temporary TValues. *\/$/;"	m	struct:global_State
tmptv2	lj_obj.h	/^  TValue tmptv, tmptv2;	\/* Temporary TValues. *\/$/;"	m	struct:global_State
tmudata	host/minilua.c	/^GCObject*tmudata;$/;"	m	struct:global_State	file:
tobit	host/minilua.c	/^static int tobit(lua_State*L){$/;"	f	file:
tofile	host/minilua.c	/^static FILE*tofile(lua_State*L){$/;"	f	file:
tofilep	host/minilua.c	6633;"	d	file:
tohex	host/minilua.c	/^static int tohex(lua_State*L){$/;"	f	file:
tok	lj_cparse.h	/^  CPToken tok;		\/* Current token. *\/$/;"	m	struct:CPState
token	host/minilua.c	/^int token;$/;"	m	struct:Token	file:
token	lj_lex.h	/^  LexToken token;	\/* Current token. *\/$/;"	m	struct:LexState
token2binop	lj_parse.c	/^static BinOpr token2binop(LexToken tok)$/;"	f	file:
tokennames	lj_lex.c	/^static const char *const tokennames[] = {$/;"	v	file:
tokenval	lj_lex.h	/^  TValue tokenval;	\/* Current token value. *\/$/;"	m	struct:LexState
tonumber	host/minilua.c	596;"	d	file:
top	host/minilua.c	/^StkId top;$/;"	m	struct:CallInfo	file:
top	host/minilua.c	/^StkId top;$/;"	m	struct:lua_State	file:
top	lj_alloc.c	/^  mchunkptr  top;$/;"	m	struct:malloc_state	file:
top	lj_cparse.c	/^  CPDeclIdx top;	\/* Top of declaration stack. *\/$/;"	m	struct:CPDecl	file:
top	lj_ctype.h	/^  CTypeID top;		\/* Current top of C type table. *\/$/;"	m	struct:CTState
top	lj_obj.h	/^  TValue *top;		\/* First free slot in the stack. *\/$/;"	m	struct:lua_State
topid	lj_ctype.h	/^  MSize topid;			\/* Highest unused callback type table slot. *\/$/;"	m	struct:CCallback
topsize	lj_alloc.c	/^  size_t     topsize;$/;"	m	struct:malloc_state	file:
topslot	lj_asm.c	/^  BCReg topslot;	\/* Number of slots for stack check (unless 0). *\/$/;"	m	struct:ASMState	file:
topslot	lj_jit.h	/^  uint8_t topslot;	\/* Maximum frame extent. *\/$/;"	m	struct:SnapShot
topslot	lj_jit.h	/^  uint8_t topslot;	\/* Top stack slot already checked to be allocated. *\/$/;"	m	struct:GCtrace
tostate	host/minilua.c	2257;"	d	file:
tostore	host/minilua.c	/^int tostore;$/;"	m	struct:ConsControl	file:
tostring	host/minilua.c	595;"	d	file:
tostring	lj_meta.c	/^static LJ_AINLINE int tostring(lua_State *L, TValue *o)$/;"	f	file:
total	lj_obj.h	/^  MSize total;		\/* Memory currently allocated. *\/$/;"	m	struct:GCState
totalbytes	host/minilua.c	/^lu_mem totalbytes;$/;"	m	struct:global_State	file:
tp	lj_crecord.c	/^  IRType tp;		\/* Type of load\/store. *\/$/;"	m	struct:CRecMemList	file:
trace	lj_jit.h	/^  GCRef *trace;		\/* Array of traces. *\/$/;"	m	struct:jit_State
trace	lj_obj.h	/^  uint16_t trace;	\/* Anchor for chain of root traces. *\/$/;"	m	struct:GCproto
trace_abort	lj_trace.c	/^static int trace_abort(jit_State *J)$/;"	f	file:
trace_downrec	lj_trace.c	/^static int trace_downrec(jit_State *J)$/;"	f	file:
trace_errors	host/buildvm.c	/^static const char *const trace_errors[] = {$/;"	v	file:
trace_exit_cp	lj_trace.c	/^static TValue *trace_exit_cp(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
trace_exit_find	lj_trace.c	/^static TraceNo trace_exit_find(jit_State *J, MCode *pc)$/;"	f	file:
trace_exit_regs	lj_trace.c	/^static void trace_exit_regs(lua_State *L, ExitState *ex)$/;"	f	file:
trace_findfree	lj_trace.c	/^static TraceNo trace_findfree(jit_State *J)$/;"	f	file:
trace_flushroot	lj_trace.c	/^static void trace_flushroot(jit_State *J, GCtrace *T)$/;"	f	file:
trace_hotside	lj_trace.c	/^static void trace_hotside(jit_State *J, const BCIns *pc)$/;"	f	file:
trace_pendpatch	lj_trace.c	/^static LJ_AINLINE void trace_pendpatch(jit_State *J, int force)$/;"	f	file:
trace_save	lj_trace.c	/^static void trace_save(jit_State *J)$/;"	f	file:
trace_start	lj_trace.c	/^static void trace_start(jit_State *J)$/;"	f	file:
trace_state	lj_trace.c	/^static TValue *trace_state(lua_State *L, lua_CFunction dummy, void *ud)$/;"	f	file:
trace_stop	lj_trace.c	/^static void trace_stop(jit_State *J)$/;"	f	file:
trace_unpatch	lj_trace.c	/^static void trace_unpatch(jit_State *J, GCtrace *T)$/;"	f	file:
traceback	luajit.c	/^static int traceback(lua_State *L)$/;"	f	file:
traceno	lj_jit.h	/^  TraceNo1 traceno;	\/* Trace number. *\/$/;"	m	struct:GCtrace
traceref	lj_jit.h	245;"	d
traverseclosure	host/minilua.c	/^static void traverseclosure(global_State*g,Closure*cl){$/;"	f	file:
traverseproto	host/minilua.c	/^static void traverseproto(global_State*g,Proto*f){$/;"	f	file:
traversestack	host/minilua.c	/^static void traversestack(global_State*g,lua_State*l){$/;"	f	file:
traversetable	host/minilua.c	/^static int traversetable(global_State*g,Table*h){$/;"	f	file:
treatstackoption	lib_debug.c	/^static void treatstackoption(lua_State *L, lua_State *L1, const char *fname)$/;"	f	file:
treebin_at	lj_alloc.c	515;"	d	file:
treebins	lj_alloc.c	/^  tbinptr    treebins[NTREEBINS];$/;"	m	struct:malloc_state	file:
treemap	lj_alloc.c	/^  binmap_t   treemap;$/;"	m	struct:malloc_state	file:
treemap_is_marked	lj_alloc.c	557;"	d	file:
tref_isbool	lj_ir.h	475;"	d
tref_iscdata	lj_ir.h	469;"	d
tref_isfalse	lj_ir.h	465;"	d
tref_isfunc	lj_ir.h	468;"	d
tref_isgcv	lj_ir.h	481;"	d
tref_isint	lj_ir.h	473;"	d
tref_isinteger	lj_ir.h	478;"	d
tref_isk	lj_ir.h	483;"	d
tref_isk2	lj_ir.h	484;"	d
tref_isnil	lj_ir.h	464;"	d
tref_isnum	lj_ir.h	472;"	d
tref_isnumber	lj_ir.h	479;"	d
tref_isnumber_str	lj_ir.h	480;"	d
tref_ispri	lj_ir.h	476;"	d
tref_isstr	lj_ir.h	467;"	d
tref_istab	lj_ir.h	470;"	d
tref_istrue	lj_ir.h	466;"	d
tref_istruecond	lj_ir.h	477;"	d
tref_istype	lj_ir.h	463;"	d
tref_isudata	lj_ir.h	471;"	d
tref_ref	lj_ir.h	457;"	d
tref_t	lj_ir.h	458;"	d
tref_type	lj_ir.h	459;"	d
tref_typerange	lj_ir.h	460;"	d
tremove	host/minilua.c	/^static int tremove(lua_State*L){$/;"	f	file:
trim_check	lj_alloc.c	/^  size_t     trim_check;$/;"	m	struct:malloc_state	file:
trofs	lj_crecord.c	/^  TRef trofs;		\/* TRef of interned offset. *\/$/;"	m	struct:CRecMemList	file:
trval	lj_crecord.c	/^  TRef trval;		\/* TRef of load value. *\/$/;"	m	struct:CRecMemList	file:
tryfuncTM	host/minilua.c	/^static StkId tryfuncTM(lua_State*L,StkId func){$/;"	f	file:
tryhash	host/buildvm_fold.c	/^static int tryhash(uint32_t *htab, uint32_t sz, uint32_t r, int dorol)$/;"	f	file:
ts	host/minilua.c	/^TString*ts;$/;"	m	union:__anon16	file:
ts	host/minilua.c	/^union TString ts;$/;"	m	union:GCObject	typeref:union:GCObject::TString	file:
tsv	host/minilua.c	/^}tsv;$/;"	m	union:TString	typeref:struct:TString::__anon9	file:
tsvalue	host/minilua.c	247;"	d	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:GCheader	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Proto	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:TString::__anon9	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Table	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:Udata::__anon10	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:UpVal	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;$/;"	m	struct:lua_State	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:CClosure	file:
tt	host/minilua.c	/^GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;$/;"	m	struct:LClosure	file:
tt	host/minilua.c	/^Value value;int tt;$/;"	m	struct:TKey::__anon13	file:
tt	host/minilua.c	/^Value value;int tt;$/;"	m	struct:lua_TValue	file:
ttisboolean	host/minilua.c	238;"	d	file:
ttisfunction	host/minilua.c	237;"	d	file:
ttislightuserdata	host/minilua.c	241;"	d	file:
ttisnil	host/minilua.c	233;"	d	file:
ttisnumber	host/minilua.c	234;"	d	file:
ttisstring	host/minilua.c	235;"	d	file:
ttistable	host/minilua.c	236;"	d	file:
ttisthread	host/minilua.c	240;"	d	file:
ttisuserdata	host/minilua.c	239;"	d	file:
ttype	host/minilua.c	242;"	d	file:
tv	lj_obj.h	/^    TValue tv;		\/* If closed: the value itself. *\/$/;"	m	union:GCupval::__anon105
tvchecklive	lj_obj.h	740;"	d
tvhaskslot	lj_parse.c	193;"	d	file:
tvisbool	lj_obj.h	654;"	d
tviscdata	lj_obj.h	664;"	d
tvisfalse	lj_obj.h	652;"	d
tvisfunc	lj_obj.h	661;"	d
tvisgcv	lj_obj.h	674;"	d
tvisint	lj_obj.h	668;"	d
tvislightud	lj_obj.h	656;"	d
tvislightud	lj_obj.h	658;"	d
tvismzero	lj_obj.h	684;"	d
tvisnan	lj_obj.h	677;"	d
tvisnil	lj_obj.h	651;"	d
tvisnum	lj_obj.h	669;"	d
tvisnumber	lj_obj.h	667;"	d
tvispone	lj_obj.h	685;"	d
tvispri	lj_obj.h	672;"	d
tvisproto	lj_obj.h	663;"	d
tvispzero	lj_obj.h	683;"	d
tvisstr	lj_obj.h	660;"	d
tvistab	lj_obj.h	665;"	d
tvistabud	lj_obj.h	673;"	d
tvisthread	lj_obj.h	662;"	d
tvistrue	lj_obj.h	653;"	d
tvistruecond	lj_obj.h	671;"	d
tvisudata	lj_obj.h	666;"	d
tviswhite	lj_gc.h	35;"	d
tviszero	lj_obj.h	679;"	d
tviszero	lj_obj.h	681;"	d
tvk	host/minilua.c	/^TValue tvk;$/;"	m	union:TKey	file:
tvkslot	lj_parse.c	194;"	d	file:
tvref	lj_obj.h	166;"	d
twoto	host/minilua.c	367;"	d	file:
txtToken	host/minilua.c	/^static const char*txtToken(LexState*ls,int token){$/;"	f	file:
type	host/buildvm.h	/^  int type;$/;"	m	struct:BuildReloc
type	host/buildvm_peobj.c	/^  uint16_t type;$/;"	m	struct:PEreloc	file:
type	host/buildvm_peobj.c	/^  uint16_t type;$/;"	m	struct:PEsym	file:
type	lib_io.c	/^  uint32_t type;	\/* File type. *\/$/;"	m	struct:IOFileUD	file:
type	lj_gdbjit.c	/^  uint16_t type;$/;"	m	struct:ELFheader	file:
type	lj_gdbjit.c	/^  uint32_t type;$/;"	m	struct:ELFsectheader	file:
u	host/minilua.c	/^typedef union{double u;void*s;long l;}L_Umaxalign;$/;"	m	union:__anon7	file:
u	host/minilua.c	/^union Udata u;$/;"	m	union:GCObject	typeref:union:GCObject::Udata	file:
u	host/minilua.c	/^}u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon11	file:
u	host/minilua.c	/^}u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon14	file:
u	lj_def.h	/^  uint16_t u;$/;"	m	union:Unaligned16
u	lj_def.h	/^  uint32_t u;$/;"	m	union:Unaligned32
u	lj_parse.c	/^  } u;$/;"	m	struct:ExpDesc	typeref:union:ExpDesc::__anon41	file:
u32	lj_cparse.h	/^    uint32_t u32;	\/* Value for CTID_UINT32. *\/$/;"	m	union:CPValue::__anon76
u32	lj_obj.h	/^  } u32;$/;"	m	union:TValue	typeref:struct:TValue::__anon103
u32ptr	lj_def.h	93;"	d
u64	lib_math.c	/^typedef union { uint64_t u64; double d; } U64double;$/;"	m	union:__anon84	file:
u64	lj_obj.h	/^  uint64_t u64;		\/* 64 bit pattern overlaps number. *\/$/;"	m	union:TValue
uchar	host/minilua.c	6996;"	d	file:
uchar	lib_string.c	168;"	d	file:
ud	host/minilua.c	/^void*ud;$/;"	m	struct:global_State	file:
ud	lj_obj.h	/^  GCudata ud;$/;"	m	union:GCobj
udataV	lj_obj.h	712;"	d
uddata	lj_obj.h	259;"	d
udtype	lj_obj.h	/^  uint8_t udtype;	\/* Userdata type. *\/$/;"	m	struct:GCudata
uint16_t	lj_def.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint16_t	lj_def.h	/^typedef unsigned short int uint16_t;$/;"	t
uint32_t	lj_def.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	lj_def.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	lj_def.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	lj_def.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	lj_def.h	/^typedef unsigned __int8 uint8_t;$/;"	t
uint8_t	lj_def.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	lj_def.h	/^typedef unsigned __int32 uintptr_t;$/;"	t
uintptr_t	lj_def.h	/^typedef unsigned __int64 uintptr_t;$/;"	t
uintptr_t	lj_def.h	/^typedef unsigned int uintptr_t;$/;"	t
unbound_search	host/minilua.c	/^static int unbound_search(Table*t,unsigned int j){$/;"	f	file:
unbound_search	lj_tab.c	/^static MSize unbound_search(GCtab *t, MSize j)$/;"	f	file:
unknown	jit/dis_arm.lua	/^local function unknown(ctx)$/;"	f
unknown	jit/dis_mips.lua	/^local function unknown(ctx)$/;"	f
unknown	jit/dis_ppc.lua	/^local function unknown(ctx)$/;"	f
unknown	jit/dis_x86.lua	/^local function unknown(ctx)$/;"	f
unlink_chunk	lj_alloc.c	723;"	d	file:
unlink_first_small_chunk	lj_alloc.c	607;"	d	file:
unlink_large_chunk	lj_alloc.c	671;"	d	file:
unlink_small_chunk	lj_alloc.c	594;"	d	file:
unlinkupval	host/minilua.c	/^static void unlinkupval(UpVal*uv){$/;"	f	file:
unlinkuv	lj_func.c	/^static void unlinkuv(GCupval *uv)$/;"	f	file:
unmakemask	lib_debug.c	/^static char *unmakemask(int mask, char *smask)$/;"	f	file:
unused	host/buildvm_peobj.c	/^  uint8_t unused[3];$/;"	m	struct:PEsymaux	file:
unused	lj_obj.h	/^  uint8_t unused;$/;"	m	struct:GCstr
unused1	lj_jit.h	/^  uint8_t unused1;$/;"	m	struct:GCtrace
unused1	lj_obj.h	/^  uint8_t unused1;$/;"	m	struct:GCState
unused1	lj_obj.h	/^  uint8_t unused1;$/;"	m	struct:GChead
unused2	lj_obj.h	/^  uint8_t unused2;$/;"	m	struct:GCState
unused2	lj_obj.h	/^  uint8_t unused2;$/;"	m	struct:GChead
unused2	lj_obj.h	/^  uint8_t unused2;$/;"	m	struct:GCudata
unwindstack	lj_err.c	/^LJ_NOINLINE static void unwindstack(lua_State *L, TValue *top)$/;"	f	file:
upval	host/minilua.c	/^lu_byte upval;$/;"	m	struct:BlockCnt	file:
upvaldesc	host/minilua.c	/^typedef struct upvaldesc{$/;"	s	file:
upvaldesc	host/minilua.c	/^}upvaldesc;$/;"	t	typeref:struct:upvaldesc	file:
upvals	host/minilua.c	/^UpVal*upvals[1];$/;"	m	struct:LClosure	file:
upvalue	host/minilua.c	/^TValue upvalue[1];$/;"	m	struct:CClosure	file:
upvalue	lj_obj.h	/^  TValue upvalue[1];	\/* Array of upvalues (TValue). *\/$/;"	m	struct:GCfuncC
upvalues	host/minilua.c	/^TString**upvalues;$/;"	m	struct:Proto	file:
upvalues	host/minilua.c	/^upvaldesc upvalues[60];$/;"	m	struct:FuncState	file:
usage	host/buildvm.c	/^static void usage(void)$/;"	f	file:
usage	host/genminilua.lua	/^local function usage()$/;"	f
usage	jit/bcsave.lua	/^local function usage()$/;"	f
uv	host/minilua.c	/^struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal	file:
uv	host/minilua.c	/^}uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon10	file:
uv	lj_obj.h	/^  GCupval uv;$/;"	m	union:GCobj
uv	lj_obj.h	/^  MRef uv;		\/* Upvalue list. local slot|0x8000 or parent uv idx. *\/$/;"	m	struct:GCproto
uvalue	host/minilua.c	249;"	d	file:
uvhead	host/minilua.c	/^UpVal uvhead;$/;"	m	struct:global_State	file:
uvhead	lj_obj.h	/^  GCupval uvhead;	\/* Head of double-linked list of all open upvalues. *\/$/;"	m	struct:global_State
uvinfo	lj_obj.h	/^  MRef uvinfo;		\/* Upvalue names. *\/$/;"	m	struct:GCproto
uvmap	lj_parse.c	/^  VarIndex uvmap[LJ_MAX_UPVAL];	\/* Map from upvalue to variable idx. *\/$/;"	m	struct:FuncState	file:
uvnext	lj_obj.h	362;"	d
uvprev	lj_obj.h	361;"	d
uvptr	lj_obj.h	/^  GCRef uvptr[1];	\/* Array of _pointers_ to upvalue objects (GCupval). *\/$/;"	m	struct:GCfuncL
uvtmp	lj_parse.c	/^  VarIndex uvtmp[LJ_MAX_UPVAL];	\/* Temporary upvalue map. *\/$/;"	m	struct:FuncState	file:
uvval	lj_obj.h	363;"	d
v	host/minilua.c	/^TValue*v;$/;"	m	struct:UpVal	file:
v	host/minilua.c	/^expdesc v;$/;"	m	struct:ConsControl	file:
v	host/minilua.c	/^expdesc v;$/;"	m	struct:LHS_assign	file:
v	lj_obj.h	/^  MRef v;		\/* Points to stack slot (open) or above (closed). *\/$/;"	m	struct:GCupval
v	lj_parse.c	/^  ExpDesc v;			\/* LHS variable. *\/$/;"	m	struct:LHSVarList	file:
vaddr	host/buildvm_peobj.c	/^  uint32_t vaddr;$/;"	m	struct:PEreloc	file:
vaddr	host/buildvm_peobj.c	/^  uint32_t vaddr;$/;"	m	struct:PEsection	file:
val	lj_cparse.h	/^  CPValue val;		\/* Token value. *\/$/;"	m	struct:CPState
val	lj_jit.h	/^  IRRef1 val;		\/* Value: reference after conversion. *\/$/;"	m	struct:BPropEntry
val	lj_jit.h	/^  uint16_t val;		\/* Penalty value, i.e. hotcount start. *\/$/;"	m	struct:HotPenalty
val	lj_obj.h	/^  TValue val;		\/* Value object. Must be first field. *\/$/;"	m	struct:Node
val	lj_record.h	/^  TRef val;		\/* Value reference for a store or 0 for a load. *\/$/;"	m	struct:RecordIndex
valiswhite	host/minilua.c	577;"	d	file:
value	host/buildvm_peobj.c	/^  uint32_t value;$/;"	m	struct:PEsym	file:
value	host/minilua.c	/^TValue value;$/;"	m	union:UpVal::__anon11	file:
value	host/minilua.c	/^Value value;int tt;$/;"	m	struct:TKey::__anon13	file:
value	host/minilua.c	/^Value value;int tt;$/;"	m	struct:lua_TValue	file:
value	lj_gdbjit.c	/^  uintptr_t value;$/;"	m	struct:ELFsymbol	file:
valv	lj_record.h	/^  TValue valv;		\/* Runtime value of stored value. *\/$/;"	m	struct:RecordIndex
var_add	lj_parse.c	/^static void var_add(LexState *ls, BCReg nvars)$/;"	f	file:
var_get	lj_parse.c	1025;"	d	file:
var_lookup	lj_parse.c	1130;"	d	file:
var_lookup_	lj_parse.c	/^static MSize var_lookup_(FuncState *fs, GCstr *name, ExpDesc *e, int first)$/;"	f	file:
var_lookup_local	lj_parse.c	/^static BCReg var_lookup_local(FuncState *fs, GCstr *n)$/;"	f	file:
var_lookup_uv	lj_parse.c	/^static MSize var_lookup_uv(FuncState *fs, MSize vidx, ExpDesc *e)$/;"	f	file:
var_new	lj_parse.c	/^static void var_new(LexState *ls, BCReg n, GCstr *name)$/;"	f	file:
var_new_fixed	lj_parse.c	1049;"	d	file:
var_new_lit	lj_parse.c	1046;"	d	file:
var_remove	lj_parse.c	/^static void var_remove(LexState *ls, BCReg tolevel)$/;"	f	file:
varinfo	lj_obj.h	/^  MRef varinfo;		\/* Names and compressed extents of local variables. *\/$/;"	m	struct:GCproto
varmap	lj_parse.c	/^  VarIndex varmap[LJ_MAX_LOCVAR];  \/* Map from register to variable idx. *\/$/;"	m	struct:FuncState	file:
varname	host/minilua.c	/^TString*varname;$/;"	m	struct:LocVar	file:
vbase	lj_parse.c	/^  MSize vbase;			\/* Base of variable stack for this function. *\/$/;"	m	struct:FuncState	file:
version	lj_gdbjit.c	/^  uint32_t version;$/;"	m	struct:ELFheader	file:
version	lj_gdbjit.c	/^  uint32_t version;$/;"	m	struct:GDBJITdesc	file:
vm 	jit/dis_x86.lua	/^  vm = function(ctx, name, pat)$/;"	f
vmevmask	lj_obj.h	/^  uint8_t vmevmask;	\/* VM event mask. *\/$/;"	m	struct:global_State
vmstate	lj_obj.h	/^  volatile int32_t vmstate;  \/* VM state or current JIT code trace number. *\/$/;"	m	struct:global_State
vsize	host/buildvm_peobj.c	/^  uint32_t vsize;$/;"	m	struct:PEsection	file:
vstack	lj_lex.h	/^  VarInfo *vstack;	\/* Stack for names and extents of local variables. *\/$/;"	m	struct:LexState
vstart	lj_parse.c	/^  MSize vstart;			\/* Start of block-local variables. *\/$/;"	m	struct:FuncScope	file:
vtop	lj_lex.h	/^  MSize vtop;		\/* Top of variable stack. *\/$/;"	m	struct:LexState
wdata	lj_bcwrite.c	/^  void *wdata;			\/* Writer callback data. *\/$/;"	m	struct:BCWriteCtx	file:
weak	host/minilua.c	/^GCObject*weak;$/;"	m	struct:global_State	file:
weak	lj_obj.h	/^  GCRef weak;		\/* List of weak tables (to be cleared). *\/$/;"	m	struct:GCState
weakset	lj_asm.c	/^  RegSet weakset;	\/* Set of weakly referenced registers. *\/$/;"	m	struct:ASMState	file:
wfunc	lj_bcwrite.c	/^  lua_Writer wfunc;		\/* Writer callback. *\/$/;"	m	struct:BCWriteCtx	file:
what	host/minilua.c	/^const char*what;$/;"	m	struct:lua_Debug	file:
what	lj_debug.h	/^  const char *what;$/;"	m	struct:lj_Debug
what	lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug
whilestat	host/minilua.c	/^static void whilestat(LexState*ls,int line){$/;"	f	file:
white2gray	host/minilua.c	1719;"	d	file:
white2gray	lj_gc.c	35;"	d	file:
wrapf	lj_obj.h	/^  lua_CFunction wrapf;	\/* Wrapper for C function calls. *\/$/;"	m	struct:global_State
write_prompt	luajit.c	/^static void write_prompt(lua_State *L, int firstline)$/;"	f	file:
writer_buf	lib_string.c	/^static int writer_buf(lua_State *L, const void *p, size_t size, void *b)$/;"	f	file:
x86Arith	lj_target_x86.h	/^} x86Arith;$/;"	t	typeref:enum:__anon49
x86CC	lj_target_x86.h	/^} x86CC;$/;"	t	typeref:enum:__anon53
x86Group	lj_target_x86.h	/^typedef uint32_t x86Group;$/;"	t
x86Group3	lj_target_x86.h	/^} x86Group3;$/;"	t	typeref:enum:__anon51
x86Group5	lj_target_x86.h	/^} x86Group5;$/;"	t	typeref:enum:__anon52
x86ModRM	lj_target_x86.h	/^} x86ModRM;$/;"	t	typeref:struct:__anon47
x86Mode	lj_target_x86.h	/^} x86Mode;$/;"	t	typeref:enum:__anon46
x86Op	lj_target_x86.h	/^} x86Op;$/;"	t	typeref:enum:__anon48
x86Shift	lj_target_x86.h	/^} x86Shift;$/;"	t	typeref:enum:__anon50
yindex	host/minilua.c	/^static void yindex(LexState*ls,expdesc*v){$/;"	f	file:
z	host/minilua.c	/^ZIO*z;$/;"	m	struct:LexState	file:
z	host/minilua.c	/^ZIO*z;$/;"	m	struct:SParser	file:
zgetc	host/minilua.c	392;"	d	file:
{ __index 	jit/dis_ppc.lua	/^{ __index = function(t, x)$/;"	f
{ __index 	jit/dump.lua	/^  { __index = function(tab, t)$/;"	f
