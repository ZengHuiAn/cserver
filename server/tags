!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTION_ARENA_ATTACK	../framework/package.h	/^	ACTION_ARENA_ATTACK =3,$/;"	e	enum:__anon61
ACTION_GUILD_APPLY	../framework/package.h	/^	ACTION_GUILD_APPLY  =4,$/;"	e	enum:__anon61
ACTION_GUILD_DONATE	../framework/package.h	/^	ACTION_GUILD_DONATE =5,$/;"	e	enum:__anon61
ACTION_GUILD_JOIN_5XING	../framework/package.h	/^	ACTION_GUILD_JOIN_5XING =6,$/;"	e	enum:__anon61
ACTION_LOGIN	../framework/package.h	/^	ACTION_LOGIN =1,$/;"	e	enum:__anon61
ACTION_LOGOUT	../framework/package.h	/^	ACTION_LOGOUT =2,$/;"	e	enum:__anon61
ACTION_MANOR_ATTACK_BOSS	../framework/package.h	/^	ACTION_MANOR_ATTACK_BOSS =9,$/;"	e	enum:__anon61
ACTION_MANOR_ENTER	../framework/package.h	/^	ACTION_MANOR_ENTER =7,$/;"	e	enum:__anon61
ACTION_MANOR_LEAVE	../framework/package.h	/^	ACTION_MANOR_LEAVE =8,$/;"	e	enum:__anon61
ACTION_SHOW_BILLBOARD	../framework/package.h	/^	ACTION_SHOW_BILLBOARD =10,$/;"	e	enum:__anon61
ADDR	lib/sqlite3.c	8577;"	d	file:
AGGREGATE	lib/sqlite3.c	9966;"	d	file:
AG_CODEQUEEU_RESERVE	../framework/codequeue.c	13;"	d	file:
ALIGN	../framework/buffer.c	20;"	d	file:
ALIGN	../framework/lrm.c	26;"	d	file:
ALWAYS	lib/sqlite3.c	116515;"	d	file:
ALWAYS	lib/sqlite3.c	116518;"	d	file:
ALWAYS	lib/sqlite3.c	518;"	d	file:
ALWAYS	lib/sqlite3.c	521;"	d	file:
ALWAYS	lib/sqlite3.c	524;"	d	file:
AMF_INTEGER_MAX	../framework/amf.h	19;"	d
AMF_TYPE	../framework/amf.h	/^typedef  enum amf_type  AMF_TYPE ;$/;"	t	typeref:enum:amf_type
ARMAMENT_LOGGER	../framework/log.h	/^	ARMAMENT_LOGGER,$/;"	e	enum:__anon68
ASSERT_RETURN	../framework/amf.c	571;"	d	file:
Action	lib/battlefield/bone.c	/^struct Action$/;"	s	file:
AdjustTree	lib/sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	lib/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	lib/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	lib/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	lib/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
Appearance	lib/battlefield/role.h	/^struct Appearance$/;"	s
ArraySize	lib/sqlite3.c	8064;"	d	file:
AssignCells	lib/sqlite3.c	130199;"	d	file:
AssignCells	lib/sqlite3.c	130204;"	d	file:
AssignCells	lib/sqlite3.c	130207;"	d	file:
AttachKey	lib/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	lib/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	lib/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	lib/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	lib/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	lib/sqlite3.c	/^  struct AuxData {$/;"	s	struct:VdbeFunc	file:
BATTLEFIELD_DURATION	lib/battlefield/battlefield.c	267;"	d	file:
BATTLEFIELD_FLAG_PVP	lib/battlefield/battlefield.h	43;"	d
BATTLEFIELD_SYSTEM_BEGIN	lib/battlefield/battlefield.h	221;"	d
BATTLEFIELD_SYSTEM_END	lib/battlefield/battlefield.h	240;"	d
BATTLEFIELD_SYSTEM_IMPORT	lib/battlefield/battlefield.h	242;"	d
BATTLE_MAX_ROLE	lib/battlefield/battlefield.h	36;"	d
BFLOG	lib/battlefield/battlefield.h	218;"	d
BIN	Makefile	/^BIN=.\/server$/;"	m
BITVEC_HASH	lib/sqlite3.c	35879;"	d	file:
BITVEC_MXHASH	lib/sqlite3.c	35874;"	d	file:
BITVEC_NBIT	lib/sqlite3.c	35868;"	d	file:
BITVEC_NELEM	lib/sqlite3.c	35866;"	d	file:
BITVEC_NINT	lib/sqlite3.c	35871;"	d	file:
BITVEC_NPTR	lib/sqlite3.c	35881;"	d	file:
BITVEC_SZ	lib/sqlite3.c	35852;"	d	file:
BITVEC_SZELEM	lib/sqlite3.c	35864;"	d	file:
BITVEC_TELEM	lib/sqlite3.c	35862;"	d	file:
BITVEC_USIZE	lib/sqlite3.c	35856;"	d	file:
BMS	lib/sqlite3.c	10719;"	d	file:
BODY_TYPE_ASSIGN	lib/fight_type.h	6;"	d
BTCURSOR_MAX_DEPTH	lib/sqlite3.c	48913;"	d	file:
BTREE_AUTOVACUUM_FULL	lib/sqlite3.c	8207;"	d	file:
BTREE_AUTOVACUUM_INCR	lib/sqlite3.c	8208;"	d	file:
BTREE_AUTOVACUUM_NONE	lib/sqlite3.c	8206;"	d	file:
BTREE_BLOBKEY	lib/sqlite3.c	8282;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	lib/sqlite3.c	8306;"	d	file:
BTREE_FILE_FORMAT	lib/sqlite3.c	8305;"	d	file:
BTREE_FREE_PAGE_COUNT	lib/sqlite3.c	8303;"	d	file:
BTREE_INCR_VACUUM	lib/sqlite3.c	8310;"	d	file:
BTREE_INTKEY	lib/sqlite3.c	8281;"	d	file:
BTREE_LARGEST_ROOT_PAGE	lib/sqlite3.c	8307;"	d	file:
BTREE_MEMORY	lib/sqlite3.c	8234;"	d	file:
BTREE_OMIT_JOURNAL	lib/sqlite3.c	8233;"	d	file:
BTREE_SCHEMA_VERSION	lib/sqlite3.c	8304;"	d	file:
BTREE_SINGLE	lib/sqlite3.c	8235;"	d	file:
BTREE_TEXT_ENCODING	lib/sqlite3.c	8308;"	d	file:
BTREE_UNORDERED	lib/sqlite3.c	8236;"	d	file:
BTREE_USER_VERSION	lib/sqlite3.c	8309;"	d	file:
BTS_EXCLUSIVE	lib/sqlite3.c	48884;"	d	file:
BTS_INITIALLY_EMPTY	lib/sqlite3.c	48882;"	d	file:
BTS_NO_WAL	lib/sqlite3.c	48883;"	d	file:
BTS_PAGESIZE_FIXED	lib/sqlite3.c	48880;"	d	file:
BTS_PENDING	lib/sqlite3.c	48885;"	d	file:
BTS_READ_ONLY	lib/sqlite3.c	48879;"	d	file:
BTS_SECURE_DELETE	lib/sqlite3.c	48881;"	d	file:
BUFFER_HELP	lib/battlefield/buffer.h	15;"	d
BUFFER_PREFIX	lib/battlefield/buffer.c	91;"	d	file:
BULLET_FLAG_FROM_BUFFER	lib/battlefield/bullet.h	28;"	d
BULLET_FLAG_NOT_HURT_ACTION	lib/battlefield/bullet.h	30;"	d
BULLET_FLAG_REAL_VALUE	lib/battlefield/bullet.h	29;"	d
BYTESWAP32	lib/sqlite3.c	45912;"	d	file:
Base64decode	lib/lua_base64.c	/^static int Base64decode(char *bufplain, const char *bufcoded)$/;"	f	file:
Base64decode_len	lib/lua_base64.c	/^static int Base64decode_len(const char *bufcoded)$/;"	f	file:
Base64encode	lib/lua_base64.c	/^static int Base64encode(char *encoded, const char *string, int len)$/;"	f	file:
Base64encode_len	lib/lua_base64.c	/^static int Base64encode_len(int len)$/;"	f	file:
BattlefieldEventType	lib/battlefield/event.h	/^enum BattlefieldEventType {$/;"	g
BenignMallocHooks	lib/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	lib/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	lib/sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	lib/sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	lib/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
BodyType	lib/fight_type.h	/^typedef char BodyType[32];$/;"	t
Bone	lib/battlefield/bone.c	/^struct Bone$/;"	s	file:
Bool	lib/sqlite3.c	/^typedef unsigned char Bool;$/;"	t	file:
BtCursor	lib/sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	lib/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	lib/sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	lib/sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	lib/sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	lib/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	lib/sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	lib/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BusyHandler	lib/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	lib/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	lib/sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	lib/sqlite3.c	12967;"	d	file:
CHARACTER_INFO	lib/fight_type.h	/^}CHARACTER_INFO, *PCHARACTER_INFO;$/;"	t	typeref:struct:tagCHARACTER_INFO
CHAT_COUNTRY	../framework/package.h	1547;"	d
CHAT_GUILD	../framework/package.h	1548;"	d
CHAT_SYSTEM	../framework/package.h	1549;"	d
CHAT_WORLD	../framework/package.h	1546;"	d
CHECK	../framework/buffer.c	70;"	d	file:
CHECK_FOR_INTERRUPT	lib/sqlite3.c	64901;"	d	file:
CHECK_PAGE	lib/sqlite3.c	39590;"	d	file:
CHECK_PAGE	lib/sqlite3.c	39601;"	d	file:
CLEARBIT	lib/sqlite3.c	36112;"	d	file:
CODEC1	lib/sqlite3.c	38839;"	d	file:
CODEC1	lib/sqlite3.c	38845;"	d	file:
CODEC2	lib/sqlite3.c	38841;"	d	file:
CODEC2	lib/sqlite3.c	38846;"	d	file:
COLNAME_COLUMN	lib/sqlite3.c	8560;"	d	file:
COLNAME_DATABASE	lib/sqlite3.c	8558;"	d	file:
COLNAME_DECLTYPE	lib/sqlite3.c	8557;"	d	file:
COLNAME_N	lib/sqlite3.c	8562;"	d	file:
COLNAME_N	lib/sqlite3.c	8565;"	d	file:
COLNAME_N	lib/sqlite3.c	8567;"	d	file:
COLNAME_NAME	lib/sqlite3.c	8556;"	d	file:
COLNAME_TABLE	lib/sqlite3.c	8559;"	d	file:
COLUMN_MASK	lib/sqlite3.c	88593;"	d	file:
COMPILE	Makefile	/^COMPILE=$(CC) -c$/;"	m
CQ	../framework/codequeue.c	/^typedef struct codequeue CQ;$/;"	t	typeref:struct:codequeue	file:
CQLength	../framework/codequeue.c	70;"	d	file:
CQRead	../framework/codequeue.c	/^static size_t CQRead(CQ * queue, size_t begin, void * data, size_t len)$/;"	f	file:
CQSize	../framework/codequeue.c	69;"	d	file:
CQWrite	../framework/codequeue.c	/^static size_t CQWrite(CQ * queue, size_t end, const void * data, size_t len)$/;"	f	file:
CREATE_ACCOUNT_LOGGER	../framework/log.h	/^    CREATE_ACCOUNT_LOGGER,$/;"	e	enum:__anon68
CREATE_PLAYER_LOGGER	../framework/log.h	/^	CREATE_PLAYER_LOGGER,$/;"	e	enum:__anon68
CTIMEOPT_VAL	lib/sqlite3.c	12442;"	d	file:
CTIMEOPT_VAL_	lib/sqlite3.c	12441;"	d	file:
CTRL_FREE	lib/sqlite3.c	16760;"	d	file:
CTRL_LOGSIZE	lib/sqlite3.c	16759;"	d	file:
CURSOR_FAULT	lib/sqlite3.c	48983;"	d	file:
CURSOR_INVALID	lib/sqlite3.c	48980;"	d	file:
CURSOR_REQUIRESEEK	lib/sqlite3.c	48982;"	d	file:
CURSOR_VALID	lib/sqlite3.c	48981;"	d	file:
C_ACCEPT_QUEST_REQUEST	../framework/package.h	645;"	d
C_ACCEPT_QUEST_RESPOND	../framework/package.h	648;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_DRAW_ACTIVITY_REQUEST	../framework/package.h	1172;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_DRAW_ACTIVITY_RESPOND	../framework/package.h	1173;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_DRAW_TOTAL_REQUEST	../framework/package.h	1169;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_DRAW_TOTAL_RESPOND	../framework/package.h	1170;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_ACTIVITY_DRAWABLE_REQUEST	../framework/package.h	1199;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_ACTIVITY_DRAWABLE_RESPOND	../framework/package.h	1200;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_CONFIG_REQUEST	../framework/package.h	1226;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_CONFIG_RESPOND	../framework/package.h	1227;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_REQUEST	../framework/package.h	1166;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_RESPOND	../framework/package.h	1167;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_TOTAL_DRAWABLE_REQUEST	../framework/package.h	1196;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_CONSUME_GOLD_QUERY_TOTAL_DRAWABLE_RESPOND	../framework/package.h	1197;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_DRAW_REQUEST	../framework/package.h	1247;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_DRAW_RESPOND	../framework/package.h	1248;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_CONFIG_REQUEST	../framework/package.h	1238;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_CONFIG_RESPOND	../framework/package.h	1239;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_DRAWABLE_REQUEST	../framework/package.h	1244;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_DRAWABLE_RESPOND	../framework/package.h	1245;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_REQUEST	../framework/package.h	1241;"	d
C_ACCOUNT_REWARD_FOR_ACCUMULATE_EXCHANGE_QUERY_RESPOND	../framework/package.h	1242;"	d
C_ACCOUNT_REWARD_FOR_CREATE_SCORE_DRAW_REQUEST	../framework/package.h	1295;"	d
C_ACCOUNT_REWARD_FOR_CREATE_SCORE_DRAW_RESPOND	../framework/package.h	1296;"	d
C_ACCOUNT_REWARD_FOR_CREATE_SCORE_QUERY_REQUEST	../framework/package.h	1292;"	d
C_ACCOUNT_REWARD_FOR_CREATE_SCORE_QUERY_RESPOND	../framework/package.h	1293;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_DRAW_REQUEST	../framework/package.h	1181;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_DRAW_RESPOND	../framework/package.h	1182;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_QUERY_CONFIG_REQUEST	../framework/package.h	1223;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_QUERY_CONFIG_RESPOND	../framework/package.h	1224;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_QUERY_REQUEST	../framework/package.h	1178;"	d
C_ACCOUNT_REWARD_FOR_EXCHANGE_GIFT_QUERY_RESPOND	../framework/package.h	1179;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_DRAW_REQUEST	../framework/package.h	1184;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_DRAW_RESPOND	../framework/package.h	1185;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_QUERY_CONFIG_REQUEST	../framework/package.h	1229;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_QUERY_CONFIG_RESPOND	../framework/package.h	1230;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_QUERY_REQUEST	../framework/package.h	1187;"	d
C_ACCOUNT_REWARD_FOR_FESTIVAL_QUERY_RESPOND	../framework/package.h	1188;"	d
C_ACCOUNT_REWARD_FOR_FIRE_SCORE_DRAW_REQUEST	../framework/package.h	1277;"	d
C_ACCOUNT_REWARD_FOR_FIRE_SCORE_DRAW_RESPOND	../framework/package.h	1278;"	d
C_ACCOUNT_REWARD_FOR_FIRE_SCORE_QUERY_REQUEST	../framework/package.h	1274;"	d
C_ACCOUNT_REWARD_FOR_FIRE_SCORE_QUERY_RESPOND	../framework/package.h	1275;"	d
C_ACCOUNT_REWARD_FOR_FIRST_EXCHANGE_DRAW_REQUEST	../framework/package.h	1148;"	d
C_ACCOUNT_REWARD_FOR_FIRST_EXCHANGE_DRAW_RESPOND	../framework/package.h	1149;"	d
C_ACCOUNT_REWARD_FOR_FIRST_EXCHANGE_QUERY_STATUS_REQUEST	../framework/package.h	1145;"	d
C_ACCOUNT_REWARD_FOR_FIRST_EXCHANGE_QUERY_STATUS_RESPOND	../framework/package.h	1146;"	d
C_ACCOUNT_REWARD_FOR_GRADE_DRAW_REQUEST	../framework/package.h	1051;"	d
C_ACCOUNT_REWARD_FOR_GRADE_DRAW_RESPOND	../framework/package.h	1052;"	d
C_ACCOUNT_REWARD_FOR_GRADE_QUERY_DRAWABLE_REQUEST	../framework/package.h	1048;"	d
C_ACCOUNT_REWARD_FOR_GRADE_QUERY_DRAWABLE_RESPOND	../framework/package.h	1049;"	d
C_ACCOUNT_REWARD_FOR_GRADE_SCORE_DRAW_REQUEST	../framework/package.h	1271;"	d
C_ACCOUNT_REWARD_FOR_GRADE_SCORE_DRAW_RESPOND	../framework/package.h	1272;"	d
C_ACCOUNT_REWARD_FOR_GRADE_SCORE_QUERY_REQUEST	../framework/package.h	1268;"	d
C_ACCOUNT_REWARD_FOR_GRADE_SCORE_QUERY_RESPOND	../framework/package.h	1269;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_ACTIVE_REQUEST	../framework/package.h	1142;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_ACTIVE_RESPOND	../framework/package.h	1143;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_DRAW_REQUEST	../framework/package.h	1139;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_DRAW_RESPOND	../framework/package.h	1140;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_QUERY_DRAWABLE_REQUEST	../framework/package.h	1136;"	d
C_ACCOUNT_REWARD_FOR_GROW_PLAN_QUERY_DRAWABLE_RESPOND	../framework/package.h	1137;"	d
C_ACCOUNT_REWARD_FOR_LOGIN_DRAW_REQUEST	../framework/package.h	1033;"	d
C_ACCOUNT_REWARD_FOR_LOGIN_DRAW_RESPOND	../framework/package.h	1034;"	d
C_ACCOUNT_REWARD_FOR_LOGIN_QUERY_STATUS_REQUEST	../framework/package.h	1030;"	d
C_ACCOUNT_REWARD_FOR_LOGIN_QUERY_STATUS_RESPOND	../framework/package.h	1031;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_BUY_REQUEST	../framework/package.h	1154;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_BUY_RESPOND	../framework/package.h	1155;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_DRAW_REQUEST	../framework/package.h	1151;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_DRAW_RESPOND	../framework/package.h	1152;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_QUERY_REQUEST	../framework/package.h	1157;"	d
C_ACCOUNT_REWARD_FOR_MONTH_CARD_QUERY_RESPOND	../framework/package.h	1158;"	d
C_ACCOUNT_REWARD_FOR_ONLINE_DRAW_REQUEST	../framework/package.h	1039;"	d
C_ACCOUNT_REWARD_FOR_ONLINE_DRAW_RESPOND	../framework/package.h	1040;"	d
C_ACCOUNT_REWARD_FOR_ONLINE_QUERY_REQUEST	../framework/package.h	1036;"	d
C_ACCOUNT_REWARD_FOR_ONLINE_QUERY_RESPOND	../framework/package.h	1037;"	d
C_ACCOUNT_REWARD_FOR_POWER_SCORE_DRAW_REQUEST	../framework/package.h	1283;"	d
C_ACCOUNT_REWARD_FOR_POWER_SCORE_DRAW_RESPOND	../framework/package.h	1284;"	d
C_ACCOUNT_REWARD_FOR_POWER_SCORE_QUERY_REQUEST	../framework/package.h	1280;"	d
C_ACCOUNT_REWARD_FOR_POWER_SCORE_QUERY_RESPOND	../framework/package.h	1281;"	d
C_ACCOUNT_REWARD_FOR_TIME_QUERY_REQUEST	../framework/package.h	1208;"	d
C_ACCOUNT_REWARD_FOR_TIME_QUERY_RESPOND	../framework/package.h	1209;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_DRAW_REQUEST	../framework/package.h	1045;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_DRAW_RESPOND	../framework/package.h	1046;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_QUERY_STATUS_REQUEST	../framework/package.h	1042;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_QUERY_STATUS_RESPOND	../framework/package.h	1043;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_SCORE_DRAW_REQUEST	../framework/package.h	1289;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_SCORE_DRAW_RESPOND	../framework/package.h	1290;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_SCORE_QUERY_STATUS_REQUEST	../framework/package.h	1286;"	d
C_ACCOUNT_REWARD_FOR_TOKEN_SCORE_QUERY_STATUS_RESPOND	../framework/package.h	1287;"	d
C_ACCOUNT_REWARD_FOR_VIP_DRAW_REQUEST	../framework/package.h	1163;"	d
C_ACCOUNT_REWARD_FOR_VIP_DRAW_RESPOND	../framework/package.h	1164;"	d
C_ACCOUNT_REWARD_FOR_VIP_QUERY_REQUEST	../framework/package.h	1160;"	d
C_ACCOUNT_REWARD_FOR_VIP_QUERY_RESPOND	../framework/package.h	1161;"	d
C_ACTIVITY_INFO_QUERY_REQUEST	../framework/package.h	907;"	d
C_ACTIVITY_INFO_QUERY_RESPOND	../framework/package.h	909;"	d
C_ACTIVITY_REWARD_REQUEST	../framework/package.h	912;"	d
C_ACTIVITY_REWARD_RESPOND	../framework/package.h	914;"	d
C_ARENA_ATTACK_REQUEST	../framework/package.h	1320;"	d
C_ARENA_ATTACK_RESPOND	../framework/package.h	1323;"	d
C_ARENA_JOIN_REQUEST	../framework/package.h	1326;"	d
C_ARENA_JOIN_RESPOND	../framework/package.h	1328;"	d
C_ARENA_MAX	../framework/package.h	1342;"	d
C_ARENA_MIN	../framework/package.h	1312;"	d
C_ARENA_QUERY_REQUEST	../framework/package.h	1314;"	d
C_ARENA_QUERY_RESPOND	../framework/package.h	1317;"	d
C_ARENA_RESET_CD_REQUEST	../framework/package.h	1336;"	d
C_ARENA_RESET_CD_RESPOND	../framework/package.h	1339;"	d
C_ARENA_REWARD_REQUEST	../framework/package.h	1331;"	d
C_ARENA_REWARD_RESPOND	../framework/package.h	1333;"	d
C_ARMAMENT_ADJUST_PLACEHOLDER_REQUEST	../framework/package.h	1105;"	d
C_ARMAMENT_ADJUST_PLACEHOLDER_RESPOND	../framework/package.h	1106;"	d
C_ARMAMENT_FRIEND_QUERY_REQUEST	../framework/package.h	1307;"	d
C_ARMAMENT_FRIEND_QUERY_RESPOND	../framework/package.h	1308;"	d
C_ARMAMENT_FRIEND_TRAIN_REQUEST	../framework/package.h	948;"	d
C_ARMAMENT_FRIEND_TRAIN_RESPOND	../framework/package.h	949;"	d
C_ARMAMENT_LEVEL_UP_REQUEST	../framework/package.h	963;"	d
C_ARMAMENT_LEVEL_UP_RESPOND	../framework/package.h	966;"	d
C_ARMAMENT_REBORN_REQUEST	../framework/package.h	975;"	d
C_ARMAMENT_REBORN_RESPOND	../framework/package.h	978;"	d
C_ARMAMENT_REWARD_DRAW_REQUEST	../framework/package.h	1232;"	d
C_ARMAMENT_REWARD_DRAW_RESPOND	../framework/package.h	1233;"	d
C_ARMAMENT_STAGE_UP_REQUEST	../framework/package.h	969;"	d
C_ARMAMENT_STAGE_UP_RESPOND	../framework/package.h	972;"	d
C_ARMAMENT_SWAP_PLACEHOLDER_REQUEST	../framework/package.h	1099;"	d
C_ARMAMENT_SWAP_PLACEHOLDER_RESPOND	../framework/package.h	1100;"	d
C_ARMAMENT_SWAP_PLACEHOLDER_SPECIAL_REQUEST	../framework/package.h	1102;"	d
C_ARMAMENT_SWAP_PLACEHOLDER_SPECIAL_RESPOND	../framework/package.h	1103;"	d
C_ARMAMENT_TAKE_OFF_REQUEST	../framework/package.h	987;"	d
C_ARMAMENT_TAKE_OFF_RESPOND	../framework/package.h	990;"	d
C_BAG_MOVE_ADVANCE_REQUEST	../framework/package.h	822;"	d
C_BAG_MOVE_ADVANCE_RESPOND	../framework/package.h	825;"	d
C_BAG_MOVE_REQUEST	../framework/package.h	798;"	d
C_BAG_MOVE_RESPOND	../framework/package.h	801;"	d
C_BATTLEFIELD	Makefile	/^C_BATTLEFIELD=$(wildcard .\/lib\/battlefield\/*.c) $(wildcard .\/lib\/battlefield\/buffer_effect\/*.c) ..\/lib\/libpbc.a$/;"	m
C_BUILDING_MARKET_BUY_REQUEST	../framework/package.h	1120;"	d
C_BUILDING_MARKET_BUY_RESPOND	../framework/package.h	1121;"	d
C_BUILD_CITY_DEFENSE_REQUEST	../framework/package.h	615;"	d
C_BUILD_CITY_DEFENSE_RESPOND	../framework/package.h	618;"	d
C_BUY_EQUIP_REQUEST	../framework/package.h	494;"	d
C_BUY_EQUIP_RESPOND	../framework/package.h	496;"	d
C_BUY_GEM_REQUEST	../framework/package.h	509;"	d
C_BUY_GEM_RESPOND	../framework/package.h	512;"	d
C_BUY_ITEM_REQUEST	../framework/package.h	786;"	d
C_BUY_ITEM_RESPOND	../framework/package.h	789;"	d
C_CALL_SCRIPT_REQUEST	../framework/package.h	1492;"	d
C_CALL_SCRIPT_RESPOND	../framework/package.h	1494;"	d
C_CANCEL_BUILDING_REQUEST	../framework/package.h	316;"	d
C_CANCEL_BUILDING_RESPOND	../framework/package.h	319;"	d
C_CANCEL_QUEST_REQUEST	../framework/package.h	663;"	d
C_CANCEL_QUEST_RESPOND	../framework/package.h	666;"	d
C_CANCEL_TECHNOLOGY_REQUEST	../framework/package.h	350;"	d
C_CANCEL_TECHNOLOGY_RESPOND	../framework/package.h	353;"	d
C_CHANGE_ARMAMENT_PLACEHOLDER_REQUEST	../framework/package.h	957;"	d
C_CHANGE_ARMAMENT_PLACEHOLDER_RESPOND	../framework/package.h	960;"	d
C_CHANGE_BIO_REQUEST	../framework/package.h	669;"	d
C_CHANGE_BIO_RESPOND	../framework/package.h	671;"	d
C_CHANGE_HEAD_REQUEST	../framework/package.h	674;"	d
C_CHANGE_HEAD_RESPOND	../framework/package.h	676;"	d
C_CHANGE_VISIT_HERO_REQUEST	../framework/package.h	877;"	d
C_CHANGE_VISIT_HERO_RESPOND	../framework/package.h	880;"	d
C_CHAT_MESSAGE_NOTIFY	../framework/package.h	1555;"	d
C_CHAT_MESSAGE_REQUEST	../framework/package.h	1545;"	d
C_CHAT_MESSAGE_RESPOND	../framework/package.h	1552;"	d
C_CLEAN_COOLDOWN_REQEUST	../framework/package.h	705;"	d
C_CLEAN_COOLDOWN_RESPOND	../framework/package.h	708;"	d
C_CREATE_PLAYER_REQUEST	../framework/package.h	298;"	d
C_CREATE_PLAYER_RESPOND	../framework/package.h	301;"	d
C_DATA_CHANGE_REQUEST	../framework/package.h	604;"	d
C_DONATE_REQUEST	../framework/package.h	933;"	d
C_DONATE_RESPOND	../framework/package.h	934;"	d
C_DO_STORY_QUERY_LOG_REQUEST	../framework/package.h	922;"	d
C_DO_STORY_QUERY_LOG_RESPOND	../framework/package.h	924;"	d
C_DRAW_ARMAMENT_MARK_REWARD_REQUEST	../framework/package.h	1211;"	d
C_DRAW_ARMAMENT_MARK_REWARD_RESPOND	../framework/package.h	1212;"	d
C_EASY_QUERY_KING_SKILL_REQUEST	../framework/package.h	1193;"	d
C_EASY_QUERY_KING_SKILL_RESPOND	../framework/package.h	1194;"	d
C_EASY_SET_KING_SKILL_REQUEST	../framework/package.h	1190;"	d
C_EASY_SET_KING_SKILL_RESPOND	../framework/package.h	1191;"	d
C_ECHO	../framework/package.h	281;"	d
C_EQUIP_SET_GEM_RESPOND	../framework/package.h	491;"	d
C_EQUIP_SET_GEM_RQUEST	../framework/package.h	488;"	d
C_EXCHANGE_BATTLE_STAR_REQUEST	../framework/package.h	1000;"	d
C_EXCHANGE_BATTLE_STAR_RESPOND	../framework/package.h	1003;"	d
C_EXCHANGE_EQUIP_REQUEST	../framework/package.h	633;"	d
C_EXCHANGE_EQUIP_RESPOND	../framework/package.h	636;"	d
C_EXCHANGE_HERO_REQUEST	../framework/package.h	459;"	d
C_EXCHANGE_HERO_RESPOND	../framework/package.h	462;"	d
C_EXCHANGE_REQUEST	../framework/package.h	828;"	d
C_EXCHANGE_RESPOND	../framework/package.h	831;"	d
C_FARM_GAIN_ALL_REQUEST	../framework/package.h	695;"	d
C_FARM_GAIN_ALL_RESPOND	../framework/package.h	697;"	d
C_FARM_GAIN_REQUEST	../framework/package.h	556;"	d
C_FARM_GAIN_RESPOND	../framework/package.h	559;"	d
C_FARM_PLANT_REQUEST	../framework/package.h	550;"	d
C_FARM_PLANT_RESPOND	../framework/package.h	553;"	d
C_FINISH_QUEST_REQUEST	../framework/package.h	651;"	d
C_FINISH_QUEST_RESPOND	../framework/package.h	654;"	d
C_FINISH_TAX_EVENT_REQUEST	../framework/package.h	679;"	d
C_FINISH_TAX_EVENT_RESPOND	../framework/package.h	682;"	d
C_FINISH_TRAIN_HERO_REQUEST	../framework/package.h	532;"	d
C_FINISH_TRAIN_HERO_RESPOND	../framework/package.h	535;"	d
C_FIRE_ATTACK_REQUEST	../framework/package.h	724;"	d
C_FIRE_ATTACK_RESPOND	../framework/package.h	727;"	d
C_FIRE_AUTO_FIGHT_REQUEST	../framework/package.h	1084;"	d
C_FIRE_AUTO_FIGHT_RESPOND	../framework/package.h	1086;"	d
C_FIRE_AUTO_REQUEST	../framework/package.h	730;"	d
C_FIRE_AUTO_RESPOND	../framework/package.h	733;"	d
C_FIRE_CHECK_FIGHT_REQUEST	../framework/package.h	1079;"	d
C_FIRE_CHECK_FIGHT_RESPOND	../framework/package.h	1081;"	d
C_FIRE_PREPARE_FIGHT_REQUEST	../framework/package.h	1074;"	d
C_FIRE_PREPARE_FIGHT_RESPOND	../framework/package.h	1076;"	d
C_FIRE_QUERY_REQUEST	../framework/package.h	712;"	d
C_FIRE_QUERY_RESPOND	../framework/package.h	715;"	d
C_FIRE_RESET_REQUEST	../framework/package.h	718;"	d
C_FIRE_RESET_RESPOND	../framework/package.h	721;"	d
C_GEMSTONE_COMPOSE_REQUEST	../framework/package.h	539;"	d
C_GEMSTONE_COMPOSE_RESPOND	../framework/package.h	542;"	d
C_GET_FIGHT_DATA_REQUEST	../framework/package.h	1262;"	d
C_GET_FIGHT_DATA_RESPOND	../framework/package.h	1263;"	d
C_GET_SALARY_REQUEST	../framework/package.h	627;"	d
C_GET_SALARY_RESPOND	../framework/package.h	630;"	d
C_GET_SERVICE_STATUS_REQUEST	../framework/package.h	1507;"	d
C_GET_SERVICE_STATUS_RESPOND	../framework/package.h	1510;"	d
C_GROW_HERO_REQUEST	../framework/package.h	465;"	d
C_GROW_HERO_RESPOND	../framework/package.h	468;"	d
C_GUILD_AUDIT_REQUEST	../framework/package.h	1403;"	d
C_GUILD_AUDIT_RESPOND	../framework/package.h	1405;"	d
C_GUILD_CLEAN_ALL_REQUEST	../framework/package.h	1459;"	d
C_GUILD_CLEAN_ALL_RESPOND	../framework/package.h	1461;"	d
C_GUILD_CREATE_REQUEST	../framework/package.h	1362;"	d
C_GUILD_CREATE_RESPOND	../framework/package.h	1364;"	d
C_GUILD_INVITE_REQUEST	../framework/package.h	1435;"	d
C_GUILD_INVITE_RESPOND	../framework/package.h	1436;"	d
C_GUILD_JOIN_REQUEST	../framework/package.h	1368;"	d
C_GUILD_JOIN_RESPOND	../framework/package.h	1370;"	d
C_GUILD_KICK_REQUEST	../framework/package.h	1454;"	d
C_GUILD_KICK_RESPOND	../framework/package.h	1456;"	d
C_GUILD_LEAVE_REQUEST	../framework/package.h	1373;"	d
C_GUILD_LEAVE_RESPOND	../framework/package.h	1375;"	d
C_GUILD_MAX	../framework/package.h	1482;"	d
C_GUILD_MIN	../framework/package.h	1355;"	d
C_GUILD_QUERY_APPLY_REQUEST	../framework/package.h	1398;"	d
C_GUILD_QUERY_APPLY_RESPOND	../framework/package.h	1400;"	d
C_GUILD_QUERY_BY_TITLE_REQUEST	../framework/package.h	1448;"	d
C_GUILD_QUERY_BY_TITLE_RESPOND	../framework/package.h	1451;"	d
C_GUILD_QUERY_GUILD_LIST_REQUEST	../framework/package.h	1378;"	d
C_GUILD_QUERY_GUILD_LIST_RESPOND	../framework/package.h	1380;"	d
C_GUILD_QUERY_MEMBERS_REQUEST	../framework/package.h	1383;"	d
C_GUILD_QUERY_MEMBERS_RESPOND	../framework/package.h	1385;"	d
C_GUILD_QUERY_PLAYER_REQUEST	../framework/package.h	1438;"	d
C_GUILD_QUERY_PLAYER_RESPOND	../framework/package.h	1440;"	d
C_GUILD_QUERY_REQUEST	../framework/package.h	1357;"	d
C_GUILD_QUERY_RESPOND	../framework/package.h	1359;"	d
C_GUILD_QUEYR_BY_PLAYER_REQUEST	../framework/package.h	1428;"	d
C_GUILD_QUEYR_BY_PLAYER_RESPOND	../framework/package.h	1430;"	d
C_GUILD_SETTING_REQUEST	../framework/package.h	1408;"	d
C_GUILD_SETTING_RESPOND	../framework/package.h	1410;"	d
C_GUILD_SET_LEADER_REQUEST	../framework/package.h	1443;"	d
C_GUILD_SET_LEADER_RESPOND	../framework/package.h	1445;"	d
C_GUILD_SET_TITLE_REQUEST	../framework/package.h	1433;"	d
C_GUILD_SET_TITLE_RESPOND	../framework/package.h	1434;"	d
C_GUILD_TRANSFER_REQUEST	../framework/package.h	1413;"	d
C_GUILD_TRANSFER_RESPOND	../framework/package.h	1415;"	d
C_INVITE_HERO_REQUEST	../framework/package.h	774;"	d
C_INVITE_HERO_RESPOND	../framework/package.h	777;"	d
C_I_AM_GOD_REQEUST	../framework/package.h	1487;"	d
C_I_AM_GOD_RESPOND	../framework/package.h	1489;"	d
C_JOIN_CHANNEL_REQUEST	../framework/package.h	1533;"	d
C_JOIN_CHANNEL_RESPOND	../framework/package.h	1536;"	d
C_KING_AVATAR_CHANGE_REQUEST	../framework/package.h	768;"	d
C_KING_AVATAR_CHANGE_RESPOND	../framework/package.h	771;"	d
C_KING_ENSIGN_QUERY_REQUEST	../framework/package.h	1298;"	d
C_KING_ENSIGN_QUERY_RESPOND	../framework/package.h	1299;"	d
C_KING_ENSIGN_SET_REQUEST	../framework/package.h	1304;"	d
C_KING_ENSIGN_SET_RESPOND	../framework/package.h	1305;"	d
C_KING_ENSIGN_TRAIN_REQUEST	../framework/package.h	1301;"	d
C_KING_ENSIGN_TRAIN_RESPOND	../framework/package.h	1302;"	d
C_LEAVE_CHANNEL_REQUEST	../framework/package.h	1539;"	d
C_LEAVE_CHANNEL_RESPOND	../framework/package.h	1542;"	d
C_LEVY_TAX_REQUEST	../framework/package.h	621;"	d
C_LEVY_TAX_RESPOND	../framework/package.h	624;"	d
C_LOGIN_REQUEST	../framework/package.h	283;"	d
C_LOGIN_RESPOND	../framework/package.h	285;"	d
C_LOGOUT_REQUEST	../framework/package.h	288;"	d
C_LOGOUT_RESPOND	../framework/package.h	289;"	d
C_MAIL_CONTACT_ADD_REQUEST	../framework/package.h	1704;"	d
C_MAIL_CONTACT_ADD_RESPOND	../framework/package.h	1707;"	d
C_MAIL_CONTACT_DEL_REQUEST	../framework/package.h	1710;"	d
C_MAIL_CONTACT_DEL_RESPOND	../framework/package.h	1713;"	d
C_MAIL_CONTACT_GET_REQUEST	../framework/package.h	1698;"	d
C_MAIL_CONTACT_GET_RESPOND	../framework/package.h	1701;"	d
C_MAIL_DEL_REQUEST	../framework/package.h	1686;"	d
C_MAIL_DEL_RESPOND	../framework/package.h	1689;"	d
C_MAIL_GET_NOTIRY_MESSAGE_REQUEST	../framework/package.h	1716;"	d
C_MAIL_GET_NOTIRY_MESSAGE_RESPOND	../framework/package.h	1719;"	d
C_MAIL_GET_REQUEST	../framework/package.h	1674;"	d
C_MAIL_GET_RESPOND	../framework/package.h	1677;"	d
C_MAIL_MARK_REQUEST	../framework/package.h	1680;"	d
C_MAIL_MARK_RESPOND	../framework/package.h	1683;"	d
C_MAIL_MAX	../framework/package.h	1729;"	d
C_MAIL_MIN	../framework/package.h	1667;"	d
C_MAIL_QUERY_REQUEST	../framework/package.h	1668;"	d
C_MAIL_QUERY_RESPOND	../framework/package.h	1671;"	d
C_MAIL_SEND_REQUEST	../framework/package.h	1692;"	d
C_MAIL_SEND_RESPOND	../framework/package.h	1695;"	d
C_MERCHANDISE_REQUEST	../framework/package.h	840;"	d
C_MERCHANDISE_RESPOND	../framework/package.h	843;"	d
C_MONTH_SIGN_QUERY_REQUEST	../framework/package.h	939;"	d
C_MONTH_SIGN_QUERY_RESPOND	../framework/package.h	940;"	d
C_MONTH_SIGN_SIGN_REQUEST	../framework/package.h	942;"	d
C_MONTH_SIGN_SIGN_RESPOND	../framework/package.h	943;"	d
C_MONTH_SIGN_TOTAL_REWARD_REQUEST	../framework/package.h	945;"	d
C_MONTH_SIGN_TOTAL_REWARD_RESPOND	../framework/package.h	946;"	d
C_NICK_NAME_CHANGE_REQUEST	../framework/package.h	1175;"	d
C_NICK_NAME_CHANGE_RESPOND	../framework/package.h	1176;"	d
C_PLAYER_DATA_CHANGE	../framework/package.h	606;"	d
C_QUERY_ARMAMENT_MARK_REWARD_DRAWABLE_REQUEST	../framework/package.h	1217;"	d
C_QUERY_ARMAMENT_MARK_REWARD_DRAWABLE_RESPOND	../framework/package.h	1218;"	d
C_QUERY_ARMAMENT_MARK_REWARD_INFO_REQUEST	../framework/package.h	1214;"	d
C_QUERY_ARMAMENT_MARK_REWARD_INFO_RESPOND	../framework/package.h	1215;"	d
C_QUERY_ARMAMENT_REQUEST	../framework/package.h	951;"	d
C_QUERY_ARMAMENT_RESPOND	../framework/package.h	954;"	d
C_QUERY_BATTLE_REWARD_STATUS_REQUEST	../framework/package.h	1090;"	d
C_QUERY_BATTLE_REWARD_STATUS_RESPOND	../framework/package.h	1093;"	d
C_QUERY_BATTLE_STAR_COUNT_REQUEST	../framework/package.h	994;"	d
C_QUERY_BATTLE_STAR_COUNT_RESPOND	../framework/package.h	997;"	d
C_QUERY_BONUS_REQUEST	../framework/package.h	1220;"	d
C_QUERY_BONUS_RESPOND	../framework/package.h	1221;"	d
C_QUERY_BUILDING_MARKET_REQUEST	../framework/package.h	1123;"	d
C_QUERY_BUILDING_MARKET_RESPOND	../framework/package.h	1124;"	d
C_QUERY_BUILDING_REQUEST	../framework/package.h	310;"	d
C_QUERY_BUILDING_RESPOND	../framework/package.h	313;"	d
C_QUERY_CITY_REQUEST	../framework/package.h	441;"	d
C_QUERY_CITY_RESPOND	../framework/package.h	444;"	d
C_QUERY_COOLDOWN_REQUEST	../framework/package.h	435;"	d
C_QUERY_COOLDOWN_RESPOND	../framework/package.h	438;"	d
C_QUERY_EQUIP_REQUEST	../framework/package.h	471;"	d
C_QUERY_EQUIP_RESPOND	../framework/package.h	473;"	d
C_QUERY_FARM_REQUEST	../framework/package.h	545;"	d
C_QUERY_FARM_RESPOND	../framework/package.h	547;"	d
C_QUERY_FIGHT_DATA_REQUEST	../framework/package.h	852;"	d
C_QUERY_FIGHT_DATA_RESPOND	../framework/package.h	855;"	d
C_QUERY_FIGHT_REQUEST	../framework/package.h	420;"	d
C_QUERY_FIGHT_RESPOND	../framework/package.h	423;"	d
C_QUERY_FIRE_RANK_REQUEST	../framework/package.h	1250;"	d
C_QUERY_FIRE_RANK_REQUEST	../framework/package.h	1344;"	d
C_QUERY_FIRE_RANK_RESPOND	../framework/package.h	1251;"	d
C_QUERY_FIRE_RANK_RESPOND	../framework/package.h	1345;"	d
C_QUERY_FLAG_REQUEST	../framework/package.h	685;"	d
C_QUERY_FLAG_RESPOND	../framework/package.h	687;"	d
C_QUERY_FORMATION_FIGHT_INFO_REQUEST	../framework/package.h	981;"	d
C_QUERY_FORMATION_FIGHT_INFO_RESPOND	../framework/package.h	984;"	d
C_QUERY_GEM_REQUEST	../framework/package.h	504;"	d
C_QUERY_GEM_RESPOND	../framework/package.h	506;"	d
C_QUERY_HERO_COMPOSE_REQUEST	../framework/package.h	598;"	d
C_QUERY_HERO_COMPOSE_RESPOND	../framework/package.h	601;"	d
C_QUERY_HERO_REQUEST	../framework/package.h	363;"	d
C_QUERY_HERO_RESPOND	../framework/package.h	366;"	d
C_QUERY_HORSE_REQUEST	../framework/package.h	927;"	d
C_QUERY_HORSE_RESPOND	../framework/package.h	928;"	d
C_QUERY_ITEM_PACKAGE_REQUEST	../framework/package.h	1202;"	d
C_QUERY_ITEM_PACKAGE_RESPOND	../framework/package.h	1203;"	d
C_QUERY_ITEM_REQUEST	../framework/package.h	780;"	d
C_QUERY_ITEM_RESPOND	../framework/package.h	783;"	d
C_QUERY_KING_AVATAR_REQUEST	../framework/package.h	1024;"	d
C_QUERY_KING_AVATAR_RESPOND	../framework/package.h	1025;"	d
C_QUERY_KING_FIGHT_INFO_REQUEST	../framework/package.h	1027;"	d
C_QUERY_KING_FIGHT_INFO_RESPOND	../framework/package.h	1028;"	d
C_QUERY_KING_RANK_REQUEST	../framework/package.h	1256;"	d
C_QUERY_KING_RANK_REQUEST	../framework/package.h	1348;"	d
C_QUERY_KING_RANK_RESPOND	../framework/package.h	1257;"	d
C_QUERY_KING_RANK_RESPOND	../framework/package.h	1349;"	d
C_QUERY_MAP_REQUEST	../framework/package.h	429;"	d
C_QUERY_MAP_RESPOND	../framework/package.h	432;"	d
C_QUERY_MERCHANDISE_REQUEST	../framework/package.h	834;"	d
C_QUERY_MERCHANDISE_RESPOND	../framework/package.h	837;"	d
C_QUERY_MILITARY_POWER_REQUEST	../framework/package.h	1117;"	d
C_QUERY_MILITARY_POWER_RESPOND	../framework/package.h	1118;"	d
C_QUERY_OTHER_HERO_REQUEST	../framework/package.h	846;"	d
C_QUERY_OTHER_HERO_RESPOND	../framework/package.h	849;"	d
C_QUERY_PLAYER_REQUEST	../framework/package.h	291;"	d
C_QUERY_PLAYER_RESPOND	../framework/package.h	293;"	d
C_QUERY_QUEST_REQUEST	../framework/package.h	639;"	d
C_QUERY_QUEST_RESPOND	../framework/package.h	642;"	d
C_QUERY_RANK_REQUEST	../framework/package.h	917;"	d
C_QUERY_RANK_RESPOND	../framework/package.h	919;"	d
C_QUERY_RANK_REWARD_REQUEST	../framework/package.h	1259;"	d
C_QUERY_RANK_REWARD_REQUEST	../framework/package.h	1350;"	d
C_QUERY_RANK_REWARD_RESPOND	../framework/package.h	1260;"	d
C_QUERY_RANK_REWARD_RESPOND	../framework/package.h	1351;"	d
C_QUERY_RESOURCES_REQUEST	../framework/package.h	322;"	d
C_QUERY_RESOURCES_RESPOND	../framework/package.h	325;"	d
C_QUERY_REWARD_REQUEST	../framework/package.h	858;"	d
C_QUERY_REWARD_RESPOND	../framework/package.h	861;"	d
C_QUERY_STAR_RANK_REQUEST	../framework/package.h	1253;"	d
C_QUERY_STAR_RANK_REQUEST	../framework/package.h	1346;"	d
C_QUERY_STAR_RANK_RESPOND	../framework/package.h	1254;"	d
C_QUERY_STAR_RANK_RESPOND	../framework/package.h	1347;"	d
C_QUERY_STORY_REQUEST	../framework/package.h	609;"	d
C_QUERY_STORY_RESPOND	../framework/package.h	611;"	d
C_QUERY_STRATEGY_REQUEST	../framework/package.h	562;"	d
C_QUERY_STRATEGY_RESPOND	../framework/package.h	565;"	d
C_QUERY_TECHNOLOGY_REQUEST	../framework/package.h	338;"	d
C_QUERY_TECHNOLOGY_RESPOND	../framework/package.h	341;"	d
C_QUERY_TOTAL_STAR_COUNT_REQUEST	../framework/package.h	1006;"	d
C_QUERY_TOTAL_STAR_COUNT_RESPOND	../framework/package.h	1009;"	d
C_QUERY_TOTAL_STAR_RANK_REQUEST	../framework/package.h	1012;"	d
C_QUERY_TOTAL_STAR_RANK_RESPOND	../framework/package.h	1015;"	d
C_RECEIVE_REWARD_REQUEST	../framework/package.h	864;"	d
C_RECEIVE_REWARD_RESPOND	../framework/package.h	867;"	d
C_RECRUIT_SOLDIER_REQUEST	../framework/package.h	356;"	d
C_RECRUIT_SOLDIER_RESPOND	../framework/package.h	359;"	d
C_REDEMPTION_REQUEST	../framework/package.h	1205;"	d
C_REDEMPTION_RESPOND	../framework/package.h	1206;"	d
C_RESET_FIGHT_COUNT_REQUEST	../framework/package.h	804;"	d
C_RESET_FIGHT_COUNT_RESPOND	../framework/package.h	807;"	d
C_SELL_EQUIP_REQUEST	../framework/package.h	499;"	d
C_SELL_EQUIP_RESPOND	../framework/package.h	501;"	d
C_SELL_GEM_REQUEST	../framework/package.h	515;"	d
C_SELL_GEM_RESPOND	../framework/package.h	517;"	d
C_SELL_ITEM_REQUEST	../framework/package.h	792;"	d
C_SELL_ITEM_RESPOND	../framework/package.h	795;"	d
C_SET_ACCOUNT_REQUEST	../framework/package.h	1265;"	d
C_SET_ACCOUNT_RESPOND	../framework/package.h	1266;"	d
C_SET_CITY_GUARD_REQUEST	../framework/package.h	447;"	d
C_SET_CITY_GUARD_RESPOND	../framework/package.h	450;"	d
C_SET_COUNTRY_REQUEST	../framework/package.h	700;"	d
C_SET_COUNTRY_RESPOND	../framework/package.h	702;"	d
C_SET_FLAG_REQUEST	../framework/package.h	690;"	d
C_SET_FLAG_RESPOND	../framework/package.h	692;"	d
C_SET_HERO_COMBAT_EFFECTIVE_REQUEST	../framework/package.h	871;"	d
C_SET_HERO_COMBAT_EFFECTIVE_RESPOND	../framework/package.h	874;"	d
C_SET_HERO_COMPOSE_REQUEST	../framework/package.h	592;"	d
C_SET_HERO_COMPOSE_RESPOND	../framework/package.h	595;"	d
C_SET_HERO_TITLE_REQUEST	../framework/package.h	580;"	d
C_SET_HERO_TITLE_RESPOND	../framework/package.h	583;"	d
C_SET_KING_FLAG_REQUEST	../framework/package.h	810;"	d
C_SET_KING_FLAG_RESPOND	../framework/package.h	813;"	d
C_SET_KING_SKILL_LEVEL_REQUEST	../framework/package.h	1131;"	d
C_SET_KING_SKILL_LEVEL_RESPOND	../framework/package.h	1133;"	d
C_SET_KING_TITLE_REQUEST	../framework/package.h	574;"	d
C_SET_KING_TITLE_RESPOND	../framework/package.h	577;"	d
C_SET_PLAYER_POINT_REQUEST	../framework/package.h	586;"	d
C_SET_PLAYER_POINT_RESPOND	../framework/package.h	589;"	d
C_SHARE_REQUEST	../framework/package.h	1235;"	d
C_SHARE_RESPOND	../framework/package.h	1236;"	d
C_SIGN_QUERY_REQUEST	../framework/package.h	883;"	d
C_SIGN_QUERY_RESPOND	../framework/package.h	886;"	d
C_SIGN_REWARD_REQUEST	../framework/package.h	901;"	d
C_SIGN_REWARD_RESPOND	../framework/package.h	904;"	d
C_SIGN_SIGN_REQUEST	../framework/package.h	895;"	d
C_SIGN_SIGN_RESPOND	../framework/package.h	898;"	d
C_STORY_CHECK_FIGHT_REQUEST	../framework/package.h	1059;"	d
C_STORY_CHECK_FIGHT_RESPOND	../framework/package.h	1061;"	d
C_STORY_FIGHT_BATCH_REQUEST	../framework/package.h	1069;"	d
C_STORY_FIGHT_BATCH_RESET_COOL_DOWN_REQUEST	../framework/package.h	1096;"	d
C_STORY_FIGHT_BATCH_RESET_COOL_DOWN_RESPOND	../framework/package.h	1097;"	d
C_STORY_FIGHT_BATCH_RESPOND	../framework/package.h	1071;"	d
C_STORY_FINISH_FIGHT_REQUEST	../framework/package.h	1064;"	d
C_STORY_FINISH_FIGHT_RESPOND	../framework/package.h	1066;"	d
C_STORY_PREPARE_FIGHT_REQUEST	../framework/package.h	1054;"	d
C_STORY_PREPARE_FIGHT_RESPOND	../framework/package.h	1056;"	d
C_SUBMIT_QUEST_REQUEST	../framework/package.h	657;"	d
C_SUBMIT_QUEST_RESPOND	../framework/package.h	660;"	d
C_TACTIC_LEARN_REQUEST	../framework/package.h	755;"	d
C_TACTIC_LEARN_RESPOND	../framework/package.h	758;"	d
C_TACTIC_LEVELUP_REQUEST	../framework/package.h	761;"	d
C_TACTIC_LEVELUP_RESPOND	../framework/package.h	764;"	d
C_TACTIC_MOVE_REQUEST	../framework/package.h	749;"	d
C_TACTIC_MOVE_RESPOND	../framework/package.h	752;"	d
C_TACTIC_ONE_KEY_LEARN_REQUEST	../framework/package.h	1114;"	d
C_TACTIC_ONE_KEY_LEARN_RESPOND	../framework/package.h	1115;"	d
C_TACTIC_ONE_KEY_PROCESS_REQUEST	../framework/package.h	1111;"	d
C_TACTIC_ONE_KEY_PROCESS_RESPOND	../framework/package.h	1112;"	d
C_TACTIC_ONE_KEY_VISIT_REQUEST	../framework/package.h	1108;"	d
C_TACTIC_ONE_KEY_VISIT_RESPOND	../framework/package.h	1109;"	d
C_TACTIC_QUERY_REQUEST	../framework/package.h	737;"	d
C_TACTIC_QUERY_RESPOND	../framework/package.h	740;"	d
C_TACTIC_VISIT_REQUEST	../framework/package.h	743;"	d
C_TACTIC_VISIT_RESPOND	../framework/package.h	746;"	d
C_TICK_REQUEST	../framework/package.h	414;"	d
C_TICK_RESPOND	../framework/package.h	417;"	d
C_TRAIN_HERO_REQUEST	../framework/package.h	526;"	d
C_TRAIN_HERO_RESPOND	../framework/package.h	529;"	d
C_TRAIN_HORSE_BATCH_RESPOND	../framework/package.h	1021;"	d
C_TRAIN_HORSE_BATCH__REQUEST	../framework/package.h	1018;"	d
C_TRAIN_HORSE_REQUEST	../framework/package.h	930;"	d
C_TRAIN_HORSE_RESPOND	../framework/package.h	931;"	d
C_UPGRADE_BUILDING_REQUEST	../framework/package.h	304;"	d
C_UPGRADE_BUILDING_RESPOND	../framework/package.h	307;"	d
C_UPGRADE_EQUIP_RANK_REQUEST	../framework/package.h	816;"	d
C_UPGRADE_EQUIP_RANK_RESPOND	../framework/package.h	819;"	d
C_UPGRADE_EQUIP_REQUEST	../framework/package.h	482;"	d
C_UPGRADE_EQUIP_RESPOND	../framework/package.h	485;"	d
C_UPGRADE_TECHNOLOGY_REQUEST	../framework/package.h	344;"	d
C_UPGRADE_TECHNOLOGY_RESPOND	../framework/package.h	347;"	d
C_USE_CARD_REQUEST	../framework/package.h	936;"	d
C_USE_CARD_RESPOND	../framework/package.h	937;"	d
C_USE_EQUIP_REQUEST	../framework/package.h	476;"	d
C_USE_EQUIP_RESPOND	../framework/package.h	479;"	d
C_USE_ITEM_REQUEST	../framework/package.h	520;"	d
C_USE_ITEM_RESPOND	../framework/package.h	523;"	d
C_USE_STRATEGY_REQUEST	../framework/package.h	568;"	d
C_USE_STRATEGY_RESPOND	../framework/package.h	571;"	d
C_VISIT_HERO_REQUEST	../framework/package.h	453;"	d
C_VISIT_HERO_RESPOND	../framework/package.h	456;"	d
CellInfo	lib/sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	lib/sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	lib/sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	lib/sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	lib/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	lib/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	lib/sqlite3.c	/^struct Column {$/;"	s	file:
Column	lib/sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
CountCtx	lib/sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	lib/sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
D	lib/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DATA_POP	../framework/amf.c	7;"	d	file:
DB_Empty	lib/sqlite3.c	9657;"	d	file:
DB_SchemaLoaded	lib/sqlite3.c	9655;"	d	file:
DB_UnresetViews	lib/sqlite3.c	9656;"	d	file:
DCOORD	lib/sqlite3.c	130342;"	d	file:
DEBUG_LOG	lib/battlefield/battlefield.h	21;"	d
DEBUG_LOG	lib/battlefield/battlefield.h	27;"	d
DECLARE_GET_KEY_FUNC	../framework/hash.h	41;"	d
DECLARE_MODULE	../framework/module.h	16;"	d
DEFAULT_BUFFER_SIZE	../framework/network.c	96;"	d	file:
DIRECT_MODE	lib/sqlite3.c	44049;"	d	file:
DOCID_CMP	lib/sqlite3.c	118878;"	d	file:
DOTLOCK_SUFFIX	lib/sqlite3.c	26928;"	d	file:
DO_OS_MALLOC_TEST	lib/sqlite3.c	14714;"	d	file:
DO_OS_MALLOC_TEST	lib/sqlite3.c	14721;"	d	file:
DO_STACK_CHECK	lib/lua_fight.c	23;"	d	file:
DO_STACK_CHECK	scripts/network.c	38;"	d	file:
DateTime	lib/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	lib/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	lib/sqlite3.c	/^struct Db {$/;"	s	file:
Db	lib/sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	lib/sqlite3.c	9643;"	d	file:
DbFixer	lib/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	lib/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	lib/sqlite3.c	9641;"	d	file:
DbHasProperty	lib/sqlite3.c	9640;"	d	file:
DbPage	lib/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	lib/sqlite3.c	9642;"	d	file:
Deephemeralize	lib/sqlite3.c	64484;"	d	file:
EIGHT_BYTE_ALIGNMENT	lib/sqlite3.c	8020;"	d	file:
EIGHT_BYTE_ALIGNMENT	lib/sqlite3.c	8022;"	d	file:
ENC	lib/sqlite3.c	9824;"	d	file:
END	lib/lua_redis.c	99;"	d	file:
EP2_Irreducible	lib/sqlite3.c	10613;"	d	file:
EP2_MallocedToken	lib/sqlite3.c	10612;"	d	file:
EP_Agg	lib/sqlite3.c	10593;"	d	file:
EP_DblQuoted	lib/sqlite3.c	10598;"	d	file:
EP_Distinct	lib/sqlite3.c	10596;"	d	file:
EP_Error	lib/sqlite3.c	10595;"	d	file:
EP_ExpCollate	lib/sqlite3.c	10600;"	d	file:
EP_FixedDest	lib/sqlite3.c	10601;"	d	file:
EP_FromJoin	lib/sqlite3.c	10592;"	d	file:
EP_Hint	lib/sqlite3.c	10604;"	d	file:
EP_InfixFunc	lib/sqlite3.c	10599;"	d	file:
EP_IntValue	lib/sqlite3.c	10602;"	d	file:
EP_Reduced	lib/sqlite3.c	10605;"	d	file:
EP_Resolved	lib/sqlite3.c	10594;"	d	file:
EP_Static	lib/sqlite3.c	10607;"	d	file:
EP_TokenOnly	lib/sqlite3.c	10606;"	d	file:
EP_VarSelect	lib/sqlite3.c	10597;"	d	file:
EP_xIsSelect	lib/sqlite3.c	10603;"	d	file:
ERR_TRACE	lib/sqlite3.c	23590;"	d	file:
EVENT_BATTLE_CHANGE_STAGE	lib/battlefield/event.h	/^	EVENT_BATTLE_CHANGE_STAGE,$/;"	e	enum:BattlefieldEventType
EVENT_BATTLE_SHOW_DIALOG	lib/battlefield/event.h	/^	EVENT_BATTLE_SHOW_DIALOG,$/;"	e	enum:BattlefieldEventType
EVENT_BATTLE_START_FIGHT	lib/battlefield/event.h	/^	EVENT_BATTLE_START_FIGHT,$/;"	e	enum:BattlefieldEventType
EVENT_COUNT	lib/battlefield/event.h	/^    EVENT_COUNT$/;"	e	enum:BattlefieldEventType
EVENT_KING_SKILL_CANCELED	lib/battlefield/event.h	/^    EVENT_KING_SKILL_CANCELED = 0,$/;"	e	enum:BattlefieldEventType
EVENT_KING_SKILL_COOLDOWN	lib/battlefield/event.h	/^    EVENT_KING_SKILL_COOLDOWN,$/;"	e	enum:BattlefieldEventType
EVENT_KING_SKILL_FINISHED_SELECT_TARGET	lib/battlefield/event.h	/^    EVENT_KING_SKILL_FINISHED_SELECT_TARGET,$/;"	e	enum:BattlefieldEventType
EVENT_KING_SKILL_START_SELECT_TARGET	lib/battlefield/event.h	/^    EVENT_KING_SKILL_START_SELECT_TARGET,$/;"	e	enum:BattlefieldEventType
EVENT_ROLE_HP_CHANGE	lib/battlefield/event.h	/^    EVENT_ROLE_HP_CHANGE,$/;"	e	enum:BattlefieldEventType
EVENT_ROLE_POWER_CHANGE	lib/battlefield/event.h	/^    EVENT_ROLE_POWER_CHANGE,$/;"	e	enum:BattlefieldEventType
EXCLUSIVE_LOCK	lib/sqlite3.c	9387;"	d	file:
EXPRDUP_REDUCE	lib/sqlite3.c	10649;"	d	file:
EXPR_FULLSIZE	lib/sqlite3.c	10641;"	d	file:
EXPR_REDUCEDSIZE	lib/sqlite3.c	10642;"	d	file:
EXPR_TOKENONLYSIZE	lib/sqlite3.c	10643;"	d	file:
EXT	lib/battlefield/bone.c	150;"	d	file:
EXTRA_SIZE	lib/sqlite3.c	48740;"	d	file:
ExpandBlob	lib/sqlite3.c	13295;"	d	file:
ExpandBlob	lib/sqlite3.c	13298;"	d	file:
Explain	lib/sqlite3.c	/^struct Explain {$/;"	s	file:
Explain	lib/sqlite3.c	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain	file:
Expr	lib/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	lib/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	lib/sqlite3.c	10634;"	d	file:
ExprHasAnyProperty	lib/sqlite3.c	10632;"	d	file:
ExprHasProperty	lib/sqlite3.c	10631;"	d	file:
ExprList	lib/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	lib/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	lib/sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetIrreducible	lib/sqlite3.c	10622;"	d	file:
ExprSetIrreducible	lib/sqlite3.c	10624;"	d	file:
ExprSetProperty	lib/sqlite3.c	10633;"	d	file:
ExprSpan	lib/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	lib/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
F	../framework/md5.c	105;"	d	file:
F	../framework/md5.c	107;"	d	file:
F	../framework/md5.c	126;"	d	file:
F	../framework/md5.c	128;"	d	file:
F	../framework/md5.c	147;"	d	file:
F	../framework/md5.c	149;"	d	file:
F	../framework/md5.c	168;"	d	file:
F	../framework/md5.c	86;"	d	file:
FABS	lib/sqlite3.c	131907;"	d	file:
FIGHT_FLAG_DOUBLE_REWARD	lib/fight_type.h	/^	FIGHT_FLAG_DOUBLE_REWARD =1	$/;"	e	enum:__anon2
FIGHT_REWARD_CONFIG	lib/fight_type.h	/^}FIGHT_REWARD_CONFIG, *PFIGHT_REWARD_CONFIG;$/;"	t	typeref:struct:tagFIGHT_REWARD_CONFIG
FILEHANDLEID	lib/sqlite3.c	38558;"	d	file:
FKey	lib/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	lib/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	lib/sqlite3.c	19430;"	d	file:
FLAG_SIGNED	lib/sqlite3.c	19429;"	d	file:
FLAG_STRING	lib/sqlite3.c	19431;"	d	file:
FOREGUARD	lib/sqlite3.c	15525;"	d	file:
FREE	../framework/memory.h	23;"	d
FREE	lib/memory.h	23;"	d
FTS3_DOCID_SEARCH	lib/sqlite3.c	116693;"	d	file:
FTS3_EVAL_FILTER	lib/sqlite3.c	116673;"	d	file:
FTS3_EVAL_MATCHINFO	lib/sqlite3.c	116675;"	d	file:
FTS3_EVAL_NEXT	lib/sqlite3.c	116674;"	d	file:
FTS3_FULLSCAN_SEARCH	lib/sqlite3.c	116692;"	d	file:
FTS3_FULLTEXT_SEARCH	lib/sqlite3.c	116694;"	d	file:
FTS3_HASH_BINARY	lib/sqlite3.c	116389;"	d	file:
FTS3_HASH_STRING	lib/sqlite3.c	116388;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	lib/sqlite3.c	128636;"	d	file:
FTS3_MATCHINFO_DEFAULT	lib/sqlite3.c	128644;"	d	file:
FTS3_MATCHINFO_HITS	lib/sqlite3.c	128639;"	d	file:
FTS3_MATCHINFO_LCS	lib/sqlite3.c	128638;"	d	file:
FTS3_MATCHINFO_LENGTH	lib/sqlite3.c	128637;"	d	file:
FTS3_MATCHINFO_NCOL	lib/sqlite3.c	128634;"	d	file:
FTS3_MATCHINFO_NDOC	lib/sqlite3.c	128635;"	d	file:
FTS3_MATCHINFO_NPHRASE	lib/sqlite3.c	128633;"	d	file:
FTS3_MAX_PENDING_DATA	lib/sqlite3.c	116452;"	d	file:
FTS3_MERGE_COUNT	lib/sqlite3.c	116442;"	d	file:
FTS3_NODE_CHUNKSIZE	lib/sqlite3.c	125116;"	d	file:
FTS3_NODE_CHUNKSIZE	lib/sqlite3.c	125119;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	lib/sqlite3.c	125117;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	lib/sqlite3.c	125120;"	d	file:
FTS3_NODE_PADDING	lib/sqlite3.c	125094;"	d	file:
FTS3_SEGCURSOR_ALL	lib/sqlite3.c	116822;"	d	file:
FTS3_SEGCURSOR_PENDING	lib/sqlite3.c	116821;"	d	file:
FTS3_SEGDIR_MAXLEVEL	lib/sqlite3.c	116487;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	lib/sqlite3.c	116488;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	lib/sqlite3.c	116834;"	d	file:
FTS3_SEGMENT_FIRST	lib/sqlite3.c	116837;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	lib/sqlite3.c	116833;"	d	file:
FTS3_SEGMENT_PREFIX	lib/sqlite3.c	116835;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	lib/sqlite3.c	116832;"	d	file:
FTS3_SEGMENT_SCAN	lib/sqlite3.c	116836;"	d	file:
FTS3_TERMS_SCHEMA	lib/sqlite3.c	121858;"	d	file:
FTS3_VARINT_MAX	lib/sqlite3.c	116470;"	d	file:
FTS4AUX_EQ_CONSTRAINT	lib/sqlite3.c	121937;"	d	file:
FTS4AUX_GE_CONSTRAINT	lib/sqlite3.c	121938;"	d	file:
FTS4AUX_LE_CONSTRAINT	lib/sqlite3.c	121939;"	d	file:
FTSQUERY_AND	lib/sqlite3.c	116792;"	d	file:
FTSQUERY_NEAR	lib/sqlite3.c	116790;"	d	file:
FTSQUERY_NOT	lib/sqlite3.c	116791;"	d	file:
FTSQUERY_OR	lib/sqlite3.c	116793;"	d	file:
FTSQUERY_PHRASE	lib/sqlite3.c	116794;"	d	file:
FTS_CORRUPT_VTAB	lib/sqlite3.c	116557;"	d	file:
FTS_CORRUPT_VTAB	lib/sqlite3.c	116559;"	d	file:
FUNCTION	lib/sqlite3.c	9958;"	d	file:
FightConfig	lib/lua_fight.c	/^struct FightConfig {$/;"	s	file:
FightModification	lib/lua_fight.c	/^struct FightModification {$/;"	s	file:
FightReward	lib/lua_fight.c	/^struct FightReward {$/;"	s	file:
FileChunk	lib/sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	lib/sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	lib/sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	lib/sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	lib/sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	lib/sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	lib/sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	lib/sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	lib/sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	lib/sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	lib/sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	lib/sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	lib/sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	lib/sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	lib/sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	lib/sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	lib/sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	lib/sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	lib/sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	lib/sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	lib/sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	lib/sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	lib/sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	lib/sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	lib/sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	lib/sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	lib/sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	lib/sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	lib/sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	lib/sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	lib/sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	lib/sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	lib/sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	lib/sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	lib/sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	lib/sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
FuncDef	lib/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	lib/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	lib/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	lib/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	lib/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	lib/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
G	lib/battlefield/fight.c	196;"	d	file:
GET_UINT32	../framework/md5.c	26;"	d	file:
GLOBAL	lib/sqlite3.c	8092;"	d	file:
GLOBAL	lib/sqlite3.c	8098;"	d	file:
GenerateBuilding	config/generate.lua	/^function  GenerateBuilding()$/;"	f
GenerateBuildingDefense	config/generate.lua	/^function  GenerateBuildingDefense()$/;"	f
GenerateBuildingUpgrade	config/generate.lua	/^function  GenerateBuildingUpgrade()$/;"	f
GenerateCityUpgrade	config/generate.lua	/^function  GenerateCityUpgrade()$/;"	f
GenerateEquipTemplate	config/generate.lua	/^function GenerateEquipTemplate()$/;"	f
GenerateEquipUpgrade	config/generate.lua	/^function GenerateEquipUpgrade()$/;"	f
GenerateGemTemplate	config/generate.lua	/^function GenerateGemTemplate()$/;"	f
GenerateHeroTemplate	config/generate.lua	/^function GenerateHeroTemplate()$/;"	f
GenerateHeroTitle	config/generate.lua	/^function GenerateHeroTitle()$/;"	f
GenerateHeroUpgrade	config/generate.lua	/^function GenerateHeroUpgrade()$/;"	f
GenerateKingTitle	config/generate.lua	/^function GenerateKingTitle()$/;"	f
GenerateKingUpgrade	config/generate.lua	/^function GenerateKingUpgrade()$/;"	f
GenerateSoldierBlockMatrix	config/generate.lua	/^function GenerateSoldierBlockMatrix()$/;"	f
GenerateSoldierCritMatrix	config/generate.lua	/^function GenerateSoldierCritMatrix()$/;"	f
GenerateSoldierHitMatrix	config/generate.lua	/^function GenerateSoldierHitMatrix()$/;"	f
GenerateSoldierHurtMatrix	config/generate.lua	/^function GenerateSoldierHurtMatrix()$/;"	f
GenerateSoldierProperty	config/generate.lua	/^function GenerateSoldierProperty()$/;"	f
GenerateSoldierSkill	config/generate.lua	/^function GenerateSoldierSkill()$/;"	f
GenerateStoryArmy	config/generate.lua	/^function GenerateStoryArmy()$/;"	f
GenerateStoryBattle	config/generate.lua	/^function GenerateStoryBattle()$/;"	f
GenerateStoryMap	config/generate.lua	/^function GenerateStoryMap()$/;"	f
GenerateTechnology	config/generate.lua	/^function GenerateTechnology()$/;"	f
GenerateTechnologyUpgrade	config/generate.lua	/^function GenerateTechnologyUpgrade()$/;"	f
GetCriticalData	../framework/codequeue.c	/^static void GetCriticalData(CQ * queue, size_t * begin, size_t * end)$/;"	f	file:
GetCurrentProcessId	lib/sqlite3.c	/^int GetCurrentProcessId(void) {$/;"	f
GlogUpperToLower	lib/sqlite3.c	86639;"	d	file:
GlogUpperToLower	lib/sqlite3.c	86641;"	d	file:
HANDLE_TO_WINFILE	lib/sqlite3.c	33359;"	d	file:
HASHSIZE	lib/sqlite3.c	130251;"	d	file:
HASHTABLE_HASH_1	lib/sqlite3.c	45826;"	d	file:
HASHTABLE_NPAGE	lib/sqlite3.c	45825;"	d	file:
HASHTABLE_NPAGE_ONE	lib/sqlite3.c	45834;"	d	file:
HASHTABLE_NSLOT	lib/sqlite3.c	45827;"	d	file:
HAVE_BOOL	../framework/network.h	14;"	d
HAVE_FULLFSYNC	lib/sqlite3.c	28222;"	d	file:
HAVE_FULLFSYNC	lib/sqlite3.c	28224;"	d	file:
HAVE_LOCALTIME_S	lib/sqlite3.c	13955;"	d	file:
HAVE_RESID_T	../framework/lrm.h	7;"	d
HAVE_RESID_T	../framework/network.h	21;"	d
HIT_FLAG_BLOCK	lib/battlefield/role.h	42;"	d
HIT_FLAG_CRIT	lib/battlefield/role.h	41;"	d
HIT_FLAG_HELP	lib/battlefield/role.h	43;"	d
H_PBC_INT64_H__	../framework/pbc_int64.h	2;"	d
H_YQ_FRAMEWORK_COMMON_MACRO_H__	../framework/common_macro.h	2;"	d
Hash	lib/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	lib/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	lib/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	lib/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HitCompareValue	lib/battlefield/role.h	/^struct HitCompareValue {$/;"	s
IMPORT_MODULE	../framework/module.h	22;"	d
INCL_DOSDATETIME	lib/sqlite3.c	9282;"	d	file:
INCL_DOSERRORS	lib/sqlite3.c	9284;"	d	file:
INCL_DOSFILEMGR	lib/sqlite3.c	9283;"	d	file:
INCL_DOSMISC	lib/sqlite3.c	9285;"	d	file:
INCL_DOSMODULEMGR	lib/sqlite3.c	9287;"	d	file:
INCL_DOSPROCESS	lib/sqlite3.c	9286;"	d	file:
INCL_DOSSEMAPHORES	lib/sqlite3.c	9288;"	d	file:
INIT_STACK_CHECK	lib/lua_fight.c	22;"	d	file:
INIT_STACK_CHECK	scripts/network.c	37;"	d	file:
INT16_TYPE	lib/sqlite3.c	7921;"	d	file:
INT16_TYPE	lib/sqlite3.c	7923;"	d	file:
INT8_TYPE	lib/sqlite3.c	7935;"	d	file:
INT8_TYPE	lib/sqlite3.c	7937;"	d	file:
INTERFACE	lib/sqlite3.c	107944;"	d	file:
INVALID_FILE_ATTRIBUTES	lib/sqlite3.c	32144;"	d	file:
INVALID_ID	../framework/lrm.h	10;"	d
INVALID_ID	../framework/network.h	24;"	d
INVALID_SET_FILE_POINTER	lib/sqlite3.c	33657;"	d	file:
IN_DECLARE_VTAB	lib/sqlite3.c	11176;"	d	file:
IN_DECLARE_VTAB	lib/sqlite3.c	11178;"	d	file:
IN_INDEX_EPH	lib/sqlite3.c	12084;"	d	file:
IN_INDEX_INDEX	lib/sqlite3.c	12085;"	d	file:
IN_INDEX_ROWID	lib/sqlite3.c	12083;"	d	file:
IOMETHODS	lib/sqlite3.c	29358;"	d	file:
IOTRACE	lib/sqlite3.c	12133;"	d	file:
IOTRACE	lib/sqlite3.c	12137;"	d	file:
ISAUTOVACUUM	lib/sqlite3.c	49062;"	d	file:
ISAUTOVACUUM	lib/sqlite3.c	49064;"	d	file:
IS_BIG_INT	lib/sqlite3.c	533;"	d	file:
IS_LOCK_ERROR	lib/sqlite3.c	24990;"	d	file:
ITEM_LOGGER	../framework/log.h	/^	ITEM_LOGGER,$/;"	e	enum:__anon68
IcuCursor	lib/sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	lib/sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	lib/sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	lib/sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	lib/sqlite3.c	111620;"	d	file:
IdChar	lib/sqlite3.c	111638;"	d	file:
IdChar	lib/sqlite3.c	112090;"	d	file:
IdChar	lib/sqlite3.c	112094;"	d	file:
IdList	lib/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	lib/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	lib/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IgnorableOrderby	lib/sqlite3.c	10987;"	d	file:
InLoop	lib/sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon43::__anon44	file:
Incrblob	lib/sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	lib/sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
Index	lib/sqlite3.c	/^struct Index {$/;"	s	file:
Index	lib/sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	lib/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	lib/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	lib/sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon45	file:
IntegrityCk	lib/sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	lib/sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	lib/sqlite3.c	10221;"	d	file:
IsHiddenColumn	lib/sqlite3.c	10224;"	d	file:
IsVirtual	lib/sqlite3.c	10220;"	d	file:
IsVirtual	lib/sqlite3.c	10223;"	d	file:
JOURNAL_CHUNKSIZE	lib/sqlite3.c	72799;"	d	file:
JOURNAL_HDR_SZ	lib/sqlite3.c	39171;"	d	file:
JOURNAL_PG_SZ	lib/sqlite3.c	39165;"	d	file:
JSMN_ARRAY	lib/battlefield/jsmn.h	/^	JSMN_ARRAY = 2,$/;"	e	enum:__anon6
JSMN_ERROR_INVAL	lib/battlefield/jsmn.h	/^	JSMN_ERROR_INVAL = -2,$/;"	e	enum:__anon7
JSMN_ERROR_NOMEM	lib/battlefield/jsmn.h	/^	JSMN_ERROR_NOMEM = -1,$/;"	e	enum:__anon7
JSMN_ERROR_PART	lib/battlefield/jsmn.h	/^	JSMN_ERROR_PART = -3,$/;"	e	enum:__anon7
JSMN_OBJECT	lib/battlefield/jsmn.h	/^	JSMN_OBJECT = 1,$/;"	e	enum:__anon6
JSMN_PRIMITIVE	lib/battlefield/jsmn.h	/^	JSMN_PRIMITIVE = 0,$/;"	e	enum:__anon6
JSMN_STRING	lib/battlefield/jsmn.h	/^	JSMN_STRING = 3$/;"	e	enum:__anon6
JT_CROSS	lib/sqlite3.c	10770;"	d	file:
JT_ERROR	lib/sqlite3.c	10775;"	d	file:
JT_INNER	lib/sqlite3.c	10769;"	d	file:
JT_LEFT	lib/sqlite3.c	10772;"	d	file:
JT_NATURAL	lib/sqlite3.c	10771;"	d	file:
JT_OUTER	lib/sqlite3.c	10774;"	d	file:
JT_RIGHT	lib/sqlite3.c	10773;"	d	file:
JournalFile	lib/sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	lib/sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	lib/sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KEY_FUNC	../framework/hash.h	49;"	d
KING_FIGHT_INFO	lib/fight_type.h	/^}KING_FIGHT_INFO, *PKING_FIGHT_INFO;$/;"	t	typeref:struct:tagKING_FIGHT_INFO
KING_FLAG_COUNT	lib/battlefield/battlefield.h	64;"	d
KING_SKILL_COUNT	lib/battlefield/battlefield.h	37;"	d
KeyClass	lib/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	lib/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	lib/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
KingFlag	lib/battlefield/battlefield.h	/^struct KingFlag {$/;"	s
L	lib/battlefield/buffer.c	/^static lua_State * L = 0;$/;"	v	file:
L	lib/battlefield/script.h	/^	lua_State * L;$/;"	m	struct:script
L	modules/mlua.c	/^	lua_State * L;$/;"	m	struct:Script	file:
LARGEST_INT64	lib/sqlite3.c	7996;"	d	file:
LCS_ITERATOR_FINISHED	lib/sqlite3.c	129488;"	d	file:
LIKEFUNC	lib/sqlite3.c	9964;"	d	file:
LINK	Makefile	/^LINK=$(CC)$/;"	m
LOCKFILE_FAIL_IMMEDIATELY	lib/sqlite3.c	33965;"	d	file:
LOCK_TIMEOUT	lib/sqlite3.c	22958;"	d	file:
LOGIN_LOGOUT_LOGGER	../framework/log.h	/^	LOGIN_LOGOUT_LOGGER,$/;"	e	enum:__anon68
LOGMAX	lib/sqlite3.c	16754;"	d	file:
LOGOUT_ADDICTED	../framework/package.h	24;"	d
LOGOUT_ADMIN_BAN	../framework/package.h	27;"	d
LOGOUT_ADMIN_KICK	../framework/package.h	25;"	d
LOGOUT_ANOTHER_LOGIN	../framework/package.h	23;"	d
LOGOUT_CONNECT	../framework/package.h	26;"	d
LOGOUT_NORMAL	../framework/package.h	22;"	d
LOG_DEBUG	../framework/log.h	15;"	d
LOG_DEBUG	lib/lua_log.c	31;"	d	file:
LOG_ERROR	../framework/log.h	18;"	d
LOG_ERROR	lib/lua_log.c	34;"	d	file:
LOG_FLAT	../framework/log.h	19;"	d
LOG_INFO	../framework/log.h	16;"	d
LOG_INFO	lib/lua_log.c	32;"	d	file:
LOG_LEVEL	../framework/log.h	21;"	d
LOG_LEVEL_DESC	../framework/log.c	/^static const char * LOG_LEVEL_DESC[] = {$/;"	v	file:
LOG_LEVEL_DESC	lib/lua_log.c	/^static const char * LOG_LEVEL_DESC[] = {$/;"	v	file:
LOG_PTR	lib/lua_report.c	19;"	d	file:
LOG_PTR	scripts/slog.c	19;"	d	file:
LOG_WARNING	../framework/log.h	17;"	d
LOG_WARNING	lib/lua_log.c	33;"	d	file:
LONGDOUBLE_TYPE	lib/sqlite3.c	7829;"	d	file:
LONGDOUBLE_TYPE	lib/sqlite3.c	7941;"	d	file:
LRM_RESOURCES_AT	../framework/lrm.c	28;"	d	file:
LUACFLAG	Makefile	/^LUACFLAG=-I..\/include$/;"	m
LUALFLAG	Makefile	/^LUALFLAG=-L..\/lib -lluajit$/;"	m
LUALIB	Makefile	/^LUALIB=lib\/AMF.so \\$/;"	m
LUA_CONNECTIONS	scripts/network.c	24;"	d	file:
LUA_GET_GLOBAL	scripts/network.c	26;"	d	file:
LUA_OK	lib/battlefield/skill.c	20;"	d	file:
LcsIterator	lib/sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	lib/sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	lib/sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	lib/sqlite3.c	/^struct LimitVal {$/;"	s	file:
LinearPickNext	lib/sqlite3.c	/^static RtreeCell *LinearPickNext($/;"	f	file:
LinearPickSeeds	lib/sqlite3.c	/^static void LinearPickSeeds($/;"	f	file:
LoadDoclistCtx	lib/sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	lib/sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LoadMatrix	../framework/matrix.c	/^Matrix * LoadMatrix(const char * filename, char sep_field, char sep_row)$/;"	f
LockFile	lib/sqlite3.c	32308;"	d	file:
LockFileEx	lib/sqlite3.c	32310;"	d	file:
Lookaside	lib/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	lib/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	lib/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	lib/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	lib/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MAIL_STATUS_READ	../framework/package.h	1665;"	d
MAIL_STATUS_UNREAD	../framework/package.h	1664;"	d
MAIL_TYPE_ARENA	../framework/package.h	/^	MAIL_TYPE_ARENA   =16,$/;"	e	enum:__anon60
MAIL_TYPE_CHANNEL	../framework/package.h	/^	MAIL_TYPE_CHANNEL =4,$/;"	e	enum:__anon60
MAIL_TYPE_CHAT	../framework/package.h	/^	MAIL_TYPE_CHAT    =3,$/;"	e	enum:__anon60
MAIL_TYPE_FRIEND	../framework/package.h	/^	MAIL_TYPE_FRIEND  =8,$/;"	e	enum:__anon60
MAIL_TYPE_SYSTEM	../framework/package.h	/^	MAIL_TYPE_SYSTEM  =1,$/;"	e	enum:__anon60
MAIL_TYPE_USER	../framework/package.h	/^	MAIL_TYPE_USER    =2,$/;"	e	enum:__anon60
MALLOC	../framework/memory.h	22;"	d
MALLOC	../framework/xmlHelper.c	14;"	d	file:
MALLOC	lib/memory.h	22;"	d
MALLOC	lib/xmlHelper.c	14;"	d	file:
MALLOC_N	../framework/memory.h	27;"	d
MALLOC_N	lib/memory.h	27;"	d
MANOR_HERO_PLACEHOLDER_BEGIN	lib/fight_type.h	36;"	d
MANOR_HERO_PLACEHOLDER_END	lib/fight_type.h	37;"	d
MASTER_NAME	lib/sqlite3.c	8047;"	d	file:
MASTER_ROOT	lib/sqlite3.c	8053;"	d	file:
MAX	lib/battlefield/role.c	457;"	d	file:
MAX	lib/sqlite3.c	130423;"	d	file:
MAX_6BYTE	lib/sqlite3.c	62092;"	d	file:
MAX_PATHNAME	lib/sqlite3.c	24984;"	d	file:
MAX_ROWID	lib/sqlite3.c	68736;"	d	file:
MAX_SECTOR_SIZE	lib/sqlite3.c	38855;"	d	file:
MAX_USER_LOGGER_COUNT	../framework/log.h	/^	MAX_USER_LOGGER_COUNT$/;"	e	enum:__anon68
MAX_WORLD_COUNT	../framework/common_macro.h	4;"	d
MEM5LINK	lib/sqlite3.c	16817;"	d	file:
MEMCELLSIZE	lib/sqlite3.c	58963;"	d	file:
MEMDB	lib/sqlite3.c	39180;"	d	file:
MEMDB	lib/sqlite3.c	39182;"	d	file:
MEMTYPE_DB	lib/sqlite3.c	12182;"	d	file:
MEMTYPE_HEAP	lib/sqlite3.c	12178;"	d	file:
MEMTYPE_LOOKASIDE	lib/sqlite3.c	12179;"	d	file:
MEMTYPE_PCACHE	lib/sqlite3.c	12181;"	d	file:
MEMTYPE_SCRATCH	lib/sqlite3.c	12180;"	d	file:
MEM_Agg	lib/sqlite3.c	13028;"	d	file:
MEM_Blob	lib/sqlite3.c	13013;"	d	file:
MEM_Dyn	lib/sqlite3.c	13025;"	d	file:
MEM_Ephem	lib/sqlite3.c	13027;"	d	file:
MEM_Frame	lib/sqlite3.c	13015;"	d	file:
MEM_Int	lib/sqlite3.c	13011;"	d	file:
MEM_Invalid	lib/sqlite3.c	13016;"	d	file:
MEM_Null	lib/sqlite3.c	13009;"	d	file:
MEM_Real	lib/sqlite3.c	13012;"	d	file:
MEM_RowSet	lib/sqlite3.c	13014;"	d	file:
MEM_Static	lib/sqlite3.c	13026;"	d	file:
MEM_Str	lib/sqlite3.c	13010;"	d	file:
MEM_Term	lib/sqlite3.c	13024;"	d	file:
MEM_TypeMask	lib/sqlite3.c	13017;"	d	file:
MEM_Zero	lib/sqlite3.c	13029;"	d	file:
MEM_Zero	lib/sqlite3.c	13031;"	d	file:
MEM_Zero	lib/sqlite3.c	13032;"	d	file:
MFileHeader	../framework/mfile.c	/^struct MFileHeader $/;"	s	file:
MFileHeader	lib/mfile.c	/^struct MFileHeader $/;"	s	file:
MFileIndex	../framework/mfile.c	/^struct MFileIndex $/;"	s	file:
MFileIndex	lib/mfile.c	/^struct MFileIndex $/;"	s	file:
MIN	lib/battlefield/role.c	458;"	d	file:
MIN	lib/sqlite3.c	116463;"	d	file:
MIN	lib/sqlite3.c	130426;"	d	file:
MIN	lib/sqlite3.c	57655;"	d	file:
MIN	lib/sqlite3.c	72804;"	d	file:
MODE_DIR	lib/battlefield/bone.c	153;"	d	file:
MODE_DIR	lib/battlefield/bone.c	155;"	d	file:
MOUNTS_TYPE_CAT	lib/battlefield/bone.h	12;"	d
MOUNTS_TYPE_CAT	lib/battlefield/role.h	38;"	d
MOUNTS_TYPE_HORSE	lib/battlefield/bone.h	11;"	d
MOUNTS_TYPE_HORSE	lib/battlefield/role.h	37;"	d
MOUNTS_TYPE_REN	lib/battlefield/bone.h	13;"	d
MOUNTS_TYPE_REN	lib/battlefield/role.h	39;"	d
MUTEX_LOGIC	lib/sqlite3.c	9581;"	d	file:
MUTEX_LOGIC	lib/sqlite3.c	9583;"	d	file:
MX_CELL	lib/sqlite3.c	48665;"	d	file:
MX_CELL_SIZE	lib/sqlite3.c	48658;"	d	file:
MX_CLOSE_ATTEMPT	lib/sqlite3.c	33704;"	d	file:
MX_SMALL	lib/sqlite3.c	16027;"	d	file:
MYSQL_CFLAG	Makefile	/^MYSQL_CFLAG=-I\/usr\/local\/mysql\/include$/;"	m
MYSQL_LFLAG	Makefile	/^MYSQL_LFLAG=-L\/usr\/local\/mysql\/lib$/;"	m
MatchInfo	lib/sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	lib/sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Matrix	../framework/matrix.c	/^struct Matrix {$/;"	s	file:
Matrix	../framework/matrix.h	/^typedef struct Matrix Matrix;$/;"	t	typeref:struct:Matrix
MatrixField	../framework/matrix.c	/^struct  MatrixField$/;"	s	file:
MatrixField	../framework/matrix.h	/^typedef struct MatrixField MatrixField;$/;"	t	typeref:struct:MatrixField
MatrixFieldFree	../framework/matrix.c	/^static void MatrixFieldFree(MatrixField * field)$/;"	f	file:
MatrixFieldNew	../framework/matrix.c	/^static MatrixField * MatrixFieldNew(const char * msg, size_t len)$/;"	f	file:
MatrixFieldValue	../framework/matrix.c	/^const char * MatrixFieldValue(MatrixField * field)$/;"	f
MatrixFree	../framework/matrix.c	/^void MatrixFree(Matrix * matrix)$/;"	f
MatrixGet	../framework/matrix.c	/^MatrixRow * MatrixGet(Matrix * matrix, size_t row)$/;"	f
MatrixNew	../framework/matrix.c	/^static Matrix *  MatrixNew()$/;"	f	file:
MatrixPush	../framework/matrix.c	/^static void MatrixPush(Matrix * matrix, MatrixRow * row)$/;"	f	file:
MatrixResize	../framework/matrix.c	/^static void MatrixResize(Matrix * matrix)$/;"	f	file:
MatrixRow	../framework/matrix.c	/^struct MatrixRow $/;"	s	file:
MatrixRow	../framework/matrix.h	/^typedef struct MatrixRow MatrixRow;$/;"	t	typeref:struct:MatrixRow
MatrixRowFree	../framework/matrix.c	/^static void MatrixRowFree(MatrixRow * row)$/;"	f	file:
MatrixRowGet	../framework/matrix.c	/^MatrixField * MatrixRowGet(MatrixRow * row, size_t field)$/;"	f
MatrixRowNew	../framework/matrix.c	/^static MatrixRow *  MatrixRowNew()$/;"	f	file:
MatrixRowPush	../framework/matrix.c	/^static void MatrixRowPush(MatrixRow * row, MatrixField * field)$/;"	f	file:
MatrixRowResize	../framework/matrix.c	/^static void MatrixRowResize(MatrixRow * row)$/;"	f	file:
MatrixRowSize	../framework/matrix.c	/^size_t MatrixRowSize(MatrixRow * row)$/;"	f
MatrixSize	../framework/matrix.c	/^size_t MatrixSize(Matrix * matrix)$/;"	f
Mem	lib/sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	lib/sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	lib/sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	lib/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	lib/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	lib/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	lib/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	lib/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	lib/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	lib/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	lib/sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	lib/sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	lib/sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	lib/sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	lib/sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	lib/sqlite3.c	13038;"	d	file:
Module	lib/sqlite3.c	/^struct Module {$/;"	s	file:
Module	lib/sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	lib/sqlite3.c	55035;"	d	file:
NCELL	lib/sqlite3.c	130378;"	d	file:
NCSIZE	lib/sqlite3.c	15531;"	d	file:
NDEBUG	lib/sqlite3.c	116135;"	d	file:
NDEBUG	lib/sqlite3.c	116539;"	d	file:
NDEBUG	lib/sqlite3.c	130211;"	d	file:
NDEBUG	lib/sqlite3.c	453;"	d	file:
NDELAY	lib/sqlite3.c	113391;"	d	file:
NEVER	lib/sqlite3.c	116516;"	d	file:
NEVER	lib/sqlite3.c	116519;"	d	file:
NEVER	lib/sqlite3.c	519;"	d	file:
NEVER	lib/sqlite3.c	522;"	d	file:
NEVER	lib/sqlite3.c	525;"	d	file:
NEW_ACTION	lib/battlefield/skill.c	1465;"	d	file:
NEW_FUNCTION	lib/battlefield/skill.c	1400;"	d	file:
NN	lib/sqlite3.c	55034;"	d	file:
NOTIFY_ACTIVITY_INFO_CHANGE	../framework/package.h	264;"	d
NOTIFY_ACTIVITY_REWARD_CHANGE	../framework/package.h	265;"	d
NOTIFY_ADDICTED_CHANGE	../framework/package.h	255;"	d
NOTIFY_AI_ACTION	../framework/package.h	274;"	d
NOTIFY_ARENA_ATTACK	../framework/package.h	208;"	d
NOTIFY_ARMAMENT	../framework/package.h	272;"	d
NOTIFY_BATTLEFIELD_ACTIVITY_STATUS	../framework/package.h	254;"	d
NOTIFY_BATTLEFIELD_ATTACK	../framework/package.h	228;"	d
NOTIFY_BATTLEFIELD_ATTACK_WALL	../framework/package.h	229;"	d
NOTIFY_BATTLEFIELD_CITY_CHANGE	../framework/package.h	241;"	d
NOTIFY_BATTLEFIELD_COUNTRY_CHANGE	../framework/package.h	242;"	d
NOTIFY_BATTLEFIELD_CREATE	../framework/package.h	240;"	d
NOTIFY_BATTLEFIELD_FINISHED	../framework/package.h	230;"	d
NOTIFY_BATTLEFIELD_JOIN	../framework/package.h	225;"	d
NOTIFY_BATTLEFIELD_LEAVE	../framework/package.h	226;"	d
NOTIFY_BATTLEFIELD_LINE_CHANGE	../framework/package.h	227;"	d
NOTIFY_BATTLEFIELD_LINE_GETOUT	../framework/package.h	231;"	d
NOTIFY_BATTLEFIELD_PLAYER_PRIVATE_INFO_CHANGE	../framework/package.h	243;"	d
NOTIFY_BATTLEFIELD_PLAYER_PUBLIC_INFO_CHANGE	../framework/package.h	247;"	d
NOTIFY_BUFFER	../framework/package.h	267;"	d
NOTIFY_BUILDING	../framework/package.h	192;"	d
NOTIFY_CARD	../framework/package.h	271;"	d
NOTIFY_CITY	../framework/package.h	194;"	d
NOTIFY_COMPOSE	../framework/package.h	204;"	d
NOTIFY_CONTACT_ADD	../framework/package.h	257;"	d
NOTIFY_COOLDOWN	../framework/package.h	198;"	d
NOTIFY_DAILY	../framework/package.h	205;"	d
NOTIFY_DISPATCH_SERVER_CHAT	../framework/package.h	1907;"	d
NOTIFY_DISPLAY_MESSAGE	../framework/package.h	237;"	d
NOTIFY_EQUIP	../framework/package.h	200;"	d
NOTIFY_EQUIP_LIST	../framework/package.h	199;"	d
NOTIFY_FARM	../framework/package.h	201;"	d
NOTIFY_FIRE	../framework/package.h	220;"	d
NOTIFY_GEM_COUNT	../framework/package.h	197;"	d
NOTIFY_GUILD_5XING_CHANGE	../framework/package.h	259;"	d
NOTIFY_GUILD_5XING_PLAYER_TIMES_CHANGE	../framework/package.h	261;"	d
NOTIFY_GUILD_5XING_REWARD	../framework/package.h	260;"	d
NOTIFY_GUILD_AUDIT	../framework/package.h	216;"	d
NOTIFY_GUILD_BOSS_SETTING	../framework/package.h	251;"	d
NOTIFY_GUILD_JOIN	../framework/package.h	211;"	d
NOTIFY_GUILD_LEADER	../framework/package.h	214;"	d
NOTIFY_GUILD_LEAVE	../framework/package.h	212;"	d
NOTIFY_GUILD_NOTIFY	../framework/package.h	213;"	d
NOTIFY_GUILD_REQUEST	../framework/package.h	210;"	d
NOTIFY_GUILD_TITLE	../framework/package.h	215;"	d
NOTIFY_HERO	../framework/package.h	196;"	d
NOTIFY_HERO_LIST	../framework/package.h	195;"	d
NOTIFY_HORSE	../framework/package.h	270;"	d
NOTIFY_HOT_UPDATE	../framework/package.h	276;"	d
NOTIFY_ITEM_COUNT	../framework/package.h	235;"	d
NOTIFY_KING_AVATAR_CHANGE	../framework/package.h	233;"	d
NOTIFY_MAIL_NEW	../framework/package.h	218;"	d
NOTIFY_MERCHANDISE_CHANGE	../framework/package.h	245;"	d
NOTIFY_MONTH_CARD	../framework/package.h	275;"	d
NOTIFY_MONTH_SIGN_CHANGE	../framework/package.h	273;"	d
NOTIFY_PROPERTY	../framework/package.h	190;"	d
NOTIFY_QUEST	../framework/package.h	206;"	d
NOTIFY_RESOURCE	../framework/package.h	191;"	d
NOTIFY_RESOURCE_AUTO_INCREASE	../framework/package.h	249;"	d
NOTIFY_REWARD_CHANGE	../framework/package.h	253;"	d
NOTIFY_SIGN_REWARD_CHANGE	../framework/package.h	263;"	d
NOTIFY_STORY	../framework/package.h	203;"	d
NOTIFY_STRATEGY	../framework/package.h	202;"	d
NOTIFY_TACTIC	../framework/package.h	222;"	d
NOTIFY_TACTIC_STATUS	../framework/package.h	223;"	d
NOTIFY_TECHNOLOGY	../framework/package.h	193;"	d
NOTIFY_VIP_CHANGE	../framework/package.h	268;"	d
NO_LOCK	lib/sqlite3.c	9383;"	d	file:
N_HASH	lib/sqlite3.c	16033;"	d	file:
N_SORT_BUCKET	lib/sqlite3.c	36732;"	d	file:
N_STATEMENT	lib/sqlite3.c	133004;"	d	file:
NameContext	lib/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	lib/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
OBJ	Makefile	/^OBJ=$(OBJ_MAIN) \\$/;"	m
OBJ_ANY	lib/sqlite3.c	22965;"	d	file:
OBJ_COMM	Makefile	/^OBJ_COMM=..\/framework\/log.o \\$/;"	m
OBJ_MAIN	Makefile	/^OBJ_MAIN=$(patsubst %.c, %.o, $(wildcard *.c))$/;"	m
OBJ_MODULE	Makefile	/^OBJ_MODULE=$(patsubst %.c, %.o, $(wildcard .\/modules\/*.c))$/;"	m
OBJ_SCRIPT	Makefile	/^OBJ_SCRIPT=$(patsubst %.c, %.o, $(wildcard .\/scripts\/*.c))$/;"	m
OE_Abort	lib/sqlite3.c	10290;"	d	file:
OE_Cascade	lib/sqlite3.c	10298;"	d	file:
OE_Default	lib/sqlite3.c	10300;"	d	file:
OE_Fail	lib/sqlite3.c	10291;"	d	file:
OE_Ignore	lib/sqlite3.c	10292;"	d	file:
OE_None	lib/sqlite3.c	10288;"	d	file:
OE_Replace	lib/sqlite3.c	10293;"	d	file:
OE_Restrict	lib/sqlite3.c	10295;"	d	file:
OE_Rollback	lib/sqlite3.c	10289;"	d	file:
OE_SetDflt	lib/sqlite3.c	10297;"	d	file:
OE_SetNull	lib/sqlite3.c	10296;"	d	file:
OMIT_TEMPDB	lib/sqlite3.c	7848;"	d	file:
OMIT_TEMPDB	lib/sqlite3.c	7850;"	d	file:
OPEN_LEVEL_ARENA	../framework/package.h	/^	OPEN_LEVEL_ARENA =12,$/;"	e	enum:__anon62
OPEN_LEVEL_FIRE	../framework/package.h	/^	OPEN_LEVEL_FIRE =18,$/;"	e	enum:__anon62
OPEN_LEVEL_MONTH_SIGN	../framework/package.h	/^	OPEN_LEVEL_MONTH_SIGN = 0,$/;"	e	enum:__anon62
OPEN_LEVEL_SIGN	../framework/package.h	/^	OPEN_LEVEL_SIGN =8,$/;"	e	enum:__anon62
OPEN_LEVEL_TACTIC	../framework/package.h	/^	OPEN_LEVEL_TACTIC =30,$/;"	e	enum:__anon62
OPFLAG_APPEND	lib/sqlite3.c	11196;"	d	file:
OPFLAG_CLEARCACHE	lib/sqlite3.c	11198;"	d	file:
OPFLAG_ISUPDATE	lib/sqlite3.c	11195;"	d	file:
OPFLAG_LASTROWID	lib/sqlite3.c	11194;"	d	file:
OPFLAG_NCHANGE	lib/sqlite3.c	11193;"	d	file:
OPFLAG_USESEEKRESULT	lib/sqlite3.c	11197;"	d	file:
OPFLG_IN1	lib/sqlite3.c	8745;"	d	file:
OPFLG_IN2	lib/sqlite3.c	8746;"	d	file:
OPFLG_IN3	lib/sqlite3.c	8747;"	d	file:
OPFLG_INITIALIZER	lib/sqlite3.c	8750;"	d	file:
OPFLG_JUMP	lib/sqlite3.c	8743;"	d	file:
OPFLG_OUT2	lib/sqlite3.c	8748;"	d	file:
OPFLG_OUT2_PRERELEASE	lib/sqlite3.c	8744;"	d	file:
OPFLG_OUT3	lib/sqlite3.c	8749;"	d	file:
OP_Add	lib/sqlite3.c	8606;"	d	file:
OP_AddImm	lib/sqlite3.c	8617;"	d	file:
OP_Affinity	lib/sqlite3.c	8644;"	d	file:
OP_AggFinal	lib/sqlite3.c	8716;"	d	file:
OP_AggStep	lib/sqlite3.c	8715;"	d	file:
OP_And	lib/sqlite3.c	8634;"	d	file:
OP_AutoCommit	lib/sqlite3.c	8648;"	d	file:
OP_BitAnd	lib/sqlite3.c	8613;"	d	file:
OP_BitNot	lib/sqlite3.c	8637;"	d	file:
OP_BitOr	lib/sqlite3.c	8614;"	d	file:
OP_Blob	lib/sqlite3.c	8599;"	d	file:
OP_Checkpoint	lib/sqlite3.c	8717;"	d	file:
OP_Clear	lib/sqlite3.c	8695;"	d	file:
OP_Close	lib/sqlite3.c	8659;"	d	file:
OP_CollSeq	lib/sqlite3.c	8611;"	d	file:
OP_Column	lib/sqlite3.c	8643;"	d	file:
OP_Compare	lib/sqlite3.c	8632;"	d	file:
OP_Concat	lib/sqlite3.c	8605;"	d	file:
OP_Copy	lib/sqlite3.c	8602;"	d	file:
OP_Count	lib/sqlite3.c	8646;"	d	file:
OP_CreateIndex	lib/sqlite3.c	8696;"	d	file:
OP_CreateTable	lib/sqlite3.c	8697;"	d	file:
OP_Delete	lib/sqlite3.c	8673;"	d	file:
OP_Destroy	lib/sqlite3.c	8694;"	d	file:
OP_Divide	lib/sqlite3.c	8609;"	d	file:
OP_DropIndex	lib/sqlite3.c	8701;"	d	file:
OP_DropTable	lib/sqlite3.c	8700;"	d	file:
OP_DropTrigger	lib/sqlite3.c	8702;"	d	file:
OP_Eq	lib/sqlite3.c	8625;"	d	file:
OP_Expire	lib/sqlite3.c	8721;"	d	file:
OP_Explain	lib/sqlite3.c	8736;"	d	file:
OP_FkCounter	lib/sqlite3.c	8709;"	d	file:
OP_FkIfZero	lib/sqlite3.c	8710;"	d	file:
OP_Found	lib/sqlite3.c	8666;"	d	file:
OP_Function	lib/sqlite3.c	8612;"	d	file:
OP_Ge	lib/sqlite3.c	8630;"	d	file:
OP_Gosub	lib/sqlite3.c	8588;"	d	file:
OP_Goto	lib/sqlite3.c	8587;"	d	file:
OP_Gt	lib/sqlite3.c	8629;"	d	file:
OP_Halt	lib/sqlite3.c	8592;"	d	file:
OP_HaltIfNull	lib/sqlite3.c	8591;"	d	file:
OP_IdxDelete	lib/sqlite3.c	8690;"	d	file:
OP_IdxGE	lib/sqlite3.c	8693;"	d	file:
OP_IdxInsert	lib/sqlite3.c	8689;"	d	file:
OP_IdxLT	lib/sqlite3.c	8692;"	d	file:
OP_IdxRowid	lib/sqlite3.c	8691;"	d	file:
OP_If	lib/sqlite3.c	8639;"	d	file:
OP_IfNeg	lib/sqlite3.c	8713;"	d	file:
OP_IfNot	lib/sqlite3.c	8640;"	d	file:
OP_IfPos	lib/sqlite3.c	8712;"	d	file:
OP_IfZero	lib/sqlite3.c	8714;"	d	file:
OP_IncrVacuum	lib/sqlite3.c	8720;"	d	file:
OP_Insert	lib/sqlite3.c	8671;"	d	file:
OP_InsertInt	lib/sqlite3.c	8672;"	d	file:
OP_Int64	lib/sqlite3.c	8594;"	d	file:
OP_Integer	lib/sqlite3.c	8593;"	d	file:
OP_IntegrityCk	lib/sqlite3.c	8703;"	d	file:
OP_IsNull	lib/sqlite3.c	8641;"	d	file:
OP_IsUnique	lib/sqlite3.c	8667;"	d	file:
OP_JournalMode	lib/sqlite3.c	8718;"	d	file:
OP_Jump	lib/sqlite3.c	8633;"	d	file:
OP_Last	lib/sqlite3.c	8681;"	d	file:
OP_Le	lib/sqlite3.c	8628;"	d	file:
OP_LoadAnalysis	lib/sqlite3.c	8699;"	d	file:
OP_Lt	lib/sqlite3.c	8627;"	d	file:
OP_MakeRecord	lib/sqlite3.c	8645;"	d	file:
OP_MaxPgcnt	lib/sqlite3.c	8733;"	d	file:
OP_MemMax	lib/sqlite3.c	8711;"	d	file:
OP_Move	lib/sqlite3.c	8601;"	d	file:
OP_Multiply	lib/sqlite3.c	8608;"	d	file:
OP_MustBeInt	lib/sqlite3.c	8618;"	d	file:
OP_Ne	lib/sqlite3.c	8626;"	d	file:
OP_NewRowid	lib/sqlite3.c	8670;"	d	file:
OP_Next	lib/sqlite3.c	8687;"	d	file:
OP_Noop	lib/sqlite3.c	8735;"	d	file:
OP_Not	lib/sqlite3.c	8636;"	d	file:
OP_NotExists	lib/sqlite3.c	8668;"	d	file:
OP_NotFound	lib/sqlite3.c	8665;"	d	file:
OP_NotNull	lib/sqlite3.c	8642;"	d	file:
OP_Null	lib/sqlite3.c	8598;"	d	file:
OP_NullRow	lib/sqlite3.c	8680;"	d	file:
OP_Once	lib/sqlite3.c	8638;"	d	file:
OP_OpenAutoindex	lib/sqlite3.c	8655;"	d	file:
OP_OpenEphemeral	lib/sqlite3.c	8656;"	d	file:
OP_OpenPseudo	lib/sqlite3.c	8658;"	d	file:
OP_OpenRead	lib/sqlite3.c	8653;"	d	file:
OP_OpenWrite	lib/sqlite3.c	8654;"	d	file:
OP_Or	lib/sqlite3.c	8635;"	d	file:
OP_Pagecount	lib/sqlite3.c	8732;"	d	file:
OP_Param	lib/sqlite3.c	8708;"	d	file:
OP_ParseSchema	lib/sqlite3.c	8698;"	d	file:
OP_Permutation	lib/sqlite3.c	8631;"	d	file:
OP_Prev	lib/sqlite3.c	8686;"	d	file:
OP_Program	lib/sqlite3.c	8707;"	d	file:
OP_ReadCookie	lib/sqlite3.c	8650;"	d	file:
OP_Real	lib/sqlite3.c	8595;"	d	file:
OP_RealAffinity	lib/sqlite3.c	8619;"	d	file:
OP_Remainder	lib/sqlite3.c	8610;"	d	file:
OP_ResetCount	lib/sqlite3.c	8674;"	d	file:
OP_ResultRow	lib/sqlite3.c	8604;"	d	file:
OP_Return	lib/sqlite3.c	8589;"	d	file:
OP_Rewind	lib/sqlite3.c	8684;"	d	file:
OP_RowData	lib/sqlite3.c	8678;"	d	file:
OP_RowKey	lib/sqlite3.c	8677;"	d	file:
OP_RowSetAdd	lib/sqlite3.c	8704;"	d	file:
OP_RowSetRead	lib/sqlite3.c	8705;"	d	file:
OP_RowSetTest	lib/sqlite3.c	8706;"	d	file:
OP_Rowid	lib/sqlite3.c	8679;"	d	file:
OP_SCopy	lib/sqlite3.c	8603;"	d	file:
OP_Savepoint	lib/sqlite3.c	8647;"	d	file:
OP_Seek	lib/sqlite3.c	8664;"	d	file:
OP_SeekGe	lib/sqlite3.c	8662;"	d	file:
OP_SeekGt	lib/sqlite3.c	8663;"	d	file:
OP_SeekLe	lib/sqlite3.c	8661;"	d	file:
OP_SeekLt	lib/sqlite3.c	8660;"	d	file:
OP_Sequence	lib/sqlite3.c	8669;"	d	file:
OP_SetCookie	lib/sqlite3.c	8651;"	d	file:
OP_ShiftLeft	lib/sqlite3.c	8615;"	d	file:
OP_ShiftRight	lib/sqlite3.c	8616;"	d	file:
OP_Sort	lib/sqlite3.c	8683;"	d	file:
OP_SorterCompare	lib/sqlite3.c	8675;"	d	file:
OP_SorterData	lib/sqlite3.c	8676;"	d	file:
OP_SorterInsert	lib/sqlite3.c	8688;"	d	file:
OP_SorterNext	lib/sqlite3.c	8685;"	d	file:
OP_SorterOpen	lib/sqlite3.c	8657;"	d	file:
OP_SorterSort	lib/sqlite3.c	8682;"	d	file:
OP_String	lib/sqlite3.c	8597;"	d	file:
OP_String8	lib/sqlite3.c	8596;"	d	file:
OP_Subtract	lib/sqlite3.c	8607;"	d	file:
OP_TableLock	lib/sqlite3.c	8722;"	d	file:
OP_ToBlob	lib/sqlite3.c	8621;"	d	file:
OP_ToInt	lib/sqlite3.c	8623;"	d	file:
OP_ToNumeric	lib/sqlite3.c	8622;"	d	file:
OP_ToReal	lib/sqlite3.c	8624;"	d	file:
OP_ToText	lib/sqlite3.c	8620;"	d	file:
OP_Trace	lib/sqlite3.c	8734;"	d	file:
OP_Transaction	lib/sqlite3.c	8649;"	d	file:
OP_VBegin	lib/sqlite3.c	8723;"	d	file:
OP_VColumn	lib/sqlite3.c	8728;"	d	file:
OP_VCreate	lib/sqlite3.c	8724;"	d	file:
OP_VDestroy	lib/sqlite3.c	8725;"	d	file:
OP_VFilter	lib/sqlite3.c	8727;"	d	file:
OP_VNext	lib/sqlite3.c	8729;"	d	file:
OP_VOpen	lib/sqlite3.c	8726;"	d	file:
OP_VRename	lib/sqlite3.c	8730;"	d	file:
OP_VUpdate	lib/sqlite3.c	8731;"	d	file:
OP_Vacuum	lib/sqlite3.c	8719;"	d	file:
OP_Variable	lib/sqlite3.c	8600;"	d	file:
OP_VerifyCookie	lib/sqlite3.c	8652;"	d	file:
OP_Yield	lib/sqlite3.c	8590;"	d	file:
OS2_SHM_BASE	lib/sqlite3.c	23697;"	d	file:
OS2_SHM_BASE	lib/sqlite3.c	23699;"	d	file:
OS2_SHM_DMS	lib/sqlite3.c	23702;"	d	file:
OSTRACE	lib/sqlite3.c	22767;"	d	file:
OSTRACE	lib/sqlite3.c	22769;"	d	file:
OSTRACE	lib/sqlite3.c	25115;"	d	file:
OSTRACE	lib/sqlite3.c	25117;"	d	file:
OSTRACE	lib/sqlite3.c	31968;"	d	file:
OSTRACE	lib/sqlite3.c	31970;"	d	file:
OS_VXWORKS	lib/sqlite3.c	24887;"	d	file:
OS_VXWORKS	lib/sqlite3.c	24889;"	d	file:
O_BINARY	lib/sqlite3.c	25301;"	d	file:
O_LARGEFILE	lib/sqlite3.c	25291;"	d	file:
O_LARGEFILE	lib/sqlite3.c	25294;"	d	file:
O_LARGEFILE	lib/sqlite3.c	25295;"	d	file:
O_NOFOLLOW	lib/sqlite3.c	25298;"	d	file:
Op	lib/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpenCounter	lib/sqlite3.c	22929;"	d	file:
OpenCounter	lib/sqlite3.c	22931;"	d	file:
OpenCounter	lib/sqlite3.c	25277;"	d	file:
OpenCounter	lib/sqlite3.c	25279;"	d	file:
OpenCounter	lib/sqlite3.c	32130;"	d	file:
OpenCounter	lib/sqlite3.c	32132;"	d	file:
P	../framework/md5.c	76;"	d	file:
P4_ADVANCE	lib/sqlite3.c	8540;"	d	file:
P4_COLLSEQ	lib/sqlite3.c	8527;"	d	file:
P4_DYNAMIC	lib/sqlite3.c	8525;"	d	file:
P4_FUNCDEF	lib/sqlite3.c	8528;"	d	file:
P4_INT32	lib/sqlite3.c	8537;"	d	file:
P4_INT64	lib/sqlite3.c	8536;"	d	file:
P4_INTARRAY	lib/sqlite3.c	8538;"	d	file:
P4_KEYINFO	lib/sqlite3.c	8529;"	d	file:
P4_KEYINFO_HANDOFF	lib/sqlite3.c	8549;"	d	file:
P4_KEYINFO_STATIC	lib/sqlite3.c	8550;"	d	file:
P4_MEM	lib/sqlite3.c	8531;"	d	file:
P4_MPRINTF	lib/sqlite3.c	8534;"	d	file:
P4_NOTUSED	lib/sqlite3.c	8524;"	d	file:
P4_REAL	lib/sqlite3.c	8535;"	d	file:
P4_STATIC	lib/sqlite3.c	8526;"	d	file:
P4_SUBPROGRAM	lib/sqlite3.c	8539;"	d	file:
P4_TRANSIENT	lib/sqlite3.c	8532;"	d	file:
P4_VDBEFUNC	lib/sqlite3.c	8530;"	d	file:
P4_VTAB	lib/sqlite3.c	8533;"	d	file:
PAGERID	lib/sqlite3.c	38557;"	d	file:
PAGERTRACE	lib/sqlite3.c	38546;"	d	file:
PAGER_ERROR	lib/sqlite3.c	38783;"	d	file:
PAGER_INCR	lib/sqlite3.c	39127;"	d	file:
PAGER_INCR	lib/sqlite3.c	39129;"	d	file:
PAGER_JOURNALMODE_DELETE	lib/sqlite3.c	8922;"	d	file:
PAGER_JOURNALMODE_MEMORY	lib/sqlite3.c	8926;"	d	file:
PAGER_JOURNALMODE_OFF	lib/sqlite3.c	8924;"	d	file:
PAGER_JOURNALMODE_PERSIST	lib/sqlite3.c	8923;"	d	file:
PAGER_JOURNALMODE_QUERY	lib/sqlite3.c	8921;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	lib/sqlite3.c	8925;"	d	file:
PAGER_JOURNALMODE_WAL	lib/sqlite3.c	8927;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	lib/sqlite3.c	8916;"	d	file:
PAGER_LOCKINGMODE_NORMAL	lib/sqlite3.c	8915;"	d	file:
PAGER_LOCKINGMODE_QUERY	lib/sqlite3.c	8914;"	d	file:
PAGER_MAX_PGNO	lib/sqlite3.c	39188;"	d	file:
PAGER_MEMORY	lib/sqlite3.c	8909;"	d	file:
PAGER_MJ_PGNO	lib/sqlite3.c	8901;"	d	file:
PAGER_OMIT_JOURNAL	lib/sqlite3.c	8908;"	d	file:
PAGER_OPEN	lib/sqlite3.c	38777;"	d	file:
PAGER_READER	lib/sqlite3.c	38778;"	d	file:
PAGER_WRITER_CACHEMOD	lib/sqlite3.c	38780;"	d	file:
PAGER_WRITER_DBMOD	lib/sqlite3.c	38781;"	d	file:
PAGER_WRITER_FINISHED	lib/sqlite3.c	38782;"	d	file:
PAGER_WRITER_LOCKED	lib/sqlite3.c	38779;"	d	file:
PCHARACTER_INFO	lib/fight_type.h	/^}CHARACTER_INFO, *PCHARACTER_INFO;$/;"	t	typeref:struct:tagCHARACTER_INFO
PCache	lib/sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	lib/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	lib/sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	lib/sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	lib/sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	lib/sqlite3.c	9445;"	d	file:
PENDING_BYTE	lib/sqlite3.c	9447;"	d	file:
PENDING_BYTE_PAGE	lib/sqlite3.c	48988;"	d	file:
PENDING_LOCK	lib/sqlite3.c	9386;"	d	file:
PFIGHT_REWARD_CONFIG	lib/fight_type.h	/^}FIGHT_REWARD_CONFIG, *PFIGHT_REWARD_CONFIG;$/;"	t	typeref:struct:tagFIGHT_REWARD_CONFIG
PGHDR_DIRTY	lib/sqlite3.c	9088;"	d	file:
PGHDR_DONT_WRITE	lib/sqlite3.c	9093;"	d	file:
PGHDR_NEED_READ	lib/sqlite3.c	9091;"	d	file:
PGHDR_NEED_SYNC	lib/sqlite3.c	9089;"	d	file:
PGHDR_REUSE_UNLIKELY	lib/sqlite3.c	9092;"	d	file:
PGroup	lib/sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	lib/sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
PKING_FIGHT_INFO	lib/fight_type.h	/^}KING_FIGHT_INFO, *PKING_FIGHT_INFO;$/;"	t	typeref:struct:tagKING_FIGHT_INFO
PLAYER_CHANGE_NAME_LOGGER	../framework/log.h	/^	PLAYER_CHANGE_NAME_LOGGER,$/;"	e	enum:__anon68
PLAYER_EXP_LOGGER	../framework/log.h	/^	PLAYER_EXP_LOGGER,$/;"	e	enum:__anon68
PLAYER_LEVEL_UP_LOGGER	../framework/log.h	/^	PLAYER_LEVEL_UP_LOGGER,$/;"	e	enum:__anon68
PLAYER_STATUS_BAN	../framework/package.h	1614;"	d
PLAYER_STATUS_MUTE	../framework/package.h	1615;"	d
PLAYER_STATUS_NORMAL	../framework/package.h	1613;"	d
PLAYER_VIP_UP_LOGGER	../framework/log.h	/^	PLAYER_VIP_UP_LOGGER,$/;"	e	enum:__anon68
POSITION_LIST_END	lib/sqlite3.c	118483;"	d	file:
POS_COLUMN	lib/sqlite3.c	116501;"	d	file:
POS_END	lib/sqlite3.c	116502;"	d	file:
PPVE_FIGHT_CONFIG	lib/fight_type.h	/^}PVE_FIGHT_CONFIG, *PPVE_FIGHT_CONFIG;$/;"	t	typeref:struct:tagPVE_FIGHT_CONFIG
PPVE_FIGHT_INFO	lib/fight_type.h	/^}PVE_FIGHT_INFO, *PPVE_FIGHT_INFO;$/;"	t	typeref:struct:tagPVE_FIGHT_INFO
PROTO_FILE	lib/battlefield/encode.c	49;"	d	file:
PROTO_FILE	lib/battlefield/encode.c	51;"	d	file:
PROTO_FILE	lib/battlefield/encode.c	54;"	d	file:
PROXY_CONCHVERSION	lib/sqlite3.c	30999;"	d	file:
PROXY_HEADERLEN	lib/sqlite3.c	31000;"	d	file:
PROXY_HOSTIDLEN	lib/sqlite3.c	30961;"	d	file:
PROXY_MAXCONCHLEN	lib/sqlite3.c	31002;"	d	file:
PROXY_PATHINDEX	lib/sqlite3.c	31001;"	d	file:
PSTORY_FIGHT_REWARD_INFO	lib/fight_type.h	/^}STORY_FIGHT_REWARD_INFO, *PSTORY_FIGHT_REWARD_INFO;$/;"	t	typeref:struct:tagSTORY_FIGHT_REWARD_INFO
PTF_INTKEY	lib/sqlite3.c	48691;"	d	file:
PTF_LEAF	lib/sqlite3.c	48694;"	d	file:
PTF_LEAFDATA	lib/sqlite3.c	48693;"	d	file:
PTF_ZERODATA	lib/sqlite3.c	48692;"	d	file:
PTRMAP_BTREE	lib/sqlite3.c	49044;"	d	file:
PTRMAP_FREEPAGE	lib/sqlite3.c	49041;"	d	file:
PTRMAP_ISPAGE	lib/sqlite3.c	49007;"	d	file:
PTRMAP_OVERFLOW1	lib/sqlite3.c	49042;"	d	file:
PTRMAP_OVERFLOW2	lib/sqlite3.c	49043;"	d	file:
PTRMAP_PAGENO	lib/sqlite3.c	49005;"	d	file:
PTRMAP_PTROFFSET	lib/sqlite3.c	49006;"	d	file:
PTRMAP_ROOTPAGE	lib/sqlite3.c	49040;"	d	file:
PUT_UINT32	../framework/md5.c	34;"	d	file:
PVE_FIGHT_CONFIG	lib/fight_type.h	/^}PVE_FIGHT_CONFIG, *PPVE_FIGHT_CONFIG;$/;"	t	typeref:struct:tagPVE_FIGHT_CONFIG
PVE_FIGHT_INFO	lib/fight_type.h	/^}PVE_FIGHT_INFO, *PPVE_FIGHT_INFO;$/;"	t	typeref:struct:tagPVE_FIGHT_INFO
Pager	lib/sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	lib/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	lib/sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	lib/sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	lib/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	lib/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	lib/sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	lib/sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	lib/sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	lib/sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	lib/sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	lib/sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	lib/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	lib/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	lib/sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	lib/sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	lib/sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PickNext	lib/sqlite3.c	130197;"	d	file:
PickNext	lib/sqlite3.c	130202;"	d	file:
PickSeeds	lib/sqlite3.c	130198;"	d	file:
PickSeeds	lib/sqlite3.c	130203;"	d	file:
QuadraticPickNext	lib/sqlite3.c	/^static RtreeCell *QuadraticPickNext($/;"	f	file:
QuadraticPickSeeds	lib/sqlite3.c	/^static void QuadraticPickSeeds($/;"	f	file:
RAND	lib/battlefield/battlefield.h	17;"	d
RANGE	lib/battlefield/role.c	459;"	d	file:
READMARK_NOT_USED	lib/sqlite3.c	45700;"	d	file:
READ_ATTRIBUTE	modules/mlua.c	71;"	d	file:
READ_LOCK	lib/sqlite3.c	48757;"	d	file:
READ_UTF16BE	lib/sqlite3.c	20601;"	d	file:
READ_UTF16LE	lib/sqlite3.c	20591;"	d	file:
READ_UTF8	lib/sqlite3.c	20638;"	d	file:
REALLOC	../framework/memory.h	24;"	d
REALLOC	lib/memory.h	24;"	d
REARGUARD	lib/sqlite3.c	15526;"	d	file:
RECORD	lib/battlefield/record.h	14;"	d
RECORD	lib/battlefield/record.h	16;"	d
REF_SCRIPT	lib/battlefield/script.c	13;"	d	file:
REF_THREAD	lib/battlefield/script.c	14;"	d	file:
REGISTER_TRACE	lib/sqlite3.c	64786;"	d	file:
REGISTER_TRACE	lib/sqlite3.c	64788;"	d	file:
RESERVED_BYTE	lib/sqlite3.c	9449;"	d	file:
RESERVED_LOCK	lib/sqlite3.c	9385;"	d	file:
RESOURCE_LOGGER	../framework/log.h	/^	RESOURCE_LOGGER,$/;"	e	enum:__anon68
RET_ALREADYAT	../framework/package.h	43;"	d
RET_ARENA_COOLDOWN	../framework/package.h	154;"	d
RET_ARENA_LIMIT	../framework/package.h	155;"	d
RET_ARENA_POSITION_INVALID	../framework/package.h	156;"	d
RET_BAG_FULL	../framework/package.h	118;"	d
RET_BATTLE_EXIST	../framework/package.h	158;"	d
RET_BATTLE_INVALID	../framework/package.h	159;"	d
RET_BATTLE_NOT_EXIST	../framework/package.h	160;"	d
RET_BUILDING_INVALID	../framework/package.h	70;"	d
RET_BUILDING_LEVEL_SCHOOL	../framework/package.h	71;"	d
RET_BUILDING_MAX_LEVEL	../framework/package.h	72;"	d
RET_CHANNEL_INVALID	../framework/package.h	168;"	d
RET_CHARACTER_EXIST	../framework/package.h	55;"	d
RET_CHARACTER_NAME_EXIST	../framework/package.h	56;"	d
RET_CHARACTER_NOT_EXIST	../framework/package.h	46;"	d
RET_CHARACTER_STATUS_ADDICTED	../framework/package.h	50;"	d
RET_CHARACTER_STATUS_BAN	../framework/package.h	48;"	d
RET_CHARACTER_STATUS_MUTE	../framework/package.h	49;"	d
RET_CLI_SEND_NOT_MATCH	../framework/package.h	186;"	d
RET_COMMON_LIMIT	../framework/package.h	184;"	d
RET_COMPOSE	../framework/package.h	65;"	d
RET_CONTACT_SELF	../framework/package.h	169;"	d
RET_COOLDOWN	../framework/package.h	42;"	d
RET_COOLDOWN_HERO_EXCHANGE	../framework/package.h	124;"	d
RET_COOLDOWN_HERO_VISIT	../framework/package.h	125;"	d
RET_COUNTRY_BATTLE	../framework/package.h	162;"	d
RET_COUNTRY_FRIEND	../framework/package.h	163;"	d
RET_COUNTRY_LINK	../framework/package.h	164;"	d
RET_COUNTRY_MATCH	../framework/package.h	165;"	d
RET_COUNTRY_PROTECTED	../framework/package.h	166;"	d
RET_DAILY_LIMIT_DONATE	../framework/package.h	133;"	d
RET_DAILY_LIMIT_FIRE	../framework/package.h	127;"	d
RET_DAILY_LIMIT_HORSE	../framework/package.h	132;"	d
RET_DAILY_LIMIT_MERCHANDISE	../framework/package.h	128;"	d
RET_DAILY_LIMIT_SALARY	../framework/package.h	129;"	d
RET_DAILY_LIMIT_STORY	../framework/package.h	130;"	d
RET_DAILY_LIMIT_TAX	../framework/package.h	131;"	d
RET_DEPEND	../framework/package.h	36;"	d
RET_EQUIP_GEM_REPEAT	../framework/package.h	103;"	d
RET_EQUIP_INUSE	../framework/package.h	104;"	d
RET_EQUIP_INVALID	../framework/package.h	105;"	d
RET_EQUIP_LEVEL	../framework/package.h	106;"	d
RET_EQUIP_MAX_LEVEL	../framework/package.h	107;"	d
RET_EQUIP_MIN_LEVEL	../framework/package.h	108;"	d
RET_EQUIP_NOT_EXIST	../framework/package.h	109;"	d
RET_EQUIP_POS	../framework/package.h	110;"	d
RET_EQUIP_TYPE	../framework/package.h	111;"	d
RET_ERROR	../framework/package.h	30;"	d
RET_EXIST	../framework/package.h	31;"	d
RET_FIGHT_FAILED	../framework/package.h	57;"	d
RET_FIRE_LAYER_ERROR	../framework/package.h	137;"	d
RET_FULL	../framework/package.h	38;"	d
RET_GEM_INVALID	../framework/package.h	114;"	d
RET_GEM_MAX_LEVEL	../framework/package.h	115;"	d
RET_GEM_NOT_ENOUGH	../framework/package.h	116;"	d
RET_GEM_NOT_EXIST	../framework/package.h	117;"	d
RET_GUILD_EXIST	../framework/package.h	171;"	d
RET_GUILD_LEADER	../framework/package.h	172;"	d
RET_GUILD_MEMBER	../framework/package.h	173;"	d
RET_GUILD_NAME_EXIST	../framework/package.h	174;"	d
RET_GUILD_NOT_EXIST	../framework/package.h	175;"	d
RET_GUILD_PREMISSION	../framework/package.h	176;"	d
RET_GUILD_PREMISSIONS	../framework/package.h	177;"	d
RET_GUILD_REQUEST_INPROGRESS	../framework/package.h	178;"	d
RET_GUILD_REQUEST_NOT_EXIST	../framework/package.h	179;"	d
RET_HERO_BUSY	../framework/package.h	77;"	d
RET_HERO_EXIST	../framework/package.h	78;"	d
RET_HERO_GROW_LIMIT	../framework/package.h	79;"	d
RET_HERO_INUSE	../framework/package.h	80;"	d
RET_HERO_INUSE_FULL	../framework/package.h	92;"	d
RET_HERO_INVALID	../framework/package.h	81;"	d
RET_HERO_LEVEL	../framework/package.h	82;"	d
RET_HERO_NOT_EXIST	../framework/package.h	83;"	d
RET_HERO_NOT_INUSE	../framework/package.h	84;"	d
RET_HERO_NOT_TRANING	../framework/package.h	85;"	d
RET_HERO_NOT_VISIT	../framework/package.h	86;"	d
RET_HERO_RELATIONSHIP	../framework/package.h	87;"	d
RET_HERO_RELATIONSHIP_FULL	../framework/package.h	88;"	d
RET_HERO_TITLE_INVALID	../framework/package.h	89;"	d
RET_HERO_TRANING	../framework/package.h	90;"	d
RET_HERO_VISIT	../framework/package.h	91;"	d
RET_INPROGRESS	../framework/package.h	34;"	d
RET_ITEM_NOT_ENOUGH	../framework/package.h	113;"	d
RET_KING_COUNTRY	../framework/package.h	60;"	d
RET_KING_LEVEL	../framework/package.h	61;"	d
RET_KING_LEVEL_NOT_ENOUGH	../framework/package.h	180;"	d
RET_KING_PRESTIGE	../framework/package.h	62;"	d
RET_KING_TITLE	../framework/package.h	63;"	d
RET_KING_TITLE_INVALID	../framework/package.h	64;"	d
RET_LEVEL_LIMIT	../framework/package.h	183;"	d
RET_LEVEL_OR_STAR_COUNT_NOT_ENOUGH	../framework/package.h	185;"	d
RET_MAX_LEVEL	../framework/package.h	35;"	d
RET_MERCHANDISE_INVALID	../framework/package.h	100;"	d
RET_NOT_ENOUGH	../framework/package.h	39;"	d
RET_NOT_EXIST	../framework/package.h	32;"	d
RET_PARAM_ERROR	../framework/package.h	33;"	d
RET_PERMISSION	../framework/package.h	41;"	d
RET_PREMISSIONS	../framework/package.h	40;"	d
RET_QUEST_DOING	../framework/package.h	120;"	d
RET_QUEST_DONE	../framework/package.h	121;"	d
RET_QUEST_INVALID	../framework/package.h	122;"	d
RET_RESOURCES	../framework/package.h	37;"	d
RET_RESOURCE_COIN_NOT_ENOUGH	../framework/package.h	95;"	d
RET_RESOURCE_MDEAL_NOT_ENOUGH	../framework/package.h	96;"	d
RET_RESOURCE_MONEY_NOT_ENOUGH	../framework/package.h	97;"	d
RET_RESOURCE_MONEY_NOT_ENOUGH_2	../framework/package.h	101;"	d
RET_RESOURCE_NOT_ENOUGH	../framework/package.h	94;"	d
RET_RESOURCE_ORDER_NOT_ENOUGH	../framework/package.h	98;"	d
RET_RESOURCE_WOOD_NOT_ENOUGH	../framework/package.h	99;"	d
RET_REWARD_DONE	../framework/package.h	149;"	d
RET_REWARD_EXPIRED	../framework/package.h	150;"	d
RET_REWARD_INVALID	../framework/package.h	148;"	d
RET_REWARD_NOT_EXIST	../framework/package.h	58;"	d
RET_SALARY_NOT_EXIST	../framework/package.h	67;"	d
RET_SERVICE_STATUS_ERROR	../framework/package.h	44;"	d
RET_SIGN_ALREADY_SIGNED	../framework/package.h	152;"	d
RET_SIGN_FULL	../framework/package.h	151;"	d
RET_STORY_COOLDOWN	../framework/package.h	138;"	d
RET_STORY_INVALID	../framework/package.h	135;"	d
RET_STORY_NOT_OPEN	../framework/package.h	136;"	d
RET_SUCCESS	../framework/package.h	29;"	d
RET_TACTIC_BAG_FULL	../framework/package.h	140;"	d
RET_TACTIC_DUPLICATE	../framework/package.h	181;"	d
RET_TACTIC_EXP_NOT_ENOUGH	../framework/package.h	141;"	d
RET_TACTIC_INVALID	../framework/package.h	142;"	d
RET_TACTIC_MAX_LEVEL	../framework/package.h	143;"	d
RET_TACTIC_NOT_EXIST	../framework/package.h	144;"	d
RET_TACTIC_TEACHER_INVALID	../framework/package.h	145;"	d
RET_TACTIC_TEACHER_NOT_EXIST	../framework/package.h	146;"	d
RET_TARGET_NOT_EXIST	../framework/package.h	54;"	d
RET_TAX_LIMIT	../framework/package.h	68;"	d
RET_TECHNOLOGY_INVALID	../framework/package.h	74;"	d
RET_TECHNOLOGY_MAX_LEVEL	../framework/package.h	75;"	d
RET_VERSION_MISSMATCH	../framework/package.h	182;"	d
RET_VIP_PREMISSIONS	../framework/package.h	52;"	d
REWARD_EQUIP	../framework/package.h	1605;"	d
REWARD_FLAG_INVALIABLE	lib/battlefield/battlefield.h	40;"	d
REWARD_FLAG_PASS	lib/battlefield/battlefield.h	41;"	d
REWARD_GEM	../framework/package.h	1604;"	d
REWARD_HERO_EXP_SPEC	../framework/package.h	1602;"	d
REWARD_HERO_ID	../framework/package.h	1606;"	d
REWARD_ITEM	../framework/package.h	1603;"	d
REWARD_PLAYER_EXP	../framework/package.h	1599;"	d
REWARD_PLAYER_PRESTIGE	../framework/package.h	1600;"	d
REWARD_RESOURCES_VALUE	../framework/package.h	1601;"	d
ROLE_BOX_WIDTH	lib/battlefield/role.c	503;"	d	file:
ROLE_DISTANCE	lib/battlefield/role.c	73;"	d	file:
ROLE_FLAG_KING	lib/battlefield/role.h	82;"	d
ROLE_FLAG_TMP	lib/battlefield/role.h	81;"	d
ROLE_STATUS_ATTACK_S1	lib/battlefield/role.h	/^    ROLE_STATUS_ATTACK_S1,$/;"	e	enum:role_status
ROLE_STATUS_ATTACK_S2	lib/battlefield/role.h	/^    ROLE_STATUS_ATTACK_S2,$/;"	e	enum:role_status
ROLE_STATUS_DEAD	lib/battlefield/role.h	/^    ROLE_STATUS_DEAD,$/;"	e	enum:role_status
ROLE_STATUS_FREEZE	lib/battlefield/role.h	/^    ROLE_STATUS_FREEZE,$/;"	e	enum:role_status
ROLE_STATUS_IDLE	lib/battlefield/role.h	/^    ROLE_STATUS_IDLE,$/;"	e	enum:role_status
ROLE_STATUS_MOVING	lib/battlefield/role.h	/^    ROLE_STATUS_MOVING,$/;"	e	enum:role_status
ROUND8	lib/sqlite3.c	8003;"	d	file:
ROUNDDOWN8	lib/sqlite3.c	8008;"	d	file:
ROUTE_PORT_BASE	../framework/common_macro.h	7;"	d
ROWSET_ALLOCATION_SIZE	lib/sqlite3.c	37932;"	d	file:
ROWSET_ENTRY_PER_CHUNK	lib/sqlite3.c	37937;"	d	file:
RTREE_COORD_INT32	lib/sqlite3.c	130296;"	d	file:
RTREE_COORD_REAL32	lib/sqlite3.c	130295;"	d	file:
RTREE_EQ	lib/sqlite3.c	130360;"	d	file:
RTREE_GE	lib/sqlite3.c	130363;"	d	file:
RTREE_GEOMETRY_MAGIC	lib/sqlite3.c	130394;"	d	file:
RTREE_GT	lib/sqlite3.c	130364;"	d	file:
RTREE_LE	lib/sqlite3.c	130361;"	d	file:
RTREE_LT	lib/sqlite3.c	130362;"	d	file:
RTREE_MATCH	lib/sqlite3.c	130365;"	d	file:
RTREE_MAXCELLS	lib/sqlite3.c	130309;"	d	file:
RTREE_MAX_DEPTH	lib/sqlite3.c	130318;"	d	file:
RTREE_MAX_DIMENSIONS	lib/sqlite3.c	130245;"	d	file:
RTREE_MINCELLS	lib/sqlite3.c	130307;"	d	file:
RTREE_REINSERT	lib/sqlite3.c	130308;"	d	file:
Reinsert	lib/sqlite3.c	/^static int Reinsert($/;"	f	file:
RowSet	lib/sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	lib/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	lib/sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	lib/sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	lib/sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	lib/sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	lib/sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	lib/sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	lib/sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	lib/sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	lib/sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	lib/sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	lib/sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	lib/sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeGeomCallback	lib/sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	lib/sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	lib/sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	lib/sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	lib/sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	lib/sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
S	../framework/md5.c	74;"	d	file:
S2UInt29	../framework/amf.c	/^uint32_t S2UInt29(int32_t i) $/;"	f
SAVEPOINT_BEGIN	lib/sqlite3.c	9986;"	d	file:
SAVEPOINT_RELEASE	lib/sqlite3.c	9987;"	d	file:
SAVEPOINT_ROLLBACK	lib/sqlite3.c	9988;"	d	file:
SAVE_SZ	lib/sqlite3.c	81430;"	d	file:
SCHEMA_TABLE	lib/sqlite3.c	8058;"	d	file:
SEND_BUFFER_MESSAGE	lib/battlefield/role.c	222;"	d	file:
SERVICE_BEGIN	../framework/service.h	13;"	d
SERVICE_END	../framework/service.h	16;"	d
SETBIT	lib/sqlite3.c	36111;"	d	file:
SET_FULLSYNC	lib/sqlite3.c	9331;"	d	file:
SEX_FEMALE	../framework/package.h	279;"	d
SEX_MALE	../framework/package.h	278;"	d
SF_Aggregate	lib/sqlite3.c	10969;"	d	file:
SF_Distinct	lib/sqlite3.c	10967;"	d	file:
SF_Expanded	lib/sqlite3.c	10971;"	d	file:
SF_HasTypeInfo	lib/sqlite3.c	10972;"	d	file:
SF_Resolved	lib/sqlite3.c	10968;"	d	file:
SF_UseSorter	lib/sqlite3.c	10973;"	d	file:
SF_UsesEphemeral	lib/sqlite3.c	10970;"	d	file:
SF_Values	lib/sqlite3.c	10974;"	d	file:
SHARED_FIRST	lib/sqlite3.c	9450;"	d	file:
SHARED_LOCK	lib/sqlite3.c	9384;"	d	file:
SHARED_SIZE	lib/sqlite3.c	9451;"	d	file:
SKILL_FLAG_AUTO_RELEASE	lib/battlefield/skill.h	13;"	d
SKILL_FLAG_FROM_BUFFER	lib/battlefield/skill.h	15;"	d
SKILL_FLAG_NO_ACTION	lib/battlefield/skill.h	14;"	d
SKILL_PREFIX	lib/battlefield/skill.c	1388;"	d	file:
SKILL_SCRIPT_CALL	lib/battlefield/skill.c	42;"	d	file:
SKILL_SCRIPT_CALL_COMMIT	lib/battlefield/skill.c	31;"	d	file:
SKILL_SCRIPT_CALL_PREPARE	lib/battlefield/skill.c	25;"	d	file:
SKIP	lib/battlefield/bone.c	405;"	d	file:
SLOT_2_0	lib/sqlite3.c	21711;"	d	file:
SLOT_4_2_0	lib/sqlite3.c	21712;"	d	file:
SMALLEST_INT64	lib/sqlite3.c	7997;"	d	file:
SOCKET_CALLBACK_ACCEPT	lib/lua_network.c	46;"	d	file:
SOCKET_CALLBACK_CLOSED	lib/lua_network.c	51;"	d	file:
SOCKET_CALLBACK_CONNECTED	lib/lua_network.c	47;"	d	file:
SOCKET_CALLBACK_ERROR	lib/lua_network.c	50;"	d	file:
SOCKET_CALLBACK_MAX	lib/lua_network.c	52;"	d	file:
SOCKET_CALLBACK_READ	lib/lua_network.c	49;"	d	file:
SOCKET_CALLBACK_WRITE	lib/lua_network.c	48;"	d	file:
SORTER_MAX_MERGE_COUNT	lib/sqlite3.c	71782;"	d	file:
SORTER_MIN_WORKING	lib/sqlite3.c	71779;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	17662;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	17664;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	17949;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	17951;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	18287;"	d	file:
SQLITE3_MUTEX_INITIALIZER	lib/sqlite3.c	18289;"	d	file:
SQLITE3_TEXT	lib/sqlite3.c	4072;"	d	file:
SQLITE3_TEXT	lib/sqlite3.h	3522;"	d
SQLITE_ABORT	lib/sqlite3.c	936;"	d	file:
SQLITE_ABORT	lib/sqlite3.h	386;"	d
SQLITE_ABORT_ROLLBACK	lib/sqlite3.c	1014;"	d	file:
SQLITE_ABORT_ROLLBACK	lib/sqlite3.h	464;"	d
SQLITE_ACCESS_EXISTS	lib/sqlite3.c	1634;"	d	file:
SQLITE_ACCESS_EXISTS	lib/sqlite3.h	1084;"	d
SQLITE_ACCESS_READ	lib/sqlite3.c	1636;"	d	file:
SQLITE_ACCESS_READ	lib/sqlite3.h	1086;"	d
SQLITE_ACCESS_READWRITE	lib/sqlite3.c	1635;"	d	file:
SQLITE_ACCESS_READWRITE	lib/sqlite3.h	1085;"	d
SQLITE_AFF_INTEGER	lib/sqlite3.c	10073;"	d	file:
SQLITE_AFF_MASK	lib/sqlite3.c	10082;"	d	file:
SQLITE_AFF_NONE	lib/sqlite3.c	10071;"	d	file:
SQLITE_AFF_NUMERIC	lib/sqlite3.c	10072;"	d	file:
SQLITE_AFF_REAL	lib/sqlite3.c	10074;"	d	file:
SQLITE_AFF_TEXT	lib/sqlite3.c	10070;"	d	file:
SQLITE_ALTER_TABLE	lib/sqlite3.c	2934;"	d	file:
SQLITE_ALTER_TABLE	lib/sqlite3.h	2384;"	d
SQLITE_AMALGAMATION	lib/sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	lib/sqlite3.c	2936;"	d	file:
SQLITE_ANALYZE	lib/sqlite3.h	2386;"	d
SQLITE_ANY	lib/sqlite3.c	4430;"	d	file:
SQLITE_ANY	lib/sqlite3.h	3880;"	d
SQLITE_API	lib/sqlite3.c	26;"	d	file:
SQLITE_API	lib/sqlite3.c	603;"	d	file:
SQLITE_API	lib/sqlite3.h	53;"	d
SQLITE_ASCII	lib/sqlite3.c	7895;"	d	file:
SQLITE_ATTACH	lib/sqlite3.c	2932;"	d	file:
SQLITE_ATTACH	lib/sqlite3.h	2382;"	d
SQLITE_AUTH	lib/sqlite3.c	955;"	d	file:
SQLITE_AUTH	lib/sqlite3.h	405;"	d
SQLITE_AutoIndex	lib/sqlite3.c	9851;"	d	file:
SQLITE_BIGENDIAN	lib/sqlite3.c	7982;"	d	file:
SQLITE_BIGENDIAN	lib/sqlite3.c	7986;"	d	file:
SQLITE_BIG_DBL	lib/sqlite3.c	7831;"	d	file:
SQLITE_BIG_DBL	lib/sqlite3.c	7839;"	d	file:
SQLITE_BLOB	lib/sqlite3.c	4065;"	d	file:
SQLITE_BLOB	lib/sqlite3.h	3515;"	d
SQLITE_BUSY	lib/sqlite3.c	937;"	d	file:
SQLITE_BUSY	lib/sqlite3.h	387;"	d
SQLITE_BUSY_RECOVERY	lib/sqlite3.c	1009;"	d	file:
SQLITE_BUSY_RECOVERY	lib/sqlite3.h	459;"	d
SQLITE_CANTOPEN	lib/sqlite3.c	946;"	d	file:
SQLITE_CANTOPEN	lib/sqlite3.h	396;"	d
SQLITE_CANTOPEN_BKPT	lib/sqlite3.c	11421;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	lib/sqlite3.c	1010;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	lib/sqlite3.h	460;"	d
SQLITE_CHECKPOINT_FULL	lib/sqlite3.c	7390;"	d	file:
SQLITE_CHECKPOINT_FULL	lib/sqlite3.h	6840;"	d
SQLITE_CHECKPOINT_PASSIVE	lib/sqlite3.c	7389;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	lib/sqlite3.h	6839;"	d
SQLITE_CHECKPOINT_RESTART	lib/sqlite3.c	7391;"	d	file:
SQLITE_CHECKPOINT_RESTART	lib/sqlite3.h	6841;"	d
SQLITE_CONFIG_GETMALLOC	lib/sqlite3.c	2109;"	d	file:
SQLITE_CONFIG_GETMALLOC	lib/sqlite3.h	1559;"	d
SQLITE_CONFIG_GETMUTEX	lib/sqlite3.c	2115;"	d	file:
SQLITE_CONFIG_GETMUTEX	lib/sqlite3.h	1565;"	d
SQLITE_CONFIG_GETPCACHE	lib/sqlite3.c	2119;"	d	file:
SQLITE_CONFIG_GETPCACHE	lib/sqlite3.h	1569;"	d
SQLITE_CONFIG_GETPCACHE2	lib/sqlite3.c	2123;"	d	file:
SQLITE_CONFIG_GETPCACHE2	lib/sqlite3.h	1573;"	d
SQLITE_CONFIG_HEAP	lib/sqlite3.c	2112;"	d	file:
SQLITE_CONFIG_HEAP	lib/sqlite3.h	1562;"	d
SQLITE_CONFIG_LOG	lib/sqlite3.c	2120;"	d	file:
SQLITE_CONFIG_LOG	lib/sqlite3.h	1570;"	d
SQLITE_CONFIG_LOOKASIDE	lib/sqlite3.c	2117;"	d	file:
SQLITE_CONFIG_LOOKASIDE	lib/sqlite3.h	1567;"	d
SQLITE_CONFIG_MALLOC	lib/sqlite3.c	2108;"	d	file:
SQLITE_CONFIG_MALLOC	lib/sqlite3.h	1558;"	d
SQLITE_CONFIG_MEMSTATUS	lib/sqlite3.c	2113;"	d	file:
SQLITE_CONFIG_MEMSTATUS	lib/sqlite3.h	1563;"	d
SQLITE_CONFIG_MULTITHREAD	lib/sqlite3.c	2106;"	d	file:
SQLITE_CONFIG_MULTITHREAD	lib/sqlite3.h	1556;"	d
SQLITE_CONFIG_MUTEX	lib/sqlite3.c	2114;"	d	file:
SQLITE_CONFIG_MUTEX	lib/sqlite3.h	1564;"	d
SQLITE_CONFIG_PAGECACHE	lib/sqlite3.c	2111;"	d	file:
SQLITE_CONFIG_PAGECACHE	lib/sqlite3.h	1561;"	d
SQLITE_CONFIG_PCACHE	lib/sqlite3.c	2118;"	d	file:
SQLITE_CONFIG_PCACHE	lib/sqlite3.h	1568;"	d
SQLITE_CONFIG_PCACHE2	lib/sqlite3.c	2122;"	d	file:
SQLITE_CONFIG_PCACHE2	lib/sqlite3.h	1572;"	d
SQLITE_CONFIG_SCRATCH	lib/sqlite3.c	2110;"	d	file:
SQLITE_CONFIG_SCRATCH	lib/sqlite3.h	1560;"	d
SQLITE_CONFIG_SERIALIZED	lib/sqlite3.c	2107;"	d	file:
SQLITE_CONFIG_SERIALIZED	lib/sqlite3.h	1557;"	d
SQLITE_CONFIG_SINGLETHREAD	lib/sqlite3.c	2105;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	lib/sqlite3.h	1555;"	d
SQLITE_CONFIG_URI	lib/sqlite3.c	2121;"	d	file:
SQLITE_CONFIG_URI	lib/sqlite3.h	1571;"	d
SQLITE_CONSTRAINT	lib/sqlite3.c	951;"	d	file:
SQLITE_CONSTRAINT	lib/sqlite3.h	401;"	d
SQLITE_COPY	lib/sqlite3.c	2941;"	d	file:
SQLITE_COPY	lib/sqlite3.h	2391;"	d
SQLITE_CORE	lib/sqlite3.c	116932;"	d	file:
SQLITE_CORE	lib/sqlite3.c	20;"	d	file:
SQLITE_CORE	lib/sqlite3.c	90971;"	d	file:
SQLITE_CORRUPT	lib/sqlite3.c	943;"	d	file:
SQLITE_CORRUPT	lib/sqlite3.h	393;"	d
SQLITE_CORRUPT_BKPT	lib/sqlite3.c	11419;"	d	file:
SQLITE_CORRUPT_VTAB	lib/sqlite3.c	1011;"	d	file:
SQLITE_CORRUPT_VTAB	lib/sqlite3.h	461;"	d
SQLITE_CREATE_INDEX	lib/sqlite3.c	2909;"	d	file:
SQLITE_CREATE_INDEX	lib/sqlite3.h	2359;"	d
SQLITE_CREATE_TABLE	lib/sqlite3.c	2910;"	d	file:
SQLITE_CREATE_TABLE	lib/sqlite3.h	2360;"	d
SQLITE_CREATE_TEMP_INDEX	lib/sqlite3.c	2911;"	d	file:
SQLITE_CREATE_TEMP_INDEX	lib/sqlite3.h	2361;"	d
SQLITE_CREATE_TEMP_TABLE	lib/sqlite3.c	2912;"	d	file:
SQLITE_CREATE_TEMP_TABLE	lib/sqlite3.h	2362;"	d
SQLITE_CREATE_TEMP_TRIGGER	lib/sqlite3.c	2913;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	lib/sqlite3.h	2363;"	d
SQLITE_CREATE_TEMP_VIEW	lib/sqlite3.c	2914;"	d	file:
SQLITE_CREATE_TEMP_VIEW	lib/sqlite3.h	2364;"	d
SQLITE_CREATE_TRIGGER	lib/sqlite3.c	2915;"	d	file:
SQLITE_CREATE_TRIGGER	lib/sqlite3.h	2365;"	d
SQLITE_CREATE_VIEW	lib/sqlite3.c	2916;"	d	file:
SQLITE_CREATE_VIEW	lib/sqlite3.h	2366;"	d
SQLITE_CREATE_VTABLE	lib/sqlite3.c	2937;"	d	file:
SQLITE_CREATE_VTABLE	lib/sqlite3.h	2387;"	d
SQLITE_CkptFullFSync	lib/sqlite3.c	9846;"	d	file:
SQLITE_ColumnCache	lib/sqlite3.c	9862;"	d	file:
SQLITE_CountRows	lib/sqlite3.c	9833;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	lib/sqlite3.c	2184;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	lib/sqlite3.h	1634;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	lib/sqlite3.c	2185;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	lib/sqlite3.h	1635;"	d
SQLITE_DBCONFIG_LOOKASIDE	lib/sqlite3.c	2183;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	lib/sqlite3.h	1633;"	d
SQLITE_DBSTATUS_CACHE_HIT	lib/sqlite3.c	6568;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	lib/sqlite3.h	6018;"	d
SQLITE_DBSTATUS_CACHE_MISS	lib/sqlite3.c	6569;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	lib/sqlite3.h	6019;"	d
SQLITE_DBSTATUS_CACHE_USED	lib/sqlite3.c	6562;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	lib/sqlite3.h	6012;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	lib/sqlite3.c	6565;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	lib/sqlite3.h	6015;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	lib/sqlite3.c	6567;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	lib/sqlite3.h	6017;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	lib/sqlite3.c	6566;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	lib/sqlite3.h	6016;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	lib/sqlite3.c	6561;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	lib/sqlite3.h	6011;"	d
SQLITE_DBSTATUS_MAX	lib/sqlite3.c	6570;"	d	file:
SQLITE_DBSTATUS_MAX	lib/sqlite3.h	6020;"	d
SQLITE_DBSTATUS_SCHEMA_USED	lib/sqlite3.c	6563;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	lib/sqlite3.h	6013;"	d
SQLITE_DBSTATUS_STMT_USED	lib/sqlite3.c	6564;"	d	file:
SQLITE_DBSTATUS_STMT_USED	lib/sqlite3.h	6014;"	d
SQLITE_DEBUG_OS_TRACE	lib/sqlite3.c	22764;"	d	file:
SQLITE_DEBUG_OS_TRACE	lib/sqlite3.c	25112;"	d	file:
SQLITE_DEBUG_OS_TRACE	lib/sqlite3.c	31965;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	lib/sqlite3.c	8203;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	lib/sqlite3.c	187;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	lib/sqlite3.c	7861;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	lib/sqlite3.c	24971;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	lib/sqlite3.c	8874;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	lib/sqlite3.c	383;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	lib/sqlite3.c	239;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	lib/sqlite3.c	242;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	lib/sqlite3.c	243;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	lib/sqlite3.c	24978;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	lib/sqlite3.c	7869;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	lib/sqlite3.c	9338;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	lib/sqlite3.c	190;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	lib/sqlite3.c	198;"	d	file:
SQLITE_DELETE	lib/sqlite3.c	2917;"	d	file:
SQLITE_DELETE	lib/sqlite3.h	2367;"	d
SQLITE_DENY	lib/sqlite3.c	2886;"	d	file:
SQLITE_DENY	lib/sqlite3.h	2336;"	d
SQLITE_DEPRECATED	lib/sqlite3.c	620;"	d	file:
SQLITE_DEPRECATED	lib/sqlite3.h	70;"	d
SQLITE_DETACH	lib/sqlite3.c	2933;"	d	file:
SQLITE_DETACH	lib/sqlite3.h	2383;"	d
SQLITE_DONE	lib/sqlite3.c	960;"	d	file:
SQLITE_DONE	lib/sqlite3.h	410;"	d
SQLITE_DROP_INDEX	lib/sqlite3.c	2918;"	d	file:
SQLITE_DROP_INDEX	lib/sqlite3.h	2368;"	d
SQLITE_DROP_TABLE	lib/sqlite3.c	2919;"	d	file:
SQLITE_DROP_TABLE	lib/sqlite3.h	2369;"	d
SQLITE_DROP_TEMP_INDEX	lib/sqlite3.c	2920;"	d	file:
SQLITE_DROP_TEMP_INDEX	lib/sqlite3.h	2370;"	d
SQLITE_DROP_TEMP_TABLE	lib/sqlite3.c	2921;"	d	file:
SQLITE_DROP_TEMP_TABLE	lib/sqlite3.h	2371;"	d
SQLITE_DROP_TEMP_TRIGGER	lib/sqlite3.c	2922;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	lib/sqlite3.h	2372;"	d
SQLITE_DROP_TEMP_VIEW	lib/sqlite3.c	2923;"	d	file:
SQLITE_DROP_TEMP_VIEW	lib/sqlite3.h	2373;"	d
SQLITE_DROP_TRIGGER	lib/sqlite3.c	2924;"	d	file:
SQLITE_DROP_TRIGGER	lib/sqlite3.h	2374;"	d
SQLITE_DROP_VIEW	lib/sqlite3.c	2925;"	d	file:
SQLITE_DROP_VIEW	lib/sqlite3.h	2375;"	d
SQLITE_DROP_VTABLE	lib/sqlite3.c	2938;"	d	file:
SQLITE_DROP_VTABLE	lib/sqlite3.h	2388;"	d
SQLITE_DYNAMIC	lib/sqlite3.c	8074;"	d	file:
SQLITE_DistinctOpt	lib/sqlite3.c	9869;"	d	file:
SQLITE_EBCDIC	lib/sqlite3.c	7893;"	d	file:
SQLITE_EMPTY	lib/sqlite3.c	948;"	d	file:
SQLITE_EMPTY	lib/sqlite3.h	398;"	d
SQLITE_ENABLE_FTS3	lib/sqlite3.c	11430;"	d	file:
SQLITE_ENABLE_FTS3	lib/sqlite3.c	116144;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	lib/sqlite3.c	24875;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	lib/sqlite3.c	24877;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	lib/sqlite3.c	92872;"	d	file:
SQLITE_ERROR	lib/sqlite3.c	933;"	d	file:
SQLITE_ERROR	lib/sqlite3.h	383;"	d
SQLITE_EXPERIMENTAL	lib/sqlite3.c	621;"	d	file:
SQLITE_EXPERIMENTAL	lib/sqlite3.h	71;"	d
SQLITE_EXTENSION_INIT1	lib/sqlite3.c	91417;"	d	file:
SQLITE_EXTENSION_INIT2	lib/sqlite3.c	91418;"	d	file:
SQLITE_EXTERN	lib/sqlite3.c	599;"	d	file:
SQLITE_EXTERN	lib/sqlite3.h	49;"	d
SQLITE_EnableTrigger	lib/sqlite3.c	9854;"	d	file:
SQLITE_FAIL	lib/sqlite3.c	7475;"	d	file:
SQLITE_FAIL	lib/sqlite3.h	6925;"	d
SQLITE_FAULTINJECTOR_COUNT	lib/sqlite3.c	12068;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	lib/sqlite3.c	12067;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	lib/sqlite3.c	1394;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	lib/sqlite3.h	844;"	d
SQLITE_FCNTL_DB_UNCHANGED	lib/sqlite3.c	9472;"	d	file:
SQLITE_FCNTL_FILE_POINTER	lib/sqlite3.c	1395;"	d	file:
SQLITE_FCNTL_FILE_POINTER	lib/sqlite3.h	845;"	d
SQLITE_FCNTL_LOCKSTATE	lib/sqlite3.c	1389;"	d	file:
SQLITE_FCNTL_LOCKSTATE	lib/sqlite3.h	839;"	d
SQLITE_FCNTL_OVERWRITE	lib/sqlite3.c	1399;"	d	file:
SQLITE_FCNTL_OVERWRITE	lib/sqlite3.h	849;"	d
SQLITE_FCNTL_PERSIST_WAL	lib/sqlite3.c	1398;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	lib/sqlite3.h	848;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	lib/sqlite3.c	1401;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	lib/sqlite3.h	851;"	d
SQLITE_FCNTL_PRAGMA	lib/sqlite3.c	1402;"	d	file:
SQLITE_FCNTL_PRAGMA	lib/sqlite3.h	852;"	d
SQLITE_FCNTL_SIZE_HINT	lib/sqlite3.c	1393;"	d	file:
SQLITE_FCNTL_SIZE_HINT	lib/sqlite3.h	843;"	d
SQLITE_FCNTL_SYNC_OMITTED	lib/sqlite3.c	1396;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	lib/sqlite3.h	846;"	d
SQLITE_FCNTL_VFSNAME	lib/sqlite3.c	1400;"	d	file:
SQLITE_FCNTL_VFSNAME	lib/sqlite3.h	850;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	lib/sqlite3.c	1397;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	lib/sqlite3.h	847;"	d
SQLITE_FILE_HEADER	lib/sqlite3.c	48684;"	d	file:
SQLITE_FLOAT	lib/sqlite3.c	4064;"	d	file:
SQLITE_FLOAT	lib/sqlite3.h	3514;"	d
SQLITE_FORMAT	lib/sqlite3.c	956;"	d	file:
SQLITE_FORMAT	lib/sqlite3.h	406;"	d
SQLITE_FREE	lib/sqlite3.c	15249;"	d	file:
SQLITE_FREE	lib/sqlite3.c	15261;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	lib/sqlite3.c	24956;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	lib/sqlite3.c	122365;"	d	file:
SQLITE_FULL	lib/sqlite3.c	945;"	d	file:
SQLITE_FULL	lib/sqlite3.h	395;"	d
SQLITE_FUNCTION	lib/sqlite3.c	2939;"	d	file:
SQLITE_FUNCTION	lib/sqlite3.h	2389;"	d
SQLITE_FUNC_CASE	lib/sqlite3.c	9927;"	d	file:
SQLITE_FUNC_COALESCE	lib/sqlite3.c	9931;"	d	file:
SQLITE_FUNC_COUNT	lib/sqlite3.c	9930;"	d	file:
SQLITE_FUNC_EPHEM	lib/sqlite3.c	9928;"	d	file:
SQLITE_FUNC_LIKE	lib/sqlite3.c	9926;"	d	file:
SQLITE_FUNC_NEEDCOLL	lib/sqlite3.c	9929;"	d	file:
SQLITE_FactorOutConst	lib/sqlite3.c	9867;"	d	file:
SQLITE_ForeignKeys	lib/sqlite3.c	9850;"	d	file:
SQLITE_FullColNames	lib/sqlite3.c	9831;"	d	file:
SQLITE_FullFSync	lib/sqlite3.c	9845;"	d	file:
SQLITE_GET_LOCKPROXYFILE	lib/sqlite3.c	1390;"	d	file:
SQLITE_GET_LOCKPROXYFILE	lib/sqlite3.h	840;"	d
SQLITE_GroupByOrder	lib/sqlite3.c	9866;"	d	file:
SQLITE_HAVE_ISNAN	lib/sqlite3.c	7836;"	d	file:
SQLITE_IGNORE	lib/sqlite3.c	2887;"	d	file:
SQLITE_IGNORE	lib/sqlite3.h	2337;"	d
SQLITE_INDEX_CONSTRAINT_EQ	lib/sqlite3.c	5620;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	lib/sqlite3.h	5070;"	d
SQLITE_INDEX_CONSTRAINT_GE	lib/sqlite3.c	5624;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	lib/sqlite3.h	5074;"	d
SQLITE_INDEX_CONSTRAINT_GT	lib/sqlite3.c	5621;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	lib/sqlite3.h	5071;"	d
SQLITE_INDEX_CONSTRAINT_LE	lib/sqlite3.c	5622;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	lib/sqlite3.h	5072;"	d
SQLITE_INDEX_CONSTRAINT_LT	lib/sqlite3.c	5623;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	lib/sqlite3.h	5073;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	lib/sqlite3.c	5625;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	lib/sqlite3.h	5075;"	d
SQLITE_INSERT	lib/sqlite3.c	2926;"	d	file:
SQLITE_INSERT	lib/sqlite3.h	2376;"	d
SQLITE_INTEGER	lib/sqlite3.c	4063;"	d	file:
SQLITE_INTEGER	lib/sqlite3.h	3513;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	lib/sqlite3.c	93156;"	d	file:
SQLITE_INTERNAL	lib/sqlite3.c	934;"	d	file:
SQLITE_INTERNAL	lib/sqlite3.h	384;"	d
SQLITE_INTERRUPT	lib/sqlite3.c	941;"	d	file:
SQLITE_INTERRUPT	lib/sqlite3.h	391;"	d
SQLITE_INT_TO_PTR	lib/sqlite3.c	336;"	d	file:
SQLITE_INT_TO_PTR	lib/sqlite3.c	339;"	d	file:
SQLITE_INT_TO_PTR	lib/sqlite3.c	342;"	d	file:
SQLITE_INT_TO_PTR	lib/sqlite3.c	345;"	d	file:
SQLITE_IOCAP_ATOMIC	lib/sqlite3.c	1069;"	d	file:
SQLITE_IOCAP_ATOMIC	lib/sqlite3.h	519;"	d
SQLITE_IOCAP_ATOMIC16K	lib/sqlite3.c	1075;"	d	file:
SQLITE_IOCAP_ATOMIC16K	lib/sqlite3.h	525;"	d
SQLITE_IOCAP_ATOMIC1K	lib/sqlite3.c	1071;"	d	file:
SQLITE_IOCAP_ATOMIC1K	lib/sqlite3.h	521;"	d
SQLITE_IOCAP_ATOMIC2K	lib/sqlite3.c	1072;"	d	file:
SQLITE_IOCAP_ATOMIC2K	lib/sqlite3.h	522;"	d
SQLITE_IOCAP_ATOMIC32K	lib/sqlite3.c	1076;"	d	file:
SQLITE_IOCAP_ATOMIC32K	lib/sqlite3.h	526;"	d
SQLITE_IOCAP_ATOMIC4K	lib/sqlite3.c	1073;"	d	file:
SQLITE_IOCAP_ATOMIC4K	lib/sqlite3.h	523;"	d
SQLITE_IOCAP_ATOMIC512	lib/sqlite3.c	1070;"	d	file:
SQLITE_IOCAP_ATOMIC512	lib/sqlite3.h	520;"	d
SQLITE_IOCAP_ATOMIC64K	lib/sqlite3.c	1077;"	d	file:
SQLITE_IOCAP_ATOMIC64K	lib/sqlite3.h	527;"	d
SQLITE_IOCAP_ATOMIC8K	lib/sqlite3.c	1074;"	d	file:
SQLITE_IOCAP_ATOMIC8K	lib/sqlite3.h	524;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	lib/sqlite3.c	1081;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	lib/sqlite3.h	531;"	d
SQLITE_IOCAP_SAFE_APPEND	lib/sqlite3.c	1078;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	lib/sqlite3.h	528;"	d
SQLITE_IOCAP_SEQUENTIAL	lib/sqlite3.c	1079;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	lib/sqlite3.h	529;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	lib/sqlite3.c	1080;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	lib/sqlite3.h	530;"	d
SQLITE_IOERR	lib/sqlite3.c	942;"	d	file:
SQLITE_IOERR	lib/sqlite3.h	392;"	d
SQLITE_IOERR_ACCESS	lib/sqlite3.c	998;"	d	file:
SQLITE_IOERR_ACCESS	lib/sqlite3.h	448;"	d
SQLITE_IOERR_BLOCKED	lib/sqlite3.c	996;"	d	file:
SQLITE_IOERR_BLOCKED	lib/sqlite3.h	446;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	lib/sqlite3.c	999;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	lib/sqlite3.h	449;"	d
SQLITE_IOERR_CLOSE	lib/sqlite3.c	1001;"	d	file:
SQLITE_IOERR_CLOSE	lib/sqlite3.h	451;"	d
SQLITE_IOERR_DELETE	lib/sqlite3.c	995;"	d	file:
SQLITE_IOERR_DELETE	lib/sqlite3.h	445;"	d
SQLITE_IOERR_DIR_CLOSE	lib/sqlite3.c	1002;"	d	file:
SQLITE_IOERR_DIR_CLOSE	lib/sqlite3.h	452;"	d
SQLITE_IOERR_DIR_FSYNC	lib/sqlite3.c	990;"	d	file:
SQLITE_IOERR_DIR_FSYNC	lib/sqlite3.h	440;"	d
SQLITE_IOERR_FSTAT	lib/sqlite3.c	992;"	d	file:
SQLITE_IOERR_FSTAT	lib/sqlite3.h	442;"	d
SQLITE_IOERR_FSYNC	lib/sqlite3.c	989;"	d	file:
SQLITE_IOERR_FSYNC	lib/sqlite3.h	439;"	d
SQLITE_IOERR_LOCK	lib/sqlite3.c	1000;"	d	file:
SQLITE_IOERR_LOCK	lib/sqlite3.h	450;"	d
SQLITE_IOERR_NOMEM	lib/sqlite3.c	997;"	d	file:
SQLITE_IOERR_NOMEM	lib/sqlite3.h	447;"	d
SQLITE_IOERR_RDLOCK	lib/sqlite3.c	994;"	d	file:
SQLITE_IOERR_RDLOCK	lib/sqlite3.h	444;"	d
SQLITE_IOERR_READ	lib/sqlite3.c	986;"	d	file:
SQLITE_IOERR_READ	lib/sqlite3.h	436;"	d
SQLITE_IOERR_SEEK	lib/sqlite3.c	1007;"	d	file:
SQLITE_IOERR_SEEK	lib/sqlite3.h	457;"	d
SQLITE_IOERR_SHMLOCK	lib/sqlite3.c	1005;"	d	file:
SQLITE_IOERR_SHMLOCK	lib/sqlite3.h	455;"	d
SQLITE_IOERR_SHMMAP	lib/sqlite3.c	1006;"	d	file:
SQLITE_IOERR_SHMMAP	lib/sqlite3.h	456;"	d
SQLITE_IOERR_SHMOPEN	lib/sqlite3.c	1003;"	d	file:
SQLITE_IOERR_SHMOPEN	lib/sqlite3.h	453;"	d
SQLITE_IOERR_SHMSIZE	lib/sqlite3.c	1004;"	d	file:
SQLITE_IOERR_SHMSIZE	lib/sqlite3.h	454;"	d
SQLITE_IOERR_SHORT_READ	lib/sqlite3.c	987;"	d	file:
SQLITE_IOERR_SHORT_READ	lib/sqlite3.h	437;"	d
SQLITE_IOERR_TRUNCATE	lib/sqlite3.c	991;"	d	file:
SQLITE_IOERR_TRUNCATE	lib/sqlite3.h	441;"	d
SQLITE_IOERR_UNLOCK	lib/sqlite3.c	993;"	d	file:
SQLITE_IOERR_UNLOCK	lib/sqlite3.h	443;"	d
SQLITE_IOERR_WRITE	lib/sqlite3.c	988;"	d	file:
SQLITE_IOERR_WRITE	lib/sqlite3.h	438;"	d
SQLITE_IdxRealAsInt	lib/sqlite3.c	9868;"	d	file:
SQLITE_IgnoreChecks	lib/sqlite3.c	9842;"	d	file:
SQLITE_IndexCover	lib/sqlite3.c	9865;"	d	file:
SQLITE_IndexSearch	lib/sqlite3.c	9864;"	d	file:
SQLITE_IndexSort	lib/sqlite3.c	9863;"	d	file:
SQLITE_InternChanges	lib/sqlite3.c	9830;"	d	file:
SQLITE_JUMPIFNULL	lib/sqlite3.c	10088;"	d	file:
SQLITE_LAST_ERRNO	lib/sqlite3.c	1392;"	d	file:
SQLITE_LAST_ERRNO	lib/sqlite3.h	842;"	d
SQLITE_LIMIT_ATTACHED	lib/sqlite3.c	3421;"	d	file:
SQLITE_LIMIT_ATTACHED	lib/sqlite3.h	2871;"	d
SQLITE_LIMIT_COLUMN	lib/sqlite3.c	3416;"	d	file:
SQLITE_LIMIT_COLUMN	lib/sqlite3.h	2866;"	d
SQLITE_LIMIT_COMPOUND_SELECT	lib/sqlite3.c	3418;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	lib/sqlite3.h	2868;"	d
SQLITE_LIMIT_EXPR_DEPTH	lib/sqlite3.c	3417;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	lib/sqlite3.h	2867;"	d
SQLITE_LIMIT_FUNCTION_ARG	lib/sqlite3.c	3420;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	lib/sqlite3.h	2870;"	d
SQLITE_LIMIT_LENGTH	lib/sqlite3.c	3414;"	d	file:
SQLITE_LIMIT_LENGTH	lib/sqlite3.h	2864;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	lib/sqlite3.c	3422;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	lib/sqlite3.h	2872;"	d
SQLITE_LIMIT_SQL_LENGTH	lib/sqlite3.c	3415;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	lib/sqlite3.h	2865;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	lib/sqlite3.c	3424;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	lib/sqlite3.h	2874;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	lib/sqlite3.c	3423;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	lib/sqlite3.h	2873;"	d
SQLITE_LIMIT_VDBE_OP	lib/sqlite3.c	3419;"	d	file:
SQLITE_LIMIT_VDBE_OP	lib/sqlite3.h	2869;"	d
SQLITE_LITTLEENDIAN	lib/sqlite3.c	7983;"	d	file:
SQLITE_LITTLEENDIAN	lib/sqlite3.c	7987;"	d	file:
SQLITE_LOCKED	lib/sqlite3.c	938;"	d	file:
SQLITE_LOCKED	lib/sqlite3.h	388;"	d
SQLITE_LOCKED_SHAREDCACHE	lib/sqlite3.c	1008;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	lib/sqlite3.h	458;"	d
SQLITE_LOCK_EXCLUSIVE	lib/sqlite3.c	1094;"	d	file:
SQLITE_LOCK_EXCLUSIVE	lib/sqlite3.h	544;"	d
SQLITE_LOCK_NONE	lib/sqlite3.c	1090;"	d	file:
SQLITE_LOCK_NONE	lib/sqlite3.h	540;"	d
SQLITE_LOCK_PENDING	lib/sqlite3.c	1093;"	d	file:
SQLITE_LOCK_PENDING	lib/sqlite3.h	543;"	d
SQLITE_LOCK_RESERVED	lib/sqlite3.c	1092;"	d	file:
SQLITE_LOCK_RESERVED	lib/sqlite3.h	542;"	d
SQLITE_LOCK_SHARED	lib/sqlite3.c	1091;"	d	file:
SQLITE_LOCK_SHARED	lib/sqlite3.h	541;"	d
SQLITE_LegacyFileFmt	lib/sqlite3.c	9844;"	d	file:
SQLITE_LoadExtension	lib/sqlite3.c	9853;"	d	file:
SQLITE_MAGIC_BUSY	lib/sqlite3.c	9880;"	d	file:
SQLITE_MAGIC_CLOSED	lib/sqlite3.c	9878;"	d	file:
SQLITE_MAGIC_ERROR	lib/sqlite3.c	9881;"	d	file:
SQLITE_MAGIC_OPEN	lib/sqlite3.c	9877;"	d	file:
SQLITE_MAGIC_SICK	lib/sqlite3.c	9879;"	d	file:
SQLITE_MALLOC	lib/sqlite3.c	15248;"	d	file:
SQLITE_MALLOC	lib/sqlite3.c	15260;"	d	file:
SQLITE_MALLOCSIZE	lib/sqlite3.c	15235;"	d	file:
SQLITE_MALLOCSIZE	lib/sqlite3.c	15251;"	d	file:
SQLITE_MALLOCSIZE	lib/sqlite3.c	15270;"	d	file:
SQLITE_MALLOCSIZE	lib/sqlite3.c	15273;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	lib/sqlite3.c	418;"	d	file:
SQLITE_MAX_ATTACHED	lib/sqlite3.c	207;"	d	file:
SQLITE_MAX_COLUMN	lib/sqlite3.c	127;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	lib/sqlite3.c	164;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	lib/sqlite3.c	254;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	lib/sqlite3.c	257;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	lib/sqlite3.c	258;"	d	file:
SQLITE_MAX_EXPR_DEPTH	lib/sqlite3.c	152;"	d	file:
SQLITE_MAX_FILE_FORMAT	lib/sqlite3.c	7859;"	d	file:
SQLITE_MAX_FUNCTION_ARG	lib/sqlite3.c	179;"	d	file:
SQLITE_MAX_LENGTH	lib/sqlite3.c	106;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	lib/sqlite3.c	133452;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	lib/sqlite3.c	278;"	d	file:
SQLITE_MAX_PAGE_COUNT	lib/sqlite3.c	270;"	d	file:
SQLITE_MAX_PAGE_SIZE	lib/sqlite3.c	230;"	d	file:
SQLITE_MAX_PAGE_SIZE	lib/sqlite3.c	232;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	lib/sqlite3.c	63214;"	d	file:
SQLITE_MAX_SQL_LENGTH	lib/sqlite3.c	138;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	lib/sqlite3.c	289;"	d	file:
SQLITE_MAX_U32	lib/sqlite3.c	7957;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	lib/sqlite3.c	215;"	d	file:
SQLITE_MAX_VDBE_OP	lib/sqlite3.c	172;"	d	file:
SQLITE_MISMATCH	lib/sqlite3.c	952;"	d	file:
SQLITE_MISMATCH	lib/sqlite3.h	402;"	d
SQLITE_MISUSE	lib/sqlite3.c	953;"	d	file:
SQLITE_MISUSE	lib/sqlite3.h	403;"	d
SQLITE_MISUSE_BKPT	lib/sqlite3.c	11420;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	lib/sqlite3.c	7835;"	d	file:
SQLITE_MUTEX_FAST	lib/sqlite3.c	6235;"	d	file:
SQLITE_MUTEX_FAST	lib/sqlite3.h	5685;"	d
SQLITE_MUTEX_NOOP	lib/sqlite3.c	9563;"	d	file:
SQLITE_MUTEX_NREF	lib/sqlite3.c	17931;"	d	file:
SQLITE_MUTEX_NREF	lib/sqlite3.c	17933;"	d	file:
SQLITE_MUTEX_OMIT	lib/sqlite3.c	9553;"	d	file:
SQLITE_MUTEX_OS2	lib/sqlite3.c	9561;"	d	file:
SQLITE_MUTEX_PTHREADS	lib/sqlite3.c	9557;"	d	file:
SQLITE_MUTEX_RECURSIVE	lib/sqlite3.c	6236;"	d	file:
SQLITE_MUTEX_RECURSIVE	lib/sqlite3.h	5686;"	d
SQLITE_MUTEX_STATIC_LRU	lib/sqlite3.c	6242;"	d	file:
SQLITE_MUTEX_STATIC_LRU	lib/sqlite3.h	5692;"	d
SQLITE_MUTEX_STATIC_LRU2	lib/sqlite3.c	6243;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	lib/sqlite3.h	5693;"	d
SQLITE_MUTEX_STATIC_MASTER	lib/sqlite3.c	6237;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	lib/sqlite3.h	5687;"	d
SQLITE_MUTEX_STATIC_MEM	lib/sqlite3.c	6238;"	d	file:
SQLITE_MUTEX_STATIC_MEM	lib/sqlite3.h	5688;"	d
SQLITE_MUTEX_STATIC_MEM2	lib/sqlite3.c	6239;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	lib/sqlite3.h	5689;"	d
SQLITE_MUTEX_STATIC_OPEN	lib/sqlite3.c	6240;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	lib/sqlite3.h	5690;"	d
SQLITE_MUTEX_STATIC_PMEM	lib/sqlite3.c	6244;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	lib/sqlite3.h	5694;"	d
SQLITE_MUTEX_STATIC_PRNG	lib/sqlite3.c	6241;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	lib/sqlite3.h	5691;"	d
SQLITE_MUTEX_W32	lib/sqlite3.c	9559;"	d	file:
SQLITE_NOLFS	lib/sqlite3.c	954;"	d	file:
SQLITE_NOLFS	lib/sqlite3.h	404;"	d
SQLITE_NOMEM	lib/sqlite3.c	939;"	d	file:
SQLITE_NOMEM	lib/sqlite3.h	389;"	d
SQLITE_NOTADB	lib/sqlite3.c	958;"	d	file:
SQLITE_NOTADB	lib/sqlite3.h	408;"	d
SQLITE_NOTFOUND	lib/sqlite3.c	944;"	d	file:
SQLITE_NOTFOUND	lib/sqlite3.h	394;"	d
SQLITE_NULL	lib/sqlite3.c	4066;"	d	file:
SQLITE_NULL	lib/sqlite3.h	3516;"	d
SQLITE_NULLEQ	lib/sqlite3.c	10090;"	d	file:
SQLITE_N_BTREE_META	lib/sqlite3.c	8196;"	d	file:
SQLITE_N_COLCACHE	lib/sqlite3.c	11029;"	d	file:
SQLITE_N_KEYWORD	lib/sqlite3.c	111597;"	d	file:
SQLITE_N_LIMIT	lib/sqlite3.c	9663;"	d	file:
SQLITE_NullCallback	lib/sqlite3.c	9836;"	d	file:
SQLITE_OK	lib/sqlite3.c	931;"	d	file:
SQLITE_OK	lib/sqlite3.h	381;"	d
SQLITE_OMIT_DATETIME_FUNCS	lib/sqlite3.c	7833;"	d	file:
SQLITE_OMIT_TRACE	lib/sqlite3.c	7834;"	d	file:
SQLITE_OPEN_AUTOPROXY	lib/sqlite3.c	1028;"	d	file:
SQLITE_OPEN_AUTOPROXY	lib/sqlite3.h	478;"	d
SQLITE_OPEN_CREATE	lib/sqlite3.c	1025;"	d	file:
SQLITE_OPEN_CREATE	lib/sqlite3.h	475;"	d
SQLITE_OPEN_DELETEONCLOSE	lib/sqlite3.c	1026;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	lib/sqlite3.h	476;"	d
SQLITE_OPEN_EXCLUSIVE	lib/sqlite3.c	1027;"	d	file:
SQLITE_OPEN_EXCLUSIVE	lib/sqlite3.h	477;"	d
SQLITE_OPEN_FULLMUTEX	lib/sqlite3.c	1038;"	d	file:
SQLITE_OPEN_FULLMUTEX	lib/sqlite3.h	488;"	d
SQLITE_OPEN_MAIN_DB	lib/sqlite3.c	1030;"	d	file:
SQLITE_OPEN_MAIN_DB	lib/sqlite3.h	480;"	d
SQLITE_OPEN_MAIN_JOURNAL	lib/sqlite3.c	1033;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	lib/sqlite3.h	483;"	d
SQLITE_OPEN_MASTER_JOURNAL	lib/sqlite3.c	1036;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	lib/sqlite3.h	486;"	d
SQLITE_OPEN_NOMUTEX	lib/sqlite3.c	1037;"	d	file:
SQLITE_OPEN_NOMUTEX	lib/sqlite3.h	487;"	d
SQLITE_OPEN_PRIVATECACHE	lib/sqlite3.c	1040;"	d	file:
SQLITE_OPEN_PRIVATECACHE	lib/sqlite3.h	490;"	d
SQLITE_OPEN_READONLY	lib/sqlite3.c	1023;"	d	file:
SQLITE_OPEN_READONLY	lib/sqlite3.h	473;"	d
SQLITE_OPEN_READWRITE	lib/sqlite3.c	1024;"	d	file:
SQLITE_OPEN_READWRITE	lib/sqlite3.h	474;"	d
SQLITE_OPEN_SHAREDCACHE	lib/sqlite3.c	1039;"	d	file:
SQLITE_OPEN_SHAREDCACHE	lib/sqlite3.h	489;"	d
SQLITE_OPEN_SUBJOURNAL	lib/sqlite3.c	1035;"	d	file:
SQLITE_OPEN_SUBJOURNAL	lib/sqlite3.h	485;"	d
SQLITE_OPEN_TEMP_DB	lib/sqlite3.c	1031;"	d	file:
SQLITE_OPEN_TEMP_DB	lib/sqlite3.h	481;"	d
SQLITE_OPEN_TEMP_JOURNAL	lib/sqlite3.c	1034;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	lib/sqlite3.h	484;"	d
SQLITE_OPEN_TRANSIENT_DB	lib/sqlite3.c	1032;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	lib/sqlite3.h	482;"	d
SQLITE_OPEN_URI	lib/sqlite3.c	1029;"	d	file:
SQLITE_OPEN_URI	lib/sqlite3.h	479;"	d
SQLITE_OPEN_WAL	lib/sqlite3.c	1041;"	d	file:
SQLITE_OPEN_WAL	lib/sqlite3.h	491;"	d
SQLITE_OS2_NO_WAL_LOCK_FILE	lib/sqlite3.c	23578;"	d	file:
SQLITE_OS2_THREADS	lib/sqlite3.c	22723;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9240;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9241;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9252;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9256;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9260;"	d	file:
SQLITE_OS_OS2	lib/sqlite3.c	9264;"	d	file:
SQLITE_OS_OTHER	lib/sqlite3.c	9243;"	d	file:
SQLITE_OS_OTHER	lib/sqlite3.c	9247;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9236;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9237;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9251;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9255;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9259;"	d	file:
SQLITE_OS_UNIX	lib/sqlite3.c	9263;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9238;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9239;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9250;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9254;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9258;"	d	file:
SQLITE_OS_WIN	lib/sqlite3.c	9268;"	d	file:
SQLITE_OS_WINCE	lib/sqlite3.c	9322;"	d	file:
SQLITE_OS_WINCE	lib/sqlite3.c	9324;"	d	file:
SQLITE_OS_WINNT	lib/sqlite3.c	9314;"	d	file:
SQLITE_OptMask	lib/sqlite3.c	9870;"	d	file:
SQLITE_PERM	lib/sqlite3.c	935;"	d	file:
SQLITE_PERM	lib/sqlite3.h	385;"	d
SQLITE_POWERSAFE_OVERWRITE	lib/sqlite3.c	373;"	d	file:
SQLITE_PRAGMA	lib/sqlite3.c	2927;"	d	file:
SQLITE_PRAGMA	lib/sqlite3.h	2377;"	d
SQLITE_PRINT_BUF_SIZE	lib/sqlite3.c	19520;"	d	file:
SQLITE_PRIVATE	lib/sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	lib/sqlite3.c	947;"	d	file:
SQLITE_PROTOCOL	lib/sqlite3.h	397;"	d
SQLITE_PTR_TO_INT	lib/sqlite3.c	337;"	d	file:
SQLITE_PTR_TO_INT	lib/sqlite3.c	340;"	d	file:
SQLITE_PTR_TO_INT	lib/sqlite3.c	343;"	d	file:
SQLITE_PTR_TO_INT	lib/sqlite3.c	346;"	d	file:
SQLITE_PreferBuiltin	lib/sqlite3.c	9852;"	d	file:
SQLITE_QueryFlattener	lib/sqlite3.c	9861;"	d	file:
SQLITE_RANGE	lib/sqlite3.c	957;"	d	file:
SQLITE_RANGE	lib/sqlite3.h	407;"	d
SQLITE_READ	lib/sqlite3.c	2928;"	d	file:
SQLITE_READ	lib/sqlite3.h	2378;"	d
SQLITE_READONLY	lib/sqlite3.c	940;"	d	file:
SQLITE_READONLY	lib/sqlite3.h	390;"	d
SQLITE_READONLY_CANTLOCK	lib/sqlite3.c	1013;"	d	file:
SQLITE_READONLY_CANTLOCK	lib/sqlite3.h	463;"	d
SQLITE_READONLY_RECOVERY	lib/sqlite3.c	1012;"	d	file:
SQLITE_READONLY_RECOVERY	lib/sqlite3.h	462;"	d
SQLITE_REALLOC	lib/sqlite3.c	15250;"	d	file:
SQLITE_REALLOC	lib/sqlite3.c	15262;"	d	file:
SQLITE_REINDEX	lib/sqlite3.c	2935;"	d	file:
SQLITE_REINDEX	lib/sqlite3.h	2385;"	d
SQLITE_REPLACE	lib/sqlite3.c	7477;"	d	file:
SQLITE_REPLACE	lib/sqlite3.h	6927;"	d
SQLITE_ROLLBACK	lib/sqlite3.c	7473;"	d	file:
SQLITE_ROLLBACK	lib/sqlite3.h	6923;"	d
SQLITE_ROW	lib/sqlite3.c	959;"	d	file:
SQLITE_ROW	lib/sqlite3.h	409;"	d
SQLITE_ReadUncommitted	lib/sqlite3.c	9843;"	d	file:
SQLITE_RecTriggers	lib/sqlite3.c	9849;"	d	file:
SQLITE_RecoveryMode	lib/sqlite3.c	9847;"	d	file:
SQLITE_ReverseOrder	lib/sqlite3.c	9848;"	d	file:
SQLITE_SAVEPOINT	lib/sqlite3.c	2940;"	d	file:
SQLITE_SAVEPOINT	lib/sqlite3.h	2390;"	d
SQLITE_SCHEMA	lib/sqlite3.c	949;"	d	file:
SQLITE_SCHEMA	lib/sqlite3.h	399;"	d
SQLITE_SELECT	lib/sqlite3.c	2929;"	d	file:
SQLITE_SELECT	lib/sqlite3.h	2379;"	d
SQLITE_SET_LOCKPROXYFILE	lib/sqlite3.c	1391;"	d	file:
SQLITE_SET_LOCKPROXYFILE	lib/sqlite3.h	841;"	d
SQLITE_SHM_EXCLUSIVE	lib/sqlite3.c	1663;"	d	file:
SQLITE_SHM_EXCLUSIVE	lib/sqlite3.h	1113;"	d
SQLITE_SHM_LOCK	lib/sqlite3.c	1661;"	d	file:
SQLITE_SHM_LOCK	lib/sqlite3.h	1111;"	d
SQLITE_SHM_NLOCK	lib/sqlite3.c	1673;"	d	file:
SQLITE_SHM_NLOCK	lib/sqlite3.h	1123;"	d
SQLITE_SHM_SHARED	lib/sqlite3.c	1662;"	d	file:
SQLITE_SHM_SHARED	lib/sqlite3.h	1112;"	d
SQLITE_SHM_UNLOCK	lib/sqlite3.c	1660;"	d	file:
SQLITE_SHM_UNLOCK	lib/sqlite3.h	1110;"	d
SQLITE_SKIP_UTF8	lib/sqlite3.c	11403;"	d	file:
SQLITE_SOURCE_ID	lib/sqlite3.c	662;"	d	file:
SQLITE_SOURCE_ID	lib/sqlite3.h	112;"	d
SQLITE_SO_ASC	lib/sqlite3.c	10053;"	d	file:
SQLITE_SO_DESC	lib/sqlite3.c	10054;"	d	file:
SQLITE_STAT3_SAMPLES	lib/sqlite3.c	79468;"	d	file:
SQLITE_STATIC	lib/sqlite3.c	4637;"	d	file:
SQLITE_STATIC	lib/sqlite3.h	4087;"	d
SQLITE_STATUS_MALLOC_COUNT	lib/sqlite3.c	6462;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	lib/sqlite3.h	5912;"	d
SQLITE_STATUS_MALLOC_SIZE	lib/sqlite3.c	6458;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	lib/sqlite3.h	5908;"	d
SQLITE_STATUS_MEMORY_USED	lib/sqlite3.c	6453;"	d	file:
SQLITE_STATUS_MEMORY_USED	lib/sqlite3.h	5903;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	lib/sqlite3.c	6455;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	lib/sqlite3.h	5905;"	d
SQLITE_STATUS_PAGECACHE_SIZE	lib/sqlite3.c	6460;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	lib/sqlite3.h	5910;"	d
SQLITE_STATUS_PAGECACHE_USED	lib/sqlite3.c	6454;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	lib/sqlite3.h	5904;"	d
SQLITE_STATUS_PARSER_STACK	lib/sqlite3.c	6459;"	d	file:
SQLITE_STATUS_PARSER_STACK	lib/sqlite3.h	5909;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	lib/sqlite3.c	6457;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	lib/sqlite3.h	5907;"	d
SQLITE_STATUS_SCRATCH_SIZE	lib/sqlite3.c	6461;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	lib/sqlite3.h	5911;"	d
SQLITE_STATUS_SCRATCH_USED	lib/sqlite3.c	6456;"	d	file:
SQLITE_STATUS_SCRATCH_USED	lib/sqlite3.h	5906;"	d
SQLITE_STMTSTATUS_AUTOINDEX	lib/sqlite3.c	6628;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	lib/sqlite3.h	6078;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	lib/sqlite3.c	6626;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	lib/sqlite3.h	6076;"	d
SQLITE_STMTSTATUS_SORT	lib/sqlite3.c	6627;"	d	file:
SQLITE_STMTSTATUS_SORT	lib/sqlite3.h	6077;"	d
SQLITE_STOREP2	lib/sqlite3.c	10089;"	d	file:
SQLITE_SYNC_DATAONLY	lib/sqlite3.c	1124;"	d	file:
SQLITE_SYNC_DATAONLY	lib/sqlite3.h	574;"	d
SQLITE_SYNC_FULL	lib/sqlite3.c	1123;"	d	file:
SQLITE_SYNC_FULL	lib/sqlite3.h	573;"	d
SQLITE_SYNC_MASK	lib/sqlite3.c	38336;"	d	file:
SQLITE_SYNC_NORMAL	lib/sqlite3.c	1122;"	d	file:
SQLITE_SYNC_NORMAL	lib/sqlite3.h	572;"	d
SQLITE_SYSTEM_MALLOC	lib/sqlite3.c	410;"	d	file:
SQLITE_ShortColNames	lib/sqlite3.c	9832;"	d	file:
SQLITE_SqlTrace	lib/sqlite3.c	9838;"	d	file:
SQLITE_TEMPNAME_SIZE	lib/sqlite3.c	9277;"	d	file:
SQLITE_TEMPNAME_SIZE	lib/sqlite3.c	9291;"	d	file:
SQLITE_TEMPNAME_SIZE	lib/sqlite3.c	9293;"	d	file:
SQLITE_TEMP_FILE_PREFIX	lib/sqlite3.c	9363;"	d	file:
SQLITE_TEMP_STORE	lib/sqlite3.c	7877;"	d	file:
SQLITE_TESTCTRL_ALWAYS	lib/sqlite3.c	6330;"	d	file:
SQLITE_TESTCTRL_ALWAYS	lib/sqlite3.h	5780;"	d
SQLITE_TESTCTRL_ASSERT	lib/sqlite3.c	6329;"	d	file:
SQLITE_TESTCTRL_ASSERT	lib/sqlite3.h	5779;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	lib/sqlite3.c	6327;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	lib/sqlite3.h	5777;"	d
SQLITE_TESTCTRL_BITVEC_TEST	lib/sqlite3.c	6325;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	lib/sqlite3.h	5775;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	lib/sqlite3.c	6336;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	lib/sqlite3.h	5786;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	lib/sqlite3.c	6326;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	lib/sqlite3.h	5776;"	d
SQLITE_TESTCTRL_FIRST	lib/sqlite3.c	6321;"	d	file:
SQLITE_TESTCTRL_FIRST	lib/sqlite3.h	5771;"	d
SQLITE_TESTCTRL_ISKEYWORD	lib/sqlite3.c	6333;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	lib/sqlite3.h	5783;"	d
SQLITE_TESTCTRL_LAST	lib/sqlite3.c	6337;"	d	file:
SQLITE_TESTCTRL_LAST	lib/sqlite3.h	5787;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	lib/sqlite3.c	6335;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	lib/sqlite3.h	5785;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	lib/sqlite3.c	6332;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	lib/sqlite3.h	5782;"	d
SQLITE_TESTCTRL_PENDING_BYTE	lib/sqlite3.c	6328;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	lib/sqlite3.h	5778;"	d
SQLITE_TESTCTRL_PRNG_RESET	lib/sqlite3.c	6324;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	lib/sqlite3.h	5774;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	lib/sqlite3.c	6323;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	lib/sqlite3.h	5773;"	d
SQLITE_TESTCTRL_PRNG_SAVE	lib/sqlite3.c	6322;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	lib/sqlite3.h	5772;"	d
SQLITE_TESTCTRL_RESERVE	lib/sqlite3.c	6331;"	d	file:
SQLITE_TESTCTRL_RESERVE	lib/sqlite3.h	5781;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	lib/sqlite3.c	6334;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	lib/sqlite3.h	5784;"	d
SQLITE_TEXT	lib/sqlite3.c	4068;"	d	file:
SQLITE_TEXT	lib/sqlite3.c	4070;"	d	file:
SQLITE_TEXT	lib/sqlite3.h	3518;"	d
SQLITE_TEXT	lib/sqlite3.h	3520;"	d
SQLITE_THREADSAFE	lib/sqlite3.c	362;"	d	file:
SQLITE_THREADSAFE	lib/sqlite3.c	364;"	d	file:
SQLITE_TOOBIG	lib/sqlite3.c	950;"	d	file:
SQLITE_TOOBIG	lib/sqlite3.h	400;"	d
SQLITE_TRANSACTION	lib/sqlite3.c	2930;"	d	file:
SQLITE_TRANSACTION	lib/sqlite3.h	2380;"	d
SQLITE_TRANSIENT	lib/sqlite3.c	4638;"	d	file:
SQLITE_TRANSIENT	lib/sqlite3.h	4088;"	d
SQLITE_UNIX_THREADS	lib/sqlite3.c	24964;"	d	file:
SQLITE_UPDATE	lib/sqlite3.c	2931;"	d	file:
SQLITE_UPDATE	lib/sqlite3.h	2381;"	d
SQLITE_USE_URI	lib/sqlite3.c	12319;"	d	file:
SQLITE_UTF16	lib/sqlite3.c	4429;"	d	file:
SQLITE_UTF16	lib/sqlite3.h	3879;"	d
SQLITE_UTF16BE	lib/sqlite3.c	4428;"	d	file:
SQLITE_UTF16BE	lib/sqlite3.h	3878;"	d
SQLITE_UTF16LE	lib/sqlite3.c	4427;"	d	file:
SQLITE_UTF16LE	lib/sqlite3.h	3877;"	d
SQLITE_UTF16NATIVE	lib/sqlite3.c	7984;"	d	file:
SQLITE_UTF16NATIVE	lib/sqlite3.c	7988;"	d	file:
SQLITE_UTF16_ALIGNED	lib/sqlite3.c	4431;"	d	file:
SQLITE_UTF16_ALIGNED	lib/sqlite3.h	3881;"	d
SQLITE_UTF8	lib/sqlite3.c	4426;"	d	file:
SQLITE_UTF8	lib/sqlite3.h	3876;"	d
SQLITE_VERSION	lib/sqlite3.c	627;"	d	file:
SQLITE_VERSION	lib/sqlite3.c	660;"	d	file:
SQLITE_VERSION	lib/sqlite3.h	110;"	d
SQLITE_VERSION	lib/sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	lib/sqlite3.c	630;"	d	file:
SQLITE_VERSION_NUMBER	lib/sqlite3.c	661;"	d	file:
SQLITE_VERSION_NUMBER	lib/sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	lib/sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	lib/sqlite3.c	7448;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	lib/sqlite3.h	6898;"	d
SQLITE_VdbeListing	lib/sqlite3.c	9839;"	d	file:
SQLITE_VdbeTrace	lib/sqlite3.c	9829;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	lib/sqlite3.c	18285;"	d	file:
SQLITE_WIN32_HAS_ANSI	lib/sqlite3.c	32291;"	d	file:
SQLITE_WIN32_HAS_WIDE	lib/sqlite3.c	32295;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	lib/sqlite3.c	32220;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	lib/sqlite3.c	32204;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	lib/sqlite3.c	32212;"	d	file:
SQLITE_WIN32_IOERR_RETRY	lib/sqlite3.c	33282;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	lib/sqlite3.c	33285;"	d	file:
SQLITE_WSD	lib/sqlite3.c	8091;"	d	file:
SQLITE_WSD	lib/sqlite3.c	8097;"	d	file:
SQLITE_WriteSchema	lib/sqlite3.c	9840;"	d	file:
SQL_CONTENT_INSERT	lib/sqlite3.c	125280;"	d	file:
SQL_DELETE_ALL_CONTENT	lib/sqlite3.c	125264;"	d	file:
SQL_DELETE_ALL_DOCSIZE	lib/sqlite3.c	125267;"	d	file:
SQL_DELETE_ALL_SEGDIR	lib/sqlite3.c	125266;"	d	file:
SQL_DELETE_ALL_SEGMENTS	lib/sqlite3.c	125265;"	d	file:
SQL_DELETE_ALL_STAT	lib/sqlite3.c	125268;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	lib/sqlite3.c	125288;"	d	file:
SQL_DELETE_CONTENT	lib/sqlite3.c	125262;"	d	file:
SQL_DELETE_DOCSIZE	lib/sqlite3.c	125281;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	lib/sqlite3.c	125278;"	d	file:
SQL_DELETE_SEGDIR_RANGE	lib/sqlite3.c	125290;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	lib/sqlite3.c	125279;"	d	file:
SQL_INSERT_SEGDIR	lib/sqlite3.c	125273;"	d	file:
SQL_INSERT_SEGMENTS	lib/sqlite3.c	125271;"	d	file:
SQL_IS_EMPTY	lib/sqlite3.c	125263;"	d	file:
SQL_NEXT_SEGMENTS_ID	lib/sqlite3.c	125272;"	d	file:
SQL_NEXT_SEGMENT_INDEX	lib/sqlite3.c	125270;"	d	file:
SQL_REPLACE_DOCSIZE	lib/sqlite3.c	125282;"	d	file:
SQL_REPLACE_DOCTOTAL	lib/sqlite3.c	125285;"	d	file:
SQL_SELECT_ALL_LANGID	lib/sqlite3.c	125292;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	lib/sqlite3.c	125287;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	lib/sqlite3.c	125269;"	d	file:
SQL_SELECT_DOCSIZE	lib/sqlite3.c	125283;"	d	file:
SQL_SELECT_DOCTOTAL	lib/sqlite3.c	125284;"	d	file:
SQL_SELECT_LEVEL	lib/sqlite3.c	125274;"	d	file:
SQL_SELECT_LEVEL_COUNT	lib/sqlite3.c	125276;"	d	file:
SQL_SELECT_LEVEL_RANGE	lib/sqlite3.c	125275;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	lib/sqlite3.c	125277;"	d	file:
SRT_Coroutine	lib/sqlite3.c	10994;"	d	file:
SRT_Discard	lib/sqlite3.c	10984;"	d	file:
SRT_EphemTab	lib/sqlite3.c	10993;"	d	file:
SRT_Except	lib/sqlite3.c	10982;"	d	file:
SRT_Exists	lib/sqlite3.c	10983;"	d	file:
SRT_Mem	lib/sqlite3.c	10990;"	d	file:
SRT_Output	lib/sqlite3.c	10989;"	d	file:
SRT_Set	lib/sqlite3.c	10991;"	d	file:
SRT_Table	lib/sqlite3.c	10992;"	d	file:
SRT_Union	lib/sqlite3.c	10981;"	d	file:
STORY_FIGHT_REWARD_INFO	lib/fight_type.h	/^}STORY_FIGHT_REWARD_INFO, *PSTORY_FIGHT_REWARD_INFO;$/;"	t	typeref:struct:tagSTORY_FIGHT_REWARD_INFO
STRICMP	lib/sqlite3.c	82127;"	d	file:
STR_FUNCTION	lib/sqlite3.c	9961;"	d	file:
SWAP	lib/sqlite3.c	103056;"	d	file:
SYSCALL	lib/sqlite3.c	32299;"	d	file:
SYS_BROADCAST_TYPE_FULL_SCREEN	../framework/package.h	/^	SYS_BROADCAST_TYPE_FULL_SCREEN =2$/;"	e	enum:__anon63
SYS_BROADCAST_TYPE_TOP_CENTER	../framework/package.h	/^	SYS_BROADCAST_TYPE_TOP_CENTER  =1,$/;"	e	enum:__anon63
S_ADD_BONUS_TIME_RANGE_REQUEST	../framework/package.h	1768;"	d
S_ADD_BONUS_TIME_RANGE_RESPOND	../framework/package.h	1769;"	d
S_ADD_PLAYER_NOTIFICATION_REQUEST	../framework/package.h	1595;"	d
S_ADD_PLAYER_NOTIFICATION_RESPOND	../framework/package.h	1596;"	d
S_ADMIN_ADD_ACTIVITY_INFO_REQUEST	../framework/package.h	1513;"	d
S_ADMIN_ADD_ACTIVITY_INFO_RESPOND	../framework/package.h	1515;"	d
S_ADMIN_ADD_MAIL_REQUEST	../framework/package.h	1578;"	d
S_ADMIN_ADD_MAIL_RESPOND	../framework/package.h	1579;"	d
S_ADMIN_ADD_VIP_EXP_REQUEST	../framework/package.h	1518;"	d
S_ADMIN_ADD_VIP_EXP_RESPOND	../framework/package.h	1520;"	d
S_ADMIN_DEL_MAIL_REQUEST	../framework/package.h	1584;"	d
S_ADMIN_DEL_MAIL_RESPOND	../framework/package.h	1585;"	d
S_ADMIN_PLAYER_KICK_REQUEST	../framework/package.h	1617;"	d
S_ADMIN_PLAYER_KICK_RESPOND	../framework/package.h	1618;"	d
S_ADMIN_QUERY_MAIL_REQUEST	../framework/package.h	1581;"	d
S_ADMIN_QUERY_MAIL_RESPOND	../framework/package.h	1582;"	d
S_ADMIN_REWARD_REQUEST	../framework/package.h	1597;"	d
S_ADMIN_REWARD_RESPOND	../framework/package.h	1598;"	d
S_ADMIN_SET_ADULT_REQUEST	../framework/package.h	1626;"	d
S_ADMIN_SET_ADULT_RESPOND	../framework/package.h	1627;"	d
S_ADMIN_SET_CARD_REQUEST	../framework/package.h	1629;"	d
S_ADMIN_SET_CARD_RESPOND	../framework/package.h	1630;"	d
S_AUTH_REQUEST	../framework/package.h	1893;"	d
S_AUTH_RESPOND	../framework/package.h	1894;"	d
S_BIND7725_REQUEST	../framework/package.h	1819;"	d
S_BIND7725_RESPOND	../framework/package.h	1820;"	d
S_BUY_MONTH_CARD_REQUEST	../framework/package.h	1759;"	d
S_BUY_MONTH_CARD_RESPOND	../framework/package.h	1760;"	d
S_CHANGE_ARMAMENT_PLACEHOLDER_REQUEST	../framework/package.h	1828;"	d
S_CHANGE_ARMAMENT_PLACEHOLDER_RESPOND	../framework/package.h	1829;"	d
S_CHAT_MESSAGE_REQUEST	../framework/package.h	1558;"	d
S_CHAT_MESSAGE_RESPOND	../framework/package.h	1560;"	d
S_CROSS_ARENA_FIGHT_REQUEST	../framework/package.h	1840;"	d
S_CROSS_ARENA_FIGHT_RESPOND	../framework/package.h	1841;"	d
S_DEL_BONUS_TIME_RANGE_REQUEST	../framework/package.h	1774;"	d
S_DEL_BONUS_TIME_RANGE_RESPOND	../framework/package.h	1775;"	d
S_DEL_ITEM_PACKAGE_REQUEST	../framework/package.h	1795;"	d
S_DEL_ITEM_PACKAGE_RESPOND	../framework/package.h	1796;"	d
S_FIGHT_NOTIFICATION	../framework/package.h	1592;"	d
S_FIGHT_SERVER_RUN_REQUEST	../framework/package.h	1900;"	d
S_FIGHT_SERVER_RUN_RESPOND	../framework/package.h	1901;"	d
S_FIGHT_SERVER_RUN_WITH_DETAIL_REQUEST	../framework/package.h	1903;"	d
S_FIGHT_SERVER_RUN_WITH_DETAIL_RESPOND	../framework/package.h	1904;"	d
S_FIGHT_SERVER_TEST_REQUEST	../framework/package.h	1897;"	d
S_FIGHT_SERVER_TEST_RESPOND	../framework/package.h	1898;"	d
S_GET_BOSS_FORMATION_REQUEST	../framework/package.h	1638;"	d
S_GET_FORMATION_FIGHT_INFO_REQUEST	../framework/package.h	1750;"	d
S_GET_FORMATION_FIGHT_INFO_RESPOND	../framework/package.h	1751;"	d
S_GET_FORMATION_REQUEST	../framework/package.h	1632;"	d
S_GET_FORMATION_RESPOND	../framework/package.h	1633;"	d
S_GET_KING_REQUEST	../framework/package.h	1635;"	d
S_GET_KING_RESPOND	../framework/package.h	1636;"	d
S_GET_MILITARY_POWER_REQUEST	../framework/package.h	1825;"	d
S_GET_MILITARY_POWER_RESPOND	../framework/package.h	1826;"	d
S_GET_MONSTER_FORMATION_REQUEST	../framework/package.h	1639;"	d
S_GET_NPC_KING_REQUEST	../framework/package.h	1640;"	d
S_GET_ONLINE_PLAYER_REQUEST	../framework/package.h	1747;"	d
S_GET_ONLINE_PLAYER_RESPOND	../framework/package.h	1748;"	d
S_GET_PLAYER_ARMY_REQUEST	../framework/package.h	1590;"	d
S_GET_PLAYER_ARMY_RESPOND	../framework/package.h	1591;"	d
S_GET_PLAYER_BUILDING_REQUEST	../framework/package.h	1620;"	d
S_GET_PLAYER_BUILDING_RESPOND	../framework/package.h	1621;"	d
S_GET_PLAYER_INFO_REQUEST	../framework/package.h	1593;"	d
S_GET_PLAYER_INFO_RESPOND	../framework/package.h	1594;"	d
S_GET_PLAYER_STORY_REQUEST	../framework/package.h	1609;"	d
S_GET_PLAYER_STORY_RESPOND	../framework/package.h	1610;"	d
S_GET_PLAYER_TECHNOLOGY_REQUEST	../framework/package.h	1623;"	d
S_GET_PLAYER_TECHNOLOGY_RESPOND	../framework/package.h	1624;"	d
S_GUILD_ADD_EXP_REQUEST	../framework/package.h	1470;"	d
S_GUILD_ADD_EXP_RESPOND	../framework/package.h	1473;"	d
S_GUILD_PVP_FIGHT_REQUEST	../framework/package.h	1816;"	d
S_GUILD_PVP_FIGHT_RESPOND	../framework/package.h	1817;"	d
S_GUILD_QUERY_BY_PLAYER_REQUEST	../framework/package.h	1464;"	d
S_GUILD_QUERY_BY_PLAYER_RESPOND	../framework/package.h	1467;"	d
S_GUILD_STORY_FIGHT_REQUEST	../framework/package.h	1753;"	d
S_GUILD_STORY_FIGHT_RESPOND	../framework/package.h	1754;"	d
S_MAIL_CONTACT_GET_REQUEST	../framework/package.h	1722;"	d
S_MAIL_CONTACT_GET_RESPOND	../framework/package.h	1725;"	d
S_NOTIFY_ARMAMENT	../framework/package.h	1910;"	d
S_PLAYER_CHANGE_NOTIFY	../framework/package.h	1523;"	d
S_PVE_FIGHT_CHECK_REQUEST	../framework/package.h	1739;"	d
S_PVE_FIGHT_CHECK_RESPOND	../framework/package.h	1740;"	d
S_PVE_FIGHT_PREPARE_REQUEST	../framework/package.h	1736;"	d
S_PVE_FIGHT_PREPARE_RESPOND	../framework/package.h	1737;"	d
S_PVE_FIGHT_REQUEST	../framework/package.h	1742;"	d
S_PVE_FIGHT_RESPOND	../framework/package.h	1744;"	d
S_PVP_FIGHT_AND_CHECK_REQUEST	../framework/package.h	1846;"	d
S_PVP_FIGHT_AND_CHECK_RESPOND	../framework/package.h	1847;"	d
S_PVP_FIGHT_REQUEST	../framework/package.h	1731;"	d
S_PVP_FIGHT_RESPOND	../framework/package.h	1733;"	d
S_QUERY_ACCUMULATE_CONSUME_GOLD_REWARD_REQUEST	../framework/package.h	1786;"	d
S_QUERY_ACCUMULATE_CONSUME_GOLD_REWARD_RESPOND	../framework/package.h	1787;"	d
S_QUERY_ACCUMULATE_EXCHANGE_REWARD_REQUEST	../framework/package.h	1810;"	d
S_QUERY_ACCUMULATE_EXCHANGE_REWARD_RESPOND	../framework/package.h	1811;"	d
S_QUERY_ALL_BONUS_REQUEST	../framework/package.h	1801;"	d
S_QUERY_ALL_BONUS_RESPOND	../framework/package.h	1802;"	d
S_QUERY_ARMAMENT_INFO_REQUEST	../framework/package.h	1831;"	d
S_QUERY_ARMAMENT_INFO_RESPOND	../framework/package.h	1832;"	d
S_QUERY_BONUS_REQUEST	../framework/package.h	1762;"	d
S_QUERY_BONUS_RESPOND	../framework/package.h	1763;"	d
S_QUERY_EXCHANGE_GIFT_REWARD_REQUEST	../framework/package.h	1780;"	d
S_QUERY_EXCHANGE_GIFT_REWARD_RESPOND	../framework/package.h	1781;"	d
S_QUERY_FESTIVAL_REWARD_REQUEST	../framework/package.h	1804;"	d
S_QUERY_FESTIVAL_REWARD_RESPOND	../framework/package.h	1805;"	d
S_QUERY_FIGHT_FORMATION_REQUEST	../framework/package.h	1834;"	d
S_QUERY_FIGHT_FORMATION_RESPOND	../framework/package.h	1835;"	d
S_QUERY_ITEM_PACKAGE_REQUEST	../framework/package.h	1798;"	d
S_QUERY_ITEM_PACKAGE_RESPOND	../framework/package.h	1799;"	d
S_QUERY_KING_FIGHT_INFO_REQUEST	../framework/package.h	1837;"	d
S_QUERY_KING_FIGHT_INFO_RESPOND	../framework/package.h	1838;"	d
S_QUERY_PLAYER_FIGHT_INFO_REQUEST	../framework/package.h	1843;"	d
S_QUERY_PLAYER_FIGHT_INFO_RESPOND	../framework/package.h	1844;"	d
S_QUERY_STORY_FIGHT_INFO_REQUEST	../framework/package.h	1849;"	d
S_QUERY_STORY_FIGHT_INFO_RESPOND	../framework/package.h	1850;"	d
S_QUERY_STORY_STATUS_REQUEST	../framework/package.h	1855;"	d
S_QUERY_STORY_STATUS_RESPOND	../framework/package.h	1856;"	d
S_RECORD_NOTIRY_MESSAGE_REQUEST	../framework/package.h	1563;"	d
S_RECORD_NOTIRY_MESSAGE_RESPOND	../framework/package.h	1566;"	d
S_REMOVE_BONUS_REQUEST	../framework/package.h	1777;"	d
S_REMOVE_BONUS_RESPOND	../framework/package.h	1778;"	d
S_REPLACE_ACCUMULATE_CONSUME_GOLD_REWARD_REQUEST	../framework/package.h	1789;"	d
S_REPLACE_ACCUMULATE_CONSUME_GOLD_REWARD_RESPOND	../framework/package.h	1790;"	d
S_REPLACE_ACCUMULATE_EXCHANGE_REWARD_REQUEST	../framework/package.h	1813;"	d
S_REPLACE_ACCUMULATE_EXCHANGE_REWARD_RESPOND	../framework/package.h	1814;"	d
S_REPLACE_BONUS_REQUEST	../framework/package.h	1765;"	d
S_REPLACE_BONUS_RESPOND	../framework/package.h	1766;"	d
S_REPLACE_EXCHANGE_GIFT_REWARD_REQUEST	../framework/package.h	1783;"	d
S_REPLACE_EXCHANGE_GIFT_REWARD_RESPOND	../framework/package.h	1784;"	d
S_REPLACE_FESTIVAL_REWARD_REQUEST	../framework/package.h	1807;"	d
S_REPLACE_FESTIVAL_REWARD_RESPOND	../framework/package.h	1808;"	d
S_SERVICE_BROADCAST_REQUEST	../framework/package.h	1502;"	d
S_SERVICE_BROADCAST_RESPOND	../framework/package.h	1504;"	d
S_SERVICE_REGISTER_REQUEST	../framework/package.h	1497;"	d
S_SERVICE_REGISTER_RESPOND	../framework/package.h	1499;"	d
S_SET_BONUS_TIME_RANGE_REQUEST	../framework/package.h	1771;"	d
S_SET_BONUS_TIME_RANGE_RESPOND	../framework/package.h	1772;"	d
S_SET_ITEM_PACKAGE_REQUEST	../framework/package.h	1792;"	d
S_SET_ITEM_PACKAGE_RESPOND	../framework/package.h	1793;"	d
S_SET_PLAYER_LOCATION_REQUEST	../framework/package.h	1607;"	d
S_SET_PLAYER_LOCATION_RESPOND	../framework/package.h	1608;"	d
S_SET_PLAYER_SALARY_REQUEST	../framework/package.h	1476;"	d
S_SET_PLAYER_SALARY_RESPOND	../framework/package.h	1479;"	d
S_SET_PLAYER_STATUS_REQUEST	../framework/package.h	1611;"	d
S_SET_PLAYER_STATUS_RESPOND	../framework/package.h	1612;"	d
S_SET_STORY_PASS_REQUEST	../framework/package.h	1852;"	d
S_SET_STORY_PASS_RESPOND	../framework/package.h	1853;"	d
S_SORT_MILITARY_POWER_REQUEST	../framework/package.h	1822;"	d
S_SORT_MILITARY_POWER_RESPOND	../framework/package.h	1823;"	d
S_TIMING_NOTIFY_ADD_REQUEST	../framework/package.h	1569;"	d
S_TIMING_NOTIFY_ADD_RESPOND	../framework/package.h	1570;"	d
S_TIMING_NOTIFY_DEL_REQUEST	../framework/package.h	1575;"	d
S_TIMING_NOTIFY_DEL_RESPOND	../framework/package.h	1576;"	d
S_TIMING_NOTIFY_QUERY_REQUEST	../framework/package.h	1572;"	d
S_TIMING_NOTIFY_QUERY_RESPOND	../framework/package.h	1573;"	d
S_UNLOAD_PLAYER_REQUEST	../framework/package.h	1756;"	d
S_UNLOAD_PLAYER_RESPOND	../framework/package.h	1757;"	d
Savepoint	lib/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	lib/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
Schema	lib/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	lib/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	lib/sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	lib/sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
Script	modules/mlua.c	/^struct Script {$/;"	s	file:
SegmentNode	lib/sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	lib/sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	lib/sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	lib/sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	lib/sqlite3.c	/^struct Select {$/;"	s	file:
Select	lib/sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	lib/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	lib/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SetCriticalData	../framework/codequeue.c	/^static void SetCriticalData(CQ * queue, size_t begin, size_t end)$/;"	f	file:
ShmRegion	lib/sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	lib/sqlite3.c	22907;"	d	file:
SimulateDiskfullError	lib/sqlite3.c	22921;"	d	file:
SimulateDiskfullError	lib/sqlite3.c	25255;"	d	file:
SimulateDiskfullError	lib/sqlite3.c	25269;"	d	file:
SimulateDiskfullError	lib/sqlite3.c	32108;"	d	file:
SimulateDiskfullError	lib/sqlite3.c	32122;"	d	file:
SimulateIOError	lib/sqlite3.c	22898;"	d	file:
SimulateIOError	lib/sqlite3.c	22920;"	d	file:
SimulateIOError	lib/sqlite3.c	25246;"	d	file:
SimulateIOError	lib/sqlite3.c	25268;"	d	file:
SimulateIOError	lib/sqlite3.c	32099;"	d	file:
SimulateIOError	lib/sqlite3.c	32121;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	22897;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	22919;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	25245;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	25267;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	32098;"	d	file:
SimulateIOErrorBenign	lib/sqlite3.c	32120;"	d	file:
SizeofArray	lib/sqlite3.c	116459;"	d	file:
SkillUnion	lib/battlefield/skill.h	/^union SkillUnion$/;"	u
SnippetFragment	lib/sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	lib/sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	lib/sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	lib/sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	lib/sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	lib/sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
Socket	lib/lua_network.c	/^struct Socket {$/;"	s	file:
SocketStatus	lib/lua_network.c	/^enum SocketStatus {$/;"	g	file:
SocketType	lib/lua_network.c	/^enum SocketType {$/;"	g	file:
SortByDimension	lib/sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	lib/sqlite3.c	/^static void SortByDistance($/;"	f	file:
SorterRecord	lib/sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	lib/sqlite3.c	/^typedef struct SorterRecord SorterRecord;$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	lib/sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	lib/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcList	lib/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	lib/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	lib/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat3Accum	lib/sqlite3.c	/^struct Stat3Accum {$/;"	s	file:
Stat3Accum	lib/sqlite3.c	/^typedef struct Stat3Accum Stat3Accum;$/;"	t	typeref:struct:Stat3Accum	file:
Stat3Sample	lib/sqlite3.c	/^  struct Stat3Sample {$/;"	s	struct:Stat3Accum	file:
StrAccum	lib/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	lib/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	lib/sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	lib/sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	lib/sqlite3.c	64469;"	d	file:
SubProgram	lib/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	lib/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	lib/sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	lib/sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TACTIC_LOGGER	../framework/log.h	/^	TACTIC_LOGGER,$/;"	e	enum:__anon68
TEMP_MASTER_NAME	lib/sqlite3.c	8048;"	d	file:
TERM_ANDINFO	lib/sqlite3.c	102651;"	d	file:
TERM_CODED	lib/sqlite3.c	102648;"	d	file:
TERM_COPIED	lib/sqlite3.c	102649;"	d	file:
TERM_DYNAMIC	lib/sqlite3.c	102646;"	d	file:
TERM_ORINFO	lib/sqlite3.c	102650;"	d	file:
TERM_OR_OK	lib/sqlite3.c	102652;"	d	file:
TERM_VIRTUAL	lib/sqlite3.c	102647;"	d	file:
TERM_VNULL	lib/sqlite3.c	102654;"	d	file:
TERM_VNULL	lib/sqlite3.c	102656;"	d	file:
TESTBIT	lib/sqlite3.c	36113;"	d	file:
TESTONLY	lib/sqlite3.c	116548;"	d	file:
TESTONLY	lib/sqlite3.c	116550;"	d	file:
TESTONLY	lib/sqlite3.c	483;"	d	file:
TESTONLY	lib/sqlite3.c	485;"	d	file:
TF_Autoincrement	lib/sqlite3.c	10210;"	d	file:
TF_Ephemeral	lib/sqlite3.c	10208;"	d	file:
TF_HasPrimaryKey	lib/sqlite3.c	10209;"	d	file:
TF_Readonly	lib/sqlite3.c	10207;"	d	file:
TF_Virtual	lib/sqlite3.c	10211;"	d	file:
TICK	lib/battlefield/scheduler.c	9;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	22877;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	22881;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	25225;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	25229;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	32078;"	d	file:
TIMER_ELAPSED	lib/sqlite3.c	32082;"	d	file:
TIMER_END	lib/sqlite3.c	22876;"	d	file:
TIMER_END	lib/sqlite3.c	22880;"	d	file:
TIMER_END	lib/sqlite3.c	25224;"	d	file:
TIMER_END	lib/sqlite3.c	25228;"	d	file:
TIMER_END	lib/sqlite3.c	32077;"	d	file:
TIMER_END	lib/sqlite3.c	32081;"	d	file:
TIMER_START	lib/sqlite3.c	22875;"	d	file:
TIMER_START	lib/sqlite3.c	22879;"	d	file:
TIMER_START	lib/sqlite3.c	25223;"	d	file:
TIMER_START	lib/sqlite3.c	25227;"	d	file:
TIMER_START	lib/sqlite3.c	32076;"	d	file:
TIMER_START	lib/sqlite3.c	32080;"	d	file:
TK_ABORT	lib/sqlite3.c	7683;"	d	file:
TK_ACTION	lib/sqlite3.c	7684;"	d	file:
TK_ADD	lib/sqlite3.c	7795;"	d	file:
TK_AFTER	lib/sqlite3.c	7685;"	d	file:
TK_AGG_COLUMN	lib/sqlite3.c	7809;"	d	file:
TK_AGG_FUNCTION	lib/sqlite3.c	7808;"	d	file:
TK_ALL	lib/sqlite3.c	7768;"	d	file:
TK_ALTER	lib/sqlite3.c	7794;"	d	file:
TK_ANALYZE	lib/sqlite3.c	7686;"	d	file:
TK_AND	lib/sqlite3.c	7724;"	d	file:
TK_ANY	lib/sqlite3.c	7722;"	d	file:
TK_AS	lib/sqlite3.c	7679;"	d	file:
TK_ASC	lib/sqlite3.c	7687;"	d	file:
TK_ATTACH	lib/sqlite3.c	7688;"	d	file:
TK_AUTOINCR	lib/sqlite3.c	7758;"	d	file:
TK_BEFORE	lib/sqlite3.c	7689;"	d	file:
TK_BEGIN	lib/sqlite3.c	7660;"	d	file:
TK_BETWEEN	lib/sqlite3.c	7726;"	d	file:
TK_BITAND	lib/sqlite3.c	7737;"	d	file:
TK_BITNOT	lib/sqlite3.c	7748;"	d	file:
TK_BITOR	lib/sqlite3.c	7738;"	d	file:
TK_BLOB	lib/sqlite3.c	7786;"	d	file:
TK_BY	lib/sqlite3.c	7690;"	d	file:
TK_CASCADE	lib/sqlite3.c	7691;"	d	file:
TK_CASE	lib/sqlite3.c	7789;"	d	file:
TK_CAST	lib/sqlite3.c	7692;"	d	file:
TK_CHECK	lib/sqlite3.c	7756;"	d	file:
TK_COLLATE	lib/sqlite3.c	7747;"	d	file:
TK_COLUMN	lib/sqlite3.c	7807;"	d	file:
TK_COLUMNKW	lib/sqlite3.c	7693;"	d	file:
TK_COMMA	lib/sqlite3.c	7680;"	d	file:
TK_COMMIT	lib/sqlite3.c	7665;"	d	file:
TK_CONCAT	lib/sqlite3.c	7746;"	d	file:
TK_CONFLICT	lib/sqlite3.c	7694;"	d	file:
TK_CONSTRAINT	lib/sqlite3.c	7751;"	d	file:
TK_CONST_FUNC	lib/sqlite3.c	7810;"	d	file:
TK_CREATE	lib/sqlite3.c	7672;"	d	file:
TK_CTIME_KW	lib/sqlite3.c	7721;"	d	file:
TK_DATABASE	lib/sqlite3.c	7695;"	d	file:
TK_DEFAULT	lib/sqlite3.c	7752;"	d	file:
TK_DEFERRABLE	lib/sqlite3.c	7764;"	d	file:
TK_DEFERRED	lib/sqlite3.c	7662;"	d	file:
TK_DELETE	lib/sqlite3.c	7761;"	d	file:
TK_DESC	lib/sqlite3.c	7696;"	d	file:
TK_DETACH	lib/sqlite3.c	7697;"	d	file:
TK_DISTINCT	lib/sqlite3.c	7772;"	d	file:
TK_DOT	lib/sqlite3.c	7773;"	d	file:
TK_DROP	lib/sqlite3.c	7766;"	d	file:
TK_EACH	lib/sqlite3.c	7698;"	d	file:
TK_ELSE	lib/sqlite3.c	7792;"	d	file:
TK_END	lib/sqlite3.c	7666;"	d	file:
TK_END_OF_FILE	lib/sqlite3.c	7802;"	d	file:
TK_EQ	lib/sqlite3.c	7731;"	d	file:
TK_ESCAPE	lib/sqlite3.c	7736;"	d	file:
TK_EXCEPT	lib/sqlite3.c	7769;"	d	file:
TK_EXCLUSIVE	lib/sqlite3.c	7664;"	d	file:
TK_EXISTS	lib/sqlite3.c	7675;"	d	file:
TK_EXPLAIN	lib/sqlite3.c	7657;"	d	file:
TK_FAIL	lib/sqlite3.c	7699;"	d	file:
TK_FLOAT	lib/sqlite3.c	7785;"	d	file:
TK_FOR	lib/sqlite3.c	7700;"	d	file:
TK_FOREIGN	lib/sqlite3.c	7765;"	d	file:
TK_FROM	lib/sqlite3.c	7774;"	d	file:
TK_FUNCTION	lib/sqlite3.c	7806;"	d	file:
TK_GE	lib/sqlite3.c	7735;"	d	file:
TK_GROUP	lib/sqlite3.c	7778;"	d	file:
TK_GT	lib/sqlite3.c	7732;"	d	file:
TK_HAVING	lib/sqlite3.c	7779;"	d	file:
TK_ID	lib/sqlite3.c	7681;"	d	file:
TK_IF	lib/sqlite3.c	7673;"	d	file:
TK_IGNORE	lib/sqlite3.c	7701;"	d	file:
TK_ILLEGAL	lib/sqlite3.c	7803;"	d	file:
TK_IMMEDIATE	lib/sqlite3.c	7663;"	d	file:
TK_IN	lib/sqlite3.c	7727;"	d	file:
TK_INDEX	lib/sqlite3.c	7793;"	d	file:
TK_INDEXED	lib/sqlite3.c	7682;"	d	file:
TK_INITIALLY	lib/sqlite3.c	7702;"	d	file:
TK_INSERT	lib/sqlite3.c	7760;"	d	file:
TK_INSTEAD	lib/sqlite3.c	7703;"	d	file:
TK_INTEGER	lib/sqlite3.c	7784;"	d	file:
TK_INTERSECT	lib/sqlite3.c	7770;"	d	file:
TK_INTO	lib/sqlite3.c	7782;"	d	file:
TK_IS	lib/sqlite3.c	7725;"	d	file:
TK_ISNOT	lib/sqlite3.c	7801;"	d	file:
TK_ISNULL	lib/sqlite3.c	7728;"	d	file:
TK_JOIN	lib/sqlite3.c	7775;"	d	file:
TK_JOIN_KW	lib/sqlite3.c	7750;"	d	file:
TK_KEY	lib/sqlite3.c	7707;"	d	file:
TK_LE	lib/sqlite3.c	7733;"	d	file:
TK_LIKE_KW	lib/sqlite3.c	7704;"	d	file:
TK_LIMIT	lib/sqlite3.c	7780;"	d	file:
TK_LP	lib/sqlite3.c	7677;"	d	file:
TK_LSHIFT	lib/sqlite3.c	7739;"	d	file:
TK_LT	lib/sqlite3.c	7734;"	d	file:
TK_MATCH	lib/sqlite3.c	7705;"	d	file:
TK_MINUS	lib/sqlite3.c	7742;"	d	file:
TK_NE	lib/sqlite3.c	7730;"	d	file:
TK_NO	lib/sqlite3.c	7706;"	d	file:
TK_NOT	lib/sqlite3.c	7674;"	d	file:
TK_NOTNULL	lib/sqlite3.c	7729;"	d	file:
TK_NULL	lib/sqlite3.c	7753;"	d	file:
TK_OF	lib/sqlite3.c	7708;"	d	file:
TK_OFFSET	lib/sqlite3.c	7709;"	d	file:
TK_ON	lib/sqlite3.c	7759;"	d	file:
TK_OR	lib/sqlite3.c	7723;"	d	file:
TK_ORDER	lib/sqlite3.c	7777;"	d	file:
TK_PLAN	lib/sqlite3.c	7659;"	d	file:
TK_PLUS	lib/sqlite3.c	7741;"	d	file:
TK_PRAGMA	lib/sqlite3.c	7710;"	d	file:
TK_PRIMARY	lib/sqlite3.c	7754;"	d	file:
TK_QUERY	lib/sqlite3.c	7658;"	d	file:
TK_RAISE	lib/sqlite3.c	7711;"	d	file:
TK_REFERENCES	lib/sqlite3.c	7757;"	d	file:
TK_REGISTER	lib/sqlite3.c	7787;"	d	file:
TK_REINDEX	lib/sqlite3.c	7719;"	d	file:
TK_RELEASE	lib/sqlite3.c	7669;"	d	file:
TK_REM	lib/sqlite3.c	7745;"	d	file:
TK_RENAME	lib/sqlite3.c	7720;"	d	file:
TK_REPLACE	lib/sqlite3.c	7712;"	d	file:
TK_RESTRICT	lib/sqlite3.c	7713;"	d	file:
TK_ROLLBACK	lib/sqlite3.c	7667;"	d	file:
TK_ROW	lib/sqlite3.c	7714;"	d	file:
TK_RP	lib/sqlite3.c	7678;"	d	file:
TK_RSHIFT	lib/sqlite3.c	7740;"	d	file:
TK_SAVEPOINT	lib/sqlite3.c	7668;"	d	file:
TK_SELECT	lib/sqlite3.c	7771;"	d	file:
TK_SEMI	lib/sqlite3.c	7656;"	d	file:
TK_SET	lib/sqlite3.c	7763;"	d	file:
TK_SLASH	lib/sqlite3.c	7744;"	d	file:
TK_SPACE	lib/sqlite3.c	7804;"	d	file:
TK_STAR	lib/sqlite3.c	7743;"	d	file:
TK_STRING	lib/sqlite3.c	7749;"	d	file:
TK_TABLE	lib/sqlite3.c	7671;"	d	file:
TK_TEMP	lib/sqlite3.c	7676;"	d	file:
TK_THEN	lib/sqlite3.c	7791;"	d	file:
TK_TO	lib/sqlite3.c	7670;"	d	file:
TK_TO_BLOB	lib/sqlite3.c	7797;"	d	file:
TK_TO_INT	lib/sqlite3.c	7799;"	d	file:
TK_TO_NUMERIC	lib/sqlite3.c	7798;"	d	file:
TK_TO_REAL	lib/sqlite3.c	7800;"	d	file:
TK_TO_TEXT	lib/sqlite3.c	7796;"	d	file:
TK_TRANSACTION	lib/sqlite3.c	7661;"	d	file:
TK_TRIGGER	lib/sqlite3.c	7715;"	d	file:
TK_UMINUS	lib/sqlite3.c	7811;"	d	file:
TK_UNCLOSED_STRING	lib/sqlite3.c	7805;"	d	file:
TK_UNION	lib/sqlite3.c	7767;"	d	file:
TK_UNIQUE	lib/sqlite3.c	7755;"	d	file:
TK_UPDATE	lib/sqlite3.c	7762;"	d	file:
TK_UPLUS	lib/sqlite3.c	7812;"	d	file:
TK_USING	lib/sqlite3.c	7776;"	d	file:
TK_VACUUM	lib/sqlite3.c	7716;"	d	file:
TK_VALUES	lib/sqlite3.c	7783;"	d	file:
TK_VARIABLE	lib/sqlite3.c	7788;"	d	file:
TK_VIEW	lib/sqlite3.c	7717;"	d	file:
TK_VIRTUAL	lib/sqlite3.c	7718;"	d	file:
TK_WHEN	lib/sqlite3.c	7790;"	d	file:
TK_WHERE	lib/sqlite3.c	7781;"	d	file:
TOKEN	lib/sqlite3.c	111062;"	d	file:
TRACE	lib/sqlite3.c	49396;"	d	file:
TRACE_IDX_INPUTS	lib/sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	lib/sqlite3.c	104319;"	d	file:
TRACE_IDX_OUTPUTS	lib/sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	lib/sqlite3.c	104320;"	d	file:
TRANS_NONE	lib/sqlite3.c	48803;"	d	file:
TRANS_READ	lib/sqlite3.c	48804;"	d	file:
TRANS_WRITE	lib/sqlite3.c	48805;"	d	file:
TRIGGER_AFTER	lib/sqlite3.c	11237;"	d	file:
TRIGGER_BEFORE	lib/sqlite3.c	11236;"	d	file:
TWOPOWER31	lib/sqlite3.c	22168;"	d	file:
TWOPOWER32	lib/sqlite3.c	22167;"	d	file:
TabResult	lib/sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	lib/sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	lib/sqlite3.c	/^struct Table {$/;"	s	file:
Table	lib/sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	lib/sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	lib/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	lib/sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	lib/sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	lib/sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	lib/sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	lib/sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	lib/sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	lib/sqlite3.c	/^struct Token {$/;"	s	file:
Token	lib/sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TrigEvent	lib/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	lib/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	lib/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	lib/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	lib/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	lib/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	lib/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
U2SInt29	../framework/amf.c	/^int32_t U2SInt29(uint32_t i) $/;"	f
UINT16_TYPE	lib/sqlite3.c	7914;"	d	file:
UINT16_TYPE	lib/sqlite3.c	7916;"	d	file:
UINT32_TYPE	lib/sqlite3.c	7907;"	d	file:
UINT32_TYPE	lib/sqlite3.c	7909;"	d	file:
UINT8_TYPE	lib/sqlite3.c	7928;"	d	file:
UINT8_TYPE	lib/sqlite3.c	7930;"	d	file:
UNIXFILE_CHOWN	lib/sqlite3.c	25072;"	d	file:
UNIXFILE_DELETE	lib/sqlite3.c	25069;"	d	file:
UNIXFILE_DIRSYNC	lib/sqlite3.c	25064;"	d	file:
UNIXFILE_DIRSYNC	lib/sqlite3.c	25066;"	d	file:
UNIXFILE_EXCL	lib/sqlite3.c	25060;"	d	file:
UNIXFILE_NOLOCK	lib/sqlite3.c	25071;"	d	file:
UNIXFILE_PERSIST_WAL	lib/sqlite3.c	25062;"	d	file:
UNIXFILE_PSOW	lib/sqlite3.c	25068;"	d	file:
UNIXFILE_RDONLY	lib/sqlite3.c	25061;"	d	file:
UNIXFILE_URI	lib/sqlite3.c	25070;"	d	file:
UNIXVFS	lib/sqlite3.c	31823;"	d	file:
UNIX_SHM_BASE	lib/sqlite3.c	28738;"	d	file:
UNIX_SHM_DMS	lib/sqlite3.c	28739;"	d	file:
UNKNOWN_LOCK	lib/sqlite3.c	38833;"	d	file:
UNPACKED_INCRKEY	lib/sqlite3.c	10341;"	d	file:
UNPACKED_PREFIX_MATCH	lib/sqlite3.c	10342;"	d	file:
UNPACKED_PREFIX_SEARCH	lib/sqlite3.c	10343;"	d	file:
UNUSED_PARAMETER	lib/sqlite3.c	116533;"	d	file:
UNUSED_PARAMETER	lib/sqlite3.c	130232;"	d	file:
UNUSED_PARAMETER	lib/sqlite3.c	8118;"	d	file:
UNUSED_PARAMETER2	lib/sqlite3.c	8119;"	d	file:
UPDATE_MAX_BLOBSIZE	lib/sqlite3.c	64460;"	d	file:
UPDATE_MAX_BLOBSIZE	lib/sqlite3.c	64462;"	d	file:
UnixUnusedFd	lib/sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	lib/sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnlockFile	lib/sqlite3.c	32309;"	d	file:
UnpackedRecord	lib/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	lib/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	lib/sqlite3.c	21258;"	d	file:
Usage	../framework/main.c	/^static void Usage(const char * prog)$/;"	f	file:
VALUE_FLAG_REAL	lib/battlefield/role.h	84;"	d
VARIANT_GUTTMAN_LINEAR_SPLIT	lib/sqlite3.c	130190;"	d	file:
VARIANT_GUTTMAN_QUADRATIC_SPLIT	lib/sqlite3.c	130189;"	d	file:
VARIANT_GUTTMAN_SPLIT	lib/sqlite3.c	130193;"	d	file:
VARIANT_RSTARTREE_CHOOSESUBTREE	lib/sqlite3.c	130183;"	d	file:
VARIANT_RSTARTREE_REINSERT	lib/sqlite3.c	130184;"	d	file:
VARIANT_RSTARTREE_SPLIT	lib/sqlite3.c	130191;"	d	file:
VDBE_MAGIC_DEAD	lib/sqlite3.c	13187;"	d	file:
VDBE_MAGIC_HALT	lib/sqlite3.c	13186;"	d	file:
VDBE_MAGIC_INIT	lib/sqlite3.c	13184;"	d	file:
VDBE_MAGIC_RUN	lib/sqlite3.c	13185;"	d	file:
VERSION	version.h	4;"	d
VTable	lib/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	lib/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	lib/sqlite3.c	497;"	d	file:
VVA_ONLY	lib/sqlite3.c	499;"	d	file:
ValueList	lib/sqlite3.c	/^struct ValueList {$/;"	s	file:
Vdbe	lib/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	lib/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeComment	lib/sqlite3.c	8835;"	d	file:
VdbeComment	lib/sqlite3.c	8839;"	d	file:
VdbeCursor	lib/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	lib/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	lib/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	lib/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	lib/sqlite3.c	12962;"	d	file:
VdbeFunc	lib/sqlite3.c	/^struct VdbeFunc {$/;"	s	file:
VdbeFunc	lib/sqlite3.c	/^typedef struct VdbeFunc VdbeFunc;$/;"	t	typeref:struct:VdbeFunc	file:
VdbeMemRelease	lib/sqlite3.c	13238;"	d	file:
VdbeNoopComment	lib/sqlite3.c	8837;"	d	file:
VdbeNoopComment	lib/sqlite3.c	8840;"	d	file:
VdbeOp	lib/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	lib/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	lib/sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	lib/sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	lib/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	lib/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	lib/sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	lib/sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VdbeSorterIter	lib/sqlite3.c	/^struct VdbeSorterIter {$/;"	s	file:
VdbeSorterIter	lib/sqlite3.c	/^typedef struct VdbeSorterIter VdbeSorterIter;$/;"	t	typeref:struct:VdbeSorterIter	file:
Version	../framework/main.c	/^static void Version()$/;"	f	file:
VtabCtx	lib/sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	lib/sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	lib/sqlite3.c	45710;"	d	file:
WALINDEX_LOCK_OFFSET	lib/sqlite3.c	45708;"	d	file:
WALINDEX_LOCK_RESERVED	lib/sqlite3.c	45709;"	d	file:
WALINDEX_MAX_VERSION	lib/sqlite3.c	45603;"	d	file:
WALINDEX_PGSZ	lib/sqlite3.c	45837;"	d	file:
WALTRACE	lib/sqlite3.c	45584;"	d	file:
WALTRACE	lib/sqlite3.c	45586;"	d	file:
WAL_ALL_BUT_WRITE	lib/sqlite3.c	45610;"	d	file:
WAL_CKPT_LOCK	lib/sqlite3.c	45611;"	d	file:
WAL_EXCLUSIVE_MODE	lib/sqlite3.c	45774;"	d	file:
WAL_FRAME_HDRSIZE	lib/sqlite3.c	45713;"	d	file:
WAL_HDRSIZE	lib/sqlite3.c	45717;"	d	file:
WAL_HEAPMEMORY_MODE	lib/sqlite3.c	45775;"	d	file:
WAL_MAGIC	lib/sqlite3.c	45728;"	d	file:
WAL_MAX_VERSION	lib/sqlite3.c	45602;"	d	file:
WAL_NORMAL_MODE	lib/sqlite3.c	45773;"	d	file:
WAL_NREADER	lib/sqlite3.c	45614;"	d	file:
WAL_RDONLY	lib/sqlite3.c	45781;"	d	file:
WAL_RDWR	lib/sqlite3.c	45780;"	d	file:
WAL_READ_LOCK	lib/sqlite3.c	45613;"	d	file:
WAL_RECOVER_LOCK	lib/sqlite3.c	45612;"	d	file:
WAL_RETRY	lib/sqlite3.c	47353;"	d	file:
WAL_SAVEPOINT_NDATA	lib/sqlite3.c	38359;"	d	file:
WAL_SHM_RDONLY	lib/sqlite3.c	45782;"	d	file:
WAL_SYNC_TRANSACTIONS	lib/sqlite3.c	38335;"	d	file:
WAL_WRITE_LOCK	lib/sqlite3.c	45609;"	d	file:
WEAPON_TYPE_CHANGBING	lib/battlefield/bone.h	7;"	d
WEAPON_TYPE_CHANGBING	lib/battlefield/role.h	33;"	d
WEAPON_TYPE_FAQIU	lib/battlefield/bone.h	9;"	d
WEAPON_TYPE_FAQIU	lib/battlefield/role.h	35;"	d
WEAPON_TYPE_GONGJIAN	lib/battlefield/bone.h	8;"	d
WEAPON_TYPE_GONGJIAN	lib/battlefield/role.h	34;"	d
WEAPON_TYPE_KONGSHOU	lib/battlefield/bone.h	5;"	d
WEAPON_TYPE_KONGSHOU	lib/battlefield/role.h	31;"	d
WEAPON_TYPE_SHUANGSHOU	lib/battlefield/bone.h	6;"	d
WEAPON_TYPE_SHUANGSHOU	lib/battlefield/role.h	32;"	d
WELLRNG	lib/battlefield/battlefield.h	16;"	d
WELLRNG512a	lib/battlefield/WELLRNG512a.c	/^uint32_t WELLRNG512a(struct WELLRNG512aGenerator * generator)$/;"	f
WELLRNG512aGenerator	lib/battlefield/WELLRNG512a.h	/^struct WELLRNG512aGenerator$/;"	s
WELLRNG512a_seed	lib/battlefield/WELLRNG512a.c	/^void WELLRNG512a_seed(struct WELLRNG512aGenerator * generator, uint32_t value)$/;"	f
WELLRNG512a_seed16	lib/battlefield/WELLRNG512a.c	/^void WELLRNG512a_seed16(struct WELLRNG512aGenerator * generator, uint32_t values[16])$/;"	f
WHERETRACE	lib/sqlite3.c	102561;"	d	file:
WHERETRACE	lib/sqlite3.c	102563;"	d	file:
WHERE_AND_ONLY	lib/sqlite3.c	10859;"	d	file:
WHERE_BOTH_LIMIT	lib/sqlite3.c	102790;"	d	file:
WHERE_BTM_LIMIT	lib/sqlite3.c	102789;"	d	file:
WHERE_COLUMN_EQ	lib/sqlite3.c	102781;"	d	file:
WHERE_COLUMN_IN	lib/sqlite3.c	102783;"	d	file:
WHERE_COLUMN_NULL	lib/sqlite3.c	102784;"	d	file:
WHERE_COLUMN_RANGE	lib/sqlite3.c	102782;"	d	file:
WHERE_DISTINCT	lib/sqlite3.c	102798;"	d	file:
WHERE_DISTINCT_ORDERED	lib/sqlite3.c	10886;"	d	file:
WHERE_DISTINCT_UNIQUE	lib/sqlite3.c	10885;"	d	file:
WHERE_DUPLICATES_OK	lib/sqlite3.c	10855;"	d	file:
WHERE_FORCE_TABLE	lib/sqlite3.c	10857;"	d	file:
WHERE_IDX_ONLY	lib/sqlite3.c	102791;"	d	file:
WHERE_INDEXED	lib/sqlite3.c	102785;"	d	file:
WHERE_IN_ABLE	lib/sqlite3.c	102787;"	d	file:
WHERE_MULTI_OR	lib/sqlite3.c	102796;"	d	file:
WHERE_NOT_FULLSCAN	lib/sqlite3.c	102786;"	d	file:
WHERE_OMIT_OPEN_CLOSE	lib/sqlite3.c	10856;"	d	file:
WHERE_ONEPASS_DESIRED	lib/sqlite3.c	10854;"	d	file:
WHERE_ONETABLE_ONLY	lib/sqlite3.c	10858;"	d	file:
WHERE_ORDERBY	lib/sqlite3.c	102792;"	d	file:
WHERE_ORDERBY_MAX	lib/sqlite3.c	10853;"	d	file:
WHERE_ORDERBY_MIN	lib/sqlite3.c	10852;"	d	file:
WHERE_ORDERBY_NORMAL	lib/sqlite3.c	10851;"	d	file:
WHERE_REVERSE	lib/sqlite3.c	102793;"	d	file:
WHERE_ROWID_EQ	lib/sqlite3.c	102779;"	d	file:
WHERE_ROWID_RANGE	lib/sqlite3.c	102780;"	d	file:
WHERE_TEMP_INDEX	lib/sqlite3.c	102797;"	d	file:
WHERE_TOP_LIMIT	lib/sqlite3.c	102788;"	d	file:
WHERE_UNIQUE	lib/sqlite3.c	102794;"	d	file:
WHERE_VIRTUALTABLE	lib/sqlite3.c	102795;"	d	file:
WINCE_DELETION_ATTEMPTS	lib/sqlite3.c	33717;"	d	file:
WINFILE_PERSIST_WAL	lib/sqlite3.c	32192;"	d	file:
WINFILE_PSOW	lib/sqlite3.c	32193;"	d	file:
WINMEM_MAGIC	lib/sqlite3.c	32237;"	d	file:
WIN_SHM_BASE	lib/sqlite3.c	34455;"	d	file:
WIN_SHM_DMS	lib/sqlite3.c	34456;"	d	file:
WORLD_DISPATCHER_PORT_BASE	../framework/common_macro.h	5;"	d
WORLD_PORT_BASE	../framework/common_macro.h	6;"	d
WO_ALL	lib/sqlite3.c	102763;"	d	file:
WO_AND	lib/sqlite3.c	102760;"	d	file:
WO_EQ	lib/sqlite3.c	102752;"	d	file:
WO_GE	lib/sqlite3.c	102756;"	d	file:
WO_GT	lib/sqlite3.c	102755;"	d	file:
WO_IN	lib/sqlite3.c	102751;"	d	file:
WO_ISNULL	lib/sqlite3.c	102758;"	d	file:
WO_LE	lib/sqlite3.c	102754;"	d	file:
WO_LT	lib/sqlite3.c	102753;"	d	file:
WO_MATCH	lib/sqlite3.c	102757;"	d	file:
WO_NOOP	lib/sqlite3.c	102761;"	d	file:
WO_OR	lib/sqlite3.c	102759;"	d	file:
WO_SINGLE	lib/sqlite3.c	102764;"	d	file:
WRC_Abort	lib/sqlite3.c	11397;"	d	file:
WRC_Continue	lib/sqlite3.c	11395;"	d	file:
WRC_Prune	lib/sqlite3.c	11396;"	d	file:
WRITE_DEBUG_LOG	../framework/log.h	97;"	d
WRITE_ERROR_LOG	../framework/log.h	101;"	d
WRITE_INFO_LOG	../framework/log.h	105;"	d
WRITE_LOCK	lib/sqlite3.c	48758;"	d	file:
WRITE_LOG	../framework/log.h	79;"	d
WRITE_LOG	../framework/log.h	84;"	d
WRITE_TIME	../framework/log.h	66;"	d
WRITE_UTF16BE	lib/sqlite3.c	20579;"	d	file:
WRITE_UTF16LE	lib/sqlite3.c	20567;"	d	file:
WRITE_UTF8	lib/sqlite3.c	20547;"	d	file:
WRITE_WARNING_LOG	../framework/log.h	109;"	d
Wal	lib/sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	lib/sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	lib/sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	lib/sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	lib/sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	lib/sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	lib/sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	lib/sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	lib/sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	lib/sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	lib/sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	lib/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	lib/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	lib/sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	lib/sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	lib/sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	lib/sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereCost	lib/sqlite3.c	/^struct WhereCost {$/;"	s	file:
WhereCost	lib/sqlite3.c	/^typedef struct WhereCost WhereCost;$/;"	t	typeref:struct:WhereCost	file:
WhereInfo	lib/sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	lib/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	lib/sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	lib/sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereMaskSet	lib/sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	lib/sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrInfo	lib/sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	lib/sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WherePlan	lib/sqlite3.c	/^struct WherePlan {$/;"	s	file:
WherePlan	lib/sqlite3.c	/^typedef struct WherePlan WherePlan;$/;"	t	typeref:struct:WherePlan	file:
WhereTerm	lib/sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	lib/sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
WriteLine	config/generate.lua	/^function WriteLine(file, row, key, desc, sep)$/;"	f
Y	lib/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YJDQ_ADDITION_STORY_COUNT	lib/fight_type.h	10;"	d
YQ_AFFECT_MILITARY_POWER_FORMATION_COUNT	lib/fight_type.h	27;"	d
YQ_AFFECT_MILITARY_POWER_PLACEHOLDER_COUNT	lib/fight_type.h	28;"	d
YQ_ARMAMENT_FLAG_ALL	lib/fight_type.h	12;"	d
YQ_ARMOUR_FLAG	lib/fight_type.h	17;"	d
YQ_FIGHT_BUFFER_MAX_SIZE	lib/fight_type.h	32;"	d
YQ_FLAG_FLAG	lib/fight_type.h	19;"	d
YQ_HELMET_FLAG	lib/fight_type.h	16;"	d
YQ_HERO_FLAG	lib/fight_type.h	13;"	d
YQ_MAX_ARMAMENT_COUNT_PER_PLACEHOLDER	lib/fight_type.h	22;"	d
YQ_MAX_BUFF_COUNT	lib/fight_type.h	34;"	d
YQ_MAX_FORMATION_COUNT	lib/fight_type.h	26;"	d
YQ_MAX_PLACEHOLDER_COUNT	lib/fight_type.h	29;"	d
YQ_MAX_PLACEHOLDER_COUNT_PER_FIGHT	lib/fight_type.h	25;"	d
YQ_MAX_PLACEHOLDER_COUNT_PER_FORMATION	lib/fight_type.h	24;"	d
YQ_MAX_PLACEHOLDER_COUNT_PER_FORMATION_IN_GUILD_STORY	lib/fight_type.h	30;"	d
YQ_MOUNT_FLAG	lib/fight_type.h	15;"	d
YQ_NECKLACE_FLAG	lib/fight_type.h	21;"	d
YQ_PUNISHMENT_TIME	lib/fight_type.h	33;"	d
YQ_WEAPON_FLAG	lib/fight_type.h	14;"	d
YYACTIONTYPE	lib/sqlite3.c	107982;"	d	file:
YYCODETYPE	lib/sqlite3.c	107980;"	d	file:
YYFALLBACK	lib/sqlite3.c	108012;"	d	file:
YYMINORTYPE	lib/sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon54	file:
YYNOCODE	lib/sqlite3.c	107981;"	d	file:
YYNOERRORRECOVERY	lib/sqlite3.c	107809;"	d	file:
YYNRULE	lib/sqlite3.c	108011;"	d	file:
YYNSTATE	lib/sqlite3.c	108010;"	d	file:
YYSTACKDEPTH	lib/sqlite3.c	108004;"	d	file:
YYWILDCARD	lib/sqlite3.c	107983;"	d	file:
YY_ACCEPT_ACTION	lib/sqlite3.c	108014;"	d	file:
YY_ACTTAB_COUNT	lib/sqlite3.c	108081;"	d	file:
YY_ERROR_ACTION	lib/sqlite3.c	108015;"	d	file:
YY_NO_ACTION	lib/sqlite3.c	108013;"	d	file:
YY_REDUCE_COUNT	lib/sqlite3.c	108451;"	d	file:
YY_REDUCE_MAX	lib/sqlite3.c	108453;"	d	file:
YY_REDUCE_MIN	lib/sqlite3.c	108452;"	d	file:
YY_REDUCE_USE_DFLT	lib/sqlite3.c	108450;"	d	file:
YY_SHIFT_COUNT	lib/sqlite3.c	108403;"	d	file:
YY_SHIFT_MAX	lib/sqlite3.c	108405;"	d	file:
YY_SHIFT_MIN	lib/sqlite3.c	108404;"	d	file:
YY_SHIFT_USE_DFLT	lib/sqlite3.c	108402;"	d	file:
_AGAME_MFILE_H_	../framework/mfile.h	2;"	d
_AGAME_MFILE_H_	lib/mfile.h	2;"	d
_A_GAME_ARRAY_H_	../framework/array.h	2;"	d
_A_GAME_BATTLEFIELD_LUA_H_	modules/mlua.h	2;"	d
_A_GAME_COMM_AMF_H_	../framework/amf.h	2;"	d
_A_GAME_COMM_BASE_H_	../framework/base.h	2;"	d
_A_GAME_COMM_BUFFER_H_	../framework/buffer.h	2;"	d
_A_GAME_COMM_CONFIG_H_	../framework/config.h	2;"	d
_A_GAME_COMM_HASH_H_	../framework/hash.h	2;"	d
_A_GAME_COMM_LRM_H_	../framework/lrm.h	2;"	d
_A_GAME_COMM_MEMORY_H_	../framework/memory.h	2;"	d
_A_GAME_COMM_MEMORY_H_	lib/memory.h	2;"	d
_A_GAME_COMM_MODULES_LOG_H_	../framework/log.h	2;"	d
_A_GAME_COMM_MODULES_PIPE_H_	../framework/pipe.h	2;"	d
_A_GAME_COMM_MODULES_TIME_H_	../framework/mtime.h	2;"	d
_A_GAME_COMM_MODULE_H_	../framework/module.h	2;"	d
_A_GAME_COMM_NETWORK_H_	../framework/network.h	2;"	d
_A_GAME_COMM_PACKAGE_H_	../framework/package.h	2;"	d
_A_GAME_COMM_XML_HELPER_H_	../framework/xmlHelper.h	2;"	d
_A_GAME_COMM_XML_HELPER_H_	lib/xmlHelper.h	2;"	d
_A_GAME_NETWORK_CODEQUEUE_H_	../framework/codequeue.h	2;"	d
_A_GAME_NETWORK_SERVICE_H_	../framework/service.h	2;"	d
_A_GAME_PBC_LUA_H_	lib/pbc-lua.h	2;"	d
_A_GAME_SHM_H_	../framework/shm.h	2;"	d
_A_GAME_WORLD_FIGHT_ENCODE_H_	lib/fight_encode.h	2;"	d
_BATTLEFIELD_BUFFER_H_	lib/battlefield/buffer.h	2;"	d
_BATTLEFIELD_BULLET_H_	lib/battlefield/bullet.h	2;"	d
_BATTLEFIELD_H_	lib/battlefield/battlefield.h	2;"	d
_BATTLEFIELD_IMP_H_	lib/battlefield/battlefield_imp.h	2;"	d
_BATTLEFIELD_RECORD_H_	lib/battlefield/record.h	2;"	d
_BATTLEFIELD_ROLE_H_	lib/battlefield/role.h	2;"	d
_BATTLEFIELD_SCHEDULER_H_	lib/battlefield/scheduler.h	2;"	d
_BATTLEFIELD_SKILL_H_	lib/battlefield/skill.h	2;"	d
_BTREE_H_	lib/sqlite3.c	8191;"	d	file:
_COMM_DLIST_H_	../framework/dlist.h	2;"	d
_COMM_DLIST_H_	lib/battlefield/dlist.h	2;"	d
_FILE_OFFSET_BITS	lib/sqlite3.c	24914;"	d	file:
_FILE_OFFSET_BITS	lib/sqlite3.c	68;"	d	file:
_FTS3_HASH_H_	lib/sqlite3.c	116338;"	d	file:
_FTS3_TOKENIZER_H_	lib/sqlite3.c	116176;"	d	file:
_FTSINT_H	lib/sqlite3.c	116132;"	d	file:
_Free	lib/pbc-lua.c	16;"	d	file:
_Free	lib/pbc-lua.c	24;"	d	file:
_GNU_SOURCE	lib/sqlite3.c	306;"	d	file:
_HWTIME_H_	lib/sqlite3.c	22800;"	d	file:
_HWTIME_H_	lib/sqlite3.c	25148;"	d	file:
_HWTIME_H_	lib/sqlite3.c	32001;"	d	file:
_HWTIME_H_	lib/sqlite3.c	64816;"	d	file:
_LARGEFILE_SOURCE	lib/sqlite3.c	24916;"	d	file:
_LARGEFILE_SOURCE	lib/sqlite3.c	70;"	d	file:
_LARGE_FILE	lib/sqlite3.c	24912;"	d	file:
_LARGE_FILE	lib/sqlite3.c	66;"	d	file:
_MAP_H_	../framework/map.h	2;"	d
_MAP_H_	lib/map.h	2;"	d
_MATRIX_H_	../framework/matrix.h	2;"	d
_MD5_H	../framework/md5.h	2;"	d
_OS_COMMON_H_	lib/sqlite3.c	22751;"	d	file:
_OS_COMMON_H_	lib/sqlite3.c	25099;"	d	file:
_OS_COMMON_H_	lib/sqlite3.c	31952;"	d	file:
_PAGER_H_	lib/sqlite3.c	8866;"	d	file:
_SHM_RDLCK	lib/sqlite3.c	23708;"	d	file:
_SHM_RDLCK	lib/sqlite3.c	34462;"	d	file:
_SHM_UNLCK	lib/sqlite3.c	23707;"	d	file:
_SHM_UNLCK	lib/sqlite3.c	34461;"	d	file:
_SHM_WRLCK	lib/sqlite3.c	23709;"	d	file:
_SHM_WRLCK	lib/sqlite3.c	34463;"	d	file:
_SHM_WRLCK_WAIT	lib/sqlite3.c	23710;"	d	file:
_SQLITE3EXT_H_	lib/sqlite3.c	90993;"	d	file:
_SQLITE3RTREE_H_	lib/sqlite3.c	7508;"	d	file:
_SQLITE3RTREE_H_	lib/sqlite3.h	6958;"	d
_SQLITE3_H_	lib/sqlite3.c	584;"	d	file:
_SQLITE3_H_	lib/sqlite3.h	34;"	d
_SQLITEINT_H_	lib/sqlite3.c	44;"	d	file:
_SQLITE_HASH_H_	lib/sqlite3.c	7570;"	d	file:
_SQLITE_OS_C_	lib/sqlite3.c	14685;"	d	file:
_SQLITE_OS_C_	lib/sqlite3.c	14686;"	d	file:
_SQLITE_OS_H_	lib/sqlite3.c	9225;"	d	file:
_SQLITE_VDBE_H_	lib/sqlite3.c	8438;"	d	file:
_VDBEINT_H_	lib/sqlite3.c	12846;"	d	file:
_WAL_H_	lib/sqlite3.c	38329;"	d	file:
_WELLRNG523_H_	lib/battlefield/WELLRNG512a.h	2;"	d
_XOPEN_SOURCE	lib/sqlite3.c	435;"	d	file:
_YQ_FIGHT_TYPE_H__	lib/fight_type.h	2;"	d
__AGAME_VERSION_H__	version.h	2;"	d
__JSMN_H_	lib/battlefield/jsmn.h	2;"	d
__declspec	lib/sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
_aGameMobile_battlefield_encode_h_	lib/battlefield/encode.h	2;"	d
_aGameMobile_battlefield_event_h_	lib/battlefield/event.h	2;"	d
_aGameMobile_battlefield_fight_h_	lib/battlefield/fight.h	2;"	d
_aGameMobile_battlefield_script_h_	lib/battlefield/script.h	2;"	d
_aGameMobile_battlefield_wave_h_	lib/battlefield/wave.h	2;"	d
_aGameMobile_bone_h_	lib/battlefield/bone.h	2;"	d
_aGameMobile_randomAppearance_h_	lib/battlefield/randomAppearance.h	2;"	d
_agB_align	../framework/buffer.c	/^static void _agB_align(struct buffer * buf)$/;"	f	file:
_agB_buffer	../framework/buffer.c	/^void * _agB_buffer(struct buffer * buf, size_t len)$/;"	f
_agB_free	../framework/buffer.c	/^void _agB_free(struct buffer * buf)$/;"	f
_agB_getc	../framework/buffer.c	/^char   _agB_getc(struct buffer * buf)$/;"	f
_agB_new	../framework/buffer.c	/^struct buffer * _agB_new(size_t size)$/;"	f
_agB_peek	../framework/buffer.c	/^void * _agB_peek(struct buffer * buf, size_t len)$/;"	f
_agB_putc	../framework/buffer.c	/^int    _agB_putc(struct buffer * buf, char c)$/;"	f
_agB_read	../framework/buffer.c	/^void * _agB_read(struct buffer * buf, size_t len)$/;"	f
_agB_resize	../framework/buffer.c	/^static int _agB_resize(struct buffer * buf, size_t size)$/;"	f	file:
_agB_size	../framework/buffer.c	/^size_t _agB_size(struct buffer * buf)$/;"	f
_agB_statistic	../framework/buffer.c	/^void _agB_statistic()$/;"	f
_agB_write	../framework/buffer.c	/^int _agB_write(struct buffer * buf, const void * data, size_t len)$/;"	f
_agL_close	../framework/log.c	/^void _agL_close(struct logger * log)$/;"	f
_agL_flush	../framework/log.c	/^void _agL_flush(struct logger * log)$/;"	f
_agL_open	../framework/log.c	/^struct logger * _agL_open (const char * filename, int level)$/;"	f
_agL_set_level	../framework/log.c	/^int  _agL_set_level(struct logger * log, int level)$/;"	f
_agL_write	../framework/log.c	/^int  _agL_write(struct logger * log, int level, const char * fmt, ...)$/;"	f
_agL_writev	../framework/log.c	/^int  _agL_writev(struct logger * log, int level, const char * fmt, va_list args)$/;"	f
_agMH_alloc	../framework/memory.c	/^void* _agMH_alloc(struct heap *h, int size) {$/;"	f
_agMH_alloc	lib/memory.c	/^void* _agMH_alloc(struct heap *h, int size) {$/;"	f
_agMH_delete	../framework/memory.c	/^void _agMH_delete(struct heap *h) {$/;"	f
_agMH_delete	lib/memory.c	/^void _agMH_delete(struct heap *h) {$/;"	f
_agMH_new	../framework/memory.c	/^struct heap * _agMH_new(int pagesize) {$/;"	f
_agMH_new	lib/memory.c	/^struct heap * _agMH_new(int pagesize) {$/;"	f
_agM_dump	../framework/memory.c	/^void  _agM_dump()$/;"	f
_agM_dump	lib/memory.c	/^void  _agM_dump()$/;"	f
_agM_free	../framework/memory.c	/^void _agM_free(void * p, const char * file, int line)$/;"	f
_agM_free	lib/memory.c	/^void _agM_free(void * p, const char * file, int line)$/;"	f
_agM_malloc	../framework/memory.c	/^void * _agM_malloc(size_t sz, const char * file, int line)$/;"	f
_agM_malloc	lib/memory.c	/^void * _agM_malloc(size_t sz, const char * file, int line)$/;"	f
_agM_realloc	../framework/memory.c	/^void * _agM_realloc(void *p, size_t sz, const char * file, int line)$/;"	f
_agM_realloc	lib/memory.c	/^void * _agM_realloc(void *p, size_t sz, const char * file, int line)$/;"	f
_agM_statistic	../framework/memory.c	/^void   _agM_statistic()$/;"	f
_agM_statistic	lib/memory.c	/^void   _agM_statistic()$/;"	f
_agMap_delete	../framework/map.c	/^void _agMap_delete(struct map * map) {$/;"	f
_agMap_delete	lib/map.c	/^void _agMap_delete(struct map * map) {$/;"	f
_agMap_empty	../framework/map.c	/^void  _agMap_empty(struct map * map, void (*cb_free)(void * p))$/;"	f
_agMap_empty	lib/map.c	/^void  _agMap_empty(struct map * map, void (*cb_free)(void * p))$/;"	f
_agMap_ip_foreach	../framework/map.c	/^void _agMap_ip_foreach(struct map * map, void (*func)(uint64_t key, void *p, void * ctx), void * ctx)$/;"	f
_agMap_ip_foreach	lib/map.c	/^void _agMap_ip_foreach(struct map * map, void (*func)(uint64_t key, void *p, void * ctx), void * ctx)$/;"	f
_agMap_ip_get	../framework/map.c	/^void * _agMap_ip_get(struct map * map, uint64_t key)$/;"	f
_agMap_ip_get	lib/map.c	/^void * _agMap_ip_get(struct map * map, uint64_t key)$/;"	f
_agMap_ip_set	../framework/map.c	/^void * _agMap_ip_set(struct map * map, uint64_t key, void * p)$/;"	f
_agMap_ip_set	lib/map.c	/^void * _agMap_ip_set(struct map * map, uint64_t key, void * p)$/;"	f
_agMap_new	../framework/map.c	/^struct map * _agMap_new(struct heap * heap)$/;"	f
_agMap_new	lib/map.c	/^struct map * _agMap_new(struct heap * heap)$/;"	f
_agMap_next	../framework/map.c	/^struct map_element * _agMap_next(struct map * map, struct map_element * ite)$/;"	f
_agMap_next	lib/map.c	/^struct map_element * _agMap_next(struct map * map, struct map_element * ite)$/;"	f
_agMap_size	../framework/map.c	/^size_t _agMap_size(struct map * map)$/;"	f
_agMap_size	lib/map.c	/^size_t _agMap_size(struct map * map)$/;"	f
_agMap_sp_foreach	../framework/map.c	/^void _agMap_sp_foreach(struct map *map, void (*func)(const char * key, void *p, void * ctx), void * ctx)$/;"	f
_agMap_sp_foreach	lib/map.c	/^void _agMap_sp_foreach(struct map *map, void (*func)(const char * key, void *p, void * ctx), void * ctx)$/;"	f
_agMap_sp_get	../framework/map.c	/^void * _agMap_sp_get(struct map * map, const char * key)$/;"	f
_agMap_sp_get	lib/map.c	/^void * _agMap_sp_get(struct map * map, const char * key)$/;"	f
_agMap_sp_next	../framework/map.c	/^void * _agMap_sp_next(struct map * map, const char ** key)$/;"	f
_agMap_sp_next	lib/map.c	/^void * _agMap_sp_next(struct map * map, const char ** key)$/;"	f
_agMap_sp_set	../framework/map.c	/^void * _agMap_sp_set(struct map * map, const char * key, void * p)$/;"	f
_agMap_sp_set	lib/map.c	/^void * _agMap_sp_set(struct map * map, const char * key, void * p)$/;"	f
_agN_attach	../framework/network.c	/^resid_t _agN_attach(struct network * net, int fd, network_handler * handler, void * ctx)$/;"	f
_agN_buffer	../framework/network.c	/^void * _agN_buffer(struct network * net, resid_t conn, size_t len)$/;"	f
_agN_close	../framework/network.c	/^void _agN_close(struct network * net, resid_t conn)$/;"	f
_agN_connect	../framework/network.c	/^resid_t _agN_connect(struct network * net, $/;"	f
_agN_detach	../framework/network.c	/^int _agN_detach (struct network * net, resid_t conn)$/;"	f
_agN_free	../framework/network.c	/^void _agN_free(struct network * net)$/;"	f
_agN_get_fd	../framework/network.c	/^int _agN_get_fd(struct network * net, resid_t conn)$/;"	f
_agN_listen	../framework/network.c	/^resid_t _agN_listen (struct network * net,$/;"	f
_agN_loop	../framework/network.c	/^int _agN_loop(struct network * net)$/;"	f
_agN_new	../framework/network.c	/^struct network * _agN_new (size_t max)$/;"	f
_agN_send	../framework/network.c	/^int _agN_send(struct network * net, resid_t conn, const void * buff, size_t len)$/;"	f
_agN_set_handler	../framework/network.c	/^int _agN_set_handler(struct network * net, resid_t conn, network_handler * handler, void * ctx)$/;"	f
_agN_set_tick	../framework/network.c	/^void _agN_set_tick(struct network * net, void (*cb)(void *), void * ctx)$/;"	f
_agN_set_timer	../framework/network.c	/^void _agN_set_timer(struct network * net, void (*cb)(time_t now, void *), void * ctx)$/;"	f
_agN_stop	../framework/network.c	/^void _agN_stop(struct network * net)$/;"	f
_agN_tick	../framework/network.c	/^int _agN_tick(struct network * net, int timeout)$/;"	f
_agN_writev	../framework/network.c	/^int _agN_writev (struct network * net, resid_t conn, struct iovec *iov, int iovcnt)$/;"	f
_agRM_free	../framework/lrm.c	/^void _agRM_free(struct lrm * lrm)$/;"	f
_agRM_new	../framework/lrm.c	/^struct lrm * _agRM_new(int max, size_t objsize)$/;"	f
_agR_free	../framework/lrm.c	/^void _agR_free(struct lrm * lrm, resid_t id)$/;"	f
_agR_get	../framework/lrm.c	/^void *  _agR_get(struct lrm * lrm, resid_t id)$/;"	f
_agR_new	../framework/lrm.c	/^resid_t _agR_new(struct lrm * lrm)$/;"	f
_agR_next	../framework/lrm.c	/^resid_t _agR_next(struct lrm * lrm, resid_t ite)$/;"	f
_agR_statistic	../framework/lrm.c	/^void    _agR_statistic()$/;"	f
_alloc	../framework/map.c	/^static void * _alloc(struct heap * heap, size_t s)$/;"	f	file:
_alloc	lib/map.c	/^static void * _alloc(struct heap * heap, size_t s)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attach	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _attach(struct buffer_effect * effect)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_attack	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _attack(struct buffer_effect * effect, int attacker, struct role * target, struct bullet * bullet, int flag)$/;"	f	file:
_battlefield_tick	lib/battlefield/battlefield.c	/^static void _battlefield_tick(void * data)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_dead	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _dead(struct buffer_effect * effect)$/;"	f	file:
_debug_record	lib/battlefield/record.c	/^void _debug_record(const char * fmt, ...)$/;"	f
_decode	lib/pbc-lua.c	/^_decode(lua_State *L) {$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_detach	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _detach(struct buffer_effect * effect)$/;"	f	file:
_doc	../framework/config.c	/^static xml_doc_t * _doc = 0;$/;"	v	file:
_env_delete	lib/pbc-lua.c	/^_env_delete(lua_State *L) {$/;"	f	file:
_env_new	lib/pbc-lua.c	/^_env_new(lua_State *L) {$/;"	f	file:
_env_register	lib/pbc-lua.c	/^_env_register(lua_State *L) {$/;"	f	file:
_env_type	lib/pbc-lua.c	/^_env_type(lua_State *L) {$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_filter	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _filter(struct buffer_effect * effect, struct bullet * bullet)$/;"	f	file:
_find_first	../framework/map.c	/^static struct map_element * _find_first(struct map * map, size_t from)$/;"	f	file:
_find_first	lib/map.c	/^static struct map_element * _find_first(struct map * map, size_t from)$/;"	f	file:
_free	../framework/map.c	/^static void _free(struct heap * heap, void * p)$/;"	f	file:
_free	lib/map.c	/^static void _free(struct heap * heap, void * p)$/;"	f	file:
_free_element	../framework/map.c	/^static void _free_element(struct map * map, struct map_element * element)$/;"	f	file:
_free_element	lib/map.c	/^static void _free_element(struct map * map, struct map_element * element)$/;"	f	file:
_free_events	lib/battlefield/event.c	/^static struct event * _free_events = 0;$/;"	v	typeref:struct:event	file:
_free_listeners	lib/battlefield/event.c	/^static struct eventListener * _free_listeners = 0;$/;"	v	typeref:struct:eventListener	file:
_fts3ht	lib/sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_g_free	../framework/buffer.c	/^static unsigned int _g_free = 0;$/;"	v	file:
_g_free	../framework/lrm.c	/^unsigned int _g_free   = 0;$/;"	v
_g_free	../framework/memory.c	/^static unsigned int _g_free    = 0;$/;"	v	file:
_g_free	lib/memory.c	/^static unsigned int _g_free    = 0;$/;"	v	file:
_g_malloc	../framework/buffer.c	/^static unsigned int _g_malloc = 0;$/;"	v	file:
_g_malloc	../framework/lrm.c	/^unsigned int _g_malloc = 0;$/;"	v
_g_malloc	../framework/memory.c	/^static unsigned int _g_malloc  = 0;$/;"	v	file:
_g_malloc	lib/memory.c	/^static unsigned int _g_malloc  = 0;$/;"	v	file:
_g_max_size	../framework/buffer.c	/^static size_t _g_max_size = 0;$/;"	v	file:
_g_realloc	../framework/memory.c	/^static unsigned int _g_realloc = 0;$/;"	v	file:
_g_realloc	lib/memory.c	/^static unsigned int _g_realloc = 0;$/;"	v	file:
_g_resize	../framework/buffer.c	/^static unsigned int _g_resize = 0;$/;"	v	file:
_get_array_value	lib/pbc-lua.c	/^_get_array_value(lua_State *L, pbc_array array, char type) {$/;"	f	file:
_get_king_ensign_part	lib/battlefield/fight.c	403;"	d	file:
_get_king_ensign_part	lib/lua_fight.c	131;"	d	file:
_get_user_logger_name	../framework/userlog.c	/^static const char* _get_user_logger_name(int type){$/;"	f	file:
_get_value	lib/pbc-lua.c	/^_get_value(lua_State *L, int index, char * ptr, char type) {$/;"	f	file:
_ht	lib/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_init	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_init	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _init(struct buffer_effect * effect)$/;"	f	file:
_insert_element	../framework/map.c	/^static void _insert_element(struct map * map, struct map_element * element)$/;"	f	file:
_insert_element	lib/map.c	/^static void _insert_element(struct map * map, struct map_element * element)$/;"	f	file:
_ip_find	../framework/map.c	/^static struct map_element * _ip_find(struct map * map, uint64_t key, struct map_element ** pparent)$/;"	f	file:
_ip_find	lib/map.c	/^static struct map_element * _ip_find(struct map * map, uint64_t key, struct map_element ** pparent)$/;"	f	file:
_last_error	lib/pbc-lua.c	/^_last_error(lua_State *L) {$/;"	f	file:
_net_instance	../framework/network.c	/^static struct network * _net_instance = 0;$/;"	v	typeref:struct:network	file:
_network_active	../framework/network.c	/^static void _network_active(struct network * net, struct conn * c)$/;"	f	file:
_new_element	../framework/map.c	/^static struct map_element * _new_element(struct map * map)$/;"	f	file:
_new_element	lib/map.c	/^static struct map_element * _new_element(struct map * map)$/;"	f	file:
_pattern_delete	lib/pbc-lua.c	/^_pattern_delete(lua_State *L) {$/;"	f	file:
_pattern_new	lib/pbc-lua.c	/^_pattern_new(lua_State *L) {$/;"	f	file:
_pattern_pack	lib/pbc-lua.c	/^_pattern_pack(lua_State *L) {$/;"	f	file:
_pattern_size	lib/pbc-lua.c	/^_pattern_size(lua_State *L) {$/;"	f	file:
_pattern_unpack	lib/pbc-lua.c	/^_pattern_unpack(lua_State *L) {$/;"	f	file:
_push_array	lib/pbc-lua.c	/^_push_array(lua_State *L, pbc_array array, char type, int index) {$/;"	f	file:
_push_value	lib/pbc-lua.c	/^_push_value(lua_State *L, char * ptr, char type) {$/;"	f	file:
_read_amf	../framework/amf.c	/^static amf_value * _read_amf(const char * data, size_t dlen, size_t * plen)$/;"	f	file:
_read_array	../framework/amf.c	/^static amf_value * _read_array(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_byte_array	../framework/amf.c	/^static amf_value * _read_byte_array(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_double	../framework/amf.c	/^static amf_value * _read_double(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_false	../framework/amf.c	/^static amf_value * _read_false(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_integer	../framework/amf.c	/^static amf_value * _read_integer(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_null	../framework/amf.c	/^static amf_value * _read_null(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_sinteger	../framework/amf.c	/^static amf_value * _read_sinteger(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_string	../framework/amf.c	/^static amf_value * _read_string(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_true	../framework/amf.c	/^static amf_value * _read_true(const char * data, size_t len, size_t * plen)$/;"	f	file:
_read_undefine	../framework/amf.c	/^static amf_value * _read_undefine(const char * data, size_t len, size_t * plen)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _release(struct buffer_effect * effect)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _release(struct buffer_effect * buffer)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _release(struct buffer_effect * effect)$/;"	f	file:
_release	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _release(struct buffer_effect * effect)$/;"	f	file:
_resize	../framework/map.c	/^static void _resize(struct map * map, size_t s)$/;"	f	file:
_resize	lib/map.c	/^static void _resize(struct map * map, size_t s)$/;"	f	file:
_rmessage_delete	lib/pbc-lua.c	/^_rmessage_delete(lua_State *L) {$/;"	f	file:
_rmessage_int32	lib/pbc-lua.c	/^_rmessage_int32(lua_State *L) {$/;"	f	file:
_rmessage_int52	lib/pbc-lua.c	/^_rmessage_int52(lua_State *L) {$/;"	f	file:
_rmessage_int64	lib/pbc-lua.c	/^_rmessage_int64(lua_State *L) {$/;"	f	file:
_rmessage_integer	lib/pbc-lua.c	/^_rmessage_integer(lua_State *L) {$/;"	f	file:
_rmessage_message	lib/pbc-lua.c	/^_rmessage_message(lua_State *L) {$/;"	f	file:
_rmessage_new	lib/pbc-lua.c	/^_rmessage_new(lua_State *L) {$/;"	f	file:
_rmessage_real	lib/pbc-lua.c	/^_rmessage_real(lua_State *L) {$/;"	f	file:
_rmessage_size	lib/pbc-lua.c	/^_rmessage_size(lua_State *L) {$/;"	f	file:
_rmessage_string	lib/pbc-lua.c	/^_rmessage_string(lua_State *L) {$/;"	f	file:
_rmessage_uint52	lib/pbc-lua.c	/^_rmessage_uint52(lua_State *L) {$/;"	f	file:
_role_add_buffer	lib/battlefield/role.c	/^void _role_add_buffer(struct role * role, struct buffer * buffer)$/;"	f
_role_remove_buffer	lib/battlefield/role.c	/^void _role_remove_buffer(struct role * role, struct buffer * buffer)$/;"	f
_s_calc_hash	../framework/map.c	/^static size_t _s_calc_hash(const char * name)$/;"	f	file:
_s_calc_hash	lib/map.c	/^static size_t _s_calc_hash(const char * name)$/;"	f	file:
_scheduler_add	lib/battlefield/scheduler.c	/^static void _scheduler_add(struct scheduler * scheduler, float delay, void(*cb)(void*), void * data, void * tag)$/;"	f	file:
_scheduler_instance	lib/battlefield/scheduler.c	/^static struct scheduler * _scheduler_instance()$/;"	f	file:
_scheduler_new_timer	lib/battlefield/scheduler.c	/^static struct timer * _scheduler_new_timer(struct scheduler * scheduler)$/;"	f	file:
_scheduler_now	lib/battlefield/scheduler.c	/^static float _scheduler_now(struct scheduler * scheduler)$/;"	f	file:
_scheduler_release	lib/battlefield/scheduler.c	/^static void _scheduler_release(struct scheduler * scheduler)$/;"	f	file:
_scheduler_release_timer	lib/battlefield/scheduler.c	/^static void _scheduler_release_timer(struct scheduler * scheduler, struct timer * timer)$/;"	f	file:
_scheduler_remove	lib/battlefield/scheduler.c	/^static void _scheduler_remove(struct scheduler * scheduler, void * tag)$/;"	f	file:
_scheduler_repeat	lib/battlefield/scheduler.c	/^static void _scheduler_repeat(struct scheduler * scheduler, void(*cb)(void*), void * data, void * tag)$/;"	f	file:
_scheduler_tick	lib/battlefield/scheduler.c	/^static int _scheduler_tick(struct scheduler * scheduler)$/;"	f	file:
_scheduler_update	lib/battlefield/scheduler.c	/^static void _scheduler_update(struct scheduler * scheduler, float dt)$/;"	f	file:
_sp_find	../framework/map.c	/^static struct map_element * _sp_find(struct map * map, size_t hash, const char * key, struct map_element ** pparent)$/;"	f	file:
_sp_find	lib/map.c	/^static struct map_element * _sp_find(struct map * map, size_t hash, const char * key, struct map_element ** pparent)$/;"	f	file:
_sqliteZone_	lib/sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
_stoped	../framework/service.c	/^static int _stoped = 0;$/;"	v	file:
_t_last	lib/lua_report.c	/^static time_t _t_last = 0;$/;"	v	file:
_try_open_user_logger	../framework/userlog.c	/^static void _try_open_user_logger(int type){$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_001.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_002.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_003.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_004.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_005.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_006.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_007.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_008.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_009.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_010.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_011.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_012.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_013.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_015.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_update	lib/battlefield/buffer_effect/buffer_effect_016.c	/^static void _update(struct buffer_effect * effect)$/;"	f	file:
_wmessage_buffer	lib/pbc-lua.c	/^_wmessage_buffer(lua_State *L) {$/;"	f	file:
_wmessage_buffer_string	lib/pbc-lua.c	/^_wmessage_buffer_string(lua_State *L) {$/;"	f	file:
_wmessage_delete	lib/pbc-lua.c	/^_wmessage_delete(lua_State *L) {$/;"	f	file:
_wmessage_int32	lib/pbc-lua.c	/^_wmessage_int32(lua_State *L) {$/;"	f	file:
_wmessage_int52	lib/pbc-lua.c	/^_wmessage_int52(lua_State *L) {$/;"	f	file:
_wmessage_int64	lib/pbc-lua.c	/^_wmessage_int64(lua_State *L) {$/;"	f	file:
_wmessage_integer	lib/pbc-lua.c	/^_wmessage_integer(lua_State *L) {$/;"	f	file:
_wmessage_message	lib/pbc-lua.c	/^_wmessage_message(lua_State *L) {$/;"	f	file:
_wmessage_new	lib/pbc-lua.c	/^_wmessage_new(lua_State *L) {$/;"	f	file:
_wmessage_real	lib/pbc-lua.c	/^_wmessage_real(lua_State *L) {$/;"	f	file:
_wmessage_string	lib/pbc-lua.c	/^_wmessage_string(lua_State *L) {$/;"	f	file:
_wmessage_uint52	lib/pbc-lua.c	/^_wmessage_uint52(lua_State *L) {$/;"	f	file:
_xmlGetChild	../framework/xmlHelper.c	/^static xml_node_t * _xmlGetChild(xml_node_t * node, const char * name) $/;"	f	file:
_xmlGetChild	lib/xmlHelper.c	/^static xml_node_t * _xmlGetChild(xml_node_t * node, const char * name) $/;"	f	file:
a	lib/sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	lib/sqlite3.c	/^  WhereLevel a[1];               \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	lib/sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	lib/sqlite3.c	/^  } *a;                     \/* An array of samples *\/$/;"	m	struct:Stat3Accum	typeref:struct:Stat3Accum::Stat3Sample	file:
a	lib/sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	lib/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	lib/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	lib/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	lib/sqlite3.c	/^  u8 aAction[2];          \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAlias	lib/sqlite3.c	/^  int *aAlias;              \/* Register used to hold aliased result *\/$/;"	m	struct:Parse	file:
aAll	lib/sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	lib/sqlite3.c	/^  u8 *aAlloc;                     \/* Allocated space *\/$/;"	m	struct:VdbeSorterIter	file:
aBitmap	lib/sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon52	file:
aBuffer	lib/sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aCellIdx	lib/sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	lib/sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	lib/sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	lib/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	lib/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	lib/sqlite3.c	/^  } aCol[1];        \/* One entry for each of nCol column s *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	lib/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	lib/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	lib/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	lib/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	lib/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	lib/sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	lib/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraint	lib/sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	lib/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aConstraintUsage	lib/sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	lib/sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];$/;"	m	struct:RtreeCell	file:
aCounter	lib/sqlite3.c	/^  int aCounter[3];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	lib/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	lib/sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	lib/sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	lib/sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	lib/sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	lib/sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDb	lib/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	lib/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	lib/sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	lib/sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	lib/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	lib/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aEntry	lib/sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aExt	lib/sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	lib/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFrameCksum	lib/sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	lib/sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	lib/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	lib/sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	lib/sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon52	file:
aHash	lib/sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	lib/sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon43::__anon44	typeref:struct:WhereLevel::__anon43::__anon44::InLoop	file:
aIndent	lib/sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:
aIndex	lib/sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	lib/sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aIter	lib/sqlite3.c	/^  VdbeSorterIter *aIter;          \/* Array of iterators to merge *\/$/;"	m	struct:VdbeSorter	file:
aJournalMagic	lib/sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	lib/sqlite3.c	/^  u8 *aKey;                       \/* Pointer to current key *\/$/;"	m	struct:VdbeSorterIter	file:
aLabel	lib/sqlite3.c	/^  int *aLabel;            \/* Space to hold the labels *\/$/;"	m	struct:Vdbe	file:
aLimit	lib/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aMI	lib/sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMatchinfo	lib/sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	lib/sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	lib/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	lib/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	lib/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aModule	lib/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	lib/sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aOffset	lib/sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	lib/sqlite3.c	/^  u32 *aOffset;         \/* Cached offsets to the start of each columns data *\/$/;"	m	struct:VdbeCursor	file:
aOnceFlag	lib/sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOnceFlag	lib/sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:
aOp	lib/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	lib/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	lib/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	lib/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOrderBy	lib/sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aOverflow	lib/sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aPadding	lib/sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	lib/sqlite3.c	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aParam	lib/sqlite3.c	/^  double aParam[1];$/;"	m	struct:RtreeMatchArg	file:
aParam	lib/sqlite3.h	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
aPgno	lib/sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	lib/sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPool	lib/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPrefix	lib/sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	lib/sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aRegion	lib/sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	lib/sqlite3.c	/^  u8 *aRow;             \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aSalt	lib/sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	lib/sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	lib/sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aSegment	lib/sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	lib/sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	lib/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column.  May be NULL *\/$/;"	m	struct:KeyInfo	file:
aSortOrder	lib/sqlite3.c	/^  u8 *aSortOrder;  \/* Array of size Index.nColumn. True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aStat	lib/sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	lib/sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	lib/sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	lib/sqlite3.c	/^  sqlite3_stmt *aStmt[28];$/;"	m	struct:Fts3Table	file:
aSyscall	lib/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	lib/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	lib/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTempReg	lib/sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	lib/sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	lib/sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTree	lib/sqlite3.c	/^  int *aTree;                     \/* Current state of incremental merge *\/$/;"	m	struct:VdbeSorter	file:
aType	lib/sqlite3.c	/^  u32 *aType;           \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	lib/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	lib/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	lib/sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	lib/sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
absFunc	lib/sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accept_connection	lib/lua_network.c	/^static void accept_connection(lua_State * L, struct Socket * listener)$/;"	f	file:
accept_once	../framework/network.c	/^static int accept_once(struct network * net, struct conn * c)$/;"	f	file:
accessPayload	lib/sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	lib/sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
actions	lib/battlefield/bone.c	/^    struct Action * actions;$/;"	m	struct:Bone	typeref:struct:Bone::Action	file:
active	lib/fight_type.h	/^	int32_t active;$/;"	m	struct:tagCHARACTER_INFO
activeVdbeCnt	lib/sqlite3.c	/^  int activeVdbeCnt;            \/* Number of VDBEs currently executing *\/$/;"	m	struct:sqlite3	file:
active_list	../framework/network.c	/^	struct conn * active_list;$/;"	m	struct:network	typeref:struct:network::conn	file:
addAggInfoColumn	lib/sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	lib/sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	lib/sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	lib/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	lib/sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addRewardToRole	lib/battlefield/fight.c	/^static void addRewardToRole(struct WELLRNG512aGenerator * generator, struct role * role, PSTORY_FIGHT_REWARD_INFO rewardInfo, int pos, int reward_ratio)$/;"	f	file:
addStageEffect	lib/battlefield/battlefield_imp.c	/^void addStageEffect(struct battlefield * battle, const char * over, const char * under, float delay, float scale, int x, int y)$/;"	f
addToBlockedList	lib/sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	lib/sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	lib/sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	lib/sqlite3.c	/^static void addWhereTerm($/;"	f	file:
add_role_to_slot	lib/battlefield/battlefield.c	/^static int add_role_to_slot(struct battlefield * battle, struct role * role, int pos)$/;"	f	file:
addrBrk	lib/sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	lib/sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrFillSub	lib/sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	lib/sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	lib/sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon43::__anon44::InLoop	file:
addrNxt	lib/sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	lib/sqlite3.c	/^  int addrOpenEphm[3];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
adjustStats	lib/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affinity	lib/sqlite3.c	/^  char affinity;         \/* MakeRecord with this affinity for SRT_Set *\/$/;"	m	struct:Select	file:
affinity	lib/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	lib/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
affinity	lib/sqlite3.c	/^  u8 affinity;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
afpCheckReservedLock	lib/sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	lib/sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	lib/sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	lib/sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	lib/sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	lib/sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	lib/sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	lib/sqlite3.c	27516;"	d	file:
agCQ_attach	../framework/codequeue.c	/^struct codequeue * agCQ_attach(void * ptr)$/;"	f
agCQ_open	../framework/codequeue.c	/^struct codequeue * agCQ_open(void * ptr, size_t size)$/;"	f
agCQ_pop	../framework/codequeue.c	/^size_t agCQ_pop(struct codequeue * _queue, void * data, size_t len)$/;"	f
agCQ_push	../framework/codequeue.c	/^size_t agCQ_push(struct codequeue * _queue, const void * data, size_t len)$/;"	f
agCQ_pushf	../framework/codequeue.c	/^size_t agCQ_pushf(struct codequeue * queue, ...)$/;"	f
agCQ_pushv	../framework/codequeue.c	/^size_t agCQ_pushv(struct codequeue * _queue, va_list args)$/;"	f
agC_close	../framework/config.c	/^void agC_close()$/;"	f
agC_get	../framework/config.h	18;"	d
agC_get_integer	../framework/config.c	/^int agC_get_integer(const char * key, ...)$/;"	f
agC_get_l	../framework/config.c	/^xml_node_t * agC_get_l(const char * key, ...)$/;"	f
agC_get_server_id	../framework/config.c	/^int32_t agC_get_server_id()$/;"	f
agC_get_string	../framework/config.c	/^const char * agC_get_string(const char * key, ...)$/;"	f
agC_get_version	../framework/config.c	/^int32_t agC_get_version()$/;"	f
agC_open	../framework/config.c	/^int agC_open(const char * file)$/;"	f
agC_vget	../framework/config.c	/^xml_node_t * agC_vget(const char * key, va_list args)$/;"	f
agL_close	lib/lua_log.c	/^static void agL_close(struct logger * log)$/;"	f	file:
agL_flush	../framework/log.c	/^void agL_flush()$/;"	f
agL_flush	lib/lua_log.c	/^static void agL_flush(struct logger * log)$/;"	f	file:
agL_flush_user_logger	../framework/userlog.c	/^void agL_flush_user_logger(int type){$/;"	f
agL_open	../framework/log.c	/^int  agL_open (const char * filename, int level)$/;"	f
agL_open	lib/lua_log.c	/^static struct logger * agL_open(const char * filename, int level)$/;"	f	file:
agL_open_user_logger	../framework/userlog.c	/^int agL_open_user_logger(int type)$/;"	f
agL_set_level	../framework/log.c	/^int  agL_set_level(int level)$/;"	f
agL_set_user_logger_level	../framework/userlog.c	/^int agL_set_user_logger_level(int type, int level){$/;"	f
agL_write	../framework/log.c	/^int  agL_write(int level, const char * fmt, ...)$/;"	f
agL_write	lib/lua_log.c	/^static void agL_write(struct logger * log, int level, const char * fmt, ...)$/;"	f	file:
agL_write_user_logger	../framework/userlog.c	/^int agL_write_user_logger(int type, int level, const char * fmt, ...){$/;"	f
agN_attach	../framework/network.c	/^resid_t agN_attach(int fd, network_handler * handler, void * ctx)$/;"	f
agN_close	../framework/network.c	/^void agN_close(resid_t conn)$/;"	f
agN_connect	../framework/network.c	/^resid_t agN_connect(const char * host, short port, int timeout, network_handler * handler, void * ctx)$/;"	f
agN_detach	../framework/network.c	/^int agN_detach (struct network * net, resid_t conn)$/;"	f
agN_free	../framework/network.c	/^void agN_free()$/;"	f
agN_get_fd	../framework/network.c	/^int agN_get_fd(resid_t conn)$/;"	f
agN_init	../framework/network.c	/^int agN_init(size_t max)$/;"	f
agN_listen	../framework/network.c	/^resid_t agN_listen (const char * host, short port, int backlog, network_handler * handler, void * ctx)$/;"	f
agN_loop	../framework/network.c	/^int agN_loop()$/;"	f
agN_send	../framework/network.c	/^int agN_send(resid_t conn, const void * buff, int len)$/;"	f
agN_set_handler	../framework/network.c	/^int agN_set_handler(resid_t conn, network_handler * handler, void * ctx)$/;"	f
agN_set_tick	../framework/network.c	/^void    agN_set_tick(void (*cb)(void *), void * ctx)$/;"	f
agN_set_timer	../framework/network.c	/^void agN_set_timer(void (*cb)(time_t now, void *), void * ctx)$/;"	f
agN_stop	../framework/network.c	/^void agN_stop()$/;"	f
agN_writev	../framework/network.c	/^int agN_writev (resid_t conn, struct iovec *iov, int iovcnt)$/;"	f
agP_buffer	../framework/pipe.c	/^void * agP_buffer(struct pipe * p, size_t len)$/;"	f
agP_close	../framework/pipe.c	/^void agP_close(struct pipe * p)$/;"	f
agP_open	../framework/pipe.c	/^struct pipe * agP_open(size_t size)$/;"	f
agP_peek	../framework/pipe.c	/^const void * agP_peek(struct pipe * p, size_t len)$/;"	f
agP_read	../framework/pipe.c	/^const void * agP_read(struct pipe * p, size_t len)$/;"	f
agP_size	../framework/pipe.c	/^size_t agP_size(struct pipe * p)$/;"	f
agP_write	../framework/pipe.c	/^int agP_write(struct pipe * p, const void * data, size_t len)$/;"	f
agT_current	../framework/mtime.c	/^time_t agT_current()$/;"	f
agT_delay	../framework/mtime.c	/^int agT_delay(time_t t, void(*cb)(time_t, void*), void * data)$/;"	f
aggregate_context	lib/sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	lib/sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	lib/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon37	file:
aiColumn	lib/sqlite3.c	/^  int *aiColumn;   \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiFreelist	lib/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	lib/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	lib/sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	lib/sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	lib/sqlite3.c	/^  tRowcnt *aiRowEst; \/* Result of ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	lib/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	lib/sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	lib/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	lib/sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	lib/sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
alignRole	lib/battlefield/role.c	/^static void alignRole(struct role * role, struct role * target)$/;"	f	file:
allSpaces	lib/sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	lib/sqlite3.c	/^static void *allocSpace($/;"	f	file:
alloc_element	../framework/hash.c	/^static struct element * alloc_element()$/;"	f	file:
alloc_size	../framework/amf.c	/^			size_t alloc_size;$/;"	m	struct:amf_value::__anon58::__anon59	file:
allocateBtreePage	lib/sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	lib/sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	lib/sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	lib/sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	lib/sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
alloced	../framework/matrix.c	/^	size_t alloced;$/;"	m	struct:Matrix	file:
alloced	../framework/matrix.c	/^	size_t alloced;$/;"	m	struct:MatrixRow	file:
allowAgg	lib/sqlite3.c	/^  u8 allowAgg;         \/* Aggregate functions allowed here *\/$/;"	m	struct:NameContext	file:
allowedOp	lib/sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
amf_array	../framework/amf.h	/^	amf_array = 0x09,$/;"	e	enum:amf_type
amf_byte_array	../framework/amf.h	/^	amf_byte_array = 0x0C,$/;"	e	enum:amf_type
amf_date	../framework/amf.h	/^	amf_date = 0x08,$/;"	e	enum:amf_type
amf_decode_array	../framework/amf.c	/^size_t amf_decode_array(const char * data, size_t len, size_t * sz)$/;"	f
amf_decode_byte_array	../framework/amf.c	/^size_t amf_decode_byte_array(const char * data, size_t len, struct amf_slice * slice)$/;"	f
amf_decode_double	../framework/amf.c	/^size_t amf_decode_double(const char * data, size_t len, double * d)$/;"	f
amf_decode_false	../framework/amf.c	/^size_t amf_decode_false(const char * data, size_t dlen)$/;"	f
amf_decode_i29	../framework/amf.c	/^size_t amf_decode_i29(const char * data, size_t len, int32_t * v)$/;"	f
amf_decode_integer	../framework/amf.c	/^size_t amf_decode_integer(const char * data, size_t len, uint32_t * v)$/;"	f
amf_decode_null	../framework/amf.c	/^size_t amf_decode_null(const char * data, size_t dlen)$/;"	f
amf_decode_sinteger	../framework/amf.c	/^size_t amf_decode_sinteger(const char * data, size_t len, int32_t * v)$/;"	f
amf_decode_string	../framework/amf.c	/^size_t amf_decode_string(const char * data, size_t len, struct amf_slice * slice)$/;"	f
amf_decode_true	../framework/amf.c	/^size_t amf_decode_true(const char * data, size_t dlen)$/;"	f
amf_decode_u29	../framework/amf.c	/^size_t amf_decode_u29(const char * data, size_t len, uint32_t * v)$/;"	f
amf_decode_undefine	../framework/amf.c	/^size_t amf_decode_undefine(const char * data, size_t dlen)$/;"	f
amf_double	../framework/amf.h	/^	amf_double = 0x05,$/;"	e	enum:amf_type
amf_dump	../framework/amf.c	/^void amf_dump(const char * data, size_t len)$/;"	f
amf_dump_array	../framework/amf.c	/^size_t amf_dump_array(const char * data, size_t len, int deep)$/;"	f
amf_dump_double	../framework/amf.c	/^static size_t amf_dump_double(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_false	../framework/amf.c	/^static size_t amf_dump_false(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_integer	../framework/amf.c	/^static size_t amf_dump_integer(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_null	../framework/amf.c	/^static size_t amf_dump_null(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_r	../framework/amf.c	/^static size_t amf_dump_r(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_sinteger	../framework/amf.c	/^static size_t amf_dump_sinteger(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_string	../framework/amf.c	/^static size_t amf_dump_string(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_true	../framework/amf.c	/^static size_t amf_dump_true(const char * data, size_t len, int deep)$/;"	f	file:
amf_dump_undefine	../framework/amf.c	/^static size_t amf_dump_undefine(const char * data, size_t len, int deep)$/;"	f	file:
amf_encode	../framework/amf.c	/^size_t amf_encode(char * data, size_t dlen, amf_value * v)$/;"	f
amf_encode_array	../framework/amf.c	/^size_t amf_encode_array(char * data, size_t len, size_t size)$/;"	f
amf_encode_byte_array	../framework/amf.c	/^size_t amf_encode_byte_array(char * data, size_t len, const char * ptr, size_t sz)$/;"	f
amf_encode_double	../framework/amf.c	/^size_t amf_encode_double(char * data, size_t len, double d)$/;"	f
amf_encode_false	../framework/amf.c	/^size_t amf_encode_false(char * data, size_t dlen)$/;"	f
amf_encode_i29	../framework/amf.c	/^static size_t amf_encode_i29(char * data, size_t len, int32_t val)$/;"	f	file:
amf_encode_integer	../framework/amf.c	/^size_t amf_encode_integer(char * data, size_t len, uint32_t integer)$/;"	f
amf_encode_integer_with_type	../framework/amf.c	/^size_t amf_encode_integer_with_type(char * data, size_t len, uint32_t integer, enum amf_type type)$/;"	f
amf_encode_null	../framework/amf.c	/^size_t amf_encode_null(char * data, size_t dlen)$/;"	f
amf_encode_sinteger	../framework/amf.c	/^size_t amf_encode_sinteger(char * data, size_t len, int32_t integer)$/;"	f
amf_encode_string	../framework/amf.c	/^size_t amf_encode_string(char * data, size_t len,$/;"	f
amf_encode_true	../framework/amf.c	/^size_t amf_encode_true(char * data, size_t dlen)$/;"	f
amf_encode_u29	../framework/amf.c	/^static size_t amf_encode_u29(char * data, size_t len, uint32_t val)$/;"	f	file:
amf_encode_undefine	../framework/amf.c	/^size_t amf_encode_undefine(char * data, size_t dlen)$/;"	f
amf_false	../framework/amf.h	/^	amf_false = 0x02,$/;"	e	enum:amf_type
amf_free	../framework/amf.c	/^void amf_free(amf_value * v)$/;"	f
amf_get	../framework/amf.c	/^amf_value *  amf_get(amf_value * v, size_t pos)$/;"	f
amf_get_byte_array	../framework/amf.c	/^const char *  amf_get_byte_array(amf_value * v, size_t * len)$/;"	f
amf_get_double	../framework/amf.c	/^double amf_get_double(amf_value * v)$/;"	f
amf_get_encode_length	../framework/amf.c	/^size_t amf_get_encode_length(amf_value * v)$/;"	f
amf_get_integer	../framework/amf.c	/^uint32_t amf_get_integer(amf_value * v)$/;"	f
amf_get_length_array	../framework/amf.c	/^static size_t amf_get_length_array(size_t size)$/;"	f	file:
amf_get_length_byte_array	../framework/amf.c	/^static size_t amf_get_length_byte_array(size_t str_len)$/;"	f	file:
amf_get_length_double	../framework/amf.c	/^static size_t amf_get_length_double()$/;"	f	file:
amf_get_length_false	../framework/amf.c	/^static size_t amf_get_length_false()$/;"	f	file:
amf_get_length_i29	../framework/amf.c	/^static size_t amf_get_length_i29(int32_t val)$/;"	f	file:
amf_get_length_integer	../framework/amf.c	/^static size_t amf_get_length_integer(uint32_t integer)$/;"	f	file:
amf_get_length_null	../framework/amf.c	/^static size_t amf_get_length_null()$/;"	f	file:
amf_get_length_sinteger	../framework/amf.c	/^static size_t amf_get_length_sinteger(int32_t integer)$/;"	f	file:
amf_get_length_string	../framework/amf.c	/^static size_t amf_get_length_string(size_t str_len)$/;"	f	file:
amf_get_length_true	../framework/amf.c	/^static size_t amf_get_length_true()$/;"	f	file:
amf_get_length_u29	../framework/amf.c	/^static size_t amf_get_length_u29(uint32_t val)$/;"	f	file:
amf_get_length_undefine	../framework/amf.c	/^static size_t amf_get_length_undefine()$/;"	f	file:
amf_get_sinteger	../framework/amf.c	/^int32_t amf_get_sinteger(amf_value * v)$/;"	f
amf_get_string	../framework/amf.c	/^const char * amf_get_string(amf_value * v)$/;"	f
amf_integer	../framework/amf.h	/^	amf_integer = 0x04,$/;"	e	enum:amf_type
amf_new	../framework/amf.c	/^amf_value * amf_new()$/;"	f
amf_new_array	../framework/amf.c	/^amf_value * amf_new_array(size_t size)$/;"	f
amf_new_byte_array	../framework/amf.c	/^amf_value * amf_new_byte_array(const char * ptr, size_t size)$/;"	f
amf_new_double	../framework/amf.c	/^amf_value * amf_new_double(double d)$/;"	f
amf_new_false	../framework/amf.c	/^amf_value * amf_new_false()$/;"	f
amf_new_integer	../framework/amf.c	/^amf_value * amf_new_integer(uint32_t integer)$/;"	f
amf_new_null	../framework/amf.c	/^amf_value * amf_new_null()$/;"	f
amf_new_sinteger	../framework/amf.c	/^amf_value * amf_new_sinteger(int32_t integer)$/;"	f
amf_new_string	../framework/amf.c	/^amf_value * amf_new_string(const char * string, size_t size)$/;"	f
amf_new_true	../framework/amf.c	/^amf_value * amf_new_true()$/;"	f
amf_next_type	../framework/amf.c	/^enum amf_type amf_next_type(const char * data, size_t len)$/;"	f
amf_null	../framework/amf.h	/^	amf_null = 0x01,$/;"	e	enum:amf_type
amf_object	../framework/amf.h	/^	amf_object = 0x0A,$/;"	e	enum:amf_type
amf_push	../framework/amf.c	/^void amf_push(amf_value * a, amf_value * v)$/;"	f
amf_read	../framework/amf.c	/^amf_value * amf_read(const char * data, size_t dlen, size_t * plen)$/;"	f
amf_resize	../framework/amf.c	/^static void amf_resize(amf_value * a, size_t size)$/;"	f	file:
amf_set	../framework/amf.c	/^amf_value * amf_set(amf_value * a, size_t pos, amf_value * v)$/;"	f
amf_set_double	../framework/amf.c	/^void amf_set_double(amf_value * v, double d)$/;"	f
amf_set_integer	../framework/amf.c	/^void amf_set_integer(amf_value * v, uint32_t integer)$/;"	f
amf_set_null	../framework/amf.c	/^void amf_set_null(amf_value * v)$/;"	f
amf_set_sinteger	../framework/amf.c	/^void amf_set_sinteger(amf_value * v, int32_t integer)$/;"	f
amf_sinteger	../framework/amf.h	/^	amf_sinteger = 0x0D$/;"	e	enum:amf_type
amf_size	../framework/amf.c	/^size_t amf_size(amf_value * v)$/;"	f
amf_skip	../framework/amf.c	/^size_t amf_skip(const char * data, size_t len)$/;"	f
amf_slice	../framework/amf.h	/^struct amf_slice {$/;"	s
amf_string	../framework/amf.h	/^	amf_string = 0x06,$/;"	e	enum:amf_type
amf_true	../framework/amf.h	/^	amf_true = 0x03,$/;"	e	enum:amf_type
amf_type	../framework/amf.c	/^enum amf_type amf_type(amf_value * v)$/;"	f
amf_type	../framework/amf.h	/^enum amf_type {$/;"	g
amf_undefine	../framework/amf.h	/^	amf_undefine = 0x00,$/;"	e	enum:amf_type
amf_value	../framework/amf.c	/^struct amf_value {$/;"	s	file:
amf_value	../framework/amf.h	/^typedef struct amf_value amf_value;$/;"	t	typeref:struct:amf_value
amf_value_list	../framework/amf.c	/^static amf_value * amf_value_list = 0;$/;"	v	file:
amf_xml	../framework/amf.h	/^	amf_xml = 0x0B,$/;"	e	enum:amf_type
amf_xml_doc	../framework/amf.h	/^	amf_xml_doc = 0x07,$/;"	e	enum:amf_type
anOutput	lib/sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anRef	lib/sqlite3.c	/^  int *anRef;       \/* Number of times each page is referenced *\/$/;"	m	struct:IntegrityCk	file:
anStat	lib/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	lib/sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	lib/sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	lib/sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	lib/sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	lib/sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	lib/sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	lib/sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	lib/sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	lib/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apAux	lib/sqlite3.c	/^  } apAux[1];                   \/* One slot for each function argument *\/$/;"	m	struct:VdbeFunc	typeref:struct:VdbeFunc::AuxData	file:
apCsr	lib/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	lib/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	lib/sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	lib/sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	lib/sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	lib/sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apRegion	lib/sqlite3.c	/^  void **apRegion;           \/* Array of pointers to shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
apSegment	lib/sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	lib/sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon52	file:
apSub	lib/sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	lib/sqlite3.c	/^  Trigger *apTrigger[2];  \/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	lib/sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	lib/sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
appearance	lib/battlefield/battlefield.h	/^        struct Appearance appearance[2];$/;"	m	struct:battlefield::__anon14	typeref:struct:battlefield::__anon14::Appearance
appearance	lib/battlefield/role.h	/^	struct Appearance appearance;$/;"	m	struct:role	typeref:struct:role::Appearance
applyAffinity	lib/sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	lib/sqlite3.c	/^static void applyNumericAffinity(Mem *pRec){$/;"	f	file:
approx	lib/sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argvIndex	lib/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
argvIndex	lib/sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
array	../framework/array.c	/^struct array$/;"	s	file:
array_count	../framework/array.c	/^size_t array_count(struct array * a)$/;"	f
array_empty	../framework/array.c	/^int array_empty(struct array * a)$/;"	f
array_free	../framework/array.c	/^void array_free(struct array *a )$/;"	f
array_full	../framework/array.c	/^int array_full(struct array * a)$/;"	f
array_get	../framework/array.c	/^void * array_get(struct array * a, size_t i)$/;"	f
array_new	../framework/array.c	/^struct array * array_new(size_t s)$/;"	f
array_push	../framework/array.c	/^size_t array_push(struct array * a, void * p)$/;"	f
array_set	../framework/array.c	/^void * array_set(struct array * a, size_t i, void * p)$/;"	f
array_size	../framework/array.c	/^size_t array_size(struct array * a)$/;"	f
assemblePage	lib/sqlite3.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	lib/sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	lib/sqlite3.c	52992;"	d	file:
assertMutexHeld	lib/sqlite3.c	115521;"	d	file:
assertParentIndex	lib/sqlite3.c	53566;"	d	file:
assertTruncateConstraint	lib/sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	lib/sqlite3.c	42129;"	d	file:
assertTruncateConstraintCb	lib/sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	lib/sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atFirst	lib/sqlite3.c	/^  Bool atFirst;         \/* True if pointing to first entry *\/$/;"	m	struct:VdbeCursor	file:
atLast	lib/sqlite3.c	/^  u8 atLast;                \/* Cursor pointing to the last entry *\/$/;"	m	struct:BtCursor	file:
attach	lib/battlefield/buffer.h	/^    void (*attach) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
attachBackupObject	lib/sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	lib/sqlite3.c	/^static void attachFunc($/;"	f	file:
attack	lib/battlefield/buffer.h	/^    void (*attack) (struct buffer_effect * buffer, int attacker, struct role * target, struct bullet * bullet, int flag);$/;"	m	struct:buffer_effect_imp
attack	lib/battlefield/role.h	/^	} attack;$/;"	m	struct:role	typeref:struct:role::__anon26
attack	lib/fight_type.h	/^	int64_t attack;$/;"	m	struct:tagCHARACTER_INFO
attack	lib/lua_fight.c	/^	float attack;$/;"	m	struct:FightModification	file:
attack_speed	lib/fight_type.h	/^	int64_t attack_speed;$/;"	m	struct:tagCHARACTER_INFO
attack_status	lib/battlefield/role.c	/^static enum role_status attack_status(struct role * role)$/;"	f	file:
attacker	lib/lua_fight.c	/^	struct FightModification attacker;$/;"	m	struct:FightConfig	typeref:struct:FightConfig::FightModification	file:
autoCommit	lib/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	lib/sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	lib/sqlite3.c	89280;"	d	file:
autoIncStep	lib/sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	lib/sqlite3.c	89281;"	d	file:
autoIndex	lib/sqlite3.c	/^  u8 autoIndex;    \/* True if is automatically created (ex: by UNIQUE) *\/$/;"	m	struct:Index	file:
autoVacuum	lib/sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	lib/sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
autolockIoFinder	lib/sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	lib/sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgEq	lib/sqlite3.c	/^  tRowcnt avgEq;           \/* Average nEq value for key values not in aSample *\/$/;"	m	struct:Index	file:
avgFinalize	lib/sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	lib/sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	lib/sqlite3.c	/^  char **azColl;   \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	lib/sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	lib/sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	lib/sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	lib/sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	lib/sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	lib/sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
azVar	lib/sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	lib/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bConstraint	lib/sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	lib/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeferred	lib/sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	lib/sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	lib/sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	lib/sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bEnabled	lib/sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEof	lib/sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	lib/sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	lib/sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFreeList	lib/sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFts4	lib/sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFullMutex	lib/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHasDocsize	lib/sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	lib/sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists *\/$/;"	m	struct:Fts3Table	file:
bIncr	lib/sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bLocaltimeFault	lib/sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	lib/sqlite3.c	/^  int bLookup;                    \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bLookup	lib/sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bMalloced	lib/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	lib/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bOpenUri	lib/sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOwned	lib/sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	lib/sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bProcessLock	lib/sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	lib/sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	lib/sqlite3.c	/^  int bPurgeable;                     \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bReserved	lib/sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	lib/sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bStart	lib/sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	lib/sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	lib/sqlite3.c	/^  u8 bUnordered;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
backtrace	lib/sqlite3.c	15494;"	d	file:
backtrace_symbols_fd	lib/sqlite3.c	15495;"	d	file:
backupOnePage	lib/sqlite3.c	/^static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){$/;"	f	file:
backupTruncateFile	lib/sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	lib/sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	lib/sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	lib/sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	lib/sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	lib/sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	lib/sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	lib/sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	lib/sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	lib/sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
banner_id	lib/fight_type.h	/^	int32_t banner_id;$/;"	m	struct:tagKING_FIGHT_INFO
base	lib/sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	lib/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	lib/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	lib/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	lib/sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Rtree	file:
base	lib/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	lib/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	lib/sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:RtreeCursor	file:
basis_64	lib/lua_base64.c	/^static const char basis_64[] =$/;"	v	file:
battle	lib/battlefield/buffer.h	/^    struct battlefield * battle;$/;"	m	struct:buffer	typeref:struct:buffer::battlefield
battle	lib/battlefield/bullet.c	/^    struct battlefield * battle;$/;"	m	struct:bullet_record	typeref:struct:bullet_record::battlefield	file:
battle	lib/battlefield/bullet.h	/^	struct battlefield * battle;$/;"	m	struct:bullet	typeref:struct:bullet::battlefield
battle	lib/battlefield/role.h	/^    struct battlefield * battle;$/;"	m	struct:role	typeref:struct:role::battlefield
battle	lib/battlefield/skill.h	/^    struct battlefield * battle;$/;"	m	struct:skill	typeref:struct:skill::battlefield
battle	lib/battlefield/wave.h	/^    struct battlefield * battle;$/;"	m	struct:wave	typeref:struct:wave::battlefield
battle_id	lib/fight_type.h	/^	int32_t battle_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
battlefield	lib/battlefield/battlefield.h	/^struct battlefield $/;"	s
battlefield_10v10	lib/battlefield/fight.c	/^long long battlefield_10v10(PPVE_FIGHT_CONFIG config, PKING_FIGHT_INFO kings,$/;"	f
battlefield_add_bullet	lib/battlefield/battlefield.c	/^void battlefield_add_bullet(struct battlefield * battle, struct bullet * bullet)$/;"	f
battlefield_add_reward	lib/battlefield/battlefield.c	/^void battlefield_add_reward(struct battlefield * battle, int type, int id, int value, int flag)$/;"	f
battlefield_add_role	lib/battlefield/battlefield.c	/^int battlefield_add_role(struct battlefield * battle, struct role * role)$/;"	f
battlefield_add_wave	lib/battlefield/battlefield.c	/^void battlefield_add_wave(struct battlefield * battle, struct wave * wave)$/;"	f
battlefield_check	lib/battlefield/fight.c	/^int battlefield_check(char * buffer, size_t len, struct reward ** prewards, int * winner, int64_t left_hp[10], int32_t * time)$/;"	f
battlefield_check_result	lib/battlefield/encode.c	/^int battlefield_check_result(struct battlefield * battle, struct pbc_rmessage * msg)$/;"	f
battlefield_cleanup	lib/battlefield/fight.c	/^void battlefield_cleanup()$/;"	f
battlefield_decode	lib/battlefield/encode.c	/^int battlefield_decode(struct battlefield * battle, const char * buffer, size_t len)$/;"	f
battlefield_decode_operation	lib/battlefield/encode.c	/^struct pbc_rmessage *  battlefield_decode_operation(struct battlefield * battle, const char * buffer, size_t len)$/;"	f
battlefield_decode_result	lib/battlefield/encode.c	/^int battlefield_decode_result(const char * buffer, size_t len,              \/* IN *\/$/;"	f
battlefield_dump	lib/battlefield/battlefield.c	/^void battlefield_dump(struct battlefield * battle)$/;"	f
battlefield_encode	lib/battlefield/encode.c	/^int battlefield_encode(struct battlefield * battle, char * buffer, size_t len)$/;"	f
battlefield_encode_and_save	lib/battlefield/fight.c	/^static int battlefield_encode_and_save(struct battlefield * battle, char * buffer, size_t * len)$/;"	f	file:
battlefield_encode_result	lib/battlefield/encode.c	/^int battlefield_encode_result(struct battlefield * battle, char * buffer, size_t len)$/;"	f
battlefield_find_nearst_target	lib/battlefield/battlefield.c	/^struct role * battlefield_find_nearst_target(struct battlefield * battle, struct role * role, int range, int harm)$/;"	f
battlefield_find_target	lib/battlefield/battlefield.c	/^struct role * battlefield_find_target(struct battlefield * battle,$/;"	f
battlefield_find_target_far	lib/battlefield/battlefield.c	/^void battlefield_find_target_far(struct battlefield * battle,$/;"	f
battlefield_find_target_less_hp	lib/battlefield/battlefield.c	/^void battlefield_find_target_less_hp(struct battlefield * battle,$/;"	f
battlefield_find_target_more_hp	lib/battlefield/battlefield.c	/^void battlefield_find_target_more_hp(struct battlefield * battle,$/;"	f
battlefield_find_target_n	lib/battlefield/battlefield.c	/^void battlefield_find_target_n(struct battlefield * battle,$/;"	f
battlefield_find_target_near	lib/battlefield/battlefield.c	/^void battlefield_find_target_near(struct battlefield * battle,$/;"	f
battlefield_find_target_random	lib/battlefield/battlefield.c	/^void battlefield_find_target_random(struct battlefield * battle,$/;"	f
battlefield_finish	lib/battlefield/fight.c	/^int battlefield_finish(long long id, int isAutoKingSkill, struct reward ** prewards, int * winner, int64_t left_hp[10], int32_t * time)$/;"	f
battlefield_finish_immediate_n	lib/battlefield/fight.c	/^int battlefield_finish_immediate_n(PPVE_FIGHT_CONFIG config, int times,        \/* IN  *\/$/;"	f
battlefield_get_role	lib/battlefield/battlefield.c	/^struct role * battlefield_get_role(struct battlefield * battle, int id)$/;"	f
battlefield_get_scene_info	lib/battlefield/encode.c	/^int battlefield_get_scene_info(const char * buffer, size_t len, int * id, char * name)$/;"	f
battlefield_init	lib/battlefield/battlefield.c	/^void battlefield_init(struct battlefield * battle, int width, int seed)$/;"	f
battlefield_king_cancel_skill	lib/battlefield/battlefield.c	/^void battlefield_king_cancel_skill(struct battlefield * battle)$/;"	f
battlefield_king_cast_skill	lib/battlefield/battlefield.c	/^void battlefield_king_cast_skill(struct battlefield * battle, int n)$/;"	f
battlefield_king_get_cd	lib/battlefield/battlefield.c	/^int  battlefield_king_get_cd(struct battlefield * battle, int n)$/;"	f
battlefield_king_get_skill	lib/battlefield/battlefield.c	/^struct skill * battlefield_king_get_skill(struct battlefield * battle, int n)$/;"	f
battlefield_king_get_target	lib/battlefield/battlefield.c	/^int battlefield_king_get_target(struct battlefield * battle, int harm)$/;"	f
battlefield_king_opt_auto	lib/battlefield/battlefield.c	/^void battlefield_king_opt_auto  (struct battlefield * battle)$/;"	f
battlefield_king_opt_normal	lib/battlefield/battlefield.c	/^void battlefield_king_opt_normal(struct battlefield * battle)$/;"	f
battlefield_king_opt_push	lib/battlefield/battlefield.c	/^void battlefield_king_opt_push(struct battlefield * battle, int tick, int n , int target)$/;"	f
battlefield_king_set_skill	lib/battlefield/battlefield.c	/^void battlefield_king_set_skill(struct battlefield * battle, int skill1, int skill2, int skill3, int skill4)$/;"	f
battlefield_king_set_skill_v	lib/battlefield/battlefield.c	/^void battlefield_king_set_skill_v(struct battlefield * battle, int * skills, int n)$/;"	f
battlefield_king_set_target	lib/battlefield/battlefield.c	/^void battlefield_king_set_target(struct battlefield * battle, int id)$/;"	f
battlefield_left_time	lib/battlefield/battlefield.c	/^float battlefield_left_time(struct battlefield * battle)$/;"	f
battlefield_load	lib/battlefield/fight.c	/^ssize_t battlefield_load(long long id, char * buffer, size_t len)$/;"	f
battlefield_log	lib/battlefield/battlefield.c	/^void battlefield_log(struct battlefield * battle, const char * fmt, ...)$/;"	f
battlefield_next_role	lib/battlefield/battlefield.c	/^struct role * battlefield_next_role(struct battlefield * battle, struct role * role)$/;"	f
battlefield_pass	lib/battlefield/battlefield.c	/^int battlefield_pass(struct battlefield * battle)$/;"	f
battlefield_pause	lib/battlefield/battlefield.c	/^void battlefield_pause(struct battlefield * battle, int doStopAnimation)$/;"	f
battlefield_post_check	lib/battlefield/fight.c	/^int battlefield_post_check(const char * opt_buffer, size_t opt_buffer_len,                     \/* IN  *\/$/;"	f
battlefield_pre_check	lib/battlefield/fight.c	/^ssize_t battlefield_pre_check(char * opt_buffer, size_t opt_buffer_len,    \/* IN *\/$/;"	f
battlefield_prepare	lib/battlefield/fight.c	/^long long battlefield_prepare(PPVE_FIGHT_CONFIG config, PKING_FIGHT_INFO kings, PCHARACTER_INFO characters, PSTORY_FIGHT_REWARD_INFO reward, char * buffer, size_t * len)$/;"	f
battlefield_prepare_n	lib/battlefield/fight.c	/^long long battlefield_prepare_n(PPVE_FIGHT_CONFIG config, PKING_FIGHT_INFO kings, \/* IN *\/$/;"	f
battlefield_random_target	lib/battlefield/battlefield.c	/^struct role * battlefield_random_target(struct battlefield * battle, int force, int hint)$/;"	f
battlefield_release	lib/battlefield/battlefield.c	/^void battlefield_release(struct battlefield * battle)$/;"	f
battlefield_remove_bullet	lib/battlefield/battlefield.c	/^void battlefield_remove_bullet(struct battlefield * battle, struct bullet * bullet)$/;"	f
battlefield_remove_role	lib/battlefield/battlefield.c	/^void battlefield_remove_role(struct battlefield * battle, int id)$/;"	f
battlefield_remove_wave	lib/battlefield/battlefield.c	/^void battlefield_remove_wave(struct battlefield * battle, struct wave * wave)$/;"	f
battlefield_resume	lib/battlefield/battlefield.c	/^void battlefield_resume(struct battlefield * battle)$/;"	f
battlefield_run	lib/battlefield/fight.c	/^ssize_t battlefield_run(const char * fight_data, size_t fight_data_len,                \/* IN  *\/$/;"	f
battlefield_set_log_file_path	lib/battlefield/fight.c	/^void battlefield_set_log_file_path(const char * path)$/;"	f
battlefield_start	lib/battlefield/battlefield.c	/^void battlefield_start(struct battlefield * battle)$/;"	f
battlefield_stop	lib/battlefield/battlefield.c	/^static void battlefield_stop(struct battlefield * battle)$/;"	f	file:
battlefield_update	lib/battlefield/battlefield.c	/^int battlefield_update(struct battlefield * battle, float dt)$/;"	f
battlefield_width	lib/battlefield/battlefield.c	/^int battlefield_width(struct battlefield * battle)$/;"	f
battlefield_winner	lib/battlefield/battlefield.c	/^int battlefield_winner(struct battlefield * battle)$/;"	f
begin	../framework/codequeue.c	/^	size_t begin;$/;"	m	struct:codequeue	file:
bestAutomaticIndex	lib/sqlite3.c	/^static void bestAutomaticIndex($/;"	f	file:
bestAutomaticIndex	lib/sqlite3.c	104517;"	d	file:
bestBtreeIndex	lib/sqlite3.c	/^static void bestBtreeIndex($/;"	f	file:
bestIndex	lib/sqlite3.c	/^static void bestIndex($/;"	f	file:
bestOrClauseIndex	lib/sqlite3.c	/^static void bestOrClauseIndex($/;"	f	file:
bestVirtualIndex	lib/sqlite3.c	/^static void bestVirtualIndex($/;"	f	file:
bigEndCksum	lib/sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	lib/sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	lib/sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	lib/sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	lib/sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	lib/sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_double	lib/sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	lib/sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	lib/sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	lib/sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	lib/sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	lib/sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	lib/sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	lib/sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	lib/sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_value	lib/sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	lib/sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blobReadWrite	lib/sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	lib/sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	lib/sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	lib/sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	lib/sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	lib/sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	lib/sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	lib/sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	lib/battlefield/role.h	/^		} block;$/;"	m	struct:role::__anon29	typeref:struct:role::__anon29::__anon31
block	lib/battlefield/role.h	/^    } block;$/;"	m	struct:HitCompareValue	typeref:struct:HitCompareValue::__anon22
body	lib/battlefield/role.h	/^    } body;$/;"	m	struct:Appearance	typeref:struct:Appearance::__anon18
boneList	lib/battlefield/bone.c	/^static struct Bone * boneList = 0;$/;"	v	typeref:struct:Bone	file:
bone_system_cleanup	lib/battlefield/bone.c	/^void bone_system_cleanup()$/;"	f
bool	../framework/network.h	/^typedef int bool;$/;"	t
bottom	lib/battlefield/battlefield.h	/^	int bottom;$/;"	m	struct:KingFlag
btreeClearHasContent	lib/sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	lib/sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	lib/sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	lib/sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	lib/sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	lib/sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	lib/sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	lib/sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	lib/sqlite3.c	49049;"	d	file:
btreeInvokeBusyHandler	lib/sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeMask	lib/sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	lib/sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreePageFromDbPage	lib/sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	lib/sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	lib/sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	lib/sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	lib/sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeRestoreCursorPosition	lib/sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	lib/sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	lib/sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
buckets	../framework/hash.c	/^	element ** buckets;$/;"	m	struct:hash	file:
buckets	../framework/map.c	/^	struct map_element ** buckets;$/;"	m	struct:map	typeref:struct:map::map_element	file:
buckets	lib/map.c	/^	struct map_element ** buckets;$/;"	m	struct:map	typeref:struct:map::map_element	file:
buckets_size	../framework/hash.c	/^	unsigned int buckets_size;$/;"	m	struct:hash	file:
buckets_size	../framework/map.c	/^	size_t buckets_size;$/;"	m	struct:map	file:
buckets_size	lib/map.c	/^	size_t buckets_size;$/;"	m	struct:map	file:
buf	../framework/pipe.c	/^	struct buffer * buf;$/;"	m	struct:pipe	typeref:struct:pipe::buffer	file:
buff_cnt	lib/fight_type.h	/^	int32_t buff_cnt;$/;"	m	struct:tagCHARACTER_INFO
buff_id	lib/fight_type.h	/^	int32_t buff_id[YQ_MAX_BUFF_COUNT];	$/;"	m	struct:tagCHARACTER_INFO
buffer	../framework/amf.h	/^	void * buffer;$/;"	m	struct:amf_slice
buffer	../framework/buffer.c	/^struct buffer {$/;"	s	file:
buffer	../framework/md5.h	/^	uint8 buffer[64];$/;"	m	struct:__anon65
buffer	lib/battlefield/buffer.h	/^    struct buffer * buffer;$/;"	m	struct:buffer_effect	typeref:struct:buffer_effect::buffer
buffer	lib/battlefield/buffer.h	/^struct buffer$/;"	s
bufferList	lib/battlefield/bullet.h	/^	struct buffer * bufferList;$/;"	m	struct:bullet	typeref:struct:bullet::buffer
bufferList	lib/battlefield/role.h	/^	struct buffer * bufferList;$/;"	m	struct:role	typeref:struct:role::buffer
bufferScriptInit	lib/battlefield/buffer.c	/^static int bufferScriptInit(struct buffer * buffer, int value)$/;"	f	file:
buffer_add_effect	lib/battlefield/buffer.c	/^struct buffer_effect * buffer_add_effect(struct buffer * buffer, int id, int * values)$/;"	f
buffer_attach	lib/battlefield/buffer.c	/^void buffer_attach(struct buffer * buffer, int targetid)$/;"	f
buffer_cleanup	lib/battlefield/buffer.c	/^void buffer_cleanup(void * data)$/;"	f
buffer_clone	lib/battlefield/buffer.c	/^struct buffer * buffer_clone(struct buffer * buffer)$/;"	f
buffer_detach	lib/battlefield/buffer.c	/^void buffer_detach(struct buffer * buffer)$/;"	f
buffer_effect	lib/battlefield/buffer.h	/^struct buffer_effect {$/;"	s
buffer_effect_1	lib/battlefield/buffer_effect/buffer_effect_001.c	/^struct buffer_effect_imp buffer_effect_1 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_10	lib/battlefield/buffer_effect/buffer_effect_010.c	/^struct buffer_effect_imp buffer_effect_10 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_11	lib/battlefield/buffer_effect/buffer_effect_011.c	/^struct buffer_effect_imp buffer_effect_11 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_12	lib/battlefield/buffer_effect/buffer_effect_012.c	/^struct buffer_effect_imp buffer_effect_12 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_13	lib/battlefield/buffer_effect/buffer_effect_013.c	/^struct buffer_effect_imp buffer_effect_13 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_14	lib/battlefield/buffer_effect/buffer_effect_014.c	/^struct buffer_effect_imp buffer_effect_14 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_15	lib/battlefield/buffer_effect/buffer_effect_015.c	/^struct buffer_effect_imp buffer_effect_15 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_16	lib/battlefield/buffer_effect/buffer_effect_016.c	/^struct buffer_effect_imp buffer_effect_16 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_2	lib/battlefield/buffer_effect/buffer_effect_002.c	/^struct buffer_effect_imp buffer_effect_2 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_3	lib/battlefield/buffer_effect/buffer_effect_003.c	/^struct buffer_effect_imp buffer_effect_3 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_4	lib/battlefield/buffer_effect/buffer_effect_004.c	/^struct buffer_effect_imp buffer_effect_4 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_5	lib/battlefield/buffer_effect/buffer_effect_005.c	/^struct buffer_effect_imp buffer_effect_5 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_6	lib/battlefield/buffer_effect/buffer_effect_006.c	/^struct buffer_effect_imp buffer_effect_6 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_7	lib/battlefield/buffer_effect/buffer_effect_007.c	/^struct buffer_effect_imp buffer_effect_7 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_8	lib/battlefield/buffer_effect/buffer_effect_008.c	/^struct buffer_effect_imp buffer_effect_8 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_9	lib/battlefield/buffer_effect/buffer_effect_009.c	/^struct buffer_effect_imp buffer_effect_9 = {$/;"	v	typeref:struct:buffer_effect_imp
buffer_effect_imp	lib/battlefield/buffer.h	/^struct buffer_effect_imp$/;"	s
buffer_new	lib/battlefield/buffer.c	/^struct buffer * buffer_new(int id, struct battlefield * battle, int caster, int value)$/;"	f
buffer_release	lib/battlefield/buffer.c	/^void buffer_release(struct buffer * buffer)$/;"	f
buffer_system_cleanup	lib/battlefield/buffer.c	/^void buffer_system_cleanup()$/;"	f
buffer_table_ref	lib/battlefield/buffer.c	/^static int buffer_table_ref = LUA_REFNIL;$/;"	v	file:
buffer_update	lib/battlefield/buffer.c	/^void buffer_update(void * data)$/;"	f
buffers	lib/battlefield/role.h	/^    int buffers[5];$/;"	m	struct:role
build_file	../framework/mfile.c	/^static FILE * build_file(const char * fname)$/;"	f	file:
build_file	lib/mfile.c	/^static FILE * build_file(const char * fname)$/;"	f	file:
buller_attach	lib/battlefield/bullet.c	/^void buller_attach(struct bullet * bullet,$/;"	f
bullet	lib/battlefield/bullet.h	/^struct bullet {$/;"	s
bulletCreate	lib/battlefield/battlefield_imp.c	/^void bulletCreate(struct bullet * bullet, struct role * from)$/;"	f
bulletFire	lib/battlefield/battlefield_imp.c	/^void bulletFire(struct bullet * bullet, struct role * from, struct role * target, float delay, enum effect_position pos)$/;"	f
bulletList	lib/battlefield/battlefield.h	/^	struct bullet * bulletList;$/;"	m	struct:battlefield	typeref:struct:battlefield::bullet
bulletRecord	lib/battlefield/bullet.c	/^} bulletRecord[64] = {$/;"	v	typeref:struct:bullet_record	file:
bulletStart	lib/battlefield/battlefield_imp.c	/^void bulletStart(int id, struct role * attacker, struct role * target, float delay)$/;"	f
bullet_add_buffer	lib/battlefield/bullet.c	/^void bullet_add_buffer(struct bullet * bullet, struct buffer * buffer)$/;"	f
bullet_arrived	lib/battlefield/bullet.c	/^void bullet_arrived(void * data)$/;"	f
bullet_clone	lib/battlefield/bullet.c	/^struct bullet * bullet_clone(struct bullet * bullet)$/;"	f
bullet_index	lib/battlefield/bullet.c	/^static int bullet_index = 63;$/;"	v	file:
bullet_new	lib/battlefield/bullet.c	/^struct bullet * bullet_new(struct battlefield * battle,$/;"	f
bullet_record	lib/battlefield/bullet.c	/^static struct bullet_record {$/;"	s	file:
bullet_release	lib/battlefield/bullet.c	/^void bullet_release(struct bullet * bullet)$/;"	f
bullet_remove_buffer	lib/battlefield/bullet.c	/^void bullet_remove_buffer(struct bullet * bullet, struct buffer * buffer)$/;"	f
bullet_set_record	lib/battlefield/bullet.c	/^void bullet_set_record(struct bullet * bullet, int id)$/;"	f
bullet_type	lib/battlefield/bullet.h	/^enum bullet_type {$/;"	g
bullet_type_arrow	lib/battlefield/bullet.h	/^    bullet_type_arrow,$/;"	e	enum:bullet_type
bullet_type_fireball	lib/battlefield/bullet.h	/^    bullet_type_fireball,$/;"	e	enum:bullet_type
bullet_type_invisible	lib/battlefield/bullet.h	/^    bullet_type_invisible,$/;"	e	enum:bullet_type
bullet_type_lightning	lib/battlefield/bullet.h	/^    bullet_type_lightning,$/;"	e	enum:bullet_type
busy	lib/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	lib/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	lib/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	lib/sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	lib/sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
c	../framework/array.c	/^	size_t c;$/;"	m	struct:array	file:
cJSON	lib/battlefield/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	lib/battlefield/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	lib/battlefield/cJSON.h	132;"	d
cJSON_AddFalseToObject	lib/battlefield/cJSON.h	131;"	d
cJSON_AddItemReferenceToArray	lib/battlefield/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	lib/battlefield/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	lib/battlefield/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	lib/battlefield/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	lib/battlefield/cJSON.h	129;"	d
cJSON_AddNumberToObject	lib/battlefield/cJSON.h	133;"	d
cJSON_AddStringToObject	lib/battlefield/cJSON.h	134;"	d
cJSON_AddTrueToObject	lib/battlefield/cJSON.h	130;"	d
cJSON_Array	lib/battlefield/cJSON.h	37;"	d
cJSON_CreateArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	lib/battlefield/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	lib/battlefield/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	lib/battlefield/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	lib/battlefield/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	lib/battlefield/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	lib/battlefield/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	lib/battlefield/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	lib/battlefield/cJSON.h	32;"	d
cJSON_GetArrayItem	lib/battlefield/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	lib/battlefield/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	lib/battlefield/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	lib/battlefield/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	lib/battlefield/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	lib/battlefield/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	lib/battlefield/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_IsReference	lib/battlefield/cJSON.h	40;"	d
cJSON_Minify	lib/battlefield/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	lib/battlefield/cJSON.h	34;"	d
cJSON_New_Item	lib/battlefield/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	lib/battlefield/cJSON.h	35;"	d
cJSON_Object	lib/battlefield/cJSON.h	38;"	d
cJSON_Parse	lib/battlefield/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	lib/battlefield/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	lib/battlefield/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}$/;"	f
cJSON_PrintUnformatted	lib/battlefield/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}$/;"	f
cJSON_ReplaceItemInArray	lib/battlefield/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	lib/battlefield/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	lib/battlefield/cJSON.h	137;"	d
cJSON_String	lib/battlefield/cJSON.h	36;"	d
cJSON_True	lib/battlefield/cJSON.h	33;"	d
cJSON__h	lib/battlefield/cJSON.h	24;"	d
cJSON_free	lib/battlefield/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	lib/battlefield/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	lib/battlefield/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	lib/battlefield/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
cType	lib/sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	lib/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	lib/sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	lib/sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	lib/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedRowid	lib/sqlite3.c	/^  sqlite3_int64 cachedRowid; \/* Next rowid cache.  0 means not valid *\/$/;"	m	struct:BtCursor	file:
callCollNeeded	lib/sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	lib/sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callback	lib/lua_network.c	/^	int callback[SOCKET_CALLBACK_MAX];$/;"	m	struct:Socket	file:
can_yjdq	lib/fight_type.h	/^	int32_t can_yjdq;$/;"	m	struct:tagPVE_FIGHT_CONFIG
caster	lib/battlefield/buffer.h	/^    int caster;$/;"	m	struct:buffer
caster	lib/battlefield/bullet.c	/^    int caster;$/;"	m	struct:bullet_record	file:
caster	lib/battlefield/bullet.h	/^    int caster;$/;"	m	struct:bullet
caster	lib/battlefield/skill.h	/^    int caster;$/;"	m	struct:skill
caster	lib/battlefield/wave.h	/^    int caster;$/;"	m	struct:wave
casting	lib/battlefield/battlefield.h	/^        int casting;$/;"	m	struct:battlefield::__anon14
casting	lib/battlefield/role.h	/^        } casting;$/;"	m	struct:role::__anon26	typeref:struct:role::__anon26::__anon28
cb	../framework/network.c	/^		void (*cb)(time_t, void *);$/;"	m	struct:network::__anon66	file:
cb	../framework/network.c	/^		void (*cb)(void *);$/;"	m	struct:network::__anon67	file:
cb	lib/battlefield/event.c	/^    event_callback cb;$/;"	m	struct:eventListener	file:
cb	lib/battlefield/scheduler.c	/^	void (*cb)(void * data);$/;"	m	struct:timer	file:
cb	lib/lua_sqlite.c	/^int cb(void*data,int c,char** cp1,char** cp2)  \/* Callback function *\/$/;"	f
cd	lib/battlefield/skill.h	/^    int cd;$/;"	m	struct:skill
cd	lib/fight_type.h	/^	int32_t cd;$/;"	m	struct:tagPVE_FIGHT_INFO
cdateFunc	lib/sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	lib/sqlite3.c	/^static float cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	lib/sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	lib/sqlite3.c	/^static float cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	lib/sqlite3.c	/^static float cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	lib/sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	lib/sqlite3.c	/^static float cellOverlap($/;"	f	file:
cellOverlapEnlargement	lib/sqlite3.c	/^static float cellOverlapEnlargement($/;"	f	file:
cellSize	lib/sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	lib/sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	lib/sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cfile	../framework/config.c	/^char cfile[256] = {0};$/;"	v
chain	lib/sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	lib/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	lib/sqlite3.c	/^  u8 changeCntOn;         \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	lib/sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	lib/sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	lib/sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	lib/sqlite3.c	/^static void changes($/;"	f	file:
charMap	lib/sqlite3.c	111290;"	d	file:
charMap	lib/sqlite3.c	111293;"	d	file:
charset	lib/sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	lib/sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	lib/sqlite3.c	61512;"	d	file:
checkAppendMsg	lib/sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	lib/sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	lib/sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	lib/sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	lib/sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	lib/sqlite3.c	115566;"	d	file:
checkPage	lib/sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	lib/sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkRef	lib/sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){$/;"	f	file:
checkSavepointCount	lib/sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	lib/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	lib/sqlite3.c	/^static int checkTreePage($/;"	f	file:
check_connecting	../framework/network.c	/^static void check_connecting(struct network * net , struct conn * c)$/;"	f	file:
check_connecting	lib/lua_network.c	/^static void check_connecting(lua_State * L, struct Socket * socket)$/;"	f	file:
check_connection	lib/lua_network.c	/^static void check_connection(lua_State * L, struct Socket * socket, int events)$/;"	f	file:
check_path	../framework/base.c	/^static int check_path(const char * path) $/;"	f	file:
checkuserdata	lib/pbc-lua.c	/^checkuserdata(lua_State *L, int index) {$/;"	f	file:
child	../framework/amf.c	/^			amf_value ** child;$/;"	m	struct:amf_value::__anon58::__anon59	file:
child	../framework/xmlHelper.c	/^	xml_node_t * child;$/;"	m	struct:xml_node_t	file:
child	lib/battlefield/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	lib/xmlHelper.c	/^	xml_node_t * child;$/;"	m	struct:xml_node_t	file:
childPtrSize	lib/sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	lib/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	lib/sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	lib/sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	lib/sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
cleanClient	../framework/network.c	/^static void cleanClient(struct network * net)$/;"	f	file:
cleanupScript	lib/battlefield/script.c	/^static void cleanupScript(struct script * script)$/;"	f	file:
clearAllSharedCacheTableLocks	lib/sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	lib/sqlite3.c	49454;"	d	file:
clearCell	lib/sqlite3.c	/^static int clearCell(MemPage *pPage, unsigned char *pCell){$/;"	f	file:
clearDatabasePage	lib/sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	lib/sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	lib/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	lib/sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
client_header	../framework/package.h	/^struct client_header {$/;"	s
close	lib/sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	lib/sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	lib/sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	lib/sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_socket	lib/lua_network.c	/^static int close_socket(lua_State * L, struct Socket * socket)$/;"	f	file:
closing_list	../framework/network.c	/^	struct conn * closing_list;$/;"	m	struct:network	typeref:struct:network::conn	file:
closing_list	lib/lua_network.c	/^struct Socket * closing_list = 0;$/;"	v	typeref:struct:Socket
cmd	../framework/package.h	/^	uint32_t cmd;$/;"	m	struct:client_header
cmd	../framework/package.h	/^	uint32_t cmd;$/;"	m	struct:translate_header
cmp_func	../framework/hash.h	/^typedef int (*cmp_func)(void * key1, size_t len1, void * key2, size_t len2);$/;"	t
cmp_key	../framework/hash.c	/^	cmp_func  cmp_key;$/;"	m	struct:hash	file:
cnt	lib/sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	lib/sqlite3.c	/^  int cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
cnt	lib/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
codeAllEqualityTerms	lib/sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	lib/sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	lib/sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	lib/sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	lib/sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	lib/sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	lib/sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	lib/sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	lib/sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	lib/sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	lib/sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	lib/sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	lib/sqlite3.c	81309;"	d	file:
codeTriggerProgram	lib/sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
codequeue	../framework/codequeue.c	/^struct codequeue {$/;"	s	file:
colNamesSet	lib/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	lib/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	lib/sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	lib/sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	lib/sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	lib/sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	lib/sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	lib/sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	lib/sqlite3.c	/^static const void *columnName($/;"	f	file:
columnType	lib/sqlite3.c	/^static const char *columnType($/;"	f	file:
column_blob	lib/sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	lib/sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	lib/sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	lib/sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	lib/sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	lib/sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	lib/sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	lib/sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	lib/sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	lib/sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	lib/sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	lib/sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	lib/sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	lib/sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	lib/sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	lib/sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	lib/sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	lib/sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	lib/sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	lib/sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	lib/sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
commit_hook	lib/sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare	lib/battlefield/buffer.h	/^    struct HitCompareValue compare;$/;"	m	struct:buffer	typeref:struct:buffer::HitCompareValue
compare	lib/battlefield/bullet.h	/^    struct HitCompareValue compare;$/;"	m	struct:bullet	typeref:struct:bullet::HitCompareValue
compare	lib/battlefield/role.h	/^        struct HitCompareValue compare;$/;"	m	struct:role::__anon26	typeref:struct:role::__anon26::HitCompareValue
compare2pow63	lib/sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	lib/sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	lib/sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	lib/sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	lib/sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	lib/sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	lib/sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	lib/sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	lib/sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	lib/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	lib/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	lib/sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeYMD	lib/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	lib/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	lib/sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	lib/sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	lib/sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
conn	../framework/network.c	/^struct conn $/;"	s	file:
conn_handler	scripts/network.c	/^static struct network_handler conn_handler = {0};$/;"	v	typeref:struct:network_handler	file:
conn_set_event	../framework/network.c	/^static int conn_set_event(struct network * net, struct conn * c, unsigned int events)$/;"	f	file:
conn_status	../framework/network.c	/^enum conn_status {$/;"	g	file:
connect_to	../framework/base.c	/^int connect_to(const char * host, unsigned short port, int * done)$/;"	f
connect_to_unix	../framework/base.c	/^static int connect_to_unix(const char * path, int * done)$/;"	f	file:
constructAutomaticIndex	lib/sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	lib/sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	lib/sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCpPathToUtf8	lib/sqlite3.c	/^char *convertCpPathToUtf8( const char *in ){$/;"	f
convertUtf8Filename	lib/sqlite3.c	/^static void *convertUtf8Filename(const char *zFilename){$/;"	f	file:
convertUtf8PathToCp	lib/sqlite3.c	/^static char *convertUtf8PathToCp( const char *in ){$/;"	f	file:
cookieGoto	lib/sqlite3.c	/^  int cookieGoto;      \/* Address of OP_Goto to cookie verifier subroutine *\/$/;"	m	struct:Parse	file:
cookieMask	lib/sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	lib/sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	lib/sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	lib/sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	lib/sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	lib/sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
coroutine	modules/mlua.c	/^	lua_State * coroutine;$/;"	m	struct:Script	file:
corruptSchema	lib/sqlite3.c	/^static void corruptSchema($/;"	f	file:
cost_item_id	lib/fight_type.h	/^	int32_t cost_item_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
cost_item_type	lib/fight_type.h	/^	int32_t cost_item_type;$/;"	m	struct:tagPVE_FIGHT_CONFIG
cost_item_value	lib/fight_type.h	/^	int32_t cost_item_value;$/;"	m	struct:tagPVE_FIGHT_CONFIG
count	../framework/matrix.c	/^	size_t count;$/;"	m	struct:Matrix	file:
count	../framework/matrix.c	/^	size_t count;$/;"	m	struct:MatrixRow	file:
count	lib/battlefield/WELLRNG512a.h	/^	uint32_t count;$/;"	m	struct:WELLRNG512aGenerator
count	lib/battlefield/bullet.c	/^    int       count;$/;"	m	struct:bullet_record	file:
count	lib/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	lib/sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	lib/sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	lib/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	lib/sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	lib/sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countWriteCursors	lib/sqlite3.c	/^static int countWriteCursors(BtShared *pBt){$/;"	f	file:
count_per_day	lib/fight_type.h	/^	int32_t count_per_day;$/;"	m	struct:tagPVE_FIGHT_CONFIG
covered	lib/sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createCollation	lib/sqlite3.c	/^static int createCollation($/;"	f	file:
createFile	lib/sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	lib/sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	lib/sqlite3.c	/^static int createModule($/;"	f	file:
createRoleFromCharacter	lib/battlefield/fight.c	/^static struct role * createRoleFromCharacter(struct battlefield * battle, PCHARACTER_INFO character, int force, int pos)$/;"	f	file:
createTableStmt	lib/sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	lib/sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	lib/sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	lib/sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	lib/sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	lib/sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	lib/sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	lib/sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	lib/sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_reference	lib/battlefield/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
crit	lib/battlefield/battlefield.h	/^            int crit;$/;"	m	struct:battlefield::__anon12::__anon13
crit	lib/battlefield/role.h	/^		} crit;$/;"	m	struct:role::__anon29	typeref:struct:role::__anon29::__anon30
crit	lib/battlefield/role.h	/^    } crit;$/;"	m	struct:HitCompareValue	typeref:struct:HitCompareValue::__anon21
crit_hurt	lib/fight_type.h	/^	int64_t crit_hurt;$/;"	m	struct:tagCHARACTER_INFO
crit_immune_hurt	lib/fight_type.h	/^	int64_t crit_immune_hurt;$/;"	m	struct:tagCHARACTER_INFO
crit_immune_ratio	lib/fight_type.h	/^	int64_t crit_immune_ratio;$/;"	m	struct:tagCHARACTER_INFO
crit_ratio	lib/fight_type.h	/^	int64_t crit_ratio;$/;"	m	struct:tagCHARACTER_INFO
cs_closed	../framework/network.c	/^	cs_closed = 0,$/;"	e	enum:conn_status	file:
cs_closing	../framework/network.c	/^	cs_closing = 4,$/;"	e	enum:conn_status	file:
cs_connected	../framework/network.c	/^	cs_connected  = 3,$/;"	e	enum:conn_status	file:
cs_connected_wait_cb	../framework/network.c	/^	cs_connected_wait_cb = 5,$/;"	e	enum:conn_status	file:
cs_connecting	../framework/network.c	/^	cs_connecting = 2,$/;"	e	enum:conn_status	file:
cs_listening	../framework/network.c	/^	cs_listening = 1,$/;"	e	enum:conn_status	file:
csr	lib/sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	lib/sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	lib/sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	lib/sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	lib/sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
ctx	../framework/network.c	/^		void * ctx;$/;"	m	struct:network::__anon66	file:
ctx	../framework/network.c	/^		void * ctx;$/;"	m	struct:network::__anon67	file:
ctx	../framework/network.c	/^	void * ctx;$/;"	m	struct:conn	file:
ctx	lib/battlefield/event.c	/^	void * ctx;$/;"	m	struct:eventListener	file:
cur_ref	../framework/amf.c	/^static unsigned int cur_ref = 0;$/;"	v	file:
current	../framework/memory.c	/^	struct heap_page *current;$/;"	m	struct:heap	typeref:struct:heap::heap_page	file:
current	../framework/mtime.c	/^static time_t current = 0;$/;"	v	file:
current	lib/memory.c	/^	struct heap_page *current;$/;"	m	struct:heap	typeref:struct:heap::heap_page	file:
currentCount	lib/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	lib/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	lib/sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	lib/sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	lib/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
d	../framework/amf.c	/^		double d;$/;"	m	union:amf_value::__anon58	file:
data	../framework/buffer.c	/^	char * data;$/;"	m	struct:buffer	file:
data	../framework/dlist.h	/^    void * data;$/;"	m	struct:dlist_node
data	../framework/hash.c	/^	void * data;$/;"	m	struct:element	file:
data	../framework/hash.h	/^	void * data;$/;"	m	struct:hash_iterator
data	../framework/lrm.c	/^	char * data; \/\/[1];$/;"	m	struct:lrm	file:
data	lib/battlefield/dlist.h	/^    void * data;$/;"	m	struct:dlist_node
data	lib/battlefield/event.c	/^	void * data;$/;"	m	struct:event	file:
data	lib/battlefield/scheduler.c	/^	void * data;$/;"	m	struct:timer	file:
data	lib/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	lib/sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	lib/sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
dateFunc	lib/sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	lib/sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	lib/sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	lib/sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	lib/sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	lib/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	lib/sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	lib/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	lib/sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	lib/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	lib/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	lib/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	lib/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon45	file:
db	lib/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	lib/sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	lib/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	lib/sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	lib/sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	lib/sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOrigSize	lib/sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	lib/sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	lib/sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	lib/sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	lib/sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	lib/sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	lib/sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	lib/sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	lib/sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
dead	lib/battlefield/buffer.h	/^    void (*dead) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
debugMutexAlloc	lib/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	lib/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	lib/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	lib/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	lib/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	lib/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	lib/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	lib/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	lib/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	lib/sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	lib/sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeAppearance	lib/battlefield/encode.c	/^static void decodeAppearance(struct pbc_rmessage * msg, struct Appearance * appearance)$/;"	f	file:
decodeFlags	lib/sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeKingFlag	lib/battlefield/encode.c	/^static void decodeKingFlag(struct pbc_rmessage * msg, struct KingFlag * flag)$/;"	f	file:
decodeRole	lib/battlefield/encode.c	/^static void decodeRole(struct pbc_rmessage * msg, struct role * role)$/;"	f	file:
decode_bulk	lib/lua_redis.c	/^static void decode_bulk()$/;"	f	file:
decode_cb	lib/pbc-lua.c	/^decode_cb(void *ud, int type, const char * typename, union pbc_value *v, int id, const char *key) {$/;"	f	file:
decode_error_message_line	lib/lua_redis.c	/^static void decode_error_message_line()$/;"	f	file:
decode_integer_number	lib/lua_redis.c	/^static void decode_integer_number()$/;"	f	file:
decode_multi_bulk	lib/lua_redis.c	/^static void decode_multi_bulk()$/;"	f	file:
decode_single_line	lib/lua_redis.c	/^static void decode_single_line(const char * ptr, size_t len)$/;"	f	file:
default_cmp_key	../framework/hash.c	/^static int default_cmp_key(void *key1, size_t len1, void * key2, size_t len2)$/;"	f	file:
default_hash_key	../framework/hash.c	/^static unsigned int default_hash_key(void *key , size_t len)$/;"	f	file:
default_logger	../framework/log.c	/^static struct logger * default_logger = 0;$/;"	v	typeref:struct:logger	file:
defend	lib/fight_type.h	/^	int64_t defend;$/;"	m	struct:tagCHARACTER_INFO
defender	lib/lua_fight.c	/^	struct FightModification defender;$/;"	m	struct:FightConfig	typeref:struct:FightConfig::FightModification	file:
defense	lib/battlefield/role.h	/^    } defense;$/;"	m	struct:role	typeref:struct:role::__anon29
defense	lib/lua_fight.c	/^	float defense;$/;"	m	struct:FightModification	file:
deferredMoveto	lib/sqlite3.c	/^  Bool deferredMoveto;  \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	lib/sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
delay	lib/battlefield/bullet.h	/^    float delay;$/;"	m	struct:hit_effect
deleteCell	lib/sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	lib/sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
depend_fight0_id	lib/fight_type.h	/^	int32_t depend_fight0_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
depend_fight1_id	lib/fight_type.h	/^	int32_t depend_fight1_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
desc	lib/battlefield/skill.h	/^    const char * desc;$/;"	m	struct:skill
desc	lib/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
desc	lib/sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
descendToCell	lib/sqlite3.c	/^static int descendToCell($/;"	f	file:
deserializeGeometry	lib/sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	lib/sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	lib/sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detach	lib/battlefield/buffer.h	/^    void (*detach) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
detachFunc	lib/sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	lib/sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
dfltLockMode	lib/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	lib/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableTerm	lib/sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	lib/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	lib/sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	lib/sqlite3.c	42012;"	d	file:
disable_simulated_io_errors	lib/sqlite3.c	9030;"	d	file:
disallow	lib/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon48	file:
disparry_ratio	lib/fight_type.h	/^	int64_t disparry_ratio;$/;"	m	struct:tagCHARACTER_INFO
dispatching	lib/battlefield/event.c	/^static int dispatching = 0;$/;"	v	file:
display	lib/battlefield/bullet.h	/^    } display;$/;"	m	struct:bullet	typeref:struct:bullet::__anon36
display	lib/battlefield/wave.h	/^    char display[32];$/;"	m	struct:wave
displayP4	lib/sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
display_id	lib/fight_type.h	/^	int32_t display_id;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
display_info_id	lib/fight_type.h	/^		int32_t display_info_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG::__anon3
dlist_init	../framework/dlist.h	84;"	d
dlist_init	lib/battlefield/dlist.h	84;"	d
dlist_init_with	../framework/dlist.h	93;"	d
dlist_init_with	lib/battlefield/dlist.h	93;"	d
dlist_init_x	../framework/dlist.h	82;"	d
dlist_init_x	lib/battlefield/dlist.h	82;"	d
dlist_insert_after	../framework/dlist.h	86;"	d
dlist_insert_after	lib/battlefield/dlist.h	86;"	d
dlist_insert_after_with	../framework/dlist.h	99;"	d
dlist_insert_after_with	lib/battlefield/dlist.h	99;"	d
dlist_insert_after_x	../framework/dlist.h	25;"	d
dlist_insert_after_x	lib/battlefield/dlist.h	25;"	d
dlist_insert_before	../framework/dlist.h	85;"	d
dlist_insert_before	lib/battlefield/dlist.h	85;"	d
dlist_insert_before_with	../framework/dlist.h	96;"	d
dlist_insert_before_with	lib/battlefield/dlist.h	96;"	d
dlist_insert_before_x	../framework/dlist.h	16;"	d
dlist_insert_before_x	lib/battlefield/dlist.h	16;"	d
dlist_insert_head	../framework/dlist.h	87;"	d
dlist_insert_head	lib/battlefield/dlist.h	87;"	d
dlist_insert_head_with	../framework/dlist.h	102;"	d
dlist_insert_head_with	lib/battlefield/dlist.h	102;"	d
dlist_insert_head_x	../framework/dlist.h	35;"	d
dlist_insert_head_x	lib/battlefield/dlist.h	35;"	d
dlist_insert_tail	../framework/dlist.h	88;"	d
dlist_insert_tail	lib/battlefield/dlist.h	88;"	d
dlist_insert_tail_with	../framework/dlist.h	105;"	d
dlist_insert_tail_with	lib/battlefield/dlist.h	105;"	d
dlist_insert_tail_x	../framework/dlist.h	47;"	d
dlist_insert_tail_x	lib/battlefield/dlist.h	47;"	d
dlist_next	../framework/dlist.h	90;"	d
dlist_next	lib/battlefield/dlist.h	90;"	d
dlist_next_with	../framework/dlist.h	111;"	d
dlist_next_with	lib/battlefield/dlist.h	111;"	d
dlist_next_x	../framework/dlist.h	76;"	d
dlist_next_x	lib/battlefield/dlist.h	76;"	d
dlist_node	../framework/dlist.h	/^typedef struct dlist_node{$/;"	s
dlist_node	../framework/dlist.h	/^} dlist_node;$/;"	t	typeref:struct:dlist_node
dlist_node	lib/battlefield/dlist.h	/^typedef struct dlist_node{$/;"	s
dlist_node	lib/battlefield/dlist.h	/^} dlist_node;$/;"	t	typeref:struct:dlist_node
dlist_prev	../framework/dlist.h	91;"	d
dlist_prev	lib/battlefield/dlist.h	91;"	d
dlist_prev_with	../framework/dlist.h	114;"	d
dlist_prev_with	lib/battlefield/dlist.h	114;"	d
dlist_prev_x	../framework/dlist.h	79;"	d
dlist_prev_x	lib/battlefield/dlist.h	79;"	d
dlist_remove	../framework/dlist.h	89;"	d
dlist_remove	lib/battlefield/dlist.h	89;"	d
dlist_remove_with	../framework/dlist.h	108;"	d
dlist_remove_with	lib/battlefield/dlist.h	108;"	d
dlist_remove_x	../framework/dlist.h	57;"	d
dlist_remove_x	lib/battlefield/dlist.h	57;"	d
doNotSpill	lib/sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doNotSyncSpill	lib/sqlite3.c	/^  u8 doNotSyncSpill;          \/* Do not do a spill that requires jrnl sync *\/$/;"	m	struct:Pager	file:
doSqlite3Free	lib/sqlite3.c	/^static void doSqlite3Free(void *p){$/;"	f	file:
doWalCallbacks	lib/sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
do_close	../framework/network.c	/^static void do_close(struct network * net, struct conn * c)$/;"	f	file:
do_conn_error	../framework/network.c	/^static void do_conn_error(struct network * net, struct conn * c)$/;"	f	file:
do_conn_event	../framework/network.c	/^static void do_conn_event(struct network * net, struct conn * c, uint32_t event)$/;"	f	file:
do_conn_read	../framework/network.c	/^static void do_conn_read(struct network * net, struct conn * c)$/;"	f	file:
do_conn_write	../framework/network.c	/^static void do_conn_write(struct network * net, struct conn * c) $/;"	f	file:
doclist	lib/sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
done	lib/battlefield/battlefield.h	/^        } done;$/;"	m	struct:battlefield::__anon15	typeref:struct:battlefield::__anon15::__anon16
done	lib/sqlite3.c	/^    u8 done;               \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
dotlockCheckReservedLock	lib/sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	lib/sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	lib/sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	lib/sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	lib/sqlite3.c	7486;"	d	file:
double	lib/sqlite3.c	7827;"	d	file:
double	lib/sqlite3.c	813;"	d	file:
double	lib/sqlite3.h	263;"	d
double	lib/sqlite3.h	6936;"	d
doubleConsonant	lib/sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	lib/sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	lib/sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	lib/sqlite3.c	49455;"	d	file:
dropCell	lib/sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dumpLuaStack	scripts/network.c	/^static void dumpLuaStack(lua_State * L, const char * info)$/;"	f	file:
dumpMatrix	config/generate.lua	/^function dumpMatrix(matrix)$/;"	f
dumpMatrix	config/soldier/bak/soldier.lua	/^function dumpMatrix(matrix)$/;"	f
dump_amf	../framework/amf.c	/^void dump_amf(amf_value * v, FILE  * out)$/;"	f
dump_amf_x	../framework/amf.c	/^static void dump_amf_x(amf_value * v, int deep, FILE * out)$/;"	f	file:
dump_hash	../framework/hash.c	/^void dump_hash(struct hash * h, dump_val dv)$/;"	f
dump_val	../framework/hash.h	/^typedef void (*dump_val)(void * data);$/;"	t
dup8bytes	lib/sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	lib/sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	lib/sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	lib/sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
duration	lib/battlefield/buffer.h	/^    float duration;$/;"	m	struct:buffer
duration	lib/battlefield/bullet.h	/^    float duration;$/;"	m	struct:bullet
duration	lib/fight_type.h	/^	int32_t duration;$/;"	m	struct:tagPVE_FIGHT_CONFIG
e	lib/battlefield/event.c	/^	enum BattlefieldEventType e;$/;"	m	struct:event	typeref:enum:event::BattlefieldEventType	file:
eCoordType	lib/sqlite3.c	/^  int eCoordType;$/;"	m	struct:Rtree	file:
eDest	lib/sqlite3.c	/^  u8 eDest;         \/* How to dispose of the results *\/$/;"	m	struct:SelectDest	file:
eDistinct	lib/sqlite3.c	/^  u8 eDistinct;$/;"	m	struct:WhereInfo	file:
eEvalmode	lib/sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFileLock	lib/sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	lib/sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	lib/sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	lib/sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	lib/sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	lib/sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	lib/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eSearch	lib/sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	lib/sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	lib/sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTriggerOp	lib/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	lib/sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	lib/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	lib/sqlite3.c	/^  u8 eType;         \/* SQLITE_NULL, SQLITE_INTEGER ... etc. *\/$/;"	m	struct:IndexSample	file:
ebcdicToAscii	lib/sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
efd	../framework/network.c	/^	int efd;$/;"	m	struct:network	file:
effectNameFromID	lib/battlefield/buffer_effect/buffer_effect_014.c	/^static void effectNameFromID(int id, char * name)$/;"	f	file:
effect_position	lib/battlefield/bullet.h	/^enum effect_position$/;"	g
effect_position_body	lib/battlefield/bullet.h	/^	effect_position_body,$/;"	e	enum:effect_position
effect_position_foot	lib/battlefield/bullet.h	/^	effect_position_foot,$/;"	e	enum:effect_position
effect_position_head	lib/battlefield/bullet.h	/^	effect_position_head,$/;"	e	enum:effect_position
effects	lib/battlefield/buffer.h	/^    } effects;$/;"	m	struct:buffer	typeref:struct:buffer::__anon35
element	../framework/hash.c	/^typedef struct element {$/;"	s	file:
element	../framework/hash.c	/^} element;$/;"	t	typeref:struct:element	file:
enable_shared_cache	lib/sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	lib/sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	lib/sqlite3.c	42013;"	d	file:
enable_simulated_io_errors	lib/sqlite3.c	9031;"	d	file:
enc	lib/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	lib/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	lib/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	lib/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
encodeAppearance	lib/battlefield/encode.c	/^static void encodeAppearance(struct pbc_wmessage * msg, struct Appearance * appearance)$/;"	f	file:
encodeKingFlag	lib/battlefield/encode.c	/^static void encodeKingFlag(struct pbc_wmessage * msg, struct KingFlag * flag)$/;"	f	file:
encodeReward	lib/battlefield/encode.c	/^static void encodeReward(struct pbc_wmessage * msg, struct reward * reward)$/;"	f	file:
encodeRole	lib/battlefield/encode.c	/^static void encodeRole(struct pbc_wmessage * msg, struct role * role)$/;"	f	file:
encodeRoleResult	lib/battlefield/encode.c	/^static void encodeRoleResult(struct pbc_wmessage * msg, struct role * role)$/;"	f	file:
encodeValue	lib/lua_AMF.c	/^static size_t encodeValue(lua_State * L, int index, char * buff, size_t len)$/;"	f	file:
encodeValueToAMF	lib/lua_AMF.c	/^static amf_value * encodeValueToAMF(lua_State * L, int index)$/;"	f	file:
encode_system_cleanup	lib/battlefield/encode.c	/^void encode_system_cleanup()$/;"	f
end	../framework/codequeue.c	/^	size_t end;$/;"	m	struct:codequeue	file:
end	lib/battlefield/jsmn.h	/^	int end;$/;"	m	struct:__anon8
endpoint	lib/sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
endsWithNL	lib/sqlite3.c	/^static int endsWithNL(Explain *p){$/;"	f	file:
enterMutex	lib/sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
env	lib/battlefield/buffer.h	/^    int env;$/;"	m	struct:buffer
ep	lib/battlefield/cJSON.c	/^static const char *ep;$/;"	v	file:
epoll_fd	lib/lua_network.c	/^static int epoll_fd = -1;$/;"	v	file:
errCode	lib/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	lib/sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errMask	lib/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	lib/sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	lib/sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	lib/sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	lib/sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	lib/sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	lib/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
estLog	lib/sqlite3.c	/^static double estLog(double N){$/;"	f	file:
estimatedCost	lib/sqlite3.c	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedCost	lib/sqlite3.h	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
etBUFSIZE	lib/sqlite3.c	19522;"	d	file:
etByte	lib/sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	lib/sqlite3.c	19394;"	d	file:
etDYNSTRING	lib/sqlite3.c	19392;"	d	file:
etEXP	lib/sqlite3.c	19388;"	d	file:
etFLOAT	lib/sqlite3.c	19387;"	d	file:
etGENERIC	lib/sqlite3.c	19389;"	d	file:
etINVALID	lib/sqlite3.c	19405;"	d	file:
etORDINAL	lib/sqlite3.c	19403;"	d	file:
etPERCENT	lib/sqlite3.c	19393;"	d	file:
etPOINTER	lib/sqlite3.c	19401;"	d	file:
etRADIX	lib/sqlite3.c	19386;"	d	file:
etSIZE	lib/sqlite3.c	19390;"	d	file:
etSQLESCAPE	lib/sqlite3.c	19396;"	d	file:
etSQLESCAPE2	lib/sqlite3.c	19397;"	d	file:
etSQLESCAPE3	lib/sqlite3.c	19402;"	d	file:
etSRCLIST	lib/sqlite3.c	19400;"	d	file:
etSTRING	lib/sqlite3.c	19391;"	d	file:
etTOKEN	lib/sqlite3.c	19399;"	d	file:
et_getdigit	lib/sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	lib/sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	lib/sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evalConstExpr	lib/sqlite3.c	/^static int evalConstExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
event	lib/battlefield/event.c	/^struct event $/;"	s	file:
eventListener	lib/battlefield/event.c	/^struct eventListener$/;"	s	file:
event_callback	lib/battlefield/event.h	/^typedef void (*event_callback)(enum BattlefieldEventType event, int v1, int v2, void * data, void * ctx);$/;"	t
event_dispatch	lib/battlefield/event.c	/^void event_dispatch(enum BattlefieldEventType eventID, int v1, int v2, void * data)$/;"	f
event_register	lib/battlefield/event.c	/^void event_register(enum BattlefieldEventType event, event_callback cb, void * ctx)$/;"	f
event_unregister	lib/battlefield/event.c	/^void event_unregister(enum BattlefieldEventType event, event_callback cb, void * ctx)$/;"	f
events	../framework/network.c	/^	unsigned int events;$/;"	m	struct:conn	file:
events	lib/battlefield/event.c	/^} events = {0, 0};$/;"	v	typeref:struct:__anon4	file:
exclMask	lib/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	lib/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	lib/sqlite3.c	/^  u32 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:os2ShmLink	file:
exclMask	lib/sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	lib/sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	lib/sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	lib/sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	lib/sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	lib/sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expensive_assert	lib/sqlite3.c	36262;"	d	file:
expensive_assert	lib/sqlite3.c	36264;"	d	file:
expired	lib/sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	lib/sqlite3.c	/^  u8 expired;             \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
explain	lib/sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explain	lib/sqlite3.c	/^  u8 explain;             \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explainAppendTerm	lib/sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	lib/sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	lib/sqlite3.c	95370;"	d	file:
explainIndexRange	lib/sqlite3.c	/^static char *explainIndexRange(sqlite3 *db, WhereLevel *pLevel, Table *pTab){$/;"	f	file:
explainOneScan	lib/sqlite3.c	/^static void explainOneScan($/;"	f	file:
explainOneScan	lib/sqlite3.c	106325;"	d	file:
explainOneSelect	lib/sqlite3.c	/^static void explainOneSelect(Vdbe *pVdbe, Select *p){$/;"	f	file:
explainSetInteger	lib/sqlite3.c	95328;"	d	file:
explainSetInteger	lib/sqlite3.c	95333;"	d	file:
explainSimpleCount	lib/sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	lib/sqlite3.c	98198;"	d	file:
explainTempTable	lib/sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	lib/sqlite3.c	95332;"	d	file:
expmask	lib/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAnalyze	lib/sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	lib/sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	lib/sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	lib/sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	lib/sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	lib/sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	lib/sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	lib/sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	lib/sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprSelectTableUsage	lib/sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	lib/sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	lib/sqlite3.c	74746;"	d	file:
exprStructSize	lib/sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableUsage	lib/sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToString	lib/sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	lib/sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	lib/sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	lib/sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	lib/sqlite3.c	/^  float f;$/;"	m	union:RtreeCoord	file:
farValue	lib/battlefield/battlefield.c	/^static int farValue(struct role * role, void * data)$/;"	f	file:
fcntlSizeHint	lib/sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	../framework/network.c	/^	int fd;$/;"	m	struct:conn	file:
fd	lib/lua_network.c	/^	int fd;$/;"	m	struct:Socket	file:
fd	lib/sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	lib/sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	lib/sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	lib/sqlite3.c	28213;"	d	file:
fetchPayload	lib/sqlite3.c	/^static const unsigned char *fetchPayload($/;"	f	file:
field	../framework/matrix.c	/^	MatrixField ** field;$/;"	m	struct:MatrixRow	file:
field_of_view	lib/fight_type.h	/^	int64_t field_of_view;$/;"	m	struct:tagCHARACTER_INFO
fight_buffer	lib/fight_type.h	/^	char fight_buffer[YQ_FIGHT_BUFFER_MAX_SIZE];$/;"	m	struct:tagPVE_FIGHT_INFO
fight_buffer_len	lib/fight_type.h	/^	size_t fight_buffer_len;$/;"	m	struct:tagPVE_FIGHT_INFO
fight_id	lib/fight_type.h	/^	int32_t fight_id;$/;"	m	struct:tagPVE_FIGHT_INFO
fight_info_id	lib/fight_type.h	/^		int32_t fight_info_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG::__anon3
fight_record_id	lib/fight_type.h	/^	int64_t fight_record_id;$/;"	m	struct:tagPVE_FIGHT_INFO
file	../framework/log.c	/^	FILE * file;$/;"	m	struct:logger	file:
file	lib/battlefield/record.c	/^static FILE * file = 0;$/;"	v	file:
file	lib/lua_log.c	/^	FILE * file;$/;"	m	struct:logger	file:
file	modules/mlua.c	/^	char file[256];$/;"	m	struct:Script	file:
fileId	lib/sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
fileIdx	lib/battlefield/fight.c	/^static uint64_t fileIdx = 0;$/;"	v	file:
file_control	lib/sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	lib/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	lib/sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	lib/sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
fillKingInfo	lib/battlefield/fight.c	/^static void fillKingInfo(struct battlefield * battle, PKING_FIGHT_INFO king, int force)$/;"	f	file:
fillSkillInfo	lib/battlefield/battlefield_imp.c	/^void fillSkillInfo(struct battlefield * battle, struct skill * skill)$/;"	f
filter	lib/battlefield/buffer.h	/^    void (*filter) (struct buffer_effect * buffer, struct bullet * bullet);$/;"	m	struct:buffer_effect_imp
filter	lib/sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalize	lib/sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	lib/sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	lib/sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	lib/sqlite3.c	50223;"	d	file:
findCellv2	lib/sqlite3.c	50225;"	d	file:
findCollSeqEntry	lib/sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	lib/sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementGivenHash	lib/sqlite3.c	/^static HashElem *findElementGivenHash($/;"	f	file:
findIndexCol	lib/sqlite3.c	/^static int findIndexCol($/;"	f	file:
findInodeInfo	lib/sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	lib/sqlite3.c	/^static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){$/;"	f	file:
findNextHostParameter	lib/sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	lib/sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	lib/sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findTerm	lib/sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
find_element	../framework/hash.c	/^static struct element * find_element(struct hash * h, int index,$/;"	f	file:
finder_type	lib/sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
finish_connecting	../framework/network.c	/^static void finish_connecting(struct network * net, struct conn * c) $/;"	f	file:
first	lib/sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	lib/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
firstByteMark	lib/battlefield/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
fixBoundingBox	lib/sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	lib/sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fix_hurt	lib/fight_type.h	/^	int64_t fix_hurt;$/;"	m	struct:tagCHARACTER_INFO
fix_reduce_hurt	lib/fight_type.h	/^	int64_t fix_reduce_hurt;$/;"	m	struct:tagCHARACTER_INFO
fkActionTrigger	lib/sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkLookupParent	lib/sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkScanChildren	lib/sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	lib/sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	lib/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flag	../framework/package.h	/^	uint32_t flag;$/;"	m	struct:client_header
flag	../framework/package.h	/^	uint32_t flag;$/;"	m	struct:translate_header
flag	lib/battlefield/battlefield.h	/^	int flag;$/;"	m	struct:reward
flag	lib/battlefield/battlefield.h	/^	unsigned int flag;$/;"	m	struct:battlefield
flag	lib/battlefield/buffer.h	/^    int flag;$/;"	m	struct:buffer
flag	lib/battlefield/bullet.h	/^	int flag;$/;"	m	struct:bullet
flag	lib/battlefield/role.h	/^	int flag;$/;"	m	struct:Appearance
flag	lib/battlefield/role.h	/^    int flag;$/;"	m	struct:role
flag	lib/battlefield/skill.h	/^    int flag;$/;"	m	struct:skill
flag	lib/fight_type.h	/^	int32_t flag;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
flag	lib/fight_type.h	/^	int32_t flag;$/;"	m	struct:tagPVE_FIGHT_CONFIG
flagPragma	lib/sqlite3.c	/^static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){$/;"	f	file:
flag_skin_id	lib/fight_type.h	/^	int32_t flag_skin_id;$/;"	m	struct:tagCHARACTER_INFO
flag_skin_id	lib/fight_type.h	/^	int32_t flag_skin_id;$/;"	m	struct:tagKING_FIGHT_INFO
flags	lib/battlefield/battlefield.h	/^		struct KingFlag   flags[6];$/;"	m	struct:battlefield::__anon14	typeref:struct:battlefield::__anon14::KingFlag
flags	lib/sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	lib/sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	lib/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	lib/sqlite3.c	/^  int flags;                \/* Flags provided to os2Open() *\/$/;"	m	struct:os2File	file:
flags	lib/sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	lib/sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	lib/sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	lib/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	lib/sqlite3.c	/^  u16 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	lib/sqlite3.c	/^  u16 flags;           \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
flags	lib/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	lib/sqlite3.c	/^  u8 flags;            \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
flags	lib/sqlite3.c	/^  u8 flags;           \/* Boolean settings.  UNPACKED_... below *\/$/;"	m	struct:UnpackedRecord	file:
flags2	lib/sqlite3.c	/^  u8 flags2;             \/* Second set of flags.  EP2_... *\/$/;"	m	struct:Expr	file:
flattenSubquery	lib/sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	lib/sqlite3.c	7828;"	d	file:
floatSwap	lib/sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	lib/sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	lib/sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	lib/sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	lib/sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	lib/sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	lib/sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
fname	lib/lua_log.c	/^	char   fname[256];$/;"	m	struct:logger	file:
force	lib/battlefield/role.h	/^    int force;$/;"	m	struct:role
force	lib/battlefield/wave.h	/^    int force;$/;"	m	struct:wave
force_level	lib/fight_type.h	/^	int32_t force_level;$/;"	m	struct:tagPVE_FIGHT_INFO
foreachChildNodeWithName	../framework/xmlHelper.c	/^int foreachChildNodeWithName(xml_node_t * node, const char * name, int (*cb)(xml_node_t *, void *), void *data)$/;"	f
foreachChildNodeWithName	lib/xmlHelper.c	/^int foreachChildNodeWithName(xml_node_t * node, const char * name, int (*cb)(xml_node_t *, void *), void *data)$/;"	f
fp	../framework/xmlHelper.c	/^	FILE * fp;$/;"	m	struct:xml_doc_t	file:
fp	lib/xmlHelper.c	/^	FILE * fp;$/;"	m	struct:xml_doc_t	file:
free	lib/sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	lib/sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	lib/sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeEvent	lib/battlefield/event.c	/^void freeEvent(struct event * event)$/;"	f
freeIndex	lib/sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeListener	lib/battlefield/event.c	/^void freeListener(struct eventListener * listener)$/;"	f
freeNode	../framework/xmlHelper.c	/^static void freeNode(xml_node_t * node)$/;"	f	file:
freeNode	lib/xmlHelper.c	/^static void freeNode(xml_node_t * node)$/;"	f	file:
freeP4	lib/sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	lib/sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	lib/sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	lib/sqlite3.c	/^static int freeSpace(MemPage *pPage, int start, int size){$/;"	f	file:
freeTempSpace	lib/sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
freeUconvObjects	lib/sqlite3.c	/^static void freeUconvObjects( void ){$/;"	f	file:
free_closing_list	lib/lua_network.c	/^static void free_closing_list(lua_State * L)$/;"	f	file:
free_element	../framework/hash.c	/^static void free_element(struct element * e)$/;"	f	file:
free_element_list	../framework/hash.c	/^static element * free_element_list = 0;$/;"	v	file:
free_fn	lib/battlefield/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_record	../framework/memory.c	/^static void free_record()$/;"	f	file:
free_record	lib/memory.c	/^static void free_record()$/;"	f	file:
free_socket	lib/lua_network.c	/^static void free_socket(lua_State * L, struct Socket * socket)$/;"	f	file:
free_table	lib/sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
freezeCount	lib/battlefield/role.h	/^	int freezeCount;$/;"	m	struct:role
from	lib/battlefield/wave.h	/^    int from;$/;"	m	struct:wave
fsFlags	lib/sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	lib/sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3Appendf	lib/sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	lib/sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	lib/sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	lib/sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	lib/sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	lib/sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3CloseMethod	lib/sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	lib/sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	lib/sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	lib/sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	lib/sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	lib/sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	lib/sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	lib/sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	lib/sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	lib/sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	lib/sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	lib/sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	lib/sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:
fts3DatabasePageSize	lib/sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	lib/sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	lib/sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	lib/sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	lib/sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	lib/sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	lib/sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteTerms	lib/sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	lib/sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	lib/sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoOptimize	lib/sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	lib/sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DoclistCountDocids	lib/sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	lib/sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	lib/sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	lib/sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	lib/sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	lib/sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	lib/sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	lib/sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalGatherStats	lib/sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalInvalidatePoslist	lib/sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	lib/sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	lib/sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	lib/sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	lib/sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	lib/sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	lib/sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	lib/sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	lib/sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	lib/sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	lib/sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	lib/sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	lib/sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestDeferredAndNear	lib/sqlite3.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalTestExpr	lib/sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	lib/sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	lib/sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprGlobalHitsCb	lib/sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	lib/sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	lib/sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	lib/sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	lib/sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	lib/sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	lib/sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprPhraseCount	lib/sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	lib/sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	lib/sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	lib/sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	lib/sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	lib/sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	lib/sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FunctionArg	lib/sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	lib/sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	lib/sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	lib/sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	lib/sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	lib/sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GobbleInt	lib/sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	lib/sqlite3.c	116406;"	d	file:
fts3HashCount	lib/sqlite3.c	116430;"	d	file:
fts3HashData	lib/sqlite3.c	116423;"	d	file:
fts3HashFind	lib/sqlite3.c	116405;"	d	file:
fts3HashFindElem	lib/sqlite3.c	116407;"	d	file:
fts3HashFirst	lib/sqlite3.c	116421;"	d	file:
fts3HashFree	lib/sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	lib/sqlite3.c	116403;"	d	file:
fts3HashInsert	lib/sqlite3.c	116404;"	d	file:
fts3HashInsertElement	lib/sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	lib/sqlite3.c	116424;"	d	file:
fts3HashKeysize	lib/sqlite3.c	116425;"	d	file:
fts3HashMalloc	lib/sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	lib/sqlite3.c	116422;"	d	file:
fts3InitVtab	lib/sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	lib/sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	lib/sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	lib/sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IsEmpty	lib/sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	lib/sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	lib/sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3MallocZero	lib/sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	lib/sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	lib/sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	lib/sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	lib/sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	lib/sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	lib/sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	lib/sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	lib/sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	lib/sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	lib/sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	lib/sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	lib/sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	lib/sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	lib/sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	lib/sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	lib/sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	lib/sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	lib/sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	lib/sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	lib/sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	lib/sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	lib/sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	lib/sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	lib/sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	lib/sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	lib/sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	lib/sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	lib/sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PutColNumber	lib/sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	lib/sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	lib/sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	lib/sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadExprList	lib/sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	lib/sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	lib/sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	lib/sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	lib/sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	lib/sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RenameMethod	lib/sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3ReversePoslist	lib/sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	lib/sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	lib/sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	lib/sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	lib/sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	lib/sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	lib/sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	lib/sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	lib/sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	lib/sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	lib/sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	lib/sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	lib/sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	lib/sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	lib/sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	lib/sqlite3.c	125203;"	d	file:
fts3SegReaderIsRootOnly	lib/sqlite3.c	125204;"	d	file:
fts3SegReaderNext	lib/sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	lib/sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	lib/sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	lib/sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	lib/sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	lib/sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	lib/sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	lib/sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	lib/sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	lib/sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentMaxLevel	lib/sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	lib/sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	lib/sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	lib/sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SnippetAdvance	lib/sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	lib/sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	lib/sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	lib/sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	lib/sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	lib/sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	lib/sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	lib/sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	lib/sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	lib/sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StrCompare	lib/sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	lib/sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	lib/sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	lib/sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermSegReaderCursor	lib/sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	lib/sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	lib/sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	lib/sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TreeFinishNode	lib/sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3UpdateDocTotals	lib/sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	lib/sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	lib/sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	lib/sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	lib/sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3_isalnum	lib/sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	lib/sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	lib/sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	lib/sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	lib/sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	lib/sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	lib/sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	lib/sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	lib/sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	lib/sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	lib/sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	lib/sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	lib/sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
ftsCompareFunction	lib/sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	lib/sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	lib/sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	lib/sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
functionDestroy	lib/sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	lib/sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_bodys	lib/battlefield/randomAppearance.c	/^static int g_bodys[] = {$/;"	v	file:
g_elapsed	lib/sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_env	lib/battlefield/encode.c	/^static struct pbc_env * g_env = 0;$/;"	v	typeref:struct:pbc_env	file:
g_id	lib/battlefield/wave.c	/^static int g_id = 0;$/;"	v	file:
g_mounts	lib/battlefield/randomAppearance.c	/^} g_mounts[] = {$/;"	v	typeref:struct:__anon33	file:
g_nBodys	lib/battlefield/randomAppearance.c	/^static size_t g_nBodys = sizeof(g_bodys) \/ sizeof(g_bodys[0]);$/;"	v	file:
g_nMounts	lib/battlefield/randomAppearance.c	/^static size_t g_nMounts = sizeof(g_mounts) \/ sizeof(g_mounts[0]);$/;"	v	file:
g_nSoldiers	lib/battlefield/randomAppearance.c	/^static size_t g_nSoldiers = sizeof(g_soldiers)\/sizeof(g_soldiers[0]);$/;"	v	file:
g_nWeapons	lib/battlefield/randomAppearance.c	/^static size_t g_nWeapons = sizeof(g_weapons) \/ sizeof(g_weapons[0]);$/;"	v	file:
g_path	lib/battlefield/fight.c	/^static char g_path[256] = ".\/";$/;"	v	file:
g_seed	lib/battlefield/record.c	/^static long long g_seed = 0;$/;"	v	file:
g_sid	../framework/main.c	/^unsigned int g_sid = 0;$/;"	v
g_soldiers	lib/battlefield/randomAppearance.c	/^static int g_soldiers[] =$/;"	v	file:
g_special_effect	lib/battlefield/role.c	/^static const char * g_special_effect[] = {$/;"	v	file:
g_start	lib/sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
g_weapons	lib/battlefield/randomAppearance.c	/^} g_weapons[] = {$/;"	v	typeref:struct:__anon32	file:
generateColumnNames	lib/sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	lib/sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	lib/sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	lib/sqlite3.c	/^static void generateSortTail($/;"	f	file:
generator	lib/battlefield/fight.c	/^static struct WELLRNG512aGenerator generator;$/;"	v	typeref:struct:WELLRNG512aGenerator	file:
geomCallback	lib/sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	lib/sqlite3.c	49087;"	d	file:
get2byteNotZero	lib/sqlite3.c	49408;"	d	file:
get4byte	lib/sqlite3.c	49089;"	d	file:
getAbsoluteLevel	lib/sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAction	lib/battlefield/bone.c	/^static struct Action * getAction(struct Bone * bone, const char * actionName, int add)$/;"	f	file:
getAndInitPage	lib/sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	lib/sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getBone	lib/battlefield/bone.c	/^static struct Bone * getBone(const char * boneName, int add)$/;"	f	file:
getBufferTable	lib/battlefield/buffer.c	/^static void getBufferTable(lua_State * L)$/;"	f	file:
getCellInfo	lib/sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	lib/sqlite3.c	53007;"	d	file:
getDigits	lib/sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getEnv	lib/battlefield/encode.c	/^static struct pbc_env * getEnv()$/;"	f	file:
getFunctionWithEnv	lib/battlefield/skill.c	/^void getFunctionWithEnv(lua_State * L, int func, int env)$/;"	f
getIntFromStmt	lib/sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLastErrorMsg	lib/sqlite3.c	/^static int getLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
getLockingMode	lib/sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getLog	lib/lua_report.c	/^static struct logger * getLog(lua_State * L, const char * name, int createIfNotExist) {$/;"	f	file:
getLog	scripts/slog.c	/^static struct logger * getLog(lua_State * L)$/;"	f	file:
getMask	lib/sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	lib/sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	lib/sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	lib/sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	lib/sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	lib/sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getReadLock	lib/sqlite3.c	/^static int getReadLock( os2File *pFile ){$/;"	f	file:
getReadLock	lib/sqlite3.c	/^static int getReadLock(winFile *pFile){$/;"	f	file:
getRowTrigger	lib/sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	lib/sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, int dflt){$/;"	f	file:
getScript	lib/battlefield/script.c	/^static struct script * getScript(lua_State * L)$/;"	f	file:
getSkill	lib/battlefield/skill.c	/^static struct skill * getSkill(lua_State * L)$/;"	f	file:
getTempStore	lib/sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTempname	lib/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf ){$/;"	f	file:
getTempname	lib/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf){$/;"	f	file:
getVarint	lib/sqlite3.c	11857;"	d	file:
getVarint32	lib/sqlite3.c	11855;"	d	file:
getWritableDir	lib/battlefield/battlefield_imp.c	/^const char * getWritableDir()$/;"	f
get_autocommit	lib/sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	lib/sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_key	../framework/hash.c	/^	key_func  get_key;$/;"	m	struct:hash	file:
get_lresource	../framework/lrm.c	/^static struct lresource * get_lresource(struct lrm * lrm, resid_t id)$/;"	f	file:
get_lresource_by_index	../framework/lrm.c	/^static struct lresource * get_lresource_by_index(struct lrm * lrm, int index)$/;"	f	file:
get_lua_connection	scripts/network.c	/^static void get_lua_connection(lua_State * L, resid_t conn)$/;"	f	file:
get_lua_connection_handler	scripts/network.c	/^static void get_lua_connection_handler(lua_State * L, resid_t conn, const char * name)$/;"	f	file:
get_role_by_id	lib/battlefield/battlefield.c	/^static struct role * get_role_by_id(struct battlefield * battle, int id)$/;"	f	file:
get_role_by_pos	lib/battlefield/battlefield.c	/^static struct role * get_role_by_pos(struct battlefield * battle, int i)$/;"	f	file:
get_role_master	lib/battlefield/buffer.c	/^static int get_role_master(struct battlefield * battle, int id)$/;"	f	file:
get_role_master	lib/battlefield/bullet.c	/^static int get_role_master(struct battlefield * battle, int id)$/;"	f	file:
get_table	lib/sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
gid	lib/fight_type.h	/^	int32_t gid;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
gid	lib/fight_type.h	/^	int32_t gid;$/;"	m	struct:tagPVE_FIGHT_CONFIG
globInfo	lib/sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	lib/sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	lib/sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	lib/sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	lib/sqlite3.c	/^static int growOpArray(Vdbe *p){$/;"	f	file:
growVTrans	lib/sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	lib/sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	lib/sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	lib/sqlite3.c	/^  HFILE h;                  \/* Handle for accessing the file *\/$/;"	m	struct:os2File	file:
h	lib/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	lib/sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	lib/sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	lib/sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	lib/sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hLockFile	lib/sqlite3.c	/^  HFILE hLockFile;           \/* File used for inter-process memory locking *\/$/;"	m	struct:os2ShmNode	file:
hMap	lib/sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMutex	lib/sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/  $/;"	m	struct:winFile	file:
hPending	lib/sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	lib/sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handler	../framework/network.c	/^	struct network_handler handler;$/;"	m	struct:conn	typeref:struct:conn::network_handler	file:
harmBullet	lib/battlefield/wave.h	/^    struct bullet * harmBullet;$/;"	m	struct:wave	typeref:struct:wave::bullet
hasAgg	lib/sqlite3.c	/^  u8 hasAgg;           \/* True if aggregates are seen *\/$/;"	m	struct:NameContext	file:
hasData	lib/sqlite3.c	/^  u8 hasData;          \/* True if this page stores data *\/$/;"	m	struct:MemPage	file:
hasHotJournal	lib/sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	lib/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	lib/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	lib/sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	lib/sqlite3.c	49457;"	d	file:
hasSharedCacheTableLock	lib/sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	lib/sqlite3.c	49456;"	d	file:
hasVowel	lib/sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hash	../framework/hash.c	/^struct hash$/;"	s	file:
hash	../framework/hash.h	/^typedef struct hash hash;$/;"	t	typeref:struct:hash
hash	../framework/map.h	/^	size_t hash;$/;"	m	struct:map_element
hash	lib/map.h	/^	size_t hash;$/;"	m	struct:map_element
hashDestroy	lib/sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hash_create	../framework/hash.c	/^struct hash * hash_create(key_func get_key,$/;"	f
hash_create_with_number_key	../framework/hash.c	/^struct hash * hash_create_with_number_key(key_func get_key)$/;"	f
hash_create_with_string_key	../framework/hash.c	/^struct hash * hash_create_with_string_key(key_func get_key)$/;"	f
hash_destory	../framework/hash.c	/^void hash_destory(hash * h)$/;"	f
hash_func	../framework/hash.h	/^typedef unsigned int (*hash_func)(void * key, size_t len);$/;"	t
hash_get	../framework/hash.c	/^void * hash_get(struct hash * h, void * key, size_t key_len)$/;"	f
hash_insert	../framework/hash.c	/^void * hash_insert(struct hash * h, void * data)$/;"	f
hash_insert_element	../framework/hash.c	/^static void hash_insert_element(struct hash * h, struct element * e)$/;"	f	file:
hash_iterator	../framework/hash.h	/^struct hash_iterator {$/;"	s
hash_key	../framework/hash.c	/^	hash_func hash_key;$/;"	m	struct:hash	file:
hash_next	../framework/hash.c	/^struct hash_iterator * hash_next(struct hash * h, struct hash_iterator * ite)$/;"	f
hash_number_key	../framework/hash.c	/^unsigned int hash_number_key(void  * key, size_t len)$/;"	f
hash_remove	../framework/hash.c	/^void * hash_remove(struct hash * h, void * key, size_t key_len)$/;"	f
hash_resize	../framework/hash.c	/^static void hash_resize(struct hash * h, unsigned int new_size)$/;"	f	file:
hash_size	../framework/hash.c	/^size_t hash_size(struct hash * h)$/;"	f
hash_val	../framework/hash.c	/^	unsigned int hash_val;$/;"	m	struct:element	file:
haveKingSkill	lib/lua_fight.c	/^	int haveKingSkill;$/;"	m	struct:FightConfig	file:
hdr	lib/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon49	typeref:struct:Mem3Block::__anon49::__anon50	file:
hdr	lib/sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	lib/sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
head	lib/battlefield/battlefield.h	/^	int head;$/;"	m	struct:KingFlag
head	lib/battlefield/battlefield.h	/^            struct opt * head;$/;"	m	struct:battlefield::__anon15::__anon16	typeref:struct:battlefield::__anon15::__anon16::opt
head	lib/battlefield/battlefield.h	/^            struct opt * head;$/;"	m	struct:battlefield::__anon15::__anon17	typeref:struct:battlefield::__anon15::__anon17::opt
head	lib/battlefield/buffer.h	/^        struct buffer_effect * head;$/;"	m	struct:buffer::__anon35	typeref:struct:buffer::__anon35::buffer_effect
head	lib/battlefield/event.c	/^	struct event * head;$/;"	m	struct:__anon4	typeref:struct:__anon4::event	file:
head	lib/battlefield/event.c	/^	struct eventListener * head;$/;"	m	struct:__anon5	typeref:struct:__anon5::eventListener	file:
head	lib/battlefield/scheduler.c	/^    struct timer * head;$/;"	m	struct:timer_list	typeref:struct:timer_list::timer	file:
health	lib/battlefield/battlefield.h	/^            long long health;$/;"	m	struct:battlefield::__anon12::__anon13
health	lib/battlefield/bullet.c	/^    long long health;$/;"	m	struct:bullet_record	file:
health	lib/battlefield/bullet.h	/^    int health;$/;"	m	struct:bullet
health	lib/battlefield/role.h	/^    } health;$/;"	m	struct:role	typeref:struct:role::__anon23
health	lib/lua_fight.c	/^	float health;$/;"	m	struct:FightModification	file:
healthsteal	lib/battlefield/role.h	/^    int healthsteal;$/;"	m	struct:HitCompareValue
heap	../framework/map.c	/^	struct heap * heap;$/;"	m	struct:map	typeref:struct:map::heap	file:
heap	../framework/memory.c	/^struct heap {$/;"	s	file:
heap	lib/map.c	/^	struct heap * heap;$/;"	m	struct:map	typeref:struct:map::heap	file:
heap	lib/memory.c	/^struct heap {$/;"	s	file:
heap_page	../framework/memory.c	/^struct heap_page {$/;"	s	file:
heap_page	lib/memory.c	/^struct heap_page {$/;"	s	file:
heightOfExpr	lib/sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	lib/sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	lib/sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
helpBullet	lib/battlefield/wave.h	/^    struct bullet * helpBullet;$/;"	m	struct:wave	typeref:struct:wave::bullet
hero_body_type	lib/fight_type.h	/^	BodyType hero_body_type;$/;"	m	struct:tagCHARACTER_INFO
hero_body_type	lib/fight_type.h	/^	BodyType hero_body_type;$/;"	m	struct:tagKING_FIGHT_INFO
hero_id	lib/fight_type.h	/^	int32_t hero_id;$/;"	m	struct:tagCHARACTER_INFO
hero_skin_id	lib/fight_type.h	/^	int32_t hero_skin_id;$/;"	m	struct:tagCHARACTER_INFO
hero_skin_id	lib/fight_type.h	/^	int32_t hero_skin_id;$/;"	m	struct:tagKING_FIGHT_INFO
hexFunc	lib/sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	lib/sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hit	lib/battlefield/battlefield.h	/^            int hit;$/;"	m	struct:battlefield::__anon12::__anon13
hit	lib/battlefield/bullet.h	/^		struct hit_effect hit;$/;"	m	struct:bullet::__anon36	typeref:struct:bullet::__anon36::hit_effect
hit_effect	lib/battlefield/bullet.h	/^struct hit_effect {$/;"	s
hit_effect_poss	lib/battlefield/skill.c	/^const static enum effect_position hit_effect_poss[] = {effect_position_body, effect_position_foot, effect_position_head};$/;"	v	typeref:enum:effect_position	file:
hlmask	lib/sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
hp	lib/fight_type.h	/^	int64_t hp;$/;"	m	struct:tagCHARACTER_INFO
hpLessValue	lib/battlefield/battlefield.c	/^static int hpLessValue(struct role * role, void * data)$/;"	f	file:
hpMoreValue	lib/battlefield/battlefield.c	/^static int hpMoreValue(struct role * role, void * data)$/;"	f	file:
hp_list	lib/fight_type.h	/^	int64_t hp_list[YQ_MAX_PLACEHOLDER_COUNT_PER_FIGHT];$/;"	m	struct:tagPVE_FIGHT_INFO
ht	lib/sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	lib/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	lib/sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	lib/sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	lib/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
hurt	lib/battlefield/battlefield.h	/^            long long hurt;$/;"	m	struct:battlefield::__anon12::__anon13
hurt	lib/battlefield/bullet.c	/^    long long hurt;$/;"	m	struct:bullet_record	file:
hurt	lib/battlefield/bullet.h	/^    int hurt;$/;"	m	struct:bullet
hurt	lib/battlefield/role.h	/^        int hurt;$/;"	m	struct:HitCompareValue::__anon21
i	../framework/map.h	/^		uint64_t     i;$/;"	m	union:map_element::__anon64
i	lib/battlefield/record.c	/^static int i = -1;$/;"	v	file:
i	lib/map.h	/^		uint64_t     i;$/;"	m	union:map_element::__anon1
i	lib/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::__anon47	file:
i	lib/sqlite3.c	/^    i64 i;          \/* Value if eType is SQLITE_INTEGER *\/$/;"	m	union:IndexSample::__anon39	file:
i	lib/sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon46	file:
i	lib/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon37	file:
i	lib/sqlite3.c	/^  int i;$/;"	m	union:RtreeCoord	file:
i	lib/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	lib/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	lib/sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	lib/sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	lib/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	lib/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAddr	lib/sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	lib/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	lib/sqlite3.c	/^    u16 iAlias;            \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item	file:
iBatch	lib/sqlite3.c	/^  u8 iBatch;                     \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBreak	lib/sqlite3.c	/^  int iBreak;                    \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iCacheCnt	lib/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	lib/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	lib/sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	lib/sqlite3.c	/^  int iCell;                        \/* Index of current cell in pNode *\/$/;"	m	struct:RtreeCursor	file:
iChange	lib/sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	lib/sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	lib/sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	lib/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColCache	lib/sqlite3.c	/^  u8 iColCache;        \/* Next entry in aColCache[] to replace *\/$/;"	m	struct:Parse	file:
iColFilter	lib/sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	lib/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	lib/sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	lib/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	lib/sqlite3.c	/^    int iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	lib/sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	lib/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iColumn	lib/sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	lib/sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iContinue	lib/sqlite3.c	/^  int iContinue;                 \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	lib/sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	lib/sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon43::__anon44::InLoop	file:
iCurrent	lib/sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	lib/sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCursor	lib/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDb	lib/sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	lib/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	lib/sqlite3.c	/^  int iDb;              \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	lib/sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	lib/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon45	file:
iDefaultCol	lib/sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	lib/sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	lib/sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	lib/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	lib/sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	lib/sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	lib/sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	lib/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	lib/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDoclistToken	lib/sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	lib/sqlite3.c	/^  int iECursor;          \/* VDBE Cursor associated with this ExprList *\/$/;"	m	struct:ExprList	file:
iEndBlock	lib/sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEof	lib/sqlite3.c	/^  i64 iEof;                       \/* 1 byte past EOF for this iterator *\/$/;"	m	struct:VdbeSorterIter	file:
iFirst	lib/sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iForeGuard	lib/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	lib/sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	lib/sqlite3.c	/^    int iFrom;         \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	lib/sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	lib/sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iHash	lib/sqlite3.c	/^    u32 iHash;                 \/* Tiebreaker hash *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
iHdrOffset	lib/sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHead	lib/sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	lib/sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	lib/sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	lib/sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	lib/sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLangid	lib/sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	lib/sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLastCol	lib/sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	lib/sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	lib/sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	lib/sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	lib/sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	lib/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLimit	lib/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	lib/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	lib/sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	lib/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	lib/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMem	lib/sqlite3.c	/^  int iMem;         \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iMin	lib/sqlite3.c	/^  int iMin;                 \/* Index of entry with minimum nEq and hash *\/$/;"	m	struct:Stat3Accum	file:
iNext	lib/sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	lib/sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	lib/sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	lib/sqlite3.c	/^  i64 iNode;$/;"	m	struct:RtreeNode	file:
iNodeSize	lib/sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	lib/sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	lib/sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	lib/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	lib/sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	lib/sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	lib/sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	lib/sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOrderByCol	lib/sqlite3.c	/^    u16 iOrderByCol;       \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item	file:
iOverflow	lib/sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	lib/sqlite3.c	/^  int iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPage	lib/sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	lib/sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iParm	lib/sqlite3.c	/^  int iParm;        \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iPos	lib/sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	lib/sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	lib/sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	lib/sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrefEnc	lib/sqlite3.c	/^  u8 iPrefEnc;         \/* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) *\/$/;"	m	struct:FuncDef	file:
iPrevDocid	lib/sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	lib/sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	lib/sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrior	lib/sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	lib/sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat3Accum	file:
iRangeReg	lib/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReadOff	lib/sqlite3.c	/^  i64 iReadOff;                   \/* Current read offset *\/$/;"	m	struct:VdbeSorterIter	file:
iReadOff	lib/sqlite3.c	/^  i64 iReadOff;                   \/* Current read offset within file pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
iReg	lib/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	lib/sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	lib/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	lib/sqlite3.c	/^    i64 iRowid;                \/* Rowid in main table of the key *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
iRowid	lib/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:RtreeCell	file:
iRowid	lib/sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iSavepoint	lib/sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSelectId	lib/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	lib/sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSize	lib/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	lib/sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	lib/sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSorterColumn	lib/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iStartBlock	lib/sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStatement	lib/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	lib/sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	lib/sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	lib/sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	lib/sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	lib/sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iTab	lib/sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTabCur	lib/sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	lib/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	lib/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	lib/sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	lib/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	lib/sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	lib/sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	lib/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iTermOffset	lib/sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iToken	lib/sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	lib/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	lib/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	lib/sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	lib/sqlite3.c	/^  int iTop;                      \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iValue	lib/sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon40	file:
iVersion	lib/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	lib/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	lib/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	lib/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	lib/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	lib/sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iVersion	lib/sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	lib/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	lib/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	lib/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
iWriteOff	lib/sqlite3.c	/^  i64 iWriteOff;                  \/* Current write offset within file pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
iZero	lib/sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icon	lib/battlefield/skill.h	/^    int          icon;$/;"	m	struct:skill
icuCaseFunc16	lib/sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	lib/sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	lib/sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	lib/sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	lib/sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	lib/sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	lib/sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	lib/sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	lib/sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	lib/sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	lib/sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	lib/sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	lib/sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	lib/sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	lib/sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	../framework/lrm.c	/^	resid_t id;$/;"	m	struct:lresource	file:
id	../framework/network.c	/^	resid_t id;$/;"	m	struct:conn	file:
id	lib/battlefield/battlefield.h	/^	int id;$/;"	m	struct:KingFlag
id	lib/battlefield/battlefield.h	/^        int id;$/;"	m	struct:battlefield::__anon11
id	lib/battlefield/battlefield.h	/^    int id;$/;"	m	struct:reward
id	lib/battlefield/battlefield.h	/^    long long id;$/;"	m	struct:battlefield
id	lib/battlefield/buffer.h	/^    int id;$/;"	m	struct:buffer
id	lib/battlefield/buffer.h	/^    int id;$/;"	m	struct:buffer_effect_imp
id	lib/battlefield/randomAppearance.c	/^    int id;$/;"	m	struct:__anon32	file:
id	lib/battlefield/randomAppearance.c	/^    int id;$/;"	m	struct:__anon33	file:
id	lib/battlefield/role.h	/^	int id;$/;"	m	struct:role
id	lib/battlefield/role.h	/^        int id;$/;"	m	struct:Appearance::__anon18
id	lib/battlefield/role.h	/^        int id;$/;"	m	struct:Appearance::__anon19
id	lib/battlefield/role.h	/^        int id;$/;"	m	struct:Appearance::__anon20
id	lib/battlefield/scheduler.c	/^	int id;$/;"	m	struct:timer	file:
id	lib/battlefield/scheduler.c	/^static int id = 0;$/;"	v	file:
id	lib/battlefield/skill.h	/^	int id;$/;"	m	struct:skill
id	lib/battlefield/skill.h	/^    int id;$/;"	m	union:SkillUnion
id	lib/battlefield/wave.h	/^    int id;$/;"	m	struct:wave
id	lib/lua_fight.c	/^	int id;$/;"	m	struct:FightReward	file:
id	lib/sqlite3.c	/^  int  id;          \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	lib/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	lib/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	lib/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
id	lib/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	lib/sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
identLength	lib/sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	lib/sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idle	../framework/lrm.c	/^	struct lresource * idle;$/;"	m	struct:lrm	typeref:struct:lrm::lresource	file:
idle	lib/battlefield/scheduler.c	/^        struct timer * idle;$/;"	m	struct:scheduler::__anon34	typeref:struct:scheduler::__anon34::timer	file:
idx	lib/battlefield/buffer.c	/^static int idx = 0;$/;"	v	file:
idx	lib/battlefield/buffer.h	/^    int idx;$/;"	m	struct:buffer_effect
idx	lib/battlefield/bullet.c	/^static int idx = 0;$/;"	v	file:
idx	lib/battlefield/bullet.h	/^	int idx;$/;"	m	struct:bullet
idx	lib/battlefield/skill.c	/^static int idx = 0;$/;"	v	file:
idx	lib/battlefield/skill.h	/^	int idx; \/\/ for debug$/;"	m	struct:skill
idx	lib/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxHash	lib/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	lib/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxNum	lib/sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	lib/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	lib/sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
ifnullFunc	lib/sqlite3.c	86520;"	d	file:
imp	lib/battlefield/buffer.h	/^	struct buffer_effect_imp * imp;$/;"	m	struct:buffer_effect	typeref:struct:buffer_effect::buffer_effect_imp
importVtabErrMsg	lib/sqlite3.c	/^static void importVtabErrMsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	file:
in	lib/sqlite3.c	/^    } in;                 \/* Used when plan.wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon43	typeref:struct:WhereLevel::__anon43::__anon44	file:
inNormalWrite	lib/sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	lib/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	lib/sqlite3.c	/^  u8 inTrans;          \/* 0: not writable.  1: Transaction.  2: Checkpoint *\/$/;"	m	struct:Db	file:
inTrans	lib/sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	lib/sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	lib/sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	lib/sqlite3.c	/^  u8 inVtabMethod;        \/* See comments above *\/$/;"	m	struct:Vdbe	file:
in_active_list	../framework/network.c	/^	int in_active_list;$/;"	m	struct:conn	file:
incr	lib/fight_type.h	/^	int32_t incr;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
incrVacuum	lib/sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	lib/sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){$/;"	f	file:
incr_power	lib/fight_type.h	/^	int64_t incr_power;$/;"	m	struct:tagCHARACTER_INFO
index	lib/battlefield/WELLRNG512a.h	/^	uint32_t index;$/;"	m	struct:WELLRNG512aGenerator
indexable	lib/sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	lib/sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	lib/battlefield/buffer.h	/^    void (*init) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
init	lib/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initMaskSet	lib/sqlite3.c	102940;"	d	file:
initSkillState	lib/battlefield/skill.c	/^static void initSkillState(struct skill * skill, int id)$/;"	f	file:
initUconvObjects	lib/sqlite3.c	/^static void initUconvObjects( void ){$/;"	f	file:
init_lrm_idle_list	../framework/lrm.c	/^static void init_lrm_idle_list(struct lrm * lrm)$/;"	f	file:
init_power	lib/fight_type.h	/^	int64_t init_power;$/;"	m	struct:tagCHARACTER_INFO
ino	lib/sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	lib/sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
inputSlot	lib/battlefield/role.h	/^    int inputSlot;$/;"	m	struct:role
insertBinaryOperator	lib/sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	lib/sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	lib/sqlite3.c	/^static void insertElement($/;"	f	file:
intKey	lib/sqlite3.c	/^  u8 intKey;           \/* True if intkey flag is set *\/$/;"	m	struct:MemPage	file:
intTestFunc	lib/sqlite3.c	/^static void intTestFunc($/;"	f	file:
integer	../framework/amf.c	/^		uint32_t integer;$/;"	m	union:amf_value::__anon58	file:
interruptx	lib/sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	lib/sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateAllOverflowCache	lib/sqlite3.c	49848;"	d	file:
invalidateIncrblobCursors	lib/sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	lib/sqlite3.c	49849;"	d	file:
invalidateOverflowCache	lib/sqlite3.c	/^static void invalidateOverflowCache(BtCursor *pCur){$/;"	f	file:
invalidateOverflowCache	lib/sqlite3.c	49847;"	d	file:
invalidateTempStorage	lib/sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
isAppropriateForFactoring	lib/sqlite3.c	/^static int isAppropriateForFactoring(Expr *p){$/;"	f	file:
isAttached	lib/sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isAuto	lib/battlefield/battlefield.h	/^        int isAuto;$/;"	m	struct:battlefield::__anon14
isCandidateForInOpt	lib/sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isCheck	lib/sqlite3.c	/^  u8 isCheck;          \/* True if resolving names in a CHECK constraint *\/$/;"	m	struct:NameContext	file:
isComment	../framework/xmlHelper.c	/^static int isComment(mxml_node_t * node) $/;"	f	file:
isComment	lib/xmlHelper.c	/^static int isComment(mxml_node_t * node) $/;"	f	file:
isConsonant	lib/sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	lib/sqlite3.c	/^    u8 isCorrelated;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isDate	lib/sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	lib/sqlite3.c	/^  u8 isDeferred;    \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	lib/sqlite3.c	124256;"	d	file:
isDirty	lib/sqlite3.c	/^  int isDirty;$/;"	m	struct:RtreeNode	file:
isDistinctIndex	lib/sqlite3.c	/^static int isDistinctIndex($/;"	f	file:
isDistinctRedundant	lib/sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	lib/sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	lib/sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isError	lib/sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	lib/sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isHidden	lib/sqlite3.c	/^  u8 isHidden;     \/* True if this column is 'hidden' *\/$/;"	m	struct:Column	file:
isIncrblobHandle	lib/sqlite3.c	/^  u8 isIncrblobHandle;      \/* True if this cursor is an incr. io handle *\/$/;"	m	struct:BtCursor	file:
isIndex	lib/sqlite3.c	/^  Bool isIndex;         \/* True if an index containing keys only - no data *\/$/;"	m	struct:VdbeCursor	file:
isInit	lib/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	lib/sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	lib/sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	lib/sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	lib/sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	lib/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon38	file:
isKey	lib/battlefield/bone.c	/^static int isKey(const char * buffer, jsmntok_t * tokens, int n, const char * key)$/;"	f	file:
isLikeOrGlob	lib/sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	lib/sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	lib/sqlite3.c	19024;"	d	file:
isMallocInit	lib/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	lib/sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	lib/sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	lib/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	lib/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNT	lib/sqlite3.c	/^  static int isNT(void){$/;"	f	file:
isNT	lib/sqlite3.c	32826;"	d	file:
isNot	lib/sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	lib/sqlite3.c	39202;"	d	file:
isOrdered	lib/sqlite3.c	/^  Bool isOrdered;       \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isPCacheInit	lib/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	lib/sqlite3.c	/^    u8 isPSample;              \/* True if a periodic sample *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
isPVP	lib/lua_fight.c	/^	int isPVP;$/;"	m	struct:FightConfig	file:
isPrefix	lib/sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	lib/sqlite3.c	/^  u8 isPrepareV2;         \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isPrimKey	lib/sqlite3.c	/^  u8 isPrimKey;    \/* True if this column is part of the PRIMARY KEY *\/$/;"	m	struct:Column	file:
isReadonly	lib/sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRequireSeek	lib/sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isSimpleCount	lib/sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorted	lib/sqlite3.c	/^  u8 isSorted;                   \/* True if pEntry is sorted *\/$/;"	m	struct:RowSet	file:
isSorter	lib/sqlite3.c	/^  Bool isSorter;        \/* True if a new-style sorter *\/$/;"	m	struct:VdbeCursor	file:
isSorter	lib/sqlite3.c	64490;"	d	file:
isSorter	lib/sqlite3.c	64492;"	d	file:
isSortingIndex	lib/sqlite3.c	/^static int isSortingIndex($/;"	f	file:
isSystemTable	lib/sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	lib/sqlite3.c	/^  Bool isTable;         \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTransactionSavepoint	lib/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	lib/sqlite3.c	100599;"	d	file:
isView	lib/sqlite3.c	100600;"	d	file:
isView	lib/sqlite3.c	101013;"	d	file:
isView	lib/sqlite3.c	85744;"	d	file:
isView	lib/sqlite3.c	85745;"	d	file:
isView	lib/sqlite3.c	85926;"	d	file:
isView	lib/sqlite3.c	89477;"	d	file:
isView	lib/sqlite3.c	89478;"	d	file:
isView	lib/sqlite3.c	90016;"	d	file:
isVowel	lib/sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	lib/sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
is_pvp	lib/fight_type.h	/^	int32_t is_pvp;$/;"	m	struct:tagPVE_FIGHT_CONFIG
item_count	../framework/hash.c	/^	unsigned int item_count;$/;"	m	struct:hash	file:
item_count	../framework/map.c	/^	size_t item_count;$/;"	m	struct:map	file:
item_count	lib/map.c	/^	size_t item_count;$/;"	m	struct:map	file:
ix	lib/sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	lib/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	lib/sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	lib/sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	lib/sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	lib/sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	lib/sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	lib/sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	lib/sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	lib/sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	lib/sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	lib/sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	lib/sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	lib/sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	lib/sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	lib/sqlite3.c	/^static int jrnlWrite($/;"	f	file:
jsmn_alloc_token	lib/battlefield/jsmn.c	/^static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, $/;"	f	file:
jsmn_fill_token	lib/battlefield/jsmn.c	/^static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type, $/;"	f	file:
jsmn_init	lib/battlefield/jsmn.c	/^void jsmn_init(jsmn_parser *parser) {$/;"	f
jsmn_parse	lib/battlefield/jsmn.c	/^jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,$/;"	f
jsmn_parse_primitive	lib/battlefield/jsmn.c	/^static jsmnerr_t jsmn_parse_primitive(jsmn_parser *parser, const char *js,$/;"	f	file:
jsmn_parse_string	lib/battlefield/jsmn.c	/^static jsmnerr_t jsmn_parse_string(jsmn_parser *parser, const char *js,$/;"	f	file:
jsmn_parser	lib/battlefield/jsmn.h	/^} jsmn_parser;$/;"	t	typeref:struct:__anon9
jsmnerr_t	lib/battlefield/jsmn.h	/^} jsmnerr_t;$/;"	t	typeref:enum:__anon7
jsmntok_t	lib/battlefield/jsmn.h	/^} jsmntok_t;$/;"	t	typeref:struct:__anon8
jsmntype_t	lib/battlefield/jsmn.h	/^} jsmntype_t;$/;"	t	typeref:enum:__anon6
juliandayFunc	lib/sqlite3.c	/^static void juliandayFunc($/;"	f	file:
key	../framework/map.h	/^	} key;$/;"	m	struct:map_element	typeref:union:map_element::__anon64
key	lib/map.h	/^	} key;$/;"	m	struct:map_element	typeref:union:map_element::__anon1
key	lib/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	lib/sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	lib/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	lib/sqlite3.c	/^static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){$/;"	f	file:
key_func	../framework/hash.h	/^typedef void * (*key_func)(void * data, size_t * len);$/;"	t
keywordCode	lib/sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
kill	lib/fight_type.h	/^	PFIGHT_REWARD_CONFIG kill;$/;"	m	struct:tagSTORY_FIGHT_REWARD_INFO
kill_reward_id	lib/fight_type.h	/^	int32_t kill_reward_id[4];$/;"	m	struct:tagPVE_FIGHT_CONFIG
king	lib/battlefield/battlefield.h	/^    } king;$/;"	m	struct:battlefield	typeref:struct:battlefield::__anon14
king	lib/fight_type.h	/^	KING_FIGHT_INFO king;$/;"	m	struct:tagPVE_FIGHT_CONFIG
kingSkillCooldown	lib/battlefield/battlefield_imp.c	/^void kingSkillCooldown(struct battlefield * battle, int n, float cd)$/;"	f
king_ensign_display	lib/fight_type.h	/^    int32_t king_ensign_display[3];$/;"	m	struct:tagKING_FIGHT_INFO
l_AddStageEffect	lib/battlefield/skill.c	/^static int l_AddStageEffect(lua_State * L)$/;"	f	file:
l_BulletAddBuffer	lib/battlefield/skill.c	/^static int l_BulletAddBuffer(lua_State * L)$/;"	f	file:
l_BulletAddEffect	lib/battlefield/skill.c	/^static int l_BulletAddEffect(lua_State * L)$/;"	f	file:
l_BulletCreate	lib/battlefield/skill.c	/^static int l_BulletCreate(lua_State * L)$/;"	f	file:
l_BulletCreateArrow	lib/battlefield/skill.c	/^static int l_BulletCreateArrow(lua_State * L)$/;"	f	file:
l_BulletCreateFireball	lib/battlefield/skill.c	/^static int l_BulletCreateFireball(lua_State * L)$/;"	f	file:
l_BulletCreateLightning	lib/battlefield/skill.c	/^static int l_BulletCreateLightning(lua_State * L)$/;"	f	file:
l_BulletDisableTail	lib/battlefield/skill.c	/^static int l_BulletDisableTail(lua_State * L)$/;"	f	file:
l_BulletFire	lib/battlefield/skill.c	/^static int l_BulletFire(lua_State * L)$/;"	f	file:
l_BulletIsRealValue	lib/battlefield/skill.c	/^static int l_BulletIsRealValue(lua_State * L)$/;"	f	file:
l_BulletRelease	lib/battlefield/skill.c	/^static int l_BulletRelease(lua_State * L)$/;"	f	file:
l_BulletSetDisplay	lib/battlefield/skill.c	/^static int l_BulletSetDisplay(lua_State * L)$/;"	f	file:
l_BulletSetNoHurtAction	lib/battlefield/skill.c	/^static int l_BulletSetNoHurtAction(lua_State * L)$/;"	f	file:
l_ChangeStage	lib/battlefield/skill.c	/^static int l_ChangeStage(lua_State * L)$/;"	f	file:
l_EnableRecord	lib/battlefield/skill.c	/^static int l_EnableRecord(lua_State * L)$/;"	f	file:
l_LoadFile	lib/battlefield/skill.c	/^static int l_LoadFile(lua_State * L)$/;"	f	file:
l_LoadSound	lib/battlefield/skill.c	/^static int l_LoadSound(lua_State * L)$/;"	f	file:
l_PlaySound	lib/battlefield/skill.c	/^static int l_PlaySound(lua_State * L)$/;"	f	file:
l_RAND	lib/battlefield/skill.c	/^static int l_RAND(lua_State * L)$/;"	f	file:
l_SelectTarget	lib/battlefield/skill.c	/^static int l_SelectTarget(lua_State * L)$/;"	f	file:
l_SetCooldown	lib/battlefield/skill.c	/^static int l_SetCooldown(lua_State * L)$/;"	f	file:
l_ShakeStage	lib/battlefield/skill.c	/^static int l_ShakeStage(lua_State * L)$/;"	f	file:
l_ShowDialog	lib/battlefield/skill.c	/^static int l_ShowDialog(lua_State * L)$/;"	f	file:
l_UnitAddBuffer	lib/battlefield/skill.c	/^static int l_UnitAddBuffer(lua_State * L)$/;"	f	file:
l_UnitAddEffect	lib/battlefield/skill.c	/^static int l_UnitAddEffect(lua_State * L)$/;"	f	file:
l_UnitAppearance	lib/battlefield/skill.c	/^static int l_UnitAppearance(lua_State * L)$/;"	f	file:
l_UnitAttack	lib/battlefield/skill.c	/^static int l_UnitAttack(lua_State * L)$/;"	f	file:
l_UnitBufferList	lib/battlefield/skill.c	/^static int l_UnitBufferList(lua_State * L)$/;"	f	file:
l_UnitChangeHealth	lib/battlefield/skill.c	/^static int l_UnitChangeHealth(lua_State * L)$/;"	f	file:
l_UnitChangePower	lib/battlefield/skill.c	/^static int l_UnitChangePower(lua_State * L)$/;"	f	file:
l_UnitCopy	lib/battlefield/skill.c	/^static int l_UnitCopy(lua_State * L)$/;"	f	file:
l_UnitDefense	lib/battlefield/skill.c	/^static int l_UnitDefense(lua_State * L)$/;"	f	file:
l_UnitDistance	lib/battlefield/skill.c	/^static int l_UnitDistance(lua_State * L)$/;"	f	file:
l_UnitFindAllTarget	lib/battlefield/skill.c	/^static int l_UnitFindAllTarget(lua_State * L)$/;"	f	file:
l_UnitFindFarTarget	lib/battlefield/skill.c	/^static int l_UnitFindFarTarget(lua_State * L)$/;"	f	file:
l_UnitFindLessHPTarget	lib/battlefield/skill.c	/^static int l_UnitFindLessHPTarget(lua_State * L)$/;"	f	file:
l_UnitFindMoreHPTarget	lib/battlefield/skill.c	/^static int l_UnitFindMoreHPTarget(lua_State * L)$/;"	f	file:
l_UnitFindNearTarget	lib/battlefield/skill.c	/^static int l_UnitFindNearTarget(lua_State * L)$/;"	f	file:
l_UnitFindRandomTarget	lib/battlefield/skill.c	/^static int l_UnitFindRandomTarget(lua_State * L)$/;"	f	file:
l_UnitFindTarget	lib/battlefield/skill.c	/^static int l_UnitFindTarget(lua_State * L)$/;"	f	file:
l_UnitForce	lib/battlefield/skill.c	/^static int l_UnitForce(lua_State  *L)$/;"	f	file:
l_UnitHealth	lib/battlefield/skill.c	/^static int l_UnitHealth(lua_State * L)$/;"	f	file:
l_UnitHealthMax	lib/battlefield/skill.c	/^static int l_UnitHealthMax(lua_State * L)$/;"	f	file:
l_UnitIsExist	lib/battlefield/skill.c	/^static int l_UnitIsExist(lua_State * L)$/;"	f	file:
l_UnitPlay	lib/battlefield/skill.c	/^static int l_UnitPlay(lua_State * L)$/;"	f	file:
l_UnitPosition	lib/battlefield/skill.c	/^static int l_UnitPosition(lua_State * L)$/;"	f	file:
l_UnitPower	lib/battlefield/skill.c	/^static int l_UnitPower(lua_State * L)$/;"	f	file:
l_UnitProperty	lib/battlefield/skill.c	/^static int l_UnitProperty(lua_State * L)$/;"	f	file:
l_UnitRemoveBuffer	lib/battlefield/skill.c	/^static int l_UnitRemoveBuffer(lua_State * L)$/;"	f	file:
l_UnitSkillList	lib/battlefield/skill.c	/^static int l_UnitSkillList(lua_State * L)$/;"	f	file:
l_WaveAddBullet	lib/battlefield/skill.c	/^static int l_WaveAddBullet(lua_State * L)$/;"	f	file:
l_WaveCreate	lib/battlefield/skill.c	/^static int l_WaveCreate(lua_State * L)$/;"	f	file:
l_WaveFire	lib/battlefield/skill.c	/^static int l_WaveFire(lua_State * L)$/;"	f	file:
l_addEffect	lib/battlefield/buffer.c	/^static int l_addEffect(lua_State * L)$/;"	f	file:
l_amf_decode	lib/lua_AMF.c	/^static int l_amf_decode(lua_State * L)$/;"	f	file:
l_amf_encode	lib/lua_AMF.c	/^static int l_amf_encode(lua_State * L)$/;"	f	file:
l_base64_decode	lib/lua_base64.c	/^static int l_base64_decode(lua_State * L)$/;"	f	file:
l_base64_encode	lib/lua_base64.c	/^static int l_base64_encode(lua_State * L)$/;"	f	file:
l_bit32_and	lib/lua_bit32.c	/^static int l_bit32_and(lua_State * L)$/;"	f	file:
l_bit32_lshift	lib/lua_bit32.c	/^static int l_bit32_lshift(lua_State* L){$/;"	f	file:
l_bit32_negate	lib/lua_bit32.c	/^static int l_bit32_negate(lua_State* L){$/;"	f	file:
l_bit32_or	lib/lua_bit32.c	/^static int l_bit32_or(lua_State * L)$/;"	f	file:
l_bit32_rshift	lib/lua_bit32.c	/^static int l_bit32_rshift(lua_State* L){$/;"	f	file:
l_close	scripts/network.c	/^static int l_close(lua_State * L)$/;"	f	file:
l_connect	scripts/network.c	/^static int l_connect(lua_State * L)$/;"	f	file:
l_dir_isdir	lib/lua_dir.c	/^static int l_dir_isdir(lua_State * L)$/;"	f	file:
l_dir_list	lib/lua_dir.c	/^static int l_dir_list(lua_State * L)$/;"	f	file:
l_exit	scripts/loop.c	/^static int l_exit(lua_State * L)$/;"	f	file:
l_fight_decode	lib/lua_fight.c	/^static int l_fight_decode(lua_State * L)$/;"	f	file:
l_fight_encode	lib/lua_fight.c	/^static int l_fight_encode(lua_State * L)$/;"	f	file:
l_freeScriptInfo	lib/battlefield/buffer.c	/^static int l_freeScriptInfo(lua_State * L)$/;"	f	file:
l_listen	scripts/network.c	/^static int l_listen(lua_State * L)$/;"	f	file:
l_log_close	lib/lua_log.c	/^static int l_log_close(lua_State * L)$/;"	f	file:
l_log_debug	lib/lua_log.c	/^static int l_log_debug(lua_State * L)$/;"	f	file:
l_log_debug	scripts/slog.c	/^static int l_log_debug(lua_State * L)$/;"	f	file:
l_log_error	lib/lua_log.c	/^static int l_log_error(lua_State * L)$/;"	f	file:
l_log_error	scripts/slog.c	/^static int l_log_error(lua_State * L)$/;"	f	file:
l_log_flush	lib/lua_log.c	/^static int l_log_flush(lua_State * L)$/;"	f	file:
l_log_info	lib/lua_log.c	/^static int l_log_info(lua_State * L)$/;"	f	file:
l_log_info	scripts/slog.c	/^static int l_log_info(lua_State * L)$/;"	f	file:
l_log_open	lib/lua_log.c	/^static int l_log_open(lua_State * L)$/;"	f	file:
l_log_warning	lib/lua_log.c	/^static int l_log_warning(lua_State * L)$/;"	f	file:
l_log_warning	scripts/slog.c	/^static int l_log_warning(lua_State * L)$/;"	f	file:
l_mfile_read	lib/lua_mfile.c	/^static int l_mfile_read(lua_State * L)$/;"	f	file:
l_mfile_write	lib/lua_mfile.c	/^static int l_mfile_write(lua_State * L)$/;"	f	file:
l_mysql_close	lib/lua_mysql.c	/^static int l_mysql_close(lua_State * L)$/;"	f	file:
l_mysql_command	lib/lua_mysql.c	/^static int l_mysql_command(lua_State * L)$/;"	f	file:
l_mysql_errno	lib/lua_mysql.c	/^int l_mysql_errno(lua_State * L)$/;"	f
l_mysql_error	lib/lua_mysql.c	/^int l_mysql_error(lua_State * L)$/;"	f
l_mysql_last_id	lib/lua_mysql.c	/^int l_mysql_last_id(lua_State * L)$/;"	f
l_mysql_open	lib/lua_mysql.c	/^static int l_mysql_open(lua_State * L)$/;"	f	file:
l_network_createSocket	lib/lua_network.c	/^static int l_network_createSocket(lua_State * L)$/;"	f	file:
l_network_loop	lib/lua_network.c	/^static int l_network_loop(lua_State * L)$/;"	f	file:
l_network_stop	lib/lua_network.c	/^static int l_network_stop(lua_State * L)$/;"	f	file:
l_new_connection	scripts/network.c	/^static int l_new_connection(lua_State * L)$/;"	f	file:
l_now	scripts/loop.c	/^static int l_now(lua_State * L)$/;"	f	file:
l_pcre_match	lib/lua_pcre.c	/^static int l_pcre_match(lua_State * L)$/;"	f	file:
l_print	lib/battlefield/skill.c	/^static int l_print(lua_State * L)$/;"	f	file:
l_push_log_metatable	lib/lua_log.c	/^static void l_push_log_metatable(lua_State * L)$/;"	f	file:
l_push_socket	lib/lua_network.c	/^static void l_push_socket(lua_State * L, struct Socket * socket)$/;"	f	file:
l_push_socket_metatable	lib/lua_network.c	/^static void l_push_socket_metatable(lua_State * L, struct Socket * socket)$/;"	f	file:
l_push_socket_metatable	scripts/network.c	/^static void l_push_socket_metatable(lua_State * L)$/;"	f	file:
l_read_socket	lib/lua_network.c	/^struct Socket * l_read_socket(lua_State * L, int index)$/;"	f
l_redis_close	lib/lua_redis.c	/^static int l_redis_close(lua_State * L)$/;"	f	file:
l_redis_command	lib/lua_redis.c	/^static int l_redis_command(lua_State * L)$/;"	f	file:
l_redis_connect	lib/lua_redis.c	/^static int l_redis_connect(lua_State * L)$/;"	f	file:
l_redis_decode	lib/lua_redis.c	/^static int l_redis_decode(lua_State * L)$/;"	f	file:
l_regex_match	lib/lua_regex.c	/^static int l_regex_match(lua_State * L)$/;"	f	file:
l_send	scripts/network.c	/^static int l_send(lua_State * L)$/;"	f	file:
l_sendc	scripts/network.c	/^static int l_sendc(lua_State * L)$/;"	f	file:
l_sends	scripts/network.c	/^static int l_sends(lua_State * L)$/;"	f	file:
l_socket_change_type	lib/lua_network.c	/^static void l_socket_change_type(lua_State * L, struct Socket * socket, enum SocketType type, enum SocketStatus status)$/;"	f	file:
l_socket_close	lib/lua_network.c	/^static int l_socket_close(lua_State * L)$/;"	f	file:
l_socket_connect	lib/lua_network.c	/^static int l_socket_connect(lua_State * L)$/;"	f	file:
l_socket_listen	lib/lua_network.c	/^static int l_socket_listen(lua_State * L)$/;"	f	file:
l_socket_on	lib/lua_network.c	/^static int l_socket_on(lua_State * L)$/;"	f	file:
l_socket_write	lib/lua_network.c	/^static int l_socket_write(lua_State * L)$/;"	f	file:
l_sqlite_close	lib/lua_sqlite.c	/^static int l_sqlite_close(lua_State * L)$/;"	f	file:
l_sqlite_command	lib/lua_sqlite.c	/^static int l_sqlite_command(lua_State * L)$/;"	f	file:
l_sqlite_open	lib/lua_sqlite.c	/^static int l_sqlite_open(lua_State * L)$/;"	f	file:
l_toBullet	lib/battlefield/skill.c	/^struct bullet * l_toBullet(lua_State * L, int idx)$/;"	f
l_write	lib/lua_report.c	/^static int l_write(lua_State * L) {$/;"	f	file:
l_xml_open	lib/lua_xml.c	/^static int l_xml_open(lua_State * L)$/;"	f	file:
langidFromSelect	lib/sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
last	../framework/main.c	/^static time_t    last = 0;$/;"	v	file:
last	../framework/network.c	/^		time_t last;$/;"	m	struct:network::__anon66	file:
lastErrno	lib/sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	lib/sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	lib/sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastPos	lib/battlefield/wave.h	/^    int lastPos;$/;"	m	struct:wave
lastRowid	lib/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	lib/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
lastRowid	lib/sqlite3.c	/^  i64 lastRowid;        \/* Last rowid from a Next or NextIdx operation *\/$/;"	m	struct:VdbeCursor	file:
last_error	../framework/mfile.c	/^static const char * last_error = "";$/;"	v	file:
last_error	lib/mfile.c	/^static const char * last_error = "";$/;"	v	file:
last_insert_rowid	lib/sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	lib/sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	lib/sqlite3.c	/^  u8 leaf;             \/* True if leaf flag is set *\/$/;"	m	struct:MemPage	file:
leaveMutex	lib/sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
left	lib/battlefield/scheduler.c	/^	float left;$/;"	m	struct:scheduler	file:
leftColumn	lib/sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon53	file:
leftCursor	lib/sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
len	../framework/amf.c	/^	size_t len;$/;"	m	struct:__anon57	file:
len	../framework/amf.h	/^	size_t len;$/;"	m	struct:amf_slice
len	../framework/package.h	/^	uint32_t len;$/;"	m	struct:client_header
len	../framework/package.h	/^	uint32_t len;$/;"	m	struct:translate_header
length	lib/sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	lib/sqlite3.c	/^static void lengthFunc($/;"	f	file:
level	../framework/log.c	/^	int    level;$/;"	m	struct:logger	file:
level	lib/battlefield/role.h	/^	int level;$/;"	m	struct:role
level	lib/battlefield/role.h	/^    int level;$/;"	m	struct:HitCompareValue
level	lib/fight_type.h	/^		int32_t level;$/;"	m	struct:tagPVE_FIGHT_CONFIG::__anon3
level	lib/fight_type.h	/^	int32_t level;$/;"	m	struct:tagCHARACTER_INFO
level	lib/fight_type.h	/^	int32_t level;$/;"	m	struct:tagKING_FIGHT_INFO
level	lib/lua_log.c	/^	int    level;$/;"	m	struct:logger	file:
lhs	lib/sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon56	file:
libversion	lib/sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	lib/sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	lib/sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	lib/sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	lib/sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	lib/sqlite3.c	542;"	d	file:
likely	lib/sqlite3.c	545;"	d	file:
limit	lib/sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	lib/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon49	typeref:struct:Mem3Block::__anon49::__anon51	file:
listen_handler	scripts/network.c	/^static struct network_handler listen_handler = {0};$/;"	v	typeref:struct:network_handler	file:
listen_on	../framework/base.c	/^int listen_on(const char * host, unsigned short port, int backlog)$/;"	f
listen_on_unix	../framework/base.c	/^static int listen_on_unix(const char * path, unsigned backlog)$/;"	f	file:
listeners	lib/battlefield/event.c	/^} listeners[EVENT_COUNT] = {{0,0}};$/;"	v	typeref:struct:__anon5	file:
load	modules/mlua.c	/^	char load[256];$/;"	m	struct:Script	file:
loadAnalysis	lib/sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	lib/sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadScript	lib/battlefield/buffer.c	/^static int loadScript(lua_State * L, int id)$/;"	f	file:
loadScript	modules/mlua.c	/^static int loadScript(xml_node_t * node, void * data)$/;"	f	file:
loadStat3	lib/sqlite3.c	/^static int loadStat3(sqlite3 *db, const char *zDb){$/;"	f	file:
local	lib/sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	lib/sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	lib/sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	lib/sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
locateFkeyIndex	lib/sqlite3.c	/^static int locateFkeyIndex($/;"	f	file:
lock	../framework/memory.c	/^static void lock()$/;"	f	file:
lock	lib/memory.c	/^static void lock()$/;"	f	file:
lock	lib/sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	lib/sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	lib/sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	lib/sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	lib/sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	lib/sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	lib/sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	lib/sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	lib/sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	lib/sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	lib/sqlite3.c	/^  int locktype;             \/* Type of lock currently held on this file *\/$/;"	m	struct:os2File	file:
locktype	lib/sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	../framework/amf.c	84;"	d	file:
log	../framework/log.h	/^DECLARE_MODULE(log);$/;"	v
log	lib/sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
log	modules/mlua.c	/^	struct logger * log;$/;"	m	struct:Script	typeref:struct:Script::logger	file:
logBadConnection	lib/sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
logIoerr	lib/sqlite3.c	/^static void logIoerr(int nRetry){$/;"	f	file:
log_level_count	../framework/log.c	/^static const int log_level_count = sizeof(LOG_LEVEL_DESC) \/ sizeof(LOG_LEVEL_DESC[0]);$/;"	v	file:
log_level_count	lib/lua_log.c	/^static const int log_level_count = sizeof(LOG_LEVEL_DESC) \/ sizeof(LOG_LEVEL_DESC[0]);$/;"	v	file:
logger	../framework/log.c	/^struct logger$/;"	s	file:
logger	lib/lua_log.c	/^struct logger {$/;"	s	file:
lookaside	lib/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	lib/sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	lib/sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lresource	../framework/lrm.c	/^struct lresource {$/;"	s	file:
lrm	../framework/lrm.c	/^struct lrm {$/;"	s	file:
lrm	../framework/network.c	/^	struct lrm * lrm;$/;"	m	struct:network	typeref:struct:network::lrm	file:
lru	lib/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lua	modules/mlua.h	/^DECLARE_MODULE(lua);$/;"	v
lua	server.c	/^	IMPORT_MODULE(lua),$/;"	v
luaDoFile	lib/battlefield/battlefield_imp.c	/^int luaDoFile(lua_State * L, const char * filename)$/;"	f
luaL_addsize	lib/pbc-lua.c	17;"	d	file:
luaL_addsize	lib/pbc-lua.c	18;"	d	file:
luaL_buffinit	lib/pbc-lua.c	14;"	d	file:
luaL_checkversion	lib/pbc-lua.c	20;"	d	file:
luaL_newlib	lib/pbc-lua.c	13;"	d	file:
luaL_optboolean	lib/battlefield/skill.c	/^static int luaL_optboolean(lua_State * L, int idx, int def)$/;"	f	file:
luaL_prepbuffsize	lib/pbc-lua.c	15;"	d	file:
luaL_pushresult	lib/pbc-lua.c	19;"	d	file:
luaT	scripts/network.c	/^static const char * luaT[] = {$/;"	v	file:
lua_exec	modules/mlua.c	/^void lua_exec(lua_State* L, const char* szScript){$/;"	f
lua_rawlen	lib/pbc-lua.c	12;"	d	file:
lua_reader	lib/battlefield/battlefield_imp.c	/^lua_Reader lua_reader = 0;$/;"	v
lua_set_log	lib/lua_report.c	/^static int lua_set_log(lua_State * L, struct logger * log, const char * name) {$/;"	f	file:
lua_set_log	scripts/slog.c	/^int lua_set_log(lua_State * L, struct logger * log)$/;"	f
lua_setfield_cfunction	lib/lua_log.c	245;"	d	file:
lua_setfield_cfunction	lib/lua_network.c	209;"	d	file:
lua_setfield_cfunction	scripts/network.c	115;"	d	file:
lua_setfield_function	scripts/network.c	123;"	d	file:
luaopen_AMF	lib/lua_AMF.c	/^int luaopen_AMF(lua_State *L)$/;"	f
luaopen_base64	lib/lua_base64.c	/^int luaopen_base64(lua_State *L)$/;"	f
luaopen_bit32	lib/lua_bit32.c	/^int luaopen_bit32(lua_State *L)$/;"	f
luaopen_dir	lib/lua_dir.c	/^int luaopen_dir(lua_State *L)$/;"	f
luaopen_fight	lib/lua_fight.c	/^int luaopen_fight(lua_State *L)$/;"	f
luaopen_log	lib/lua_log.c	/^int luaopen_log(lua_State *L)$/;"	f
luaopen_log	scripts/slog.c	/^int luaopen_log(lua_State *L)$/;"	f
luaopen_loop	scripts/loop.c	/^int luaopen_loop(lua_State *L)$/;"	f
luaopen_mfile	lib/lua_mfile.c	/^int luaopen_mfile(lua_State *L)$/;"	f
luaopen_mysql	lib/lua_mysql.c	/^int luaopen_mysql(lua_State *L)$/;"	f
luaopen_network	lib/lua_network.c	/^int luaopen_network(lua_State *L)$/;"	f
luaopen_network	scripts/network.c	/^int luaopen_network(lua_State *L)$/;"	f
luaopen_pcre	lib/lua_pcre.c	/^int luaopen_pcre(lua_State *L)$/;"	f
luaopen_protobuf_c	lib/pbc-lua.c	/^luaopen_protobuf_c(lua_State *L) {$/;"	f
luaopen_redis	lib/lua_redis.c	/^int luaopen_redis(lua_State *L)$/;"	f
luaopen_regex	lib/lua_regex.c	/^int luaopen_regex(lua_State *L)$/;"	f
luaopen_report	lib/lua_report.c	/^int luaopen_report(lua_State *L) {$/;"	f
luaopen_sqlite	lib/lua_sqlite.c	/^int luaopen_sqlite(lua_State *L)$/;"	f
luaopen_xml	lib/lua_xml.c	/^int luaopen_xml(lua_State *L)$/;"	f
m	lib/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	lib/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
m_eq_1	lib/sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	lib/sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	lib/sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	lib/sqlite3.c	/^  u32 magic;                      \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	lib/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	lib/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic	lib/sqlite3.c	/^  u32 magic;    \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	../framework/main.c	/^int main(int argc, char * argv[])$/;"	f
main	../framework/md5.c	/^int main( int argc, char *argv[] )$/;"	f
main	lib/battlefield/fight.c	/^int main(int argc, char * argv[])$/;"	f
major	lib/sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	lib/sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	lib/sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	lib/sqlite3.c	/^  u8   mallocFailed;   \/* Becomes true if any memory allocation fails *\/$/;"	m	struct:StrAccum	file:
mallocFailed	lib/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	lib/sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
malloc_fn	lib/battlefield/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
malloc_record	../framework/memory.c	/^static void malloc_record() {$/;"	f	file:
malloc_record	lib/memory.c	/^static void malloc_record() {$/;"	f	file:
map	../framework/map.c	/^struct map$/;"	s	file:
map	lib/map.c	/^struct map$/;"	s	file:
map_element	../framework/map.h	/^struct map_element {$/;"	s
map_element	../framework/map.h	/^} map_element;$/;"	v	typeref:struct:map_element
map_element	lib/map.h	/^struct map_element {$/;"	s
map_element	lib/map.h	/^} map_element;$/;"	v	typeref:struct:map_element
mask	lib/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	struct:__anon54::__anon55	file:
maskPage	lib/sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
matchAll	lib/sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	lib/sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	lib/sqlite3.c	/^static int matchQuality(FuncDef *p, int nArg, u8 enc){$/;"	f	file:
matchSet	lib/sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
max	../framework/lrm.c	/^	int max;$/;"	m	struct:lrm	file:
max	lib/battlefield/role.h	/^        long long max;$/;"	m	struct:role::__anon23
max1bytePayload	lib/sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	lib/sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	lib/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	lib/sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	lib/sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	lib/sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	lib/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	lib/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
max_hp	lib/fight_type.h	/^	int64_t max_hp;$/;"	m	struct:tagCHARACTER_INFO
max_record	../framework/mfile.c	/^static const unsigned int max_record = 0x1 << 20;$/;"	v	file:
max_record	lib/mfile.c	/^static const unsigned int max_record = 0x1 << 20;$/;"	v	file:
mayAbort	lib/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
mbcsToUnicode	lib/sqlite3.c	/^static LPWSTR mbcsToUnicode(const char *zFilename){$/;"	f	file:
md5_context	../framework/md5.h	/^} md5_context;$/;"	t	typeref:struct:__anon65
md5_finish	../framework/md5.c	/^void md5_finish( md5_context *ctx, uint8 digest[16] )$/;"	f
md5_padding	../framework/md5.c	/^static uint8 md5_padding[64] =$/;"	v	file:
md5_process	../framework/md5.c	/^void md5_process( md5_context *ctx, uint8 data[64] )$/;"	f
md5_starts	../framework/md5.c	/^void md5_starts( md5_context *ctx )$/;"	f
md5_update	../framework/md5.c	/^void md5_update( md5_context *ctx, uint8 *input, uint32 length )$/;"	f
md5sum	../framework/md5.c	/^char * md5sum(void * input, size_t length, char * result)$/;"	f
mem	lib/sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon48	file:
mem0	lib/sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	lib/sqlite3.c	18661;"	d	file:
mem3	lib/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	lib/sqlite3.c	16128;"	d	file:
mem5	lib/sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	lib/sqlite3.c	16811;"	d	file:
memAboutToChange	lib/sqlite3.c	64389;"	d	file:
memAboutToChange	lib/sqlite3.c	64391;"	d	file:
memDb	lib/sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	lib/sqlite3.c	13046;"	d	file:
memTracePrint	lib/sqlite3.c	/^static void memTracePrint(FILE *out, Mem *p){$/;"	f	file:
memjrnlClose	lib/sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	lib/sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	lib/sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	lib/sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	lib/sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	lib/sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	lib/sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	lib/sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	lib/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	lib/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	lib/sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	lib/sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	lib/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	lib/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	lib/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	lib/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	lib/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	lib/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	lib/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	lib/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	lib/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	lib/sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	lib/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	lib/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	lib/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	lib/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	lib/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	lib/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	lib/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	lib/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	lib/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	lib/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	lib/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	lib/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	lib/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	lib/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	lib/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	lib/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	lib/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	lib/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	lib/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
memsys5UnlinkFirst	lib/sqlite3.c	/^static int memsys5UnlinkFirst(int iLogsize){$/;"	f	file:
mfile_lasterror	../framework/mfile.c	/^const char * mfile_lasterror()$/;"	f
mfile_lasterror	lib/mfile.c	/^const char * mfile_lasterror()$/;"	f
mfile_read	../framework/mfile.c	/^int mfile_read (unsigned int ref, char * buff, size_t len, const char * prefix)$/;"	f
mfile_read	lib/mfile.c	/^int mfile_read (unsigned int ref, char * buff, size_t len, const char * prefix)$/;"	f
mfile_tag	../framework/mfile.c	/^static const unsigned int mfile_tag = 0x6164662e;$/;"	v	file:
mfile_tag	lib/mfile.c	/^static const unsigned int mfile_tag = 0x6164662e;$/;"	v	file:
mfile_write	../framework/mfile.c	/^unsigned int mfile_write(unsigned int ref, const char * buff, size_t len, const char * prefix)$/;"	f
mfile_write	lib/mfile.c	/^unsigned int mfile_write(unsigned int ref, const char * buff, size_t len, const char * prefix)$/;"	f
minLeaf	lib/sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	lib/sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	lib/sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	lib/sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	lib/sqlite3.c	/^static u8 minMaxQuery(Select *p){$/;"	f	file:
minWriteFileFormat	lib/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	lib/sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	lib/sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	lib/sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mnMaster	lib/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	lib/sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReq	lib/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	lib/sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
module	../framework/module.h	/^struct module {$/;"	s
module_log_load	../framework/log.c	/^int module_log_load(int argc, char * argv[])$/;"	f
module_log_reload	../framework/log.c	/^int module_log_reload()$/;"	f
module_log_unload	../framework/log.c	/^void module_log_unload()$/;"	f
module_log_update	../framework/log.c	/^void module_log_update(time_t now)$/;"	f
module_lua_load	modules/mlua.c	/^int module_lua_load(int argc, char * argv[])$/;"	f
module_lua_reload	modules/mlua.c	/^int module_lua_reload()$/;"	f
module_lua_unload	modules/mlua.c	/^void module_lua_unload()$/;"	f
module_lua_update	modules/mlua.c	/^void module_lua_update(time_t now)$/;"	f
module_time_load	../framework/mtime.c	/^int module_time_load(int argc, char * argv[])$/;"	f
module_time_reload	../framework/mtime.c	/^int module_time_reload()$/;"	f
module_time_unload	../framework/mtime.c	/^void module_time_unload()$/;"	f
module_time_update	../framework/mtime.c	/^void module_time_update(time_t now)$/;"	f
mount_body_type	lib/fight_type.h	/^	BodyType mount_body_type;$/;"	m	struct:tagCHARACTER_INFO
mount_body_type	lib/fight_type.h	/^	BodyType mount_body_type;$/;"	m	struct:tagKING_FIGHT_INFO
mount_skin_id	lib/fight_type.h	/^	int32_t mount_skin_id;$/;"	m	struct:tagCHARACTER_INFO
mount_skin_id	lib/fight_type.h	/^	int32_t mount_skin_id;$/;"	m	struct:tagKING_FIGHT_INFO
mounts	lib/battlefield/role.h	/^    } mounts;$/;"	m	struct:Appearance	typeref:struct:Appearance::__anon19
mounts_bone_from_appearance	lib/battlefield/bone.c	/^const char * mounts_bone_from_appearance(struct Appearance * appearance)$/;"	f
move	lib/battlefield/role.h	/^	} move;$/;"	m	struct:role	typeref:struct:role::__anon24
moveToChild	lib/sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	lib/sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	lib/sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	lib/sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	lib/sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
move_speed	lib/fight_type.h	/^	int64_t move_speed;$/;"	m	struct:tagCHARACTER_INFO
movetoTarget	lib/sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	lib/sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msg	../framework/md5.c	/^static char *msg[] = $/;"	v	file:
multiSelect	lib/sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	lib/sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	lib/sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
mutex	../framework/memory.c	/^static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
mutex	lib/memory.c	/^static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
mutex	lib/sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	lib/sqlite3.c	/^  HMTX mutex;       \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	lib/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:os2ShmNode	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon48	file:
mutex	lib/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	lib/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	lib/sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	lib/sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	lib/sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	lib/sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	lib/sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	lib/sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	lib/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon48	file:
mxErr	lib/sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	lib/sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxOut	lib/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	lib/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	lib/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPathname	lib/sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
mxPgno	lib/sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	lib/sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	lib/sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReq	lib/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	lib/sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat3Accum	file:
mxSavepoint	lib/sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	lib/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxValue	lib/sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	lib/sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	lib/battlefield/battlefield.h	/^    int n;$/;"	m	struct:opt
n	lib/sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	lib/sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	lib/sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	lib/sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	lib/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	lib/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	lib/sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	lib/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	lib/sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	lib/sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAll	lib/sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	lib/sqlite3.c	/^  i16 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	lib/sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	lib/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	lib/sqlite3.c	/^  int nAlloc;                     \/* Bytes of space at aAlloc *\/$/;"	m	struct:VdbeSorterIter	file:
nAlloc	lib/sqlite3.c	/^  int nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	lib/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon48	file:
nAlloc	lib/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	lib/sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	lib/sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nAux	lib/sqlite3.c	/^  int nAux;                     \/* Number of entries allocated for apAux[] *\/$/;"	m	struct:VdbeFunc	file:
nBackfill	lib/sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	lib/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	lib/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon48	file:
nBacktraceSlots	lib/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	lib/sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	lib/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	lib/sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	lib/sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	lib/sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	lib/sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	lib/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	lib/sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nByte	lib/sqlite3.c	/^  int nByte;        \/* Size in byte of text or blob. *\/$/;"	m	struct:IndexSample	file:
nBytes	lib/sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	lib/sqlite3.c	/^  int nBytesPerCell;          \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	lib/sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	lib/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	lib/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	lib/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	lib/sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	lib/sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	lib/sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	lib/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	lib/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	lib/sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	lib/sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	lib/sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	lib/sqlite3.c	/^  int nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	lib/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColCache	lib/sqlite3.c	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse	file:
nColumn	lib/sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	lib/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	lib/sqlite3.c	/^  int nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nColumn	lib/sqlite3.c	/^  int nColumn;     \/* Number of columns in the table used by this index *\/$/;"	m	struct:Index	file:
nConstraint	lib/sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	lib/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nConstraint	lib/sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCost	lib/sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCsr	lib/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCurrent	lib/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon48	file:
nCurrentPage	lib/sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	lib/sqlite3.c	/^  u16 nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	lib/sqlite3.c	/^  u16 nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nDLt	lib/sqlite3.c	/^    tRowcnt nDLt;              \/* sqlite_stat3.nDLt *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nDLt	lib/sqlite3.c	/^  tRowcnt nDLt;     \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
nData	lib/sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	lib/sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	lib/sqlite3.c	/^  int nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nData	lib/sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	lib/sqlite3.c	/^  u32 nData;     \/* Number of bytes of data *\/$/;"	m	struct:CellInfo	file:
nDb	lib/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDeferredCons	lib/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	lib/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDepth	lib/sqlite3.c	/^  int nDepth;          \/* Depth of subquery recursion. 1 for no recursion *\/$/;"	m	struct:NameContext	file:
nDim	lib/sqlite3.c	/^  int nDim;                   \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	lib/sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	lib/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	lib/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	lib/sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	lib/sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	lib/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	lib/sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	lib/sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	lib/sqlite3.c	/^    tRowcnt nEq;               \/* sqlite_stat3.nEq *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nEq	lib/sqlite3.c	/^  tRowcnt nEq;      \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
nEq	lib/sqlite3.c	/^  u32 nEq;                       \/* Number of == constraints *\/$/;"	m	struct:WherePlan	file:
nErr	lib/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	lib/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	lib/sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nExpr	lib/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	lib/sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	lib/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	lib/sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nField	lib/sqlite3.c	/^  int nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	lib/sqlite3.c	/^  u16 nField;         \/* Number of entries in aColl[] *\/$/;"	m	struct:KeyInfo	file:
nField	lib/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nFkConstraint	lib/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	lib/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	lib/sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	lib/sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	lib/sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	lib/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	lib/sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHeader	lib/sqlite3.c	/^  u16 nHeader;   \/* Size of the cell content header in bytes *\/$/;"	m	struct:CellInfo	file:
nHeap	lib/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	lib/sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	lib/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nHit	lib/sqlite3.c	/^  int nHit, nMiss;            \/* Total cache hits and misses *\/$/;"	m	struct:Pager	file:
nId	lib/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	lib/sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon43::__anon44	file:
nInMemory	lib/sqlite3.c	/^  int nInMemory;                  \/* Current size of pRecord list as PMA *\/$/;"	m	struct:VdbeSorter	file:
nIndent	lib/sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:
nIndex	lib/sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	lib/sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	lib/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
nKey	lib/sqlite3.c	/^  i64 nKey;        \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	lib/sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or number of bytes in key *\/$/;"	m	struct:CellInfo	file:
nKey	lib/sqlite3.c	/^  int nKey;                       \/* Number of bytes in key *\/$/;"	m	struct:VdbeSorterIter	file:
nKey	lib/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nLabel	lib/sqlite3.c	/^  int nLabel;             \/* Number of labels used *\/$/;"	m	struct:Vdbe	file:
nLevel	lib/sqlite3.c	/^  int nLevel;                    \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	lib/sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nLocal	lib/sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally *\/$/;"	m	struct:CellInfo	file:
nLock	lib/sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	lib/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nLt	lib/sqlite3.c	/^    tRowcnt nLt;               \/* sqlite_stat3.nLt *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nLt	lib/sqlite3.c	/^  tRowcnt nLt;      \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
nMalloc	lib/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	lib/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	lib/sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	lib/sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	lib/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	lib/sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	lib/sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMem	lib/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	lib/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	lib/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	lib/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	lib/sqlite3.c	/^  int nMem;         \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nMin	lib/sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	lib/sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMiss	lib/sqlite3.c	/^  int nHit, nMiss;            \/* Total cache hits and misses *\/$/;"	m	struct:Pager	file:
nModuleArg	lib/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nName	lib/sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	lib/sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	lib/sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	lib/sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNodeSize	lib/sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOcc	lib/sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	lib/sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOnce	lib/sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:
nOnce	lib/sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:
nOnceFlag	lib/sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:
nOnceFlag	lib/sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:
nOp	lib/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	lib/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	lib/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	lib/sqlite3.c	/^  int nOpAlloc;           \/* Number of slots allocated for aOp[] *\/$/;"	m	struct:Vdbe	file:
nOrderBy	lib/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrderBy	lib/sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nOrig	lib/sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOut	lib/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	lib/sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	lib/sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nPMA	lib/sqlite3.c	/^  int nPMA;                       \/* Number of PMAs stored in pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
nPSample	lib/sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat3Accum	file:
nPage	lib/sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	lib/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	lib/sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	lib/sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	lib/sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	lib/sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	lib/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	lib/sqlite3.c	/^  int nParam;$/;"	m	struct:RtreeMatchArg	file:
nParam	lib/sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nPayload	lib/sqlite3.c	/^  u32 nPayload;  \/* Total amount of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	lib/sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	lib/sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	lib/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	lib/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	lib/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	lib/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPool	lib/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	lib/sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPrefix	lib/sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	lib/sqlite3.c	/^  int nProgressOps;             \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQPlan	lib/sqlite3.c	/^static int nQPlan = 0;              \/* Next free slow in _query_plan[] *\/$/;"	v	file:
nQueryLoop	lib/sqlite3.c	/^  double nQueryLoop;   \/* Estimated number of iterations of a query *\/$/;"	m	struct:Parse	file:
nRangeReg	lib/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	lib/sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nReaders	lib/sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	lib/sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecyclable	lib/sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	lib/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	lib/sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	lib/sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	lib/sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	lib/sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	lib/sqlite3.c	/^  int nRef;                  \/* Number of os2ShmLink objects pointing to this *\/$/;"	m	struct:os2ShmNode	file:
nRef	lib/sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	lib/sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	lib/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	lib/sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	lib/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	lib/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	lib/sqlite3.c	/^  int nRef;$/;"	m	struct:RtreeNode	file:
nRef	lib/sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	lib/sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	lib/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	lib/sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
nRefInitMutex	lib/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	lib/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:os2ShmNode	file:
nRegion	lib/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	lib/sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	lib/sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	lib/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	lib/sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	lib/sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	lib/sqlite3.c	/^  double nRow;                   \/* Estimated number of rows (for EQP) *\/$/;"	m	struct:WherePlan	file:
nRow	lib/sqlite3.c	/^  int nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRow	lib/sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat3Accum	file:
nRowAvg	lib/sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	lib/sqlite3.c	/^  tRowcnt nRowEst;     \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	lib/sqlite3.c	/^  double nRowOut;                \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nSample	lib/sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat3Accum	file:
nSample	lib/sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSavepoint	lib/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	lib/sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScratch	lib/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	lib/sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSegment	lib/sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	lib/sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelectRow	lib/sqlite3.c	/^  double nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	lib/sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	lib/sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	lib/sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	lib/sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	lib/sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSlot	lib/sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	lib/sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	lib/sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	lib/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	lib/sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	lib/sqlite3.c	/^  i16 nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	lib/sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	lib/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	lib/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	lib/sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	lib/sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	lib/sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	lib/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTableLock	lib/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTempInUse	lib/sqlite3.c	/^  u8 nTempInUse;       \/* Number of aTempReg[] currently checked out *\/$/;"	m	struct:Parse	file:
nTempReg	lib/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	lib/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	lib/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	lib/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	lib/sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	lib/sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	lib/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	lib/sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nTitle	lib/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon48	file:
nTitle	lib/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	lib/sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	lib/sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	lib/sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	lib/sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	lib/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	lib/sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	lib/sqlite3.c	/^  int nTree;                      \/* Used size of aTree\/aIter (power of 2) *\/$/;"	m	struct:VdbeSorter	file:
nVTrans	lib/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	lib/sqlite3.c	/^  int nVal;$/;"	m	struct:SorterRecord	file:
nVar	lib/sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	lib/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVtabLock	lib/sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	lib/sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWrite	lib/sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nZero	lib/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::__anon47	file:
name	../framework/log.c	/^	char   name[256];$/;"	m	struct:logger	file:
name	../framework/module.h	/^	const char * name;$/;"	m	struct:module
name	lib/battlefield/bone.c	/^    char name[32];$/;"	m	struct:Action	file:
name	lib/battlefield/bone.c	/^    char name[32];$/;"	m	struct:Bone	file:
name	lib/battlefield/bullet.c	/^    char name[64];$/;"	m	struct:bullet_record	file:
name	lib/battlefield/role.h	/^	char name[32];$/;"	m	struct:role
name	lib/battlefield/skill.h	/^    const char * name;$/;"	m	struct:skill
name	lib/fight_type.h	/^	char name[32];$/;"	m	struct:tagCHARACTER_INFO
name	lib/fight_type.h	/^	char name[32];$/;"	m	struct:tagKING_FIGHT_INFO
name	lib/lua_fight.c	/^	char name[32];$/;"	m	struct:FightConfig	file:
name0	lib/battlefield/battlefield.h	/^		char name0[32];$/;"	m	struct:battlefield::__anon14
name1	lib/battlefield/battlefield.h	/^		char name1[32];$/;"	m	struct:battlefield::__anon14
nameInUsingClause	lib/sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
narg	lib/battlefield/script.h	/^	int narg;$/;"	m	struct:script
nattacker	lib/battlefield/battlefield.h	/^		int nattacker;$/;"	m	struct:battlefield::__anon12
ndefender	lib/battlefield/battlefield.h	/^		int ndefender;$/;"	m	struct:battlefield::__anon12
near	lib/battlefield/battlefield.c	/^static int near(struct role * role, struct role * r1, struct role * r2, void * data)$/;"	f	file:
nearValue	lib/battlefield/battlefield.c	/^static int nearValue(struct role * role, void * data)$/;"	f	file:
nearlyFull	lib/sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needToFreeIdxStr	lib/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
needToFreeIdxStr	lib/sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
nested	lib/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
network	../framework/network.c	/^struct network$/;"	s	file:
network_handler	../framework/network.h	/^typedef struct network_handler {$/;"	s
network_handler	../framework/network.h	/^} network_handler;$/;"	t	typeref:struct:network_handler
newDatabase	lib/sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newEvent	lib/battlefield/event.c	/^struct event * newEvent(enum BattlefieldEventType eventID, int v1, int v2, void * data)$/;"	f
newListener	lib/battlefield/event.c	/^struct eventListener * newListener(event_callback cb, void*ctx)$/;"	f
newNode	../framework/xmlHelper.c	/^static xml_node_t * newNode(mxml_node_t * node)$/;"	f	file:
newNode	lib/xmlHelper.c	/^static xml_node_t * newNode(mxml_node_t * node)$/;"	f	file:
newRowid	lib/sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newScriptEvn	lib/battlefield/buffer.c	/^static void newScriptEvn(lua_State * L)$/;"	f	file:
newTnum	lib/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
new_array	lib/pbc-lua.c	/^new_array(lua_State *L, int id, const char *key) {$/;"	f	file:
new_socket	lib/lua_network.c	/^static struct Socket * new_socket(lua_State * L)$/;"	f	file:
newmask	lib/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	../framework/amf.c	/^		struct amf_value * next;$/;"	m	union:amf_value::__anon58	typeref:struct:amf_value::__anon58::amf_value	file:
next	../framework/dlist.h	/^    struct dlist_node * next;$/;"	m	struct:dlist_node	typeref:struct:dlist_node::dlist_node
next	../framework/hash.c	/^	struct element * next;$/;"	m	struct:element	typeref:struct:element::element	file:
next	../framework/lrm.c	/^	struct lresource * next;	\/\/ next == 0 表示正在使用$/;"	m	struct:lresource	typeref:struct:lresource::lresource	file:
next	../framework/map.h	/^	struct map_element * next;$/;"	m	struct:map_element	typeref:struct:map_element::map_element
next	../framework/memory.c	/^	struct heap_page * next;$/;"	m	struct:heap_page	typeref:struct:heap_page::heap_page	file:
next	../framework/network.c	/^	struct conn * next;$/;"	m	struct:conn	typeref:struct:conn::conn	file:
next	../framework/xmlHelper.c	/^	xml_node_t * next;$/;"	m	struct:xml_node_t	file:
next	lib/battlefield/battlefield.h	/^	struct reward * next;$/;"	m	struct:reward	typeref:struct:reward::reward
next	lib/battlefield/battlefield.h	/^    struct opt * next;$/;"	m	struct:opt	typeref:struct:opt::opt
next	lib/battlefield/bone.c	/^    struct Action * next;$/;"	m	struct:Action	typeref:struct:Action::Action	file:
next	lib/battlefield/bone.c	/^    struct Bone * next;$/;"	m	struct:Bone	typeref:struct:Bone::Bone	file:
next	lib/battlefield/buffer.h	/^	struct buffer_effect * next;$/;"	m	struct:buffer_effect	typeref:struct:buffer_effect::buffer_effect
next	lib/battlefield/buffer.h	/^    struct buffer * next;$/;"	m	struct:buffer	typeref:struct:buffer::buffer
next	lib/battlefield/buffer.h	/^    struct buffer_effect_imp * next;$/;"	m	struct:buffer_effect_imp	typeref:struct:buffer_effect_imp::buffer_effect_imp
next	lib/battlefield/bullet.h	/^	struct bullet * next;$/;"	m	struct:bullet	typeref:struct:bullet::bullet
next	lib/battlefield/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	lib/battlefield/dlist.h	/^    struct dlist_node * next;$/;"	m	struct:dlist_node	typeref:struct:dlist_node::dlist_node
next	lib/battlefield/event.c	/^	struct event * next;$/;"	m	struct:event	typeref:struct:event::event	file:
next	lib/battlefield/event.c	/^	struct eventListener * next;$/;"	m	struct:eventListener	typeref:struct:eventListener::eventListener	file:
next	lib/battlefield/scheduler.c	/^	struct timer * next;$/;"	m	struct:timer	typeref:struct:timer::timer	file:
next	lib/battlefield/wave.h	/^    struct wave * next;$/;"	m	struct:wave	typeref:struct:wave::wave
next	lib/fight_type.h	/^	struct tagFIGHT_REWARD_CONFIG* next;$/;"	m	struct:tagFIGHT_REWARD_CONFIG	typeref:struct:tagFIGHT_REWARD_CONFIG::tagFIGHT_REWARD_CONFIG
next	lib/lua_network.c	/^	struct Socket * next;$/;"	m	struct:Socket	typeref:struct:Socket::Socket	file:
next	lib/map.h	/^	struct map_element * next;$/;"	m	struct:map_element	typeref:struct:map_element::map_element
next	lib/memory.c	/^	struct heap_page * next;$/;"	m	struct:heap_page	typeref:struct:heap_page::heap_page	file:
next	lib/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon49::__anon51	file:
next	lib/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	lib/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	lib/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
next	lib/xmlHelper.c	/^	xml_node_t * next;$/;"	m	struct:xml_node_t	file:
next	modules/mlua.c	/^	struct Script * next;$/;"	m	struct:Script	typeref:struct:Script::Script	file:
nextAutovac	lib/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	lib/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	lib/sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	lib/sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_fight_id	lib/fight_type.h	/^	int32_t next_fight_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
next_stmt	lib/sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	lib/sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	lib/sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noHurtCount	lib/battlefield/role.h	/^	int noHurtCount;$/;"	m	struct:role
noSync	lib/sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
noTail	lib/battlefield/bullet.h	/^		int noTail;$/;"	m	struct:bullet::__anon36
nocaseCollatingFunc	lib/sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
node	../framework/xmlHelper.c	/^	mxml_node_t * node;$/;"	m	struct:xml_node_t	file:
node	lib/xmlHelper.c	/^	mxml_node_t * node;$/;"	m	struct:xml_node_t	file:
nodeAcquire	lib/sqlite3.c	/^nodeAcquire($/;"	f	file:
nodeDeleteCell	lib/sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	lib/sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	lib/sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	lib/sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	lib/sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	lib/sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	lib/sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	lib/sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	lib/sqlite3.c	/^nodeInsertCell($/;"	f	file:
nodeNew	lib/sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	lib/sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	lib/sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReference	lib/sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	lib/sqlite3.c	/^nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	lib/sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	lib/sqlite3.c	/^nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	lib/sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	lib/sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	lib/sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	lib/sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	lib/sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopMutexAlloc	lib/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	lib/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	lib/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	lib/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	lib/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	lib/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	lib/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
normal	lib/battlefield/role.h	/^            union SkillUnion normal;$/;"	m	struct:role::__anon26::__anon27	typeref:union:role::__anon26::__anon27::SkillUnion
not	lib/sqlite3.c	/^  int not;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
notIndexed	lib/sqlite3.c	/^    u8 notIndexed;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	lib/sqlite3.c	/^  u8 notNull;      \/* True if there is a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notUsed1	lib/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon38	file:
nowValue	lib/sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
npc	lib/fight_type.h	/^	PFIGHT_REWARD_CONFIG npc[5];$/;"	m	struct:tagSTORY_FIGHT_REWARD_INFO
npc	lib/fight_type.h	/^	}npc[YQ_MAX_PLACEHOLDER_COUNT_PER_FORMATION];$/;"	m	struct:tagPVE_FIGHT_CONFIG	typeref:struct:tagPVE_FIGHT_CONFIG::__anon3
nrhs	lib/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon56	file:
nullRow	lib/sqlite3.c	/^  Bool nullRow;         \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	lib/sqlite3.c	/^static void nullifFunc($/;"	f	file:
numberOfCachePages	lib/sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
nzVar	lib/sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	lib/sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
objsize	../framework/lrm.c	/^	size_t objsize;$/;"	m	struct:lrm	file:
offset	../framework/mfile.c	/^	uint32_t offset;$/;"	m	struct:MFileIndex	file:
offset	lib/mfile.c	/^	uint32_t offset;$/;"	m	struct:MFileIndex	file:
offset	lib/sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	lib/sqlite3.c	7885;"	d	file:
okOnePass	lib/sqlite3.c	/^  u8 okOnePass;        \/* Ok to use one-pass algorithm for UPDATE or DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	lib/sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	lib/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	lib/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omit	lib/sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
onError	lib/sqlite3.c	/^  u8 onError;      \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	lib/sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
on_accept	../framework/network.h	/^	void   (*on_accept)   (struct network * net, resid_t l, resid_t c, void * ctx);$/;"	m	struct:network_handler
on_accept	scripts/network.c	/^static void on_accept(struct network * net, resid_t l, resid_t c, void * ctx)$/;"	f	file:
on_closed	../framework/network.h	/^	void   (*on_closed)   (struct network * net, resid_t c, int error, void * ctx);$/;"	m	struct:network_handler
on_closed	scripts/network.c	/^static void on_closed(struct network * net, resid_t c, int error, void * ctx)$/;"	f	file:
on_connected	../framework/network.h	/^	void   (*on_connected)(struct network * net, resid_t c, void * ctx);$/;"	m	struct:network_handler
on_connected	scripts/network.c	/^static void on_connected(struct network * net, resid_t c, void * ctx)$/;"	f	file:
on_load	../framework/module.h	/^	int  (*on_load)(int argc, char * argv[]);$/;"	m	struct:module
on_message	../framework/network.h	/^	size_t (*on_message)  (struct network * net, resid_t c, const char * msg, size_t len, void * ctx);$/;"	m	struct:network_handler
on_message	scripts/network.c	/^static size_t on_message(struct network * net, resid_t c,$/;"	f	file:
on_message_c	scripts/network.c	/^static size_t on_message_c(struct network * net, resid_t c,$/;"	f	file:
on_message_s	scripts/network.c	/^static size_t on_message_s(struct network * net, resid_t c,$/;"	f	file:
on_reload	../framework/module.h	/^	int  (*on_reload)();$/;"	m	struct:module
on_signal	../framework/service.c	/^static void on_signal(int sig)$/;"	f	file:
on_unload	../framework/module.h	/^	void (*on_unload)();$/;"	m	struct:module
on_update	../framework/module.h	/^	void (*on_update)(time_t now);$/;"	m	struct:module
once	lib/battlefield/scheduler.c	/^        struct timer_list once;$/;"	m	struct:scheduler::__anon34	typeref:struct:scheduler::__anon34::timer_list	file:
op	lib/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	lib/sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	lib/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	lib/sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	lib/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	lib/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	lib/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	lib/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op	lib/sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
op2	lib/sqlite3.c	/^  u8 op2;                \/* If a TK_REGISTER, the original value of Expr.op *\/$/;"	m	struct:Expr	file:
opIterNext	lib/sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opPrecedence	lib/sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	lib/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	lib/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	lib/sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	lib/sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	lib/sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	lib/sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	lib/sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	lib/sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	lib/sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openStatTable	lib/sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	lib/sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	lib/sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	lib/sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	lib/sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
opt	lib/battlefield/battlefield.h	/^struct opt$/;"	s
opts	lib/battlefield/battlefield.h	/^    } opts;$/;"	m	struct:battlefield	typeref:struct:battlefield::__anon15
orconf	lib/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	lib/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	lib/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orderByConsumed	lib/sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
orphanTrigger	lib/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
os2Access	lib/sqlite3.c	/^static int os2Access($/;"	f	file:
os2CheckReservedLock	lib/sqlite3.c	/^static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){$/;"	f	file:
os2Close	lib/sqlite3.c	/^static int os2Close( sqlite3_file *id ){$/;"	f	file:
os2CurrentTime	lib/sqlite3.c	/^static int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){$/;"	f	file:
os2CurrentTimeInt64	lib/sqlite3.c	/^static int os2CurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
os2Delete	lib/sqlite3.c	/^static int os2Delete($/;"	f	file:
os2DeviceCharacteristics	lib/sqlite3.c	/^static int os2DeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
os2DlClose	lib/sqlite3.c	/^static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
os2DlClose	lib/sqlite3.c	24598;"	d	file:
os2DlError	lib/sqlite3.c	/^static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
os2DlError	lib/sqlite3.c	24596;"	d	file:
os2DlOpen	lib/sqlite3.c	/^static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
os2DlOpen	lib/sqlite3.c	24595;"	d	file:
os2DlSym	lib/sqlite3.c	/^static void (*os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f	file:
os2DlSym	lib/sqlite3.c	24597;"	d	file:
os2File	lib/sqlite3.c	/^struct os2File {$/;"	s	file:
os2File	lib/sqlite3.c	/^typedef struct os2File os2File;         \/* The file structure *\/$/;"	t	typeref:struct:os2File	file:
os2FileControl	lib/sqlite3.c	/^static int os2FileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
os2FileSize	lib/sqlite3.c	/^static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){$/;"	f	file:
os2FullPathname	lib/sqlite3.c	/^static int os2FullPathname($/;"	f	file:
os2GetLastError	lib/sqlite3.c	/^static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
os2IoMethod	lib/sqlite3.c	/^static const sqlite3_io_methods os2IoMethod = {$/;"	v	file:
os2Lock	lib/sqlite3.c	/^static int os2Lock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2MutexAlloc	lib/sqlite3.c	/^static sqlite3_mutex *os2MutexAlloc(int iType){$/;"	f	file:
os2MutexEnd	lib/sqlite3.c	/^static int os2MutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexEnter	lib/sqlite3.c	/^static void os2MutexEnter(sqlite3_mutex *p){$/;"	f	file:
os2MutexFree	lib/sqlite3.c	/^static void os2MutexFree(sqlite3_mutex *p){$/;"	f	file:
os2MutexHeld	lib/sqlite3.c	/^static int os2MutexHeld(sqlite3_mutex *p){$/;"	f	file:
os2MutexInit	lib/sqlite3.c	/^static int os2MutexInit(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexLeave	lib/sqlite3.c	/^static void os2MutexLeave(sqlite3_mutex *p){$/;"	f	file:
os2MutexNotheld	lib/sqlite3.c	/^static int os2MutexNotheld(sqlite3_mutex *p){$/;"	f	file:
os2MutexTrace	lib/sqlite3.c	/^static void os2MutexTrace(sqlite3_mutex *p, char *pAction){$/;"	f	file:
os2MutexTry	lib/sqlite3.c	/^static int os2MutexTry(sqlite3_mutex *p){$/;"	f	file:
os2Open	lib/sqlite3.c	/^static int os2Open($/;"	f	file:
os2OpenSharedMemory	lib/sqlite3.c	/^static int os2OpenSharedMemory( os2File *fd, int szRegion ) {$/;"	f	file:
os2PurgeShmNodes	lib/sqlite3.c	/^static void os2PurgeShmNodes( int deleteFlag ) {$/;"	f	file:
os2Randomness	lib/sqlite3.c	/^static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){$/;"	f	file:
os2Read	lib/sqlite3.c	/^static int os2Read($/;"	f	file:
os2SectorSize	lib/sqlite3.c	/^static int os2SectorSize(sqlite3_file *id){$/;"	f	file:
os2ShmBarrier	lib/sqlite3.c	/^static void os2ShmBarrier($/;"	f	file:
os2ShmBarrier	lib/sqlite3.c	24216;"	d	file:
os2ShmEnterMutex	lib/sqlite3.c	/^static void os2ShmEnterMutex(void){$/;"	f	file:
os2ShmLeaveMutex	lib/sqlite3.c	/^static void os2ShmLeaveMutex(void){$/;"	f	file:
os2ShmLink	lib/sqlite3.c	/^struct os2ShmLink {$/;"	s	file:
os2ShmLink	lib/sqlite3.c	/^typedef struct os2ShmLink os2ShmLink;   \/* A connection to shared-memory *\/$/;"	t	typeref:struct:os2ShmLink	file:
os2ShmLock	lib/sqlite3.c	/^static int os2ShmLock($/;"	f	file:
os2ShmLock	lib/sqlite3.c	24215;"	d	file:
os2ShmMap	lib/sqlite3.c	/^static int os2ShmMap($/;"	f	file:
os2ShmMap	lib/sqlite3.c	24214;"	d	file:
os2ShmMutexHeld	lib/sqlite3.c	/^static int os2ShmMutexHeld(void) {$/;"	f	file:
os2ShmNode	lib/sqlite3.c	/^struct os2ShmNode {$/;"	s	file:
os2ShmNode	lib/sqlite3.c	/^typedef struct os2ShmNode os2ShmNode;   \/* A shared descritive memory node *\/$/;"	t	typeref:struct:os2ShmNode	file:
os2ShmNodeList	lib/sqlite3.c	/^static os2ShmNode *os2ShmNodeList = NULL;$/;"	v	file:
os2ShmSystemLock	lib/sqlite3.c	/^static int os2ShmSystemLock($/;"	f	file:
os2ShmUnmap	lib/sqlite3.c	/^static int os2ShmUnmap($/;"	f	file:
os2ShmUnmap	lib/sqlite3.c	24217;"	d	file:
os2Sleep	lib/sqlite3.c	/^static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){$/;"	f	file:
os2Sync	lib/sqlite3.c	/^static int os2Sync( sqlite3_file *id, int flags ){$/;"	f	file:
os2Truncate	lib/sqlite3.c	/^static int os2Truncate( sqlite3_file *id, i64 nByte ){$/;"	f	file:
os2Unlock	lib/sqlite3.c	/^static int os2Unlock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2Write	lib/sqlite3.c	/^static int os2Write($/;"	f	file:
osAccess	lib/sqlite3.c	25347;"	d	file:
osAreFileApisANSI	lib/sqlite3.c	32317;"	d	file:
osAreFileApisANSI	lib/sqlite3.c	32331;"	d	file:
osCharLowerW	lib/sqlite3.c	32342;"	d	file:
osCharUpperW	lib/sqlite3.c	32350;"	d	file:
osClose	lib/sqlite3.c	25344;"	d	file:
osCloseHandle	lib/sqlite3.c	32354;"	d	file:
osCreateFileA	lib/sqlite3.c	32362;"	d	file:
osCreateFileMapping	lib/sqlite3.c	32376;"	d	file:
osCreateFileMappingW	lib/sqlite3.c	32385;"	d	file:
osCreateFileW	lib/sqlite3.c	32371;"	d	file:
osCreateMutexW	lib/sqlite3.c	32394;"	d	file:
osDeleteFileA	lib/sqlite3.c	32403;"	d	file:
osDeleteFileW	lib/sqlite3.c	32411;"	d	file:
osFallocate	lib/sqlite3.c	25423;"	d	file:
osFchmod	lib/sqlite3.c	25416;"	d	file:
osFchown	lib/sqlite3.c	25438;"	d	file:
osFcntl	lib/sqlite3.c	25373;"	d	file:
osFcntl	lib/sqlite3.c	25663;"	d	file:
osFcntl	lib/sqlite3.c	25664;"	d	file:
osFileTimeToLocalFileTime	lib/sqlite3.c	32419;"	d	file:
osFileTimeToSystemTime	lib/sqlite3.c	32428;"	d	file:
osFlushFileBuffers	lib/sqlite3.c	32433;"	d	file:
osFormatMessageA	lib/sqlite3.c	32441;"	d	file:
osFormatMessageW	lib/sqlite3.c	32450;"	d	file:
osFreeLibrary	lib/sqlite3.c	32455;"	d	file:
osFstat	lib/sqlite3.c	25363;"	d	file:
osFtruncate	lib/sqlite3.c	25370;"	d	file:
osGetCurrentProcessId	lib/sqlite3.c	32459;"	d	file:
osGetDiskFreeSpaceA	lib/sqlite3.c	32467;"	d	file:
osGetDiskFreeSpaceW	lib/sqlite3.c	32476;"	d	file:
osGetFileAttributesA	lib/sqlite3.c	32485;"	d	file:
osGetFileAttributesExW	lib/sqlite3.c	32501;"	d	file:
osGetFileAttributesW	lib/sqlite3.c	32493;"	d	file:
osGetFileSize	lib/sqlite3.c	32506;"	d	file:
osGetFullPathNameA	lib/sqlite3.c	32514;"	d	file:
osGetFullPathNameW	lib/sqlite3.c	32523;"	d	file:
osGetLastError	lib/sqlite3.c	32528;"	d	file:
osGetProcAddressA	lib/sqlite3.c	32539;"	d	file:
osGetSystemInfo	lib/sqlite3.c	32544;"	d	file:
osGetSystemTime	lib/sqlite3.c	32548;"	d	file:
osGetSystemTimeAsFileTime	lib/sqlite3.c	32556;"	d	file:
osGetTempPathA	lib/sqlite3.c	32565;"	d	file:
osGetTempPathW	lib/sqlite3.c	32573;"	d	file:
osGetTickCount	lib/sqlite3.c	32577;"	d	file:
osGetVersionExA	lib/sqlite3.c	32585;"	d	file:
osGetcwd	lib/sqlite3.c	25350;"	d	file:
osHeapAlloc	lib/sqlite3.c	32590;"	d	file:
osHeapCreate	lib/sqlite3.c	32595;"	d	file:
osHeapDestroy	lib/sqlite3.c	32600;"	d	file:
osHeapFree	lib/sqlite3.c	32604;"	d	file:
osHeapReAlloc	lib/sqlite3.c	32608;"	d	file:
osHeapSize	lib/sqlite3.c	32613;"	d	file:
osHeapValidate	lib/sqlite3.c	32618;"	d	file:
osLoadLibraryA	lib/sqlite3.c	32627;"	d	file:
osLoadLibraryW	lib/sqlite3.c	32635;"	d	file:
osLocalFree	lib/sqlite3.c	32639;"	d	file:
osLocaltime	lib/sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	lib/sqlite3.c	32318;"	d	file:
osLockFile	lib/sqlite3.c	32644;"	d	file:
osLockFileEx	lib/sqlite3.c	32320;"	d	file:
osLockFileEx	lib/sqlite3.c	32653;"	d	file:
osMapViewOfFile	lib/sqlite3.c	32661;"	d	file:
osMkdir	lib/sqlite3.c	25432;"	d	file:
osMultiByteToWideChar	lib/sqlite3.c	32666;"	d	file:
osOpen	lib/sqlite3.c	25341;"	d	file:
osOpenDirectory	lib/sqlite3.c	25429;"	d	file:
osPread	lib/sqlite3.c	25383;"	d	file:
osPread64	lib/sqlite3.c	25390;"	d	file:
osPwrite	lib/sqlite3.c	25400;"	d	file:
osPwrite64	lib/sqlite3.c	25408;"	d	file:
osQueryPerformanceCounter	lib/sqlite3.c	32671;"	d	file:
osRead	lib/sqlite3.c	25376;"	d	file:
osReadFile	lib/sqlite3.c	32676;"	d	file:
osRmdir	lib/sqlite3.c	25435;"	d	file:
osSetEndOfFile	lib/sqlite3.c	32681;"	d	file:
osSetFilePointer	lib/sqlite3.c	32685;"	d	file:
osSleep	lib/sqlite3.c	32690;"	d	file:
osStat	lib/sqlite3.c	25353;"	d	file:
osSystemTimeToFileTime	lib/sqlite3.c	32694;"	d	file:
osUmask	lib/sqlite3.c	25441;"	d	file:
osUnlink	lib/sqlite3.c	25426;"	d	file:
osUnlockFile	lib/sqlite3.c	32319;"	d	file:
osUnlockFile	lib/sqlite3.c	32700;"	d	file:
osUnlockFileEx	lib/sqlite3.c	32709;"	d	file:
osUnmapViewOfFile	lib/sqlite3.c	32717;"	d	file:
osWideCharToMultiByte	lib/sqlite3.c	32721;"	d	file:
osWrite	lib/sqlite3.c	25393;"	d	file:
osWriteFile	lib/sqlite3.c	32726;"	d	file:
over	lib/battlefield/bullet.h	/^    char over[32];$/;"	m	struct:hit_effect
overflow	lib/sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	lib/sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	lib/battlefield/buffer.h	/^	int owner;$/;"	m	struct:buffer
owner	lib/battlefield/bullet.h	/^	int owner;$/;"	m	struct:bullet
owner	lib/battlefield/skill.h	/^	int owner;$/;"	m	struct:skill
owner	lib/sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	lib/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	../framework/array.c	/^	void * p[1];$/;"	m	struct:array	file:
p	lib/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon37	file:
p1	lib/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	lib/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	lib/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	lib/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	lib/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	lib/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	lib/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	lib/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p4	lib/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon37	file:
p4type	lib/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	lib/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	lib/sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	lib/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	lib/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	lib/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	lib/sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if eOperator==WO_AND *\/$/;"	m	union:WhereTerm::__anon53	file:
pAppData	lib/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	lib/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pAppData	lib/sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	lib/sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	lib/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	lib/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	lib/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pArg	lib/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	lib/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pAuthArg	lib/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	lib/sqlite3.c	/^    void *pAux;                   \/* Aux data for the i-th argument *\/$/;"	m	struct:VdbeFunc::AuxData	file:
pAux	lib/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pBackup	lib/sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	lib/sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	lib/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	lib/sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	lib/sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	lib/sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	lib/sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	lib/sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	lib/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	lib/sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	lib/sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBuf	lib/sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBuf	lib/sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pBusyHandlerArg	lib/sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	lib/sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	lib/sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	lib/sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCell	lib/sqlite3.c	/^  u8 *pCell;     \/* Pointer to the start of cell content *\/$/;"	m	struct:CellInfo	file:
pCheck	lib/sqlite3.c	/^  Expr *pCheck;        \/* The AND of all CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	lib/sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	lib/sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	lib/sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	lib/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon37	file:
pColl	lib/sqlite3.c	/^  CollSeq *pColl;        \/* The collation type of the column or 0 *\/$/;"	m	struct:Expr	file:
pColl	lib/sqlite3.c	/^  CollSeq *pColl;       \/* Collating sequence *\/$/;"	m	struct:sqlite3_context	file:
pCollNeededArg	lib/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pColumns	lib/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	lib/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pContext	lib/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	lib/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pContext	lib/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeMatchArg	file:
pContext	lib/sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pCsr	lib/sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	lib/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	lib/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	lib/sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCtx	lib/sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	lib/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	lib/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	lib/sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	lib/sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	lib/sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	lib/sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDbFd	lib/sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	lib/sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	lib/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::__anon47	file:
pDefault	lib/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	lib/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	lib/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	lib/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	lib/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	lib/sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	lib/sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	lib/sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	lib/sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	lib/sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	lib/sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	lib/sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	lib/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	lib/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	lib/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	lib/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	lib/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	lib/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	lib/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	lib/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	lib/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	lib/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of named expressions *\/$/;"	m	struct:NameContext	file:
pEnd	lib/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	lib/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	lib/sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	lib/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExplain	lib/sqlite3.c	/^  Explain *pExplain;      \/* The explainer *\/$/;"	m	struct:Vdbe	file:
pExpr	lib/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	lib/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	lib/sqlite3.c	/^    Expr *pExpr;           \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	lib/sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	lib/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	lib/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	lib/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	lib/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE.  VALUES clause for INSERT *\/$/;"	m	struct:TriggerStep	file:
pExtra	lib/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	lib/sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pExtra	lib/sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pFKey	lib/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	lib/sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFile	lib/sqlite3.c	/^  sqlite3_file *pFile;            \/* File iterator is reading from *\/$/;"	m	struct:VdbeSorterIter	file:
pFiller	lib/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	lib/sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	lib/sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	lib/sqlite3.c	/^  os2ShmLink *pFirst;        \/* First os2ShmLink object pointing to this *\/$/;"	m	struct:os2ShmNode	file:
pFirst	lib/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon48	typeref:struct:__anon48::MemBlockHdr	file:
pFirst	lib/sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	lib/sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pFrame	lib/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::__anon47	file:
pFrame	lib/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	lib/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	lib/sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	lib/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	lib/sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	lib/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	lib/sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	lib/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	lib/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon37	file:
pFunc	lib/sqlite3.c	/^  FuncDef *pFunc;               \/* The definition of the function *\/$/;"	m	struct:VdbeFunc	file:
pFunc	lib/sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information.  MUST BE FIRST *\/$/;"	m	struct:sqlite3_context	file:
pGeom	lib/sqlite3.c	/^  sqlite3_rtree_geometry *pGeom;  \/* Constraint callback argument for a MATCH *\/$/;"	m	struct:RtreeConstraint	file:
pGroup	lib/sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	lib/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	lib/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	lib/sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	lib/sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	lib/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	lib/sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	lib/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	lib/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon37	file:
pId	lib/sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	lib/sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	lib/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	lib/sqlite3.c	/^    Index *pIdx;                   \/* Index when WHERE_INDEXED is true *\/$/;"	m	union:WherePlan::__anon42	file:
pIdxInfo	lib/sqlite3.c	/^  sqlite3_index_info *pIdxInfo;  \/* Index info for n-th source table *\/$/;"	m	struct:WhereLevel	file:
pInJournal	lib/sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	lib/sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIndex	lib/sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	lib/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInitMutex	lib/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	lib/sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	lib/sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	lib/sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	lib/sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	lib/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	lib/sqlite3.c	/^  void *pKey;      \/* Saved key that was cursor's last known position *\/$/;"	m	struct:BtCursor	file:
pKey	lib/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	lib/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon37	file:
pKeyInfo	lib/sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	lib/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	lib/sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	lib/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	lib/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon48	typeref:struct:__anon48::MemBlockHdr	file:
pLast	lib/sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	lib/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	lib/sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	lib/sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	lib/sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	lib/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	lib/sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	lib/sqlite3.c	/^    ExprList *pList;     \/* Function arguments or in "<expr> IN (<expr-list)" *\/$/;"	m	union:Expr::__anon41	file:
pList	lib/sqlite3.c	/^  ExprList *pList;$/;"	m	struct:ValueList	file:
pList	lib/sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	lib/sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	lib/sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	lib/sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pLock	lib/sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	lib/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLruHead	lib/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	lib/sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	lib/sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	lib/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	lib/sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMaskSet	lib/sqlite3.c	/^  WhereMaskSet *pMaskSet;  \/* Mapping of table cursor numbers to bitmasks *\/$/;"	m	struct:WhereClause	file:
pMem	lib/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon37	file:
pMem	lib/sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMethod	lib/sqlite3.c	/^  const sqlite3_io_methods *pMethod;  \/* Always the first entry *\/$/;"	m	struct:os2File	file:
pMethod	lib/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	lib/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	lib/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	lib/sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	lib/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMethods	lib/sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pMod	lib/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pModule	lib/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	lib/sqlite3.c	/^  const sqlite3_module *pModule;     \/* Module for cursor pVtabCursor *\/$/;"	m	struct:VdbeCursor	file:
pModule	lib/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	lib/sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pModule	lib/sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNC	lib/sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon46	file:
pName	lib/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNewTable	lib/sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	lib/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	lib/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	lib/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	lib/sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	lib/sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	lib/sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	lib/sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	lib/sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	lib/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	lib/sqlite3.c	/^  Index *pNext;    \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	lib/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	lib/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	lib/sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	lib/sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	lib/sqlite3.c	/^  RtreeNode *pNext;                 \/* Next node in this hash chain *\/$/;"	m	struct:RtreeNode	file:
pNext	lib/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	lib/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	lib/sqlite3.c	/^  SorterRecord *pNext;$/;"	m	struct:SorterRecord	file:
pNext	lib/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	lib/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	lib/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	lib/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	lib/sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	lib/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	lib/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	lib/sqlite3.c	/^  os2ShmLink *pNext;         \/* Next os2Shm with the same os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
pNext	lib/sqlite3.c	/^  os2ShmNode *pNext;         \/* Next in list of all os2ShmNode objects *\/$/;"	m	struct:os2ShmNode	file:
pNext	lib/sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	lib/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	lib/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	lib/sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	lib/sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	lib/sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	lib/sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	lib/sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	lib/sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNext	lib/sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pNextBlocked	lib/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	lib/sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	lib/sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	lib/sqlite3.c	/^  FKey *pNextFrom;  \/* Next foreign key in pFrom *\/$/;"	m	struct:FKey	file:
pNextId	lib/sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextTo	lib/sqlite3.c	/^  FKey *pNextTo;    \/* Next foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pNextZombie	lib/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	lib/sqlite3.c	/^  RtreeNode *pNode;                 \/* Node cursor is currently pointing at *\/$/;"	m	struct:RtreeCursor	file:
pOffset	lib/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	lib/sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	lib/sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	lib/sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	lib/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	lib/sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if eOperator==WO_OR *\/$/;"	m	union:WhereTerm::__anon53	file:
pOrderBy	lib/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOuter	lib/sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pPCache	lib/sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	lib/sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	lib/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	lib/sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	lib/sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	lib/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	lib/sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	lib/sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	lib/sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	lib/sqlite3.c	/^  RtreeNode *pParent;               \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	lib/sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	lib/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;           \/* The parser context *\/$/;"	m	struct:WhereClause	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;       \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	lib/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pPhrase	lib/sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	lib/sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	lib/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	lib/sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	lib/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	lib/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	lib/sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	lib/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pPrior	lib/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	lib/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	lib/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon37	file:
pProgram	lib/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	lib/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	lib/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	lib/sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	lib/sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	lib/sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	lib/sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReal	lib/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon37	file:
pReal	lib/sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pRecord	lib/sqlite3.c	/^  SorterRecord *pRecord;          \/* Head of in-memory record list *\/$/;"	m	struct:VdbeSorter	file:
pReprepare	lib/sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResultSet	lib/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	lib/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	lib/sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	lib/sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	lib/sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRightmost	lib/sqlite3.c	/^  Select *pRightmost;    \/* Right-most select in a compound select statement *\/$/;"	m	struct:Select	file:
pRollbackArg	lib/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	lib/sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	lib/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::__anon47	file:
pSavepoint	lib/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	lib/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	lib/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	lib/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	lib/sqlite3.c	/^  Schema *pSchema; \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	lib/sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	lib/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	lib/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	lib/sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	lib/sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	lib/sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	lib/sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	lib/sqlite3.c	/^    Select *pSelect;     \/* Used for sub-selects and "<expr> IN (<select>)" *\/$/;"	m	union:Expr::__anon41	file:
pSelect	lib/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	lib/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	lib/sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSelect	lib/sqlite3.c	/^  Select *pSelect;$/;"	m	struct:ValueList	file:
pSem	lib/sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	lib/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	lib/sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	lib/sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmLink	lib/sqlite3.c	/^  os2ShmLink *pShmLink;     \/* Instance of shared memory on this file *\/$/;"	m	struct:os2File	file:
pShmNode	lib/sqlite3.c	/^  os2ShmNode *pShmNode;      \/* The underlying os2ShmNode object *\/$/;"	m	struct:os2ShmLink	file:
pShmNode	lib/sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	lib/sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	lib/sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSorter	lib/sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:
pSrc	lib/sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	lib/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrcDb	lib/sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	lib/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	lib/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	lib/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	lib/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	lib/sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	lib/sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	lib/sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	lib/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	lib/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	lib/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	lib/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	lib/sqlite3.c	/^  Table *pTab;$/;"	m	struct:VtabCtx	file:
pTabList	lib/sqlite3.c	/^  SrcList *pTabList;             \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	lib/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	lib/sqlite3.c	/^  Table *pTable;   \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	lib/sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTemp1	lib/sqlite3.c	/^  sqlite3_file *pTemp1;           \/* PMA file 1 *\/$/;"	m	struct:VdbeSorter	file:
pTerm	lib/sqlite3.c	/^    struct WhereTerm *pTerm;       \/* WHERE clause term for OR-search *\/$/;"	m	union:WherePlan::__anon42	typeref:struct:WherePlan::__anon42::WhereTerm	file:
pTmpSpace	lib/sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	lib/sqlite3.c	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared	file:
pToken	lib/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	lib/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	lib/sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	lib/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	lib/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	lib/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	lib/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	lib/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	lib/sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTree	lib/sqlite3.c	/^  struct RowSetEntry *pTree;     \/* Binary tree of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pTrig	lib/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	lib/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	lib/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	lib/sqlite3.c	101016;"	d	file:
pTrigger	lib/sqlite3.c	85929;"	d	file:
pTrigger	lib/sqlite3.c	90019;"	d	file:
pTriggerPrg	lib/sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	lib/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	lib/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	lib/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	lib/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used to unpack keys *\/$/;"	m	struct:VdbeSorter	file:
pUnused	lib/sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	lib/sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	lib/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	lib/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	lib/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUser	lib/sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pUserData	lib/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	lib/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	lib/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	lib/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	lib/sqlite3.c	/^  VTable *pVTable;$/;"	m	struct:VtabCtx	file:
pVal	lib/sqlite3.c	/^  void *pVal;$/;"	m	struct:SorterRecord	file:
pVdbe	lib/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	lib/sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:
pVdbe	lib/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeFunc	lib/sqlite3.c	/^    VdbeFunc *pVdbeFunc;   \/* Used when p4type is P4_VDBEFUNC *\/$/;"	m	union:VdbeOp::__anon37	file:
pVdbeFunc	lib/sqlite3.c	/^  VdbeFunc *pVdbeFunc;  \/* Auxilary data, if created. *\/$/;"	m	struct:sqlite3_context	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	lib/sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	lib/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon37	file:
pVtab	lib/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	lib/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtab	lib/sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
pVtabCtx	lib/sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	lib/sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pVtabIdx	lib/sqlite3.c	/^    sqlite3_index_info *pVtabIdx;  \/* Virtual table index to use *\/$/;"	m	union:WherePlan::__anon42	file:
pWC	lib/sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWC	lib/sqlite3.c	/^  struct WhereClause *pWC;       \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	typeref:struct:WhereInfo::WhereClause	file:
pWal	lib/sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	lib/sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	lib/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	lib/sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	lib/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	lib/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	lib/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWriteNode	lib/sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	lib/sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	lib/sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	lib/sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	lib/sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
package	lib/battlefield/randomAppearance.c	/^    const char * package;$/;"	m	struct:__anon32	file:
padToSectorBoundary	lib/sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	lib/sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:
pageHash	lib/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	lib/sqlite3.c	/^static int pageInJournal(PgHdr *pPg){$/;"	f	file:
pageReinit	lib/sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	lib/sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	lib/sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerBeginReadTransaction	lib/sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	lib/sqlite3.c	39217;"	d	file:
pagerExclusiveLock	lib/sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerLockDb	lib/sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	lib/sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	lib/sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	lib/sqlite3.c	39216;"	d	file:
pagerOpentemp	lib/sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	lib/sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	lib/sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReportSize	lib/sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	lib/sqlite3.c	40482;"	d	file:
pagerRollbackWal	lib/sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	lib/sqlite3.c	39214;"	d	file:
pagerStress	lib/sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	lib/sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	lib/sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	lib/sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	lib/sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	lib/sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	lib/sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	lib/sqlite3.c	39213;"	d	file:
pagerWalFrames	lib/sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	lib/sqlite3.c	39215;"	d	file:
pager_cksum	lib/sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	lib/sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	lib/sqlite3.c	39598;"	d	file:
pager_delmaster	lib/sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	lib/sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster){$/;"	f	file:
pager_error	lib/sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	lib/sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_lookup	lib/sqlite3.c	/^static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){$/;"	f	file:
pager_open_journal	lib/sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	lib/sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	lib/sqlite3.c	39599;"	d	file:
pager_playback	lib/sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	lib/sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	lib/sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	lib/sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	lib/sqlite3.c	39600;"	d	file:
pager_truncate	lib/sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	lib/sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	lib/sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	lib/sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	lib/sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	lib/sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parent	lib/battlefield/jsmn.h	/^	int parent;$/;"	m	struct:__anon8
parentWrite	lib/sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parry_ratio	lib/fight_type.h	/^	int64_t parry_ratio;$/;"	m	struct:tagCHARACTER_INFO
parseAnimationData	lib/battlefield/bone.c	/^static int parseAnimationData(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n)$/;"	f	file:
parseAnimationDataArray	lib/battlefield/bone.c	/^static int parseAnimationDataArray(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n)$/;"	f	file:
parseAnimationDataArrayBin	lib/battlefield/bone.c	/^static size_t parseAnimationDataArrayBin(struct Bone * sbone,$/;"	f	file:
parseAnimationDataBin	lib/battlefield/bone.c	/^static size_t parseAnimationDataBin(struct Bone * sbone,$/;"	f	file:
parseCell	lib/sqlite3.c	50323;"	d	file:
parseDateOrTime	lib/sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseFile	config/generate.lua	/^function parseFile(name, keys)$/;"	f
parseFile	config/soldier/bak/soldier.lua	/^function parseFile(name)$/;"	f
parseFrameData	lib/battlefield/bone.c	/^static int parseFrameData(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseFrameDataArray	lib/battlefield/bone.c	/^static int parseFrameDataArray(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseFrameDataArrayBin	lib/battlefield/bone.c	/^static int parseFrameDataArrayBin(struct Bone * sbone,$/;"	f	file:
parseFrameDataBin	lib/battlefield/bone.c	/^static int parseFrameDataBin(struct Bone * sbone,$/;"	f	file:
parseHhMmSs	lib/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseLine	config/generate.lua	/^function parseLine(line, keys)$/;"	f
parseLine	config/soldier/bak/soldier.lua	/^function parseLine(line)$/;"	f
parseModifier	lib/sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseMoveBoneData	lib/battlefield/bone.c	/^static int parseMoveBoneData(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseMoveBoneDataArray	lib/battlefield/bone.c	/^static int parseMoveBoneDataArray(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseMoveBoneDataArrayBin	lib/battlefield/bone.c	/^static int parseMoveBoneDataArrayBin(struct Bone * sbone,$/;"	f	file:
parseMoveBoneDataBin	lib/battlefield/bone.c	/^static int parseMoveBoneDataBin(struct Bone * sbone,$/;"	f	file:
parseMoveData	lib/battlefield/bone.c	/^static int parseMoveData(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseMoveDataArray	lib/battlefield/bone.c	/^static int parseMoveDataArray(struct Bone * sbone, const char * buffer, jsmntok_t * tokens, int n,$/;"	f	file:
parseMoveDataArrayBin	lib/battlefield/bone.c	/^static int parseMoveDataArrayBin(struct Bone * sbone,$/;"	f	file:
parseMoveDataBin	lib/battlefield/bone.c	/^static int parseMoveDataBin(struct Bone * sbone,$/;"	f	file:
parseTimezone	lib/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	lib/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parse_array	lib/battlefield/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_hex4	lib/battlefield/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_number	lib/battlefield/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	lib/battlefield/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_string	lib/battlefield/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_value	lib/battlefield/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
particle	lib/battlefield/bullet.h	/^        char particle[32];$/;"	m	struct:bullet::__anon36
particle_scale	lib/battlefield/bullet.h	/^		float particle_scale;$/;"	m	struct:bullet::__anon36
pass	lib/fight_type.h	/^	PFIGHT_REWARD_CONFIG pass;$/;"	m	struct:tagSTORY_FIGHT_REWARD_INFO
pass_reward_id	lib/fight_type.h	/^	int32_t pass_reward_id[2];$/;"	m	struct:tagPVE_FIGHT_CONFIG
patternCompare	lib/sqlite3.c	/^static int patternCompare($/;"	f	file:
pause	lib/battlefield/battlefield.h	/^	int pause;$/;"	m	struct:battlefield
payloadSize	lib/sqlite3.c	/^  int payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pbc_rmessage_int64	../framework/pbc_int64.c	/^int64_t pbc_rmessage_int64(struct pbc_rmessage * msg, const char * key, int idx)$/;"	f
pbc_rmessage_int64	lib/battlefield/encode.c	/^static int64_t pbc_rmessage_int64(struct pbc_rmessage * msg, const char * key, int idx)$/;"	f	file:
pbc_wmessage_int64	../framework/pbc_int64.c	/^void pbc_wmessage_int64(struct pbc_wmessage * msg, const char * key, int64_t value)$/;"	f
pbc_wmessage_int64	lib/battlefield/encode.c	/^static void pbc_wmessage_int64(struct pbc_wmessage * msg, const char * key, int64_t value)$/;"	f	file:
pc	lib/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	lib/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	lib/sqlite3.c	36988;"	d	file:
pcache1Alloc	lib/sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	lib/sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	lib/sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	lib/sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	lib/sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	lib/sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	lib/sqlite3.c	36993;"	d	file:
pcache1Fetch	lib/sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1Free	lib/sqlite3.c	/^static int pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	lib/sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	lib/sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	lib/sqlite3.c	36994;"	d	file:
pcache1MemSize	lib/sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	lib/sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	lib/sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	lib/sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	lib/sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	lib/sqlite3.c	/^static int pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	lib/sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	lib/sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	lib/sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	lib/sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	lib/sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	lib/sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	lib/sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	lib/sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheAddToDirtyList	lib/sqlite3.c	/^static void pcacheAddToDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheCheckSynced	lib/sqlite3.c	/^static int pcacheCheckSynced(PCache *pCache){$/;"	f	file:
pcacheMergeDirtyList	lib/sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheRemoveFromDirtyList	lib/sqlite3.c	/^static void pcacheRemoveFromDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheSortDirtyList	lib/sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	lib/sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pend1	lib/battlefield/battlefield.h	/^	int pend1;$/;"	m	struct:KingFlag
pend2	lib/battlefield/battlefield.h	/^	int pend2;$/;"	m	struct:KingFlag
pend3	lib/battlefield/battlefield.h	/^	int pend3;$/;"	m	struct:KingFlag
pgno	lib/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	lib/sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	lib/sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pipe	../framework/pipe.c	/^struct pipe {$/;"	s	file:
plan	lib/sqlite3.c	/^  WherePlan plan;       \/* query plan for this element of the FROM clause *\/$/;"	m	struct:WhereLevel	file:
plan	lib/sqlite3.c	/^  WherePlan plan;    \/* The lookup strategy *\/$/;"	m	struct:WhereCost	file:
playSound	lib/battlefield/battlefield_imp.c	/^void playSound(struct battlefield * battle, const char * sound)$/;"	f
playerid	../framework/package.h	/^	uint32_t playerid;$/;"	m	struct:translate_header
pnBytesFreed	lib/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
popEvent	lib/battlefield/event.c	/^struct event * popEvent()$/;"	f
porterClose	lib/sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	lib/sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	lib/sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	lib/sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	lib/sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	lib/sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	lib/sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	lib/sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	lib/sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	lib/sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	lib/sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	lib/sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
pos	lib/battlefield/jsmn.h	/^	unsigned int pos; \/* offset in the JSON string *\/$/;"	m	struct:__anon9
pos	lib/battlefield/wave.h	/^    int pos;$/;"	m	struct:wave
position	lib/battlefield/bullet.h	/^	enum effect_position position;$/;"	m	struct:hit_effect	typeref:enum:hit_effect::effect_position
posixOpen	lib/sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	lib/sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
power	lib/battlefield/bullet.h	/^	int power;$/;"	m	struct:bullet
power	lib/battlefield/role.h	/^		int power;$/;"	m	struct:role::__anon26
ppNextElem	lib/sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
pr2six	lib/lua_base64.c	/^static const unsigned char pr2six[256] =$/;"	v	file:
prefix	lib/sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	lib/sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	lib/sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	lib/sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepareAnimation	lib/battlefield/battlefield_imp.c	/^void prepareAnimation(const char * file)$/;"	f
prepareSound	lib/battlefield/battlefield_imp.c	/^void prepareSound(const char * name)$/;"	f
prepare_v2	lib/sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereqAll	lib/sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	lib/sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	../framework/dlist.h	/^    struct dlist_node * prev;$/;"	m	struct:dlist_node	typeref:struct:dlist_node::dlist_node
prev	lib/battlefield/buffer.h	/^    struct buffer * prev;$/;"	m	struct:buffer	typeref:struct:buffer::buffer
prev	lib/battlefield/bullet.h	/^    struct bullet * prev;$/;"	m	struct:bullet	typeref:struct:bullet::bullet
prev	lib/battlefield/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	lib/battlefield/dlist.h	/^    struct dlist_node * prev;$/;"	m	struct:dlist_node	typeref:struct:dlist_node::dlist_node
prev	lib/battlefield/wave.h	/^    struct wave * prev;$/;"	m	struct:wave	typeref:struct:wave::wave
prev	lib/fight_type.h	/^	struct tagFIGHT_REWARD_CONFIG* prev;$/;"	m	struct:tagFIGHT_REWARD_CONFIG	typeref:struct:tagFIGHT_REWARD_CONFIG::tagFIGHT_REWARD_CONFIG
prev	lib/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon49::__anon51	file:
prev	lib/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	lib/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	lib/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	lib/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon49::__anon50	file:
print_array	lib/battlefield/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt)$/;"	f	file:
print_number	lib/battlefield/cJSON.c	/^static char *print_number(cJSON *item)$/;"	f	file:
print_object	lib/battlefield/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt)$/;"	f	file:
print_pager_state	lib/sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
print_string	lib/battlefield/cJSON.c	/^static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}$/;"	f	file:
print_string_ptr	lib/battlefield/cJSON.c	/^static char *print_string_ptr(const char *str)$/;"	f	file:
print_value	lib/battlefield/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt)$/;"	f	file:
process_conn_message	../framework/network.c	/^static size_t process_conn_message(struct network * net, struct conn * c, char * data, size_t len)$/;"	f	file:
profile	lib/sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	lib/sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	lib/sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	lib/sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	lib/sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	lib/sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	lib/sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	lib/sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	lib/sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	lib/sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	lib/sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	lib/sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	lib/sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	lib/sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	lib/sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	lib/sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	lib/sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	lib/sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	lib/sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	lib/sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	lib/sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pthreadMutexAlloc	lib/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	lib/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	lib/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	lib/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	lib/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	lib/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	lib/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	lib/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	lib/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptr	../framework/amf.c	/^	const char * ptr;$/;"	m	struct:__anon57	file:
ptr	lib/battlefield/battlefield.h	/^	void * ptr;$/;"	m	struct:battlefield
ptr	lib/battlefield/buffer.h	/^    void * ptr;$/;"	m	struct:buffer_effect
ptr	lib/battlefield/script.h	/^    void * ptr;$/;"	m	struct:script
ptr	lib/battlefield/skill.h	/^    struct skill * ptr;$/;"	m	union:SkillUnion	typeref:struct:SkillUnion::skill
ptrmapGet	lib/sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	lib/sqlite3.c	50212;"	d	file:
ptrmapPageno	lib/sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	lib/sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	lib/sqlite3.c	50211;"	d	file:
ptrmapPutOvflPtr	lib/sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	lib/sqlite3.c	50213;"	d	file:
pushAMF	lib/lua_AMF.c	/^static int pushAMF(lua_State * L, amf_value * value)$/;"	f	file:
pushBullet	lib/battlefield/skill.c	/^static void pushBullet(lua_State * L, struct bullet * bullet)$/;"	f	file:
pushEvent	lib/battlefield/event.c	/^void pushEvent(struct event * event)$/;"	f
pushListener	lib/battlefield/event.c	/^void pushListener(int id, struct eventListener * listener)$/;"	f
pushNode	lib/lua_xml.c	/^static int pushNode(lua_State * L, xml_node_t * node)$/;"	f	file:
pushOntoSorter	lib/sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
pushReply	lib/lua_redis.c	/^static void pushReply(lua_State * L, redisReply * reply)$/;"	f	file:
push_value	lib/pbc-lua.c	/^push_value(lua_State *L, int type, const char * typename, union pbc_value *v) {$/;"	f	file:
put2byte	lib/sqlite3.c	49088;"	d	file:
put32bits	lib/sqlite3.c	39457;"	d	file:
put4byte	lib/sqlite3.c	49090;"	d	file:
putVarint	lib/sqlite3.c	11858;"	d	file:
putVarint32	lib/sqlite3.c	11856;"	d	file:
pzErrMsg	lib/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon45	file:
quality	lib/battlefield/role.h	/^    int quality;$/;"	m	struct:Appearance
quality	lib/fight_type.h	/^	int32_t quality;$/;"	m	struct:tagCHARACTER_INFO
quality	lib/fight_type.h	/^	int32_t quality;$/;"	m	struct:tagKING_FIGHT_INFO
querySharedCacheTableLock	lib/sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	lib/sqlite3.c	49452;"	d	file:
queryTestTokenizer	lib/sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	lib/sqlite3.c	/^int queryTokenizer($/;"	f	file:
queue	lib/battlefield/battlefield.h	/^        } queue;  \/\/ upcoming opt$/;"	m	struct:battlefield::__anon15	typeref:struct:battlefield::__anon15::__anon17
quoteFunc	lib/sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	lib/sqlite3.c	/^    double r;       \/* Value if eType is SQLITE_FLOAT *\/$/;"	m	union:IndexSample::__anon39	file:
r	lib/sqlite3.c	/^  double r;           \/* Real value *\/$/;"	m	struct:Mem	file:
rCost	lib/sqlite3.c	/^  double rCost;      \/* Overall cost of pursuing this search strategy *\/$/;"	m	struct:WhereCost	file:
rSum	lib/sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rValue	lib/sqlite3.c	/^  double rValue;                  \/* Constraint value. *\/$/;"	m	struct:RtreeConstraint	file:
randValue	lib/battlefield/battlefield.c	/^static int randValue(struct role * role, void * data)$/;"	f	file:
random	lib/battlefield/battlefield.h	/^	struct WELLRNG512aGenerator random;$/;"	m	struct:battlefield	typeref:struct:battlefield::WELLRNG512aGenerator
randomAppearance	lib/battlefield/randomAppearance.c	/^struct Appearance * randomAppearance(struct WELLRNG512aGenerator * generator, struct Appearance * appearance, int hint)$/;"	f
randomBlob	lib/sqlite3.c	/^static void randomBlob($/;"	f	file:
randomByte	lib/sqlite3.c	/^static u8 randomByte(void){$/;"	f	file:
randomFill	lib/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	lib/sqlite3.c	/^static void randomFunc($/;"	f	file:
randomValue	lib/battlefield/fight.c	/^uint32_t randomValue()$/;"	f
randomWeaponID	lib/battlefield/randomAppearance.c	/^int randomWeaponID(const char * name)$/;"	f
random_inited	lib/battlefield/fight.c	/^static int random_inited = 0;$/;"	v	file:
randomness	lib/sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
range	lib/battlefield/role.c	/^static const int range[] = {$/;"	v	file:
range	lib/battlefield/role.h	/^        int range;$/;"	m	struct:role::__anon26
rank	lib/fight_type.h	/^	int32_t rank;$/;"	m	struct:tagPVE_FIGHT_CONFIG
rate	lib/battlefield/battlefield.h	/^	int rate;$/;"	m	struct:reward
rate	lib/battlefield/role.h	/^			int rate;$/;"	m	struct:role::__anon29::__anon30
rate	lib/battlefield/role.h	/^			int rate;$/;"	m	struct:role::__anon29::__anon31
rate	lib/battlefield/role.h	/^        int rate;$/;"	m	struct:HitCompareValue::__anon21
rate	lib/battlefield/role.h	/^        int rate;$/;"	m	struct:HitCompareValue::__anon22
rate	lib/fight_type.h	/^	int32_t rate;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
rbuf	../framework/network.c	/^	struct buffer * rbuf;$/;"	m	struct:conn	typeref:struct:conn::buffer	file:
rc	lib/sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	lib/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	lib/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	lib/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon45	file:
rc	lib/sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
read32bits	lib/sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readAppearance	lib/lua_fight.c	/^static int readAppearance(lua_State * L, struct Appearance * appearance)$/;"	f	file:
readBoneInfo	lib/battlefield/bone.c	/^static void readBoneInfo(struct Bone * sbone)$/;"	f	file:
readCoord	lib/sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	lib/sqlite3.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readFightConfig	lib/lua_fight.c	/^static int readFightConfig(lua_State * L, struct FightConfig * config)$/;"	f	file:
readFileData	lib/battlefield/battlefield_imp.c	/^char * readFileData(const char * filename, size_t * len)$/;"	f
readForceFromLua	lib/lua_fight.c	/^static int readForceFromLua(lua_State * L, struct battlefield * battle, int force, struct FightConfig * config)$/;"	f	file:
readInt16	lib/sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	lib/sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	lib/sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readKing	lib/lua_fight.c	/^static int readKing(lua_State * L, struct battlefield * battle, int force, struct FightConfig * config)$/;"	f	file:
readKingEnsign	lib/lua_fight.c	/^static int readKingEnsign(lua_State * L, struct battlefield * battle,  int force) {$/;"	f	file:
readLock	lib/sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	lib/sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	lib/sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	lib/sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
readOnly	lib/sqlite3.c	/^  u8 readOnly;            \/* True for read-only statements *\/$/;"	m	struct:Vdbe	file:
readRole	lib/lua_fight.c	/^static int readRole(lua_State * L, struct battlefield * battle, int force ,int pos, struct FightConfig * config)$/;"	f	file:
readRoles	lib/lua_fight.c	/^static int readRoles(lua_State * L, struct battlefield * battle, int force, struct FightConfig * config)$/;"	f	file:
read_file	lib/battlefield/encode.c	/^static void read_file (const char *filename , struct pbc_slice *slice) {$/;"	f	file:
read_ltable_boolean_field	lib/lua_fight.c	/^static int read_ltable_boolean_field(lua_State * L, int index, const char * field)$/;"	f	file:
read_ltable_integer_field	lib/lua_fight.c	/^static unsigned int read_ltable_integer_field(lua_State * L, int index, const char * field)$/;"	f	file:
read_ltable_integer_pos	lib/lua_fight.c	/^static unsigned int read_ltable_integer_pos(lua_State * L, int index, unsigned int pos)$/;"	f	file:
read_ltable_opt_float_field	lib/lua_fight.c	/^static float read_ltable_opt_float_field(lua_State * L, int index, const char * field, float def)$/;"	f	file:
read_ltable_opt_integer_field	lib/lua_fight.c	/^static unsigned int read_ltable_opt_integer_field(lua_State * L, int index, const char * field, unsigned int def)$/;"	f	file:
read_ltable_opt_integer_pos	lib/lua_fight.c	/^static unsigned int read_ltable_opt_integer_pos(lua_State * L, int index, unsigned int pos, unsigned int def)$/;"	f	file:
read_ltable_opt_string_field	lib/lua_fight.c	/^static const char * read_ltable_opt_string_field(lua_State * L, int index, const char * field, const char * def)$/;"	f	file:
readpoint	lib/sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	lib/sqlite3.c	/^static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){$/;"	f	file:
realloc	lib/sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
record	lib/battlefield/bullet.h	/^    int record;$/;"	m	struct:bullet
record	lib/battlefield/skill.h	/^    int record;$/;"	m	struct:skill
record_clean	lib/battlefield/bullet.c	/^void record_clean(int id)$/;"	f
record_cleanup	lib/battlefield/bullet.c	/^void record_cleanup()$/;"	f
record_lua_connection	scripts/network.c	/^static void record_lua_connection(lua_State * L, int index, resid_t conn)$/;"	f	file:
record_next_id	lib/battlefield/bullet.c	/^int record_next_id(struct battlefield * battle, int caster, const char * name)$/;"	f
record_reduce	lib/battlefield/bullet.c	/^void record_reduce(int id, long long hurt, long long health)$/;"	f
record_system_cleanup	lib/battlefield/record.c	/^void record_system_cleanup()$/;"	f
record_system_start	lib/battlefield/record.c	/^void record_system_start(long long seed)$/;"	f
ref	lib/battlefield/battlefield.c	/^static int ref = 0;$/;"	v	file:
ref	lib/battlefield/role.h	/^    int ref;$/;"	m	struct:role
ref	lib/battlefield/script.h	/^	int ref;$/;"	m	struct:script
ref	lib/lua_network.c	/^	int ref;$/;"	m	struct:Socket	file:
referencesOtherTables	lib/sqlite3.c	/^static int referencesOtherTables($/;"	f	file:
regCtr	lib/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regReturn	lib/sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regRoot	lib/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	lib/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	lib/sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	lib/sqlite3.c	/^static void registerTrace(FILE *out, int iReg, Mem *p){$/;"	f	file:
rehash	lib/sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	lib/sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	lib/sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	lib/sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
release	lib/battlefield/buffer.h	/^    void (*release) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
releaseAllSavepoints	lib/sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	lib/sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	lib/sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	lib/sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	lib/sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	lib/sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	lib/sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	lib/sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	lib/sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	lib/sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	lib/sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
remove_lua_connection	scripts/network.c	/^static void remove_lua_connection(lua_State * L, resid_t conn)$/;"	f	file:
remove_role_from_slot	lib/battlefield/battlefield.c	/^static struct role * remove_role_from_slot(struct battlefield * battle, int i)$/;"	f	file:
renameParentFunc	lib/sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	lib/sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	lib/sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	lib/sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
reopen_log	lib/lua_log.c	/^static FILE * reopen_log(const char * fname, time_t now)$/;"	f	file:
reopen_log_file	../framework/log.c	/^static FILE * reopen_log_file(const char * name, time_t now)$/;"	f	file:
repeat	lib/battlefield/scheduler.c	/^        struct timer_list repeat;$/;"	m	struct:scheduler::__anon34	typeref:struct:scheduler::__anon34::timer_list	file:
replaceFunc	lib/sqlite3.c	/^static void replaceFunc($/;"	f	file:
reserved	lib/sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	lib/sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	lib/sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resid_t	../framework/lrm.h	/^typedef unsigned int resid_t; $/;"	t
resid_t	../framework/network.h	/^typedef unsigned int resid_t; $/;"	t
resolveAlias	lib/sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	lib/sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	lib/sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	lib/sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	lib/sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	lib/sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	lib/sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	lib/sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	lib/sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	lib/sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
resource_list_end	../framework/lrm.c	/^static struct lresource resource_list_end;$/;"	v	typeref:struct:lresource	file:
restoreCursorPosition	lib/sqlite3.c	50064;"	d	file:
result_blob	lib/sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_double	lib/sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	lib/sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	lib/sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	lib/sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	lib/sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	lib/sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	lib/sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	lib/sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	lib/sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	lib/sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	lib/sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	lib/sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	lib/sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_value	lib/sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	lib/sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
resumeScript	lib/battlefield/script.c	/^static int resumeScript(struct script * script)$/;"	f	file:
retRangeStart	lib/sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
retryIoerr	lib/sqlite3.c	/^static int retryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
returnSingleInt	lib/sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
revert	../framework/mfile.c	/^	char  revert[12];$/;"	m	struct:MFileHeader	file:
revert	../framework/mfile.c	/^	uint32_t revert;$/;"	m	struct:MFileIndex	file:
revert	lib/mfile.c	/^	char  revert[12];$/;"	m	struct:MFileHeader	file:
revert	lib/mfile.c	/^	uint32_t revert;$/;"	m	struct:MFileIndex	file:
reward	lib/battlefield/battlefield.h	/^	struct reward * reward;$/;"	m	struct:battlefield	typeref:struct:battlefield::reward
reward	lib/battlefield/battlefield.h	/^struct reward$/;"	s
reward	lib/battlefield/role.h	/^	struct reward * reward;$/;"	m	struct:role	typeref:struct:role::reward
reward_id	lib/fight_type.h	/^		int32_t reward_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG::__anon3
reward_id	lib/fight_type.h	/^	int32_t reward_id;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
reward_max_value	lib/fight_type.h	/^	int32_t reward_max_value;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
reward_min_value	lib/fight_type.h	/^	int32_t reward_min_value;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
reward_random	lib/battlefield/battlefield.h	/^	struct WELLRNG512aGenerator reward_random;$/;"	m	struct:battlefield	typeref:struct:battlefield::WELLRNG512aGenerator
reward_ratio	lib/fight_type.h	/^	int32_t reward_ratio;$/;"	m	struct:tagPVE_FIGHT_CONFIG
reward_type	lib/fight_type.h	/^	int32_t reward_type;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
rewards	lib/lua_fight.c	/^	struct FightReward rewards[32];$/;"	m	struct:FightConfig	typeref:struct:FightConfig::FightReward	file:
robust_close	lib/sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	lib/sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	lib/sqlite3.c	27126;"	d	file:
robust_ftruncate	lib/sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	lib/sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
role	lib/battlefield/battlefield.h	/^        struct role * role;$/;"	m	struct:battlefield::__anon11	typeref:struct:battlefield::__anon11::role
role	lib/battlefield/role.h	/^struct role$/;"	s
roleAddBuffer	lib/battlefield/battlefield_imp.c	/^void roleAddBuffer(struct role * role, struct buffer * buffer)$/;"	f
roleAddEffect	lib/battlefield/battlefield_imp.c	/^void roleAddEffect(struct role *role,  const char * over, const char * under, float delay, enum effect_position pos, float scale, int follow, int * overID, int * underID)$/;"	f
roleCastSpell	lib/battlefield/battlefield_imp.c	/^void roleCastSpell(struct role *role, const char * name, float speed)$/;"	f
roleChangeDisplay	lib/battlefield/battlefield_imp.c	/^void roleChangeDisplay(struct role * role, int id, int scale)$/;"	f
roleChangePower	lib/battlefield/battlefield_imp.c	/^void roleChangePower(struct role * role)$/;"	f
roleDropReward	lib/battlefield/battlefield_imp.c	/^void roleDropReward(struct role * role, int type, int id, int value)$/;"	f
roleEnter	lib/battlefield/battlefield_imp.c	/^void roleEnter(struct role * role)$/;"	f
roleHit	lib/battlefield/battlefield_imp.c	/^void roleHit(struct role * role, struct bullet * bullet)$/;"	f
roleLeave	lib/battlefield/battlefield_imp.c	/^void roleLeave(struct role * role, int dead)$/;"	f
roleRemoveBuffer	lib/battlefield/battlefield_imp.c	/^void roleRemoveBuffer(struct role * role, struct buffer * buffer)$/;"	f
roleRemoveEffect	lib/battlefield/battlefield_imp.c	/^void roleRemoveEffect(struct role * role, int over, int under)$/;"	f
roleScale	lib/battlefield/battlefield_imp.c	/^void roleScale(struct role * role, float scale, float delay)$/;"	f
roleSetHP	lib/battlefield/battlefield_imp.c	/^void roleSetHP(struct role * role, long long value, long long max)$/;"	f
roleSetPosition	lib/battlefield/battlefield_imp.c	/^void roleSetPosition(struct role * role, int x, int y)$/;"	f
roleShowHealth	lib/battlefield/battlefield_imp.c	/^void roleShowHealth(struct role * role, long long value, int flag)$/;"	f
roleShowHurt	lib/battlefield/battlefield_imp.c	/^void roleShowHurt(struct role * role, long long value, int flag)$/;"	f
roleSlot	lib/battlefield/battlefield.h	/^    } roleSlot[BATTLE_MAX_ROLE];$/;"	m	struct:battlefield	typeref:struct:battlefield::__anon11
roleStartFreeze	lib/battlefield/battlefield_imp.c	/^void roleStartFreeze(struct role * role)$/;"	f
roleStartMove	lib/battlefield/battlefield_imp.c	/^void roleStartMove(struct role * role)$/;"	f
roleStopFreeze	lib/battlefield/battlefield_imp.c	/^void roleStopFreeze(struct role * role)$/;"	f
roleStopMove	lib/battlefield/battlefield_imp.c	/^void roleStopMove(struct role * role)$/;"	f
roleTmpScale	lib/battlefield/battlefield_imp.c	/^void roleTmpScale(struct role * role, float scaleBy, float delay)$/;"	f
role_add_reward	lib/battlefield/role.c	/^void role_add_reward(struct role * role, int type, int id, int value, int rate, int flag)$/;"	f
role_bone_from_appearance	lib/battlefield/bone.c	/^const char * role_bone_from_appearance(struct Appearance * appearance)$/;"	f
role_change_power	lib/battlefield/role.c	/^void role_change_power(struct role * role, int change)$/;"	f
role_change_scale	lib/battlefield/role.c	/^void role_change_scale(struct role * role, int change)$/;"	f
role_copy	lib/battlefield/role.c	/^struct role * role_copy(struct role * role, int force, int x, int y, int skill1, int skill2)$/;"	f
role_distance	lib/battlefield/role.c	/^float role_distance(struct role * r1, struct role * r2)$/;"	f
role_distance_x	lib/battlefield/role.c	/^int role_distance_x(struct role * r1, struct role * r2)$/;"	f
role_enter	lib/battlefield/role.c	/^void role_enter(struct role * role, struct battlefield * battle)$/;"	f
role_find_enemy	lib/battlefield/role.c	/^static struct role * role_find_enemy(struct role * role, int range, int last)$/;"	f	file:
role_get_attack	lib/battlefield/role.c	/^int role_get_attack(struct role * role)$/;"	f
role_get_defense	lib/battlefield/role.c	/^int role_get_defense(struct role * role)$/;"	f
role_get_health	lib/battlefield/role.c	/^long long role_get_health(struct role * role)$/;"	f
role_get_health_max	lib/battlefield/role.c	/^long long role_get_health_max(struct role * role)$/;"	f
role_get_position	lib/battlefield/role.c	/^void role_get_position(struct role * role, int * px, int *py)$/;"	f
role_get_power	lib/battlefield/role.c	/^int role_get_power(struct role * role)$/;"	f
role_health	lib/battlefield/role.c	/^int role_health(struct role * role, long long value, int owner, struct HitCompareValue * compare, long long * realValue, int valueFlag)$/;"	f
role_hurt	lib/battlefield/role.c	/^int role_hurt (struct role * role, long long value, int owner, struct HitCompareValue * compare, long long * realValue, int valueFlag)$/;"	f
role_inrange	lib/battlefield/role.c	/^int role_inrange(struct role * role, struct role * target, int range)$/;"	f
role_leave	lib/battlefield/role.c	/^void role_leave(struct role * role)$/;"	f
role_new	lib/battlefield/role.c	/^struct role * role_new(struct Appearance * appearance, int level, int force, int y)$/;"	f
role_play	lib/battlefield/role.c	/^void role_play(struct role * role, const char * action, float cooldown)$/;"	f
role_release	lib/battlefield/role.c	/^void role_release(struct role * role)$/;"	f
role_remove_buffer	lib/battlefield/role.c	/^int role_remove_buffer(struct role * role, int id)$/;"	f
role_set_casting_skill	lib/battlefield/role.c	/^static void role_set_casting_skill(struct role * role, struct skill * skill)$/;"	f	file:
role_set_postion	lib/battlefield/role.c	/^void role_set_postion(struct role * role, int x, int y)$/;"	f
role_start_attack	lib/battlefield/role.c	/^static void role_start_attack(struct role * role, struct skill * skill, struct role * target)$/;"	f	file:
role_start_freeze	lib/battlefield/role.c	/^void role_start_freeze(struct role * role)$/;"	f
role_start_move	lib/battlefield/role.c	/^static void role_start_move(struct role * role)$/;"	f	file:
role_status	lib/battlefield/role.h	/^enum role_status {$/;"	g
role_stop_attack	lib/battlefield/role.c	/^static void role_stop_attack(struct role * role)$/;"	f	file:
role_stop_freeze	lib/battlefield/role.c	/^void role_stop_freeze(struct role * role)$/;"	f
role_stop_move	lib/battlefield/role.c	/^void role_stop_move(struct role * role, int doStopAnimation)$/;"	f
role_try_attack	lib/battlefield/role.c	/^static void role_try_attack(struct role * role)$/;"	f	file:
role_update	lib/battlefield/role.c	/^static void role_update(void * data)$/;"	f	file:
role_update_attack	lib/battlefield/role.c	/^static void role_update_attack(struct role * role)$/;"	f	file:
role_update_position	lib/battlefield/role.c	/^static void role_update_position(struct role * role)$/;"	f	file:
roles	lib/battlefield/battlefield.h	/^        } roles[BATTLE_MAX_ROLE];$/;"	m	struct:battlefield::__anon12	typeref:struct:battlefield::__anon12::__anon13
rollback_hook	lib/sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
root	../framework/xmlHelper.c	/^	xml_node_t * root;$/;"	m	struct:xml_doc_t	file:
root	lib/xmlHelper.c	/^	xml_node_t * root;$/;"	m	struct:xml_doc_t	file:
roundFunc	lib/sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
row	../framework/matrix.c	/^	MatrixRow ** row;$/;"	m	struct:Matrix	file:
rowSetListToTree	lib/sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetMerge	lib/sqlite3.c	/^static struct RowSetEntry *rowSetMerge($/;"	f	file:
rowSetNDeepTree	lib/sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetSort	lib/sqlite3.c	/^static void rowSetSort(RowSet *p){$/;"	f	file:
rowSetToList	lib/sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	lib/sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	lib/sqlite3.c	/^  i64 rowid;          \/* Used by UNPACKED_PREFIX_SEARCH *\/$/;"	m	struct:UnpackedRecord	file:
rowidIsValid	lib/sqlite3.c	/^  Bool rowidIsValid;    \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor	file:
rowidWrite	lib/sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rpos	../framework/buffer.c	/^	size_t rpos;$/;"	m	struct:buffer	file:
rtreeBestIndex	lib/sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeClose	lib/sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	lib/sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	lib/sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	lib/sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	lib/sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	lib/sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	lib/sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEof	lib/sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	lib/sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeInit	lib/sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	lib/sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeModule	lib/sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	lib/sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeOpen	lib/sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeReference	lib/sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	lib/sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	lib/sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	lib/sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSqlInit	lib/sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeUpdate	lib/sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreedepth	lib/sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	lib/sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	lib/sqlite3.c	/^  u8 runOnlyOnce;         \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	../framework/array.c	/^	size_t s;$/;"	m	struct:array	file:
s	../framework/map.h	/^		const char * s;$/;"	m	union:map_element::__anon64
s	lib/map.h	/^		const char * s;$/;"	m	union:map_element::__anon1
s	lib/sqlite3.c	/^  Mem s;                \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
s	lib/sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	lib/sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
s1	lib/battlefield/bone.c	/^    int s1;$/;"	m	struct:Action	file:
s1	lib/battlefield/role.h	/^            int s1;$/;"	m	struct:role::__anon26::__anon28
s2	lib/battlefield/bone.c	/^    int s2;$/;"	m	struct:Action	file:
s2	lib/battlefield/role.h	/^            int s2;$/;"	m	struct:role::__anon26::__anon28
sArg	lib/sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	lib/sqlite3.c	/^  struct sColMap {  \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sCompare	lib/battlefield/role.c	/^static struct HitCompareValue sCompare;$/;"	v	typeref:struct:HitCompareValue	file:
sLastToken	lib/sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sNameToken	lib/sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
s_scheduler	lib/battlefield/scheduler.c	/^static struct scheduler s_scheduler = {0,0,{{0,0},{0,0},0}};$/;"	v	typeref:struct:scheduler	file:
safety_level	lib/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
saveAllCursors	lib/sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	lib/sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
savedNQueryLoop	lib/sqlite3.c	/^  double savedNQueryLoop;        \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	lib/sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	lib/sqlite3.c	/^static void scalarFunc($/;"	f	file:
scale	lib/battlefield/bullet.h	/^	float scale;$/;"	m	struct:hit_effect
scale	lib/battlefield/bullet.h	/^        float scale;$/;"	m	struct:bullet::__anon36
scale	lib/battlefield/role.h	/^        int scale;$/;"	m	struct:Appearance::__anon18
scale	lib/fight_type.h	/^	int32_t scale;$/;"	m	struct:tagCHARACTER_INFO
scale	lib/fight_type.h	/^	int32_t scale;$/;"	m	struct:tagKING_FIGHT_INFO
scene	lib/lua_fight.c	/^	int scene;$/;"	m	struct:FightConfig	file:
scene_bg_id	lib/fight_type.h	/^	int32_t scene_bg_id;$/;"	m	struct:tagPVE_FIGHT_CONFIG
scene_id	lib/battlefield/battlefield.h	/^		int  scene_id;$/;"	m	struct:battlefield::__anon10
scene_level	lib/fight_type.h	/^	int32_t scene_level;$/;"	m	struct:tagPVE_FIGHT_CONFIG
scene_name	lib/battlefield/battlefield.h	/^		char scene_name[32];$/;"	m	struct:battlefield::__anon10
scene_name	lib/fight_type.h	/^	char scene_name[32];$/;"	m	struct:tagPVE_FIGHT_CONFIG
scheduler	lib/battlefield/scheduler.c	/^struct scheduler {$/;"	s	file:
scheduler_add	lib/battlefield/scheduler.c	/^void scheduler_add(float delay, void(*cb)(void*), void * data, void * tag)$/;"	f
scheduler_new	lib/battlefield/scheduler.c	/^static struct scheduler * scheduler_new()$/;"	f	file:
scheduler_now	lib/battlefield/scheduler.c	/^float scheduler_now()$/;"	f
scheduler_remove	lib/battlefield/scheduler.c	/^void scheduler_remove(void * tag)$/;"	f
scheduler_repeat	lib/battlefield/scheduler.c	/^void scheduler_repeat(void(*cb)(void*), void * data, void * tag)$/;"	f
scheduler_reset	lib/battlefield/scheduler.c	/^void scheduler_reset()$/;"	f
scheduler_tick	lib/battlefield/scheduler.c	/^int scheduler_tick()$/;"	f
scheduler_to_tick	lib/battlefield/scheduler.c	/^int scheduler_to_tick(float dt)$/;"	f
scheduler_to_time	lib/battlefield/scheduler.c	/^float scheduler_to_time(int tick)$/;"	f
scheduler_update	lib/battlefield/scheduler.c	/^void scheduler_update(float dt)$/;"	f
schemaIsValid	lib/sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	lib/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	lib/sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
script	lib/battlefield/script.h	/^struct script$/;"	s
script	lib/battlefield/skill.h	/^    struct script script;$/;"	m	struct:skill	typeref:struct:skill::script
script_call	lib/battlefield/script.c	/^int script_call(struct script * script)$/;"	f
script_cancel	lib/battlefield/script.c	/^void script_cancel(struct script * script)$/;"	f
script_close	lib/battlefield/script.c	/^void script_close(struct script * script)$/;"	f
script_from_state	lib/battlefield/script.c	/^struct script * script_from_state(lua_State * L)$/;"	f
script_init	lib/battlefield/script.c	/^int script_init(struct script * script, const char * file)$/;"	f
script_list	modules/mlua.c	/^static struct Script * script_list = 0;$/;"	v	typeref:struct:Script	file:
script_prepare	lib/battlefield/script.c	/^void script_prepare(struct script * script)$/;"	f
script_push_bool	lib/battlefield/script.c	/^void script_push_bool(struct script * script, int b)$/;"	f
script_push_integer	lib/battlefield/script.c	/^void script_push_integer(struct script * script, int value)$/;"	f
script_push_nil	lib/battlefield/script.c	/^void script_push_nil(struct script * script)$/;"	f
script_push_number	lib/battlefield/script.c	/^void script_push_number(struct script * script, double d)$/;"	f
script_push_string	lib/battlefield/script.c	/^void script_push_string(struct script * script, const char * str, size_t len)$/;"	f
script_resume	lib/battlefield/script.c	/^int script_resume(struct script * script)$/;"	f
sectorSize	lib/sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seed	lib/battlefield/battlefield.h	/^    int seed;$/;"	m	struct:battlefield
seed	lib/lua_fight.c	/^	int seed;$/;"	m	struct:FightConfig	file:
seekAndRead	lib/sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	lib/sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekResult	lib/sqlite3.c	/^  int seekResult;$/;"	m	struct:VdbeCursor	file:
seekWinFile	lib/sqlite3.c	/^static int seekWinFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
selFlags	lib/sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	lib/sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	lib/sqlite3.c	/^static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	lib/sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	lib/sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	lib/sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	lib/sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	lib/sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
semCheckReservedLock	lib/sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	lib/sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	lib/sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	lib/sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	lib/sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
service_init	../framework/service.c	/^int service_init(int argc, char * argv[])$/;"	f
service_reload	../framework/service.c	/^int service_reload()$/;"	f
service_unload	../framework/service.c	/^void service_unload()$/;"	f
service_update	../framework/service.c	/^void service_update(time_t now)$/;"	f
setChildPtrmaps	lib/sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	lib/sqlite3.c	52453;"	d	file:
setDateTimeToCurrent	lib/sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	lib/sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setJoinExpr	lib/sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	lib/sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	lib/sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPendingFd	lib/sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	lib/sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	lib/sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	lib/sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	lib/sqlite3.c	49453;"	d	file:
set_authorizer	lib/sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	lib/sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
setnblock	../framework/base.c	/^int setnblock(int fd)$/;"	f
setreuse	../framework/base.c	/^static int setreuse(int fd)$/;"	f	file:
setupLookaside	lib/sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
shakeStage	lib/battlefield/battlefield_imp.c	/^void shakeStage(struct battlefield * battle)$/;"	f
sharable	lib/sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	lib/sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	lib/sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	lib/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	lib/sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	lib/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	lib/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	lib/sqlite3.c	/^  u32 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:os2ShmLink	file:
sharedMask	lib/sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
shmBaseName	lib/sqlite3.c	/^  char shmBaseName[1];       \/* Name of the memory object !!! must last !!! *\/$/;"	m	struct:os2ShmNode	file:
shm_attach	../framework/shm.c	/^void * shm_attach(const char * name, int id)$/;"	f
shm_create	../framework/shm.c	/^void * shm_create(const char * name, int id, size_t size)$/;"	f
shm_destory	../framework/shm.c	/^void   shm_destory(const char * name, int id)$/;"	f
simpleClose	lib/sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	lib/sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	lib/sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	lib/sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	lib/sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	lib/sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	lib/sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	lib/sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	lib/sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	lib/sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	lib/sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
sinteger	../framework/amf.c	/^		int32_t  sinteger;$/;"	m	union:amf_value::__anon58	file:
size	../framework/amf.c	/^	size_t size;$/;"	m	struct:amf_value	file:
size	../framework/buffer.c	/^	size_t size;$/;"	m	struct:buffer	file:
size	../framework/codequeue.c	/^	size_t size;$/;"	m	struct:codequeue	file:
size	../framework/memory.c	/^	int size;$/;"	m	struct:heap	file:
size	../framework/mfile.c	/^	uint32_t size;$/;"	m	struct:MFileIndex	file:
size	lib/battlefield/jsmn.h	/^	int size;$/;"	m	struct:__anon8
size	lib/memory.c	/^	int size;$/;"	m	struct:heap	file:
size	lib/mfile.c	/^	uint32_t size;$/;"	m	struct:MFileIndex	file:
size4x	lib/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon49::__anon50	file:
sjfd	lib/sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skill	lib/battlefield/battlefield.h	/^        union SkillUnion skill[KING_SKILL_COUNT];$/;"	m	struct:battlefield::__anon14	typeref:union:battlefield::__anon14::SkillUnion
skill	lib/battlefield/role.h	/^            struct skill * skill;$/;"	m	struct:role::__anon26::__anon28	typeref:struct:role::__anon26::__anon28::skill
skill	lib/battlefield/role.h	/^        } skill;$/;"	m	struct:role::__anon26	typeref:struct:role::__anon26::__anon27
skill	lib/battlefield/skill.h	/^struct skill$/;"	s
skill0_id	lib/fight_type.h	/^	int32_t skill0_id;$/;"	m	struct:tagCHARACTER_INFO
skill1_id	lib/fight_type.h	/^	int32_t skill1_id;$/;"	m	struct:tagCHARACTER_INFO
skillFinishRecord	lib/battlefield/battlefield_imp.c	/^void skillFinishRecord(struct battlefield * battle, int id){$/;"	f
skillShowRecord	lib/battlefield/battlefield_imp.c	/^void skillShowRecord  (struct battlefield * battle, int id, int caster, const char * name){$/;"	f
skillUpdateRecord	lib/battlefield/battlefield_imp.c	/^void skillUpdateRecord(struct battlefield * battle, int id, long long hurt, long long health){$/;"	f
skill_cancel	lib/battlefield/skill.c	/^void skill_cancel(struct skill * skill)$/;"	f
skill_cast	lib/battlefield/skill.c	/^int skill_cast(struct skill * skill, struct role * role, int range)$/;"	f
skill_get_cd	lib/battlefield/skill.c	/^int  skill_get_cd(struct skill * skill)$/;"	f
skill_get_desc	lib/battlefield/skill.c	/^const char * skill_get_desc(struct skill * skill)$/;"	f
skill_get_icon	lib/battlefield/skill.c	/^int skill_get_icon(struct skill * skill)$/;"	f
skill_get_name	lib/battlefield/skill.c	/^const char * skill_get_name(struct skill * skill)$/;"	f
skill_id	lib/fight_type.h	/^	int32_t skill_id[5];$/;"	m	struct:tagKING_FIGHT_INFO
skill_new	lib/battlefield/skill.c	/^struct skill * skill_new(int id, struct role * role, int owner)$/;"	f
skill_release	lib/battlefield/skill.c	/^void skill_release(struct skill * skill)$/;"	f
skill_resume	lib/battlefield/skill.c	/^int skill_resume(struct skill * skill, int v)$/;"	f
skill_set_cd	lib/battlefield/skill.c	/^void skill_set_cd(struct skill * skill, int tick)$/;"	f
skills	lib/lua_fight.c	/^	int skills[4];$/;"	m	struct:FightConfig	file:
skip	lib/battlefield/bone.c	/^static int skip(const char * buffer, jsmntok_t * tokens, int n)$/;"	f	file:
skip	lib/battlefield/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
skipBin	lib/battlefield/bone.c	/^static size_t skipBin(const char * data, size_t len, const char ** keys)$/;"	f	file:
skipFlag	lib/sqlite3.c	/^  int skipFlag;         \/* Skip skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	lib/sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor	file:
sleep	lib/sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sn	../framework/package.h	/^	uint32_t sn;$/;"	m	struct:translate_header
snprintf	lib/sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
socktoaddr	../framework/base.c	/^static int socktoaddr(const char* host, unsigned short port, $/;"	f	file:
softHeapLimitEnforcer	lib/sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	lib/sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	lib/sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortOrder	lib/sqlite3.c	/^    u8 sortOrder;          \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sortingIdx	lib/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	lib/sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	lib/sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	lib/sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	lib/sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	lib/sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	lib/sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	lib/sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	lib/sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	lib/sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
special	lib/battlefield/role.h	/^            union SkillUnion special;$/;"	m	struct:role::__anon26::__anon27	typeref:union:role::__anon26::__anon27::SkillUnion
speed	lib/battlefield/role.h	/^		int speed;$/;"	m	struct:role::__anon24
speed	lib/battlefield/role.h	/^        int speed;$/;"	m	struct:role::__anon26
speed	lib/battlefield/wave.h	/^    int speed;$/;"	m	struct:wave
splitNodeGuttman	lib/sqlite3.c	/^static int splitNodeGuttman($/;"	f	file:
splitNodeStartree	lib/sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sprite	lib/battlefield/role.h	/^    void * sprite;$/;"	m	struct:role
sql	lib/sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	lib/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	lib/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3	lib/sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3AbsInt32	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	lib/sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn){$/;"	f
sqlite3AlterBeginAddColumn	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ApiExit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	lib/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	lib/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendSpace	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendSpace(StrAccum *pAccum, int N){$/;"	f
sqlite3ArrayAllocate	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	lib/sqlite3.c	11806;"	d	file:
sqlite3AuthContextPop	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	lib/sqlite3.c	11808;"	d	file:
sqlite3AuthContextPush	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	lib/sqlite3.c	11807;"	d	file:
sqlite3AuthRead	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	lib/sqlite3.c	11805;"	d	file:
sqlite3AuthReadCol	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	lib/sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	lib/sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	lib/sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	lib/sqlite3.c	11648;"	d	file:
sqlite3AutoincrementEnd	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	lib/sqlite3.c	11649;"	d	file:
sqlite3BackupRestart	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	lib/sqlite3.c	12079;"	d	file:
sqlite3BeginParse	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	lib/sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlockedList	lib/sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCacheOverflow	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(BtCursor *pCur){$/;"	f
sqlite3BtreeCheckpoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClose	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){$/;"	f
sqlite3BtreeCursorIsValid	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	lib/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeDataSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	lib/sqlite3.c	8384;"	d	file:
sqlite3BtreeEnterAll	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	lib/sqlite3.c	8385;"	d	file:
sqlite3BtreeEnterCursor	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	lib/sqlite3.c	8404;"	d	file:
sqlite3BtreeEof	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetCachedRowid	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){$/;"	f
sqlite3BtreeGetFilename	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	lib/sqlite3.c	8409;"	d	file:
sqlite3BtreeHoldsMutex	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	lib/sqlite3.c	8408;"	d	file:
sqlite3BtreeIncrVacuum	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeInsert	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeKey	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	lib/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeKeySize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	lib/sqlite3.c	8403;"	d	file:
sqlite3BtreeLeaveAll	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	lib/sqlite3.c	8406;"	d	file:
sqlite3BtreeLeaveCursor	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	lib/sqlite3.c	8405;"	d	file:
sqlite3BtreeLockTable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNext	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	lib/sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode){$/;"	f
sqlite3BtreeSavepoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetCachedRowid	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){$/;"	f
sqlite3BtreeSetPageSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetSafetyLevel	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel($/;"	f
sqlite3BtreeSetVersion	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	lib/sqlite3.c	8402;"	d	file:
sqlite3BtreeSyncDisabled	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	lib/sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3CloseExtensions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	lib/sqlite3.c	11979;"	d	file:
sqlite3CloseSavepoints	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	lib/sqlite3.c	11788;"	d	file:
sqlite3CodeRowTriggerDirect	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	lib/sqlite3.c	11789;"	d	file:
sqlite3CodeSubselect	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3ColumnDefault	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3CommitInternalChanges	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	lib/sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	lib/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	lib/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	lib/sqlite3.c	12118;"	d	file:
sqlite3ConnectionClosed	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	lib/sqlite3.c	12120;"	d	file:
sqlite3ConnectionUnlocked	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	lib/sqlite3.c	12119;"	d	file:
sqlite3CorruptError	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	lib/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, int n){$/;"	f
sqlite3DbMallocSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, int n){$/;"	f
sqlite3DbNameToBtree	lib/sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbReallocOrFree	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbStrDup	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3DebugPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DefaultMutex	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	lib/sqlite3.c	11785;"	d	file:
sqlite3DeleteTriggerStep	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	lib/sqlite3.c	11786;"	d	file:
sqlite3EndBenignMalloc	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	lib/sqlite3.c	12080;"	d	file:
sqlite3EndTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrStr	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ErrorMsg	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3ExplainBegin	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainBegin(Vdbe *pVdbe){$/;"	f
sqlite3ExplainBegin	lib/sqlite3.c	11565;"	d	file:
sqlite3ExplainExpr	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExpr(Vdbe *pOut, Expr *pExpr){$/;"	f
sqlite3ExplainExpr	lib/sqlite3.c	11567;"	d	file:
sqlite3ExplainExprList	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExprList(Vdbe *pOut, ExprList *pList){$/;"	f
sqlite3ExplainExprList	lib/sqlite3.c	11568;"	d	file:
sqlite3ExplainFinish	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainFinish(Vdbe *pVdbe){$/;"	f
sqlite3ExplainFinish	lib/sqlite3.c	11569;"	d	file:
sqlite3ExplainNL	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainNL(Vdbe *pVdbe){$/;"	f
sqlite3ExplainPop	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPop(Vdbe *p){$/;"	f
sqlite3ExplainPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPrintf(Vdbe *pVdbe, const char *zFormat, ...){$/;"	f
sqlite3ExplainPush	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPush(Vdbe *pVdbe){$/;"	f
sqlite3ExplainSelect	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainSelect(Vdbe *pVdbe, Select *p){$/;"	f
sqlite3ExplainSelect	lib/sqlite3.c	11566;"	d	file:
sqlite3Expr	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAffinity	lib/sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	lib/sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse, int N){$/;"	f
sqlite3ExprCachePush	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	lib/sqlite3.c	12107;"	d	file:
sqlite3ExprCode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeConstants	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCodeCopy	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeExprList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeGetColumn	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	lib/sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeIsNullJump	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump($/;"	f
sqlite3ExprCodeMove	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB){$/;"	f
sqlite3ExprDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIsConstant	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p){$/;"	f
sqlite3ExprIsInteger	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	lib/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB){$/;"	f
sqlite3ExprListDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	lib/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetColl	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetColl(Expr *pExpr, CollSeq *pColl){$/;"	f
sqlite3ExprSetCollByToken	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetCollByToken(Parse *pParse, Expr *pExpr, Token *pCollName){$/;"	f
sqlite3ExprSetHeight	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSetHeight	lib/sqlite3.c	12105;"	d	file:
sqlite3FileSuffix3	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	lib/sqlite3.c	11888;"	d	file:
sqlite3FindCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	lib/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){$/;"	f
sqlite3FindIndex	lib/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	lib/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixInit($/;"	f
sqlite3FixSelect	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	lib/sqlite3.c	12051;"	d	file:
sqlite3FkCheck	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	lib/sqlite3.c	12052;"	d	file:
sqlite3FkDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	lib/sqlite3.c	12060;"	d	file:
sqlite3FkDropTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	lib/sqlite3.c	12053;"	d	file:
sqlite3FkOldmask	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	lib/sqlite3.c	12054;"	d	file:
sqlite3FkReferences	lib/sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	lib/sqlite3.c	12055;"	d	file:
sqlite3Fts3AllSegdirs	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3CacheDeferredDoclists	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3Corrupt	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3DeferToken	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferredTokenList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3Dequote	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistPrev	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3EvalPhraseCleanup	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3ExprFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *p){$/;"	f
sqlite3Fts3ExprInitTestInterface	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3GetVarint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	lib/sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Init	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTokenizer	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MsrIncrNext	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3NextToken	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3ReadLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadLock(Fts3Table *p){$/;"	f
sqlite3Fts3SegReaderCursor	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UpdateMethod	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FuncDefInsert	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3GenerateConstraintChecks	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	lib/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, int dflt){$/;"	f
sqlite3GetCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	lib/sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	lib/sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	lib/sqlite3.c	12002;"	d	file:
sqlite3GetVarint	lib/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	lib/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	lib/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	lib/sqlite3.c	8093;"	d	file:
sqlite3GlobalConfig	lib/sqlite3.c	8099;"	d	file:
sqlite3GlobalFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){$/;"	f
sqlite3HashClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){$/;"	f
sqlite3HashInit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){$/;"	f
sqlite3HeapNearlyFull	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	lib/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	lib/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	lib/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	lib/sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	lib/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	lib/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3IndexAffinityOk	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexKeyinfo	lib/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	lib/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	lib/sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	lib/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	lib/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	lib/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	lib/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	lib/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	lib/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsLikeFunction	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	lib/sqlite3.c	11535;"	d	file:
sqlite3IsNumericAffinity	lib/sqlite3.c	10076;"	d	file:
sqlite3IsReadOnly	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	lib/sqlite3.c	11450;"	d	file:
sqlite3Isalnum	lib/sqlite3.c	11458;"	d	file:
sqlite3Isalpha	lib/sqlite3.c	11451;"	d	file:
sqlite3Isalpha	lib/sqlite3.c	11459;"	d	file:
sqlite3Isdigit	lib/sqlite3.c	11452;"	d	file:
sqlite3Isdigit	lib/sqlite3.c	11460;"	d	file:
sqlite3Isspace	lib/sqlite3.c	11449;"	d	file:
sqlite3Isspace	lib/sqlite3.c	11457;"	d	file:
sqlite3Isxdigit	lib/sqlite3.c	11453;"	d	file:
sqlite3Isxdigit	lib/sqlite3.c	11461;"	d	file:
sqlite3JoinType	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalModename	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	lib/sqlite3.c	12093;"	d	file:
sqlite3KeywordCode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LimitWhere	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	lib/sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	lib/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	lib/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LockAndPrepare	lib/sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3MAppendf	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(int n){$/;"	f
sqlite3MallocAlarm	lib/sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(int n){$/;"	f
sqlite3MaterializeView	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	lib/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	lib/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	lib/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	lib/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	lib/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	lib/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	lib/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	lib/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	lib/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	lib/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	lib/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	lib/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	lib/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	lib/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	lib/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	lib/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	lib/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	lib/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	lib/sqlite3.c	12175;"	d	file:
sqlite3MemdebugMallocCount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	lib/sqlite3.c	12176;"	d	file:
sqlite3MemdebugSetType	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	lib/sqlite3.c	12174;"	d	file:
sqlite3MemdebugSettitle	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	lib/sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	lib/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	lib/sqlite3.c	9578;"	d	file:
sqlite3MutexEnd	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	lib/sqlite3.c	9580;"	d	file:
sqlite3MutexInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	lib/sqlite3.c	9579;"	d	file:
sqlite3NameFromToken	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	lib/sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	lib/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFileControl	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnlock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	lib/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager){$/;"	f
sqlite3PagerGet	lib/sqlite3.c	8964;"	d	file:
sqlite3PagerGetCodec	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	lib/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	lib/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	lib/sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	lib/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetJournalMode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetPagesize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSafetyLevel	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel($/;"	f
sqlite3PagerSharedLock	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerStats	lib/sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager){$/;"	f
sqlite3PagerTempSpace	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerVfs	lib/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(DbPage *pDbPage){$/;"	f
sqlite3ParseToplevel	lib/sqlite3.c	11782;"	d	file:
sqlite3ParseToplevel	lib/sqlite3.c	11791;"	d	file:
sqlite3ParseUri	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	lib/sqlite3.c	108008;"	d	file:
sqlite3ParserARG_PDECL	lib/sqlite3.c	108007;"	d	file:
sqlite3ParserARG_SDECL	lib/sqlite3.c	108006;"	d	file:
sqlite3ParserARG_STORE	lib/sqlite3.c	108009;"	d	file:
sqlite3ParserAlloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){$/;"	f
sqlite3ParserFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserStackPeak	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	lib/sqlite3.c	107984;"	d	file:
sqlite3ParserTrace	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	lib/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetch($/;"	f
sqlite3PcacheGetCachesize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShrink	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	lib/sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	lib/sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3Prng	lib/sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngResetState	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngResetState(void){$/;"	f
sqlite3PrngRestoreState	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	lib/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3PutVarint32	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint32(unsigned char *p, u32 v){$/;"	f
sqlite3ReadSchema	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, int nBytes){$/;"	f
sqlite3RefillIndex	lib/sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetInternalSchema	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetInternalSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolveSelectNames	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResultSetOfSelect	lib/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	lib/sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RtreeInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	lib/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	lib/sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	lib/sqlite3.c	8410;"	d	file:
sqlite3SchemaToIndex	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	lib/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3Select	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	lib/sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	lib/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	lib/sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	lib/sqlite3.c	12106;"	d	file:
sqlite3SelectNew	lib/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SetString	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	lib/sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	lib/sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	lib/sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SrcListAppend	lib/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	lib/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	lib/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	lib/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	lib/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	lib/sqlite3.c	11503;"	d	file:
sqlite3StackAllocRaw	lib/sqlite3.c	11507;"	d	file:
sqlite3StackAllocZero	lib/sqlite3.c	11504;"	d	file:
sqlite3StackAllocZero	lib/sqlite3.c	11508;"	d	file:
sqlite3StackFree	lib/sqlite3.c	11505;"	d	file:
sqlite3StackFree	lib/sqlite3.c	11509;"	d	file:
sqlite3StartTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	lib/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3StatType	lib/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	lib/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	lib/sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StrAccumAppend	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumFinish	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	lib/sqlite3.c	11468;"	d	file:
sqlite3StrNICmp	lib/sqlite3.c	11470;"	d	file:
sqlite3Strlen30	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinityStr	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){$/;"	f
sqlite3TableLock	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	lib/sqlite3.c	11985;"	d	file:
sqlite3TempInMemory	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3Tolower	lib/sqlite3.c	11454;"	d	file:
sqlite3Tolower	lib/sqlite3.c	11462;"	d	file:
sqlite3Toupper	lib/sqlite3.c	11448;"	d	file:
sqlite3Toupper	lib/sqlite3.c	11456;"	d	file:
sqlite3TransferBindings	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	lib/sqlite3.c	11792;"	d	file:
sqlite3TriggerDeleteStep	lib/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	lib/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	lib/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	lib/sqlite3.c	11790;"	d	file:
sqlite3TriggerSelectStep	lib/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	lib/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	lib/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	lib/sqlite3.c	11784;"	d	file:
sqlite3TwoPartName	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UnlinkAndDeleteIndex	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	lib/sqlite3.c	11787;"	d	file:
sqlite3Update	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	lib/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3Utf16ByteLen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	lib/sqlite3.c	86638;"	d	file:
sqlite3Utf8To8	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	lib/sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3Utf8to16	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){$/;"	f
sqlite3UtfSelfTest	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetStr	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	lib/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){$/;"	f
sqlite3VdbeAddParseSchemaOp	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAddopTrace	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddopTrace = 0;$/;"	v
sqlite3VdbeAllocUnpackedRecord	lib/sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	lib/sqlite3.c	13283;"	d	file:
sqlite3VdbeCloseStatement	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	lib/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3 *db){$/;"	f
sqlite3VdbeCurrentAddr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){$/;"	f
sqlite3VdbeDeleteObject	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeEnter	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	lib/sqlite3.c	13272;"	d	file:
sqlite3VdbeExec	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	lib/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeExplanation	lib/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3VdbeExplanation(Vdbe *pVdbe){$/;"	f
sqlite3VdbeExplanation	lib/sqlite3.c	11570;"	d	file:
sqlite3VdbeFinalize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFrameDelete	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetOp	lib/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGetValue	lib/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeHalt	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	lib/sqlite3.c	12138;"	d	file:
sqlite3VdbeIdxKeyCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	lib/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	lib/sqlite3.c	13273;"	d	file:
sqlite3VdbeLinkSubProgram	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *p){$/;"	f
sqlite3VdbeMakeReady	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCopy	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	lib/sqlite3.c	13297;"	d	file:
sqlite3VdbeMemFinalize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){$/;"	f
sqlite3VdbeMemHandleBom	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemIntegerify	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemReleaseExternal	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	lib/sqlite3.c	13220;"	d	file:
sqlite3VdbeMemSetInt64	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStoreType	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemStoreType(Mem *pMem){$/;"	f
sqlite3VdbeMemStringify	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, int enc){$/;"	f
sqlite3VdbeMemTooBig	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	lib/sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *p, int x){$/;"	f
sqlite3VdbeRewind	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialType	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	lib/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetNumCols	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetSql	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterClose	lib/sqlite3.c	13253;"	d	file:
sqlite3VdbeSorterCompare	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterCompare	lib/sqlite3.c	13257;"	d	file:
sqlite3VdbeSorterInit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterInit	lib/sqlite3.c	13251;"	d	file:
sqlite3VdbeSorterNext	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterNext	lib/sqlite3.c	13256;"	d	file:
sqlite3VdbeSorterRewind	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(sqlite3 *db, VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRewind	lib/sqlite3.c	13255;"	d	file:
sqlite3VdbeSorterRowkey	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterRowkey	lib/sqlite3.c	13254;"	d	file:
sqlite3VdbeSorterWrite	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSorterWrite	lib/sqlite3.c	13252;"	d	file:
sqlite3VdbeSwap	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	lib/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTrace	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeTrace(Vdbe *p, FILE *trace){$/;"	f
sqlite3VdbeTransferError	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	lib/sqlite3.c	11638;"	d	file:
sqlite3VtabArgExtend	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	lib/sqlite3.c	11993;"	d	file:
sqlite3VtabCommit	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	lib/sqlite3.c	11996;"	d	file:
sqlite3VtabFinishParse	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabInSync	lib/sqlite3.c	11997;"	d	file:
sqlite3VtabInSync	lib/sqlite3.c	12013;"	d	file:
sqlite3VtabLock	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	lib/sqlite3.c	11998;"	d	file:
sqlite3VtabMakeWritable	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	lib/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	lib/sqlite3.c	11995;"	d	file:
sqlite3VtabSavepoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	lib/sqlite3.c	12001;"	d	file:
sqlite3VtabSync	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){$/;"	f
sqlite3VtabSync	lib/sqlite3.c	11994;"	d	file:
sqlite3VtabUnlock	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	lib/sqlite3.c	11999;"	d	file:
sqlite3VtabUnlockList	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	lib/sqlite3.c	12000;"	d	file:
sqlite3WalBeginReadTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	lib/sqlite3.c	38342;"	d	file:
sqlite3WalBeginWriteTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	lib/sqlite3.c	38346;"	d	file:
sqlite3WalCallback	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	lib/sqlite3.c	38353;"	d	file:
sqlite3WalCheckpoint	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	lib/sqlite3.c	38352;"	d	file:
sqlite3WalClose	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	lib/sqlite3.c	38341;"	d	file:
sqlite3WalDbsize	lib/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	lib/sqlite3.c	38345;"	d	file:
sqlite3WalDefaultHook	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	lib/sqlite3.c	38343;"	d	file:
sqlite3WalEndWriteTransaction	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	lib/sqlite3.c	38347;"	d	file:
sqlite3WalExclusiveMode	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	lib/sqlite3.c	38354;"	d	file:
sqlite3WalFrames	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	lib/sqlite3.c	38351;"	d	file:
sqlite3WalFramesize	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	lib/sqlite3.c	38356;"	d	file:
sqlite3WalHeapMemory	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	lib/sqlite3.c	38355;"	d	file:
sqlite3WalLimit	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	lib/sqlite3.c	38340;"	d	file:
sqlite3WalOpen	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	lib/sqlite3.c	38339;"	d	file:
sqlite3WalRead	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalRead($/;"	f
sqlite3WalRead	lib/sqlite3.c	38344;"	d	file:
sqlite3WalSavepoint	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	lib/sqlite3.c	38349;"	d	file:
sqlite3WalSavepointUndo	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	lib/sqlite3.c	38350;"	d	file:
sqlite3WalTrace	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	lib/sqlite3.c	38348;"	d	file:
sqlite3WalkExpr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	lib/sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereEnd	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	lib/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereTrace = 0;$/;"	v
sqlite3XPrintf	lib/sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	lib/sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	lib/sqlite3.c	91226;"	d	file:
sqlite3_aggregate_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	lib/sqlite3.c	91228;"	d	file:
sqlite3_api_routines	lib/sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	lib/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	lib/sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_backup	lib/sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	lib/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup	lib/sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup_finish	lib/sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	lib/sqlite3.c	91391;"	d	file:
sqlite3_backup_init	lib/sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	lib/sqlite3.c	91392;"	d	file:
sqlite3_backup_pagecount	lib/sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	lib/sqlite3.c	91393;"	d	file:
sqlite3_backup_remaining	lib/sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	lib/sqlite3.c	91394;"	d	file:
sqlite3_backup_step	lib/sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	lib/sqlite3.c	91395;"	d	file:
sqlite3_bind_blob	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	lib/sqlite3.c	91230;"	d	file:
sqlite3_bind_double	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	lib/sqlite3.c	91231;"	d	file:
sqlite3_bind_int	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	lib/sqlite3.c	91232;"	d	file:
sqlite3_bind_int64	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	lib/sqlite3.c	91233;"	d	file:
sqlite3_bind_null	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	lib/sqlite3.c	91234;"	d	file:
sqlite3_bind_parameter_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	lib/sqlite3.c	91235;"	d	file:
sqlite3_bind_parameter_index	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	lib/sqlite3.c	91236;"	d	file:
sqlite3_bind_parameter_name	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	lib/sqlite3.c	91237;"	d	file:
sqlite3_bind_text	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	lib/sqlite3.c	91238;"	d	file:
sqlite3_bind_text16	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	lib/sqlite3.c	91239;"	d	file:
sqlite3_bind_text16	lib/sqlite3.c	91448;"	d	file:
sqlite3_bind_value	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	lib/sqlite3.c	91240;"	d	file:
sqlite3_bind_zeroblob	lib/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	lib/sqlite3.c	91356;"	d	file:
sqlite3_bind_zeroblob	lib/sqlite3.c	91509;"	d	file:
sqlite3_blob	lib/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob	lib/sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob_bytes	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	lib/sqlite3.c	91357;"	d	file:
sqlite3_blob_bytes	lib/sqlite3.c	91510;"	d	file:
sqlite3_blob_close	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	lib/sqlite3.c	91358;"	d	file:
sqlite3_blob_close	lib/sqlite3.c	91511;"	d	file:
sqlite3_blob_open	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	lib/sqlite3.c	91359;"	d	file:
sqlite3_blob_open	lib/sqlite3.c	91512;"	d	file:
sqlite3_blob_read	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	lib/sqlite3.c	91360;"	d	file:
sqlite3_blob_read	lib/sqlite3.c	91513;"	d	file:
sqlite3_blob_reopen	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	lib/sqlite3.c	91412;"	d	file:
sqlite3_blob_reopen	lib/sqlite3.c	91515;"	d	file:
sqlite3_blob_write	lib/sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	lib/sqlite3.c	91361;"	d	file:
sqlite3_blob_write	lib/sqlite3.c	91514;"	d	file:
sqlite3_busy_handler	lib/sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	lib/sqlite3.c	91241;"	d	file:
sqlite3_busy_timeout	lib/sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	lib/sqlite3.c	91242;"	d	file:
sqlite3_callback	lib/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_callback	lib/sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_changes	lib/sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	lib/sqlite3.c	91243;"	d	file:
sqlite3_clear_bindings	lib/sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	lib/sqlite3.c	91355;"	d	file:
sqlite3_close	lib/sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){$/;"	f
sqlite3_close	lib/sqlite3.c	91244;"	d	file:
sqlite3_collation_needed	lib/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	lib/sqlite3.c	91245;"	d	file:
sqlite3_collation_needed16	lib/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	lib/sqlite3.c	91246;"	d	file:
sqlite3_collation_needed16	lib/sqlite3.c	91449;"	d	file:
sqlite3_column_blob	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	lib/sqlite3.c	91247;"	d	file:
sqlite3_column_bytes	lib/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	lib/sqlite3.c	91248;"	d	file:
sqlite3_column_bytes16	lib/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	lib/sqlite3.c	91249;"	d	file:
sqlite3_column_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	lib/sqlite3.c	91250;"	d	file:
sqlite3_column_database_name	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	lib/sqlite3.c	91251;"	d	file:
sqlite3_column_database_name	lib/sqlite3.c	91434;"	d	file:
sqlite3_column_database_name16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	lib/sqlite3.c	91252;"	d	file:
sqlite3_column_database_name16	lib/sqlite3.c	91435;"	d	file:
sqlite3_column_database_name16	lib/sqlite3.c	91467;"	d	file:
sqlite3_column_decltype	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	lib/sqlite3.c	91253;"	d	file:
sqlite3_column_decltype	lib/sqlite3.c	91479;"	d	file:
sqlite3_column_decltype16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	lib/sqlite3.c	91254;"	d	file:
sqlite3_column_decltype16	lib/sqlite3.c	91450;"	d	file:
sqlite3_column_decltype16	lib/sqlite3.c	91478;"	d	file:
sqlite3_column_double	lib/sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	lib/sqlite3.c	91255;"	d	file:
sqlite3_column_int	lib/sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	lib/sqlite3.c	91256;"	d	file:
sqlite3_column_int64	lib/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	lib/sqlite3.c	91257;"	d	file:
sqlite3_column_name	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	lib/sqlite3.c	91258;"	d	file:
sqlite3_column_name16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	lib/sqlite3.c	91259;"	d	file:
sqlite3_column_name16	lib/sqlite3.c	91451;"	d	file:
sqlite3_column_origin_name	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	lib/sqlite3.c	91260;"	d	file:
sqlite3_column_origin_name	lib/sqlite3.c	91438;"	d	file:
sqlite3_column_origin_name16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	lib/sqlite3.c	91261;"	d	file:
sqlite3_column_origin_name16	lib/sqlite3.c	91439;"	d	file:
sqlite3_column_origin_name16	lib/sqlite3.c	91469;"	d	file:
sqlite3_column_table_name	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	lib/sqlite3.c	91262;"	d	file:
sqlite3_column_table_name	lib/sqlite3.c	91436;"	d	file:
sqlite3_column_table_name16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	lib/sqlite3.c	91263;"	d	file:
sqlite3_column_table_name16	lib/sqlite3.c	91437;"	d	file:
sqlite3_column_table_name16	lib/sqlite3.c	91468;"	d	file:
sqlite3_column_text	lib/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	lib/sqlite3.c	91264;"	d	file:
sqlite3_column_text16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	lib/sqlite3.c	91265;"	d	file:
sqlite3_column_text16	lib/sqlite3.c	91452;"	d	file:
sqlite3_column_type	lib/sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	lib/sqlite3.c	91266;"	d	file:
sqlite3_column_value	lib/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	lib/sqlite3.c	91267;"	d	file:
sqlite3_commit_hook	lib/sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	lib/sqlite3.c	91268;"	d	file:
sqlite3_compileoption_get	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	lib/sqlite3.c	91396;"	d	file:
sqlite3_compileoption_used	lib/sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	lib/sqlite3.c	91397;"	d	file:
sqlite3_complete	lib/sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	lib/sqlite3.c	91269;"	d	file:
sqlite3_complete	lib/sqlite3.c	91473;"	d	file:
sqlite3_complete16	lib/sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	lib/sqlite3.c	91270;"	d	file:
sqlite3_complete16	lib/sqlite3.c	91453;"	d	file:
sqlite3_complete16	lib/sqlite3.c	91474;"	d	file:
sqlite3_config	lib/sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	lib/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	lib/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context	lib/sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context_db_handle	lib/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	lib/sqlite3.c	91385;"	d	file:
sqlite3_create_collation	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	lib/sqlite3.c	91271;"	d	file:
sqlite3_create_collation16	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	lib/sqlite3.c	91272;"	d	file:
sqlite3_create_collation16	lib/sqlite3.c	91454;"	d	file:
sqlite3_create_collation_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	lib/sqlite3.c	91362;"	d	file:
sqlite3_create_function	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	lib/sqlite3.c	91273;"	d	file:
sqlite3_create_function16	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	lib/sqlite3.c	91274;"	d	file:
sqlite3_create_function16	lib/sqlite3.c	91455;"	d	file:
sqlite3_create_function_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	lib/sqlite3.c	91398;"	d	file:
sqlite3_create_module	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	lib/sqlite3.c	91275;"	d	file:
sqlite3_create_module	lib/sqlite3.c	91487;"	d	file:
sqlite3_create_module_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	lib/sqlite3.c	91276;"	d	file:
sqlite3_create_module_v2	lib/sqlite3.c	91488;"	d	file:
sqlite3_current_time	lib/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	lib/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;$/;"	v
sqlite3_data_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	lib/sqlite3.c	91277;"	d	file:
sqlite3_db_config	lib/sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	lib/sqlite3.c	91399;"	d	file:
sqlite3_db_filename	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_handle	lib/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	lib/sqlite3.c	91278;"	d	file:
sqlite3_db_mutex	lib/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	lib/sqlite3.c	91400;"	d	file:
sqlite3_db_readonly	lib/sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_release_memory	lib/sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_status	lib/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	lib/sqlite3.c	91401;"	d	file:
sqlite3_debug_mutex	lib/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	lib/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	lib/sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	lib/sqlite3.c	91279;"	d	file:
sqlite3_declare_vtab	lib/sqlite3.c	91489;"	d	file:
sqlite3_destructor_type	lib/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_destructor_type	lib/sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_diskfull	lib/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	lib/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	lib/sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	lib/sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	lib/sqlite3.c	91280;"	d	file:
sqlite3_enable_shared_cache	lib/sqlite3.c	91495;"	d	file:
sqlite3_errcode	lib/sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	lib/sqlite3.c	91281;"	d	file:
sqlite3_errmsg	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	lib/sqlite3.c	91282;"	d	file:
sqlite3_errmsg16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	lib/sqlite3.c	91283;"	d	file:
sqlite3_errmsg16	lib/sqlite3.c	91456;"	d	file:
sqlite3_exec	lib/sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	lib/sqlite3.c	91284;"	d	file:
sqlite3_expired	lib/sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	lib/sqlite3.c	91286;"	d	file:
sqlite3_extended_errcode	lib/sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	lib/sqlite3.c	91402;"	d	file:
sqlite3_extended_result_codes	lib/sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	lib/sqlite3.c	91386;"	d	file:
sqlite3_extension_init	lib/sqlite3.c	/^SQLITE_API int sqlite3_extension_init($/;"	f
sqlite3_file	lib/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	lib/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file	lib/sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	lib/sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file_control	lib/sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	lib/sqlite3.c	91363;"	d	file:
sqlite3_finalize	lib/sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	lib/sqlite3.c	91288;"	d	file:
sqlite3_found_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	lib/sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	lib/sqlite3.c	91289;"	d	file:
sqlite3_free_table	lib/sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	lib/sqlite3.c	91290;"	d	file:
sqlite3_free_table	lib/sqlite3.c	91504;"	d	file:
sqlite3_fts3_enable_parentheses	lib/sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	lib/sqlite3.c	122356;"	d	file:
sqlite3_fts3_enable_parentheses	lib/sqlite3.c	122358;"	d	file:
sqlite3_fullsync_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	lib/sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	lib/sqlite3.c	91291;"	d	file:
sqlite3_get_auxdata	lib/sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	lib/sqlite3.c	91292;"	d	file:
sqlite3_get_table	lib/sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	lib/sqlite3.c	91293;"	d	file:
sqlite3_get_table	lib/sqlite3.c	91505;"	d	file:
sqlite3_get_table_cb	lib/sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	lib/sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	lib/sqlite3.c	91295;"	d	file:
sqlite3_hostid_num	lib/sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	lib/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint	lib/sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	lib/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	lib/sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	lib/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	lib/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_info	lib/sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	lib/sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	lib/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_orderby	lib/sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_initialize	lib/sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	lib/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_int64	lib/sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_interrupt	lib/sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	lib/sqlite3.c	91297;"	d	file:
sqlite3_interrupt_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	lib/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	lib/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	lib/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	lib/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	lib/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	lib/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	lib/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_io_methods	lib/sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	lib/sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_last_insert_rowid	lib/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	lib/sqlite3.c	91298;"	d	file:
sqlite3_libversion	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	lib/sqlite3.c	91299;"	d	file:
sqlite3_libversion_number	lib/sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	lib/sqlite3.c	91300;"	d	file:
sqlite3_like_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	lib/sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	lib/sqlite3.c	91387;"	d	file:
sqlite3_load_extension	lib/sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_log	lib/sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	lib/sqlite3.c	91403;"	d	file:
sqlite3_malloc	lib/sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	lib/sqlite3.c	91301;"	d	file:
sqlite3_max_blobsize	lib/sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	lib/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	lib/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_mem_methods	lib/sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	lib/sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_memdebug_vfs_oom_test	lib/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	lib/sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	lib/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	lib/sqlite3.c	91364;"	d	file:
sqlite3_memory_used	lib/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	lib/sqlite3.c	91365;"	d	file:
sqlite3_module	lib/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	lib/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_module	lib/sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	lib/sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mprintf	lib/sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	lib/sqlite3.c	91302;"	d	file:
sqlite3_mutex	lib/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	lib/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex	lib/sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_alloc	lib/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	lib/sqlite3.c	91366;"	d	file:
sqlite3_mutex_alloc	lib/sqlite3.c	9571;"	d	file:
sqlite3_mutex_enter	lib/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	lib/sqlite3.c	91367;"	d	file:
sqlite3_mutex_enter	lib/sqlite3.c	9573;"	d	file:
sqlite3_mutex_free	lib/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	lib/sqlite3.c	91368;"	d	file:
sqlite3_mutex_free	lib/sqlite3.c	9572;"	d	file:
sqlite3_mutex_held	lib/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	lib/sqlite3.c	9576;"	d	file:
sqlite3_mutex_leave	lib/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	lib/sqlite3.c	91369;"	d	file:
sqlite3_mutex_leave	lib/sqlite3.c	9575;"	d	file:
sqlite3_mutex_methods	lib/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	lib/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_methods	lib/sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	lib/sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_notheld	lib/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	lib/sqlite3.c	9577;"	d	file:
sqlite3_mutex_try	lib/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	lib/sqlite3.c	91370;"	d	file:
sqlite3_mutex_try	lib/sqlite3.c	9574;"	d	file:
sqlite3_next_stmt	lib/sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	lib/sqlite3.c	91388;"	d	file:
sqlite3_open	lib/sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	lib/sqlite3.c	91303;"	d	file:
sqlite3_open16	lib/sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	lib/sqlite3.c	91304;"	d	file:
sqlite3_open16	lib/sqlite3.c	91457;"	d	file:
sqlite3_open_file_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	lib/sqlite3.c	91371;"	d	file:
sqlite3_opentemp_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	lib/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	lib/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	lib/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	lib/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	lib/sqlite3.c	/^SQLITE_API int sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	lib/sqlite3.c	/^static int sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	lib/sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	lib/sqlite3.c	91352;"	d	file:
sqlite3_pager_readdb_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	lib/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache	lib/sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	lib/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	lib/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods	lib/sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	lib/sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	lib/sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	lib/sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_methods2	lib/sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	lib/sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	lib/sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	lib/sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_pcache_page	lib/sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	lib/sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_prepare	lib/sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	lib/sqlite3.c	91305;"	d	file:
sqlite3_prepare16	lib/sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	lib/sqlite3.c	91306;"	d	file:
sqlite3_prepare16	lib/sqlite3.c	91458;"	d	file:
sqlite3_prepare16_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	lib/sqlite3.c	91308;"	d	file:
sqlite3_prepare16_v2	lib/sqlite3.c	91354;"	d	file:
sqlite3_prepare16_v2	lib/sqlite3.c	91459;"	d	file:
sqlite3_prepare_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	lib/sqlite3.c	91307;"	d	file:
sqlite3_prepare_v2	lib/sqlite3.c	91353;"	d	file:
sqlite3_profile	lib/sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	lib/sqlite3.c	91309;"	d	file:
sqlite3_profile	lib/sqlite3.c	91499;"	d	file:
sqlite3_progress_handler	lib/sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	lib/sqlite3.c	91310;"	d	file:
sqlite3_progress_handler	lib/sqlite3.c	91483;"	d	file:
sqlite3_query_plan	lib/sqlite3.c	/^SQLITE_API char sqlite3_query_plan[BMS*2*40];  \/* Text of the join *\/$/;"	v
sqlite3_randomness	lib/sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	lib/sqlite3.c	91384;"	d	file:
sqlite3_realloc	lib/sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	lib/sqlite3.c	91311;"	d	file:
sqlite3_release_memory	lib/sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	lib/sqlite3.c	91372;"	d	file:
sqlite3_reset	lib/sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	lib/sqlite3.c	91312;"	d	file:
sqlite3_reset_auto_extension	lib/sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	lib/sqlite3.c	91313;"	d	file:
sqlite3_result_double	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	lib/sqlite3.c	91314;"	d	file:
sqlite3_result_error	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	lib/sqlite3.c	91315;"	d	file:
sqlite3_result_error16	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	lib/sqlite3.c	91316;"	d	file:
sqlite3_result_error16	lib/sqlite3.c	91460;"	d	file:
sqlite3_result_error_code	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	lib/sqlite3.c	91382;"	d	file:
sqlite3_result_error_nomem	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	lib/sqlite3.c	91373;"	d	file:
sqlite3_result_error_toobig	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	lib/sqlite3.c	91374;"	d	file:
sqlite3_result_int	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	lib/sqlite3.c	91317;"	d	file:
sqlite3_result_int64	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	lib/sqlite3.c	91318;"	d	file:
sqlite3_result_null	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	lib/sqlite3.c	91319;"	d	file:
sqlite3_result_text	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	lib/sqlite3.c	91320;"	d	file:
sqlite3_result_text16	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	lib/sqlite3.c	91321;"	d	file:
sqlite3_result_text16	lib/sqlite3.c	91461;"	d	file:
sqlite3_result_text16be	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	lib/sqlite3.c	91322;"	d	file:
sqlite3_result_text16be	lib/sqlite3.c	91462;"	d	file:
sqlite3_result_text16le	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	lib/sqlite3.c	91323;"	d	file:
sqlite3_result_text16le	lib/sqlite3.c	91463;"	d	file:
sqlite3_result_value	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	lib/sqlite3.c	91324;"	d	file:
sqlite3_result_zeroblob	lib/sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	lib/sqlite3.c	91381;"	d	file:
sqlite3_rollback_hook	lib/sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	lib/sqlite3.c	91325;"	d	file:
sqlite3_rtree_geometry	lib/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	lib/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry	lib/sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	lib/sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_geometry_callback	lib/sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_search_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	lib/sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	lib/sqlite3.c	91326;"	d	file:
sqlite3_set_authorizer	lib/sqlite3.c	91444;"	d	file:
sqlite3_set_auxdata	lib/sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	lib/sqlite3.c	91327;"	d	file:
sqlite3_shutdown	lib/sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	lib/sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	lib/sqlite3.c	91375;"	d	file:
sqlite3_snprintf	lib/sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	lib/sqlite3.c	91328;"	d	file:
sqlite3_soft_heap_limit	lib/sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	lib/sqlite3.c	91376;"	d	file:
sqlite3_soft_heap_limit64	lib/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	lib/sqlite3.c	91404;"	d	file:
sqlite3_sort_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	lib/sqlite3.c	91405;"	d	file:
sqlite3_sql	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	lib/sqlite3.c	91389;"	d	file:
sqlite3_status	lib/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	lib/sqlite3.c	91390;"	d	file:
sqlite3_step	lib/sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	lib/sqlite3.c	91329;"	d	file:
sqlite3_stmt	lib/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt	lib/sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt_busy	lib/sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	lib/sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	lib/sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	lib/sqlite3.c	91406;"	d	file:
sqlite3_stricmp	lib/sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_strnicmp	lib/sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	lib/sqlite3.c	91407;"	d	file:
sqlite3_sync_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	lib/sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_syscall_ptr	lib/sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_table_column_metadata	lib/sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	lib/sqlite3.c	91330;"	d	file:
sqlite3_table_column_metadata	lib/sqlite3.c	91440;"	d	file:
sqlite3_temp_directory	lib/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	lib/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_temp_directory	lib/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	lib/sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	lib/sqlite3.c	91383;"	d	file:
sqlite3_thread_cleanup	lib/sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	lib/sqlite3.c	91331;"	d	file:
sqlite3_threadsafe	lib/sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	lib/sqlite3.c	91380;"	d	file:
sqlite3_tokenizer	lib/sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	lib/sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	lib/sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	lib/sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	lib/sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	lib/sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	lib/sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	lib/sqlite3.c	91332;"	d	file:
sqlite3_trace	lib/sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	lib/sqlite3.c	91333;"	d	file:
sqlite3_trace	lib/sqlite3.c	91500;"	d	file:
sqlite3_transfer_bindings	lib/sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	lib/sqlite3.c	91335;"	d	file:
sqlite3_uint64	lib/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_uint64	lib/sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_unlock_notify	lib/sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	lib/sqlite3.c	91408;"	d	file:
sqlite3_update_hook	lib/sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	lib/sqlite3.c	91337;"	d	file:
sqlite3_uri_boolean	lib/sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_int64	lib/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_parameter	lib/sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_user_data	lib/sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	lib/sqlite3.c	91338;"	d	file:
sqlite3_value	lib/sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value	lib/sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_value_blob	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	lib/sqlite3.c	91339;"	d	file:
sqlite3_value_bytes	lib/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	lib/sqlite3.c	91340;"	d	file:
sqlite3_value_bytes16	lib/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	lib/sqlite3.c	91341;"	d	file:
sqlite3_value_double	lib/sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	lib/sqlite3.c	91342;"	d	file:
sqlite3_value_int	lib/sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	lib/sqlite3.c	91343;"	d	file:
sqlite3_value_int64	lib/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	lib/sqlite3.c	91344;"	d	file:
sqlite3_value_numeric_type	lib/sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	lib/sqlite3.c	91345;"	d	file:
sqlite3_value_text	lib/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	lib/sqlite3.c	91346;"	d	file:
sqlite3_value_text16	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	lib/sqlite3.c	91347;"	d	file:
sqlite3_value_text16	lib/sqlite3.c	91464;"	d	file:
sqlite3_value_text16be	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	lib/sqlite3.c	91348;"	d	file:
sqlite3_value_text16be	lib/sqlite3.c	91465;"	d	file:
sqlite3_value_text16le	lib/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	lib/sqlite3.c	91349;"	d	file:
sqlite3_value_text16le	lib/sqlite3.c	91466;"	d	file:
sqlite3_value_type	lib/sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	lib/sqlite3.c	91350;"	d	file:
sqlite3_version	lib/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_version	lib/sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	lib/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	lib/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs	lib/sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	lib/sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs_find	lib/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	lib/sqlite3.c	91377;"	d	file:
sqlite3_vfs_register	lib/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	lib/sqlite3.c	91378;"	d	file:
sqlite3_vfs_unregister	lib/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	lib/sqlite3.c	91379;"	d	file:
sqlite3_vmprintf	lib/sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	lib/sqlite3.c	91351;"	d	file:
sqlite3_vsnprintf	lib/sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	lib/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	lib/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab	lib/sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	lib/sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_config	lib/sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	lib/sqlite3.c	91413;"	d	file:
sqlite3_vtab_config	lib/sqlite3.c	91490;"	d	file:
sqlite3_vtab_cursor	lib/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	lib/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_cursor	lib/sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	lib/sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_vtab_on_conflict	lib/sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	lib/sqlite3.c	91414;"	d	file:
sqlite3_vtab_on_conflict	lib/sqlite3.c	91491;"	d	file:
sqlite3_wal_autocheckpoint	lib/sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	lib/sqlite3.c	91409;"	d	file:
sqlite3_wal_checkpoint	lib/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	lib/sqlite3.c	91410;"	d	file:
sqlite3_wal_checkpoint_v2	lib/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_hook	lib/sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	lib/sqlite3.c	91411;"	d	file:
sqlite3_win32_mbcs_to_utf8	lib/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_utf8_to_mbcs	lib/sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_xferopt_count	lib/sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	lib/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	lib/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	lib/sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	lib/sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	lib/sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	lib/sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	lib/sqlite3.c	7641;"	d	file:
sqliteHashFirst	lib/sqlite3.c	7639;"	d	file:
sqliteHashNext	lib/sqlite3.c	7640;"	d	file:
sqliteProcessJoin	lib/sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	lib/sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	lib/sqlite3.c	83046;"	d	file:
sqlite_int64	lib/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	lib/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	lib/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_int64	lib/sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	lib/sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	lib/sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	lib/sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	lib/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	lib/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
sqlite_uint64	lib/sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	lib/sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	lib/sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
ss_closed	lib/lua_network.c	/^	ss_closed,$/;"	e	enum:SocketStatus	file:
ss_closing	lib/lua_network.c	/^	ss_closing,$/;"	e	enum:SocketStatus	file:
ss_connected	lib/lua_network.c	/^	ss_connected,$/;"	e	enum:SocketStatus	file:
ss_connecting	lib/lua_network.c	/^	ss_connecting,$/;"	e	enum:SocketStatus	file:
ss_init	lib/lua_network.c	/^	ss_init,$/;"	e	enum:SocketStatus	file:
ss_listening	lib/lua_network.c	/^	ss_listening,$/;"	e	enum:SocketStatus	file:
ssize_t	lib/battlefield/fight.h	/^typedef SSIZE_T ssize_t;$/;"	t
st_connection	lib/lua_network.c	/^	st_connection,$/;"	e	enum:SocketType	file:
st_listener	lib/lua_network.c	/^	st_listener,$/;"	e	enum:SocketType	file:
st_unknown	lib/lua_network.c	/^	st_unknown,$/;"	e	enum:SocketType	file:
stage	lib/battlefield/battlefield.h	/^	} stage;$/;"	m	struct:battlefield	typeref:struct:battlefield::__anon10
star_oh	lib/sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
start	lib/battlefield/jsmn.h	/^	int start;$/;"	m	struct:__anon8
start	lib/battlefield/role.h	/^            int start;$/;"	m	struct:role::__anon26::__anon28
startEndFlag	lib/sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startSelectTarget	lib/battlefield/battlefield_imp.c	/^int startSelectTarget(struct battlefield * battle, int harm)$/;"	f
startTick	lib/battlefield/battlefield.h	/^    int startTick;$/;"	m	struct:battlefield
startTick	lib/battlefield/role.h	/^        int startTick;$/;"	m	struct:role::__anon24
startTick	lib/battlefield/wave.h	/^    int startTick;$/;"	m	struct:wave
startTime	lib/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat3Get	lib/sqlite3.c	/^static void stat3Get($/;"	f	file:
stat3GetFuncdef	lib/sqlite3.c	/^static const FuncDef stat3GetFuncdef = {$/;"	v	file:
stat3Init	lib/sqlite3.c	/^static void stat3Init($/;"	f	file:
stat3InitFuncdef	lib/sqlite3.c	/^static const FuncDef stat3InitFuncdef = {$/;"	v	file:
stat3Push	lib/sqlite3.c	/^static void stat3Push($/;"	f	file:
stat3PushFuncdef	lib/sqlite3.c	/^static const FuncDef stat3PushFuncdef = {$/;"	v	file:
state	../framework/md5.h	/^	uint32 state[4];$/;"	m	struct:__anon65
state	lib/battlefield/WELLRNG512a.h	/^	uint32_t state[16];$/;"	m	struct:WELLRNG512aGenerator
stateno	lib/sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
statistics	lib/battlefield/battlefield.h	/^	} statistics;$/;"	m	struct:battlefield	typeref:struct:battlefield::__anon12
status	../framework/network.c	/^	enum conn_status status;$/;"	m	struct:conn	typeref:enum:conn::conn_status	file:
status	lib/battlefield/role.h	/^    enum role_status status;$/;"	m	struct:role	typeref:enum:role::role_status
status	lib/lua_network.c	/^	enum SocketStatus status;$/;"	m	struct:Socket	typeref:enum:Socket::SocketStatus	file:
status	lib/sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	lib/sqlite3.c	/^static int stem($/;"	f	file:
step	lib/sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	lib/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_status	lib/sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
stop	../framework/network.c	/^	int stop;$/;"	m	struct:network	file:
stop	lib/lua_network.c	/^int stop = 0;$/;"	v
stopTick	lib/battlefield/battlefield.h	/^	int stopTick;$/;"	m	struct:battlefield
str	lib/sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:
strHash	lib/sqlite3.c	/^static unsigned int strHash(const char *z, int nKey){$/;"	f	file:
strength	lib/fight_type.h	/^	int64_t strength;$/;"	m	struct:tagCHARACTER_INFO
strftimeFunc	lib/sqlite3.c	/^static void strftimeFunc($/;"	f	file:
string	../framework/amf.c	/^		char * string;$/;"	m	union:amf_value::__anon58	file:
string	lib/battlefield/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
string_ref	../framework/amf.c	/^} string_ref[1024];$/;"	v	typeref:struct:__anon57	file:
strnicmp	lib/sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	lib/sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	lib/sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	lib/sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	lib/sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	lib/sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	lib/sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	lib/sqlite3.c	/^static void substrFunc($/;"	f	file:
suffix_object	lib/battlefield/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
sumFinalize	lib/sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	lib/sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
support_god_hand	lib/fight_type.h	/^	int32_t support_god_hand;$/;"	m	struct:tagPVE_FIGHT_CONFIG
suppressErr	lib/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
surface	lib/battlefield/battlefield.h	/^	int surface;$/;"	m	struct:KingFlag
swapMixedEndianFloat	lib/sqlite3.c	62184;"	d	file:
swapMixedEndianFloat	lib/sqlite3.c	62186;"	d	file:
switchLockProxyPath	lib/sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	lib/sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	lib/sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	lib/sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	lib/sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	lib/sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	lib/sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	lib/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	lib/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	lib/sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szChunk	lib/sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	lib/sqlite3.c	/^  int szChunk;              \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:os2File	file:
szChunk	lib/sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szExtra	lib/sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	lib/sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:
szFirstBlock	lib/sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szLookaside	lib/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMaster	lib/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szOsFile	lib/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szOsFile	lib/sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
szPage	lib/sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	lib/sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	lib/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	lib/sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	lib/sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	lib/sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szRegion	lib/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
szRegion	lib/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	lib/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szScratch	lib/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	lib/sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
tRowcnt	lib/sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	lib/sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	lib/sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
table	lib/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	lib/sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	lib/sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	lib/sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
tag	../framework/mfile.c	/^	uint32_t tag;	$/;"	m	struct:MFileHeader	file:
tag	lib/battlefield/scheduler.c	/^	void * tag;$/;"	m	struct:timer	file:
tag	lib/mfile.c	/^	uint32_t tag;	$/;"	m	struct:MFileHeader	file:
tagCHARACTER_INFO	lib/fight_type.h	/^typedef struct tagCHARACTER_INFO{$/;"	s
tagFIGHT_REWARD_CONFIG	lib/fight_type.h	/^typedef struct tagFIGHT_REWARD_CONFIG{$/;"	s
tagKING_FIGHT_INFO	lib/fight_type.h	/^typedef struct tagKING_FIGHT_INFO{$/;"	s
tagPVE_FIGHT_CONFIG	lib/fight_type.h	/^typedef struct tagPVE_FIGHT_CONFIG{$/;"	s
tagPVE_FIGHT_INFO	lib/fight_type.h	/^typedef struct tagPVE_FIGHT_INFO{$/;"	s
tagSTORY_FIGHT_REWARD_INFO	lib/fight_type.h	/^typedef struct tagSTORY_FIGHT_REWARD_INFO{$/;"	s
tail	lib/battlefield/battlefield.h	/^            struct opt * tail;$/;"	m	struct:battlefield::__anon15::__anon16	typeref:struct:battlefield::__anon15::__anon16::opt
tail	lib/battlefield/battlefield.h	/^            struct opt * tail;$/;"	m	struct:battlefield::__anon15::__anon17	typeref:struct:battlefield::__anon15::__anon17::opt
tail	lib/battlefield/buffer.h	/^        struct buffer_effect * tail;$/;"	m	struct:buffer::__anon35	typeref:struct:buffer::__anon35::buffer_effect
tail	lib/battlefield/event.c	/^	struct event * tail;$/;"	m	struct:__anon4	typeref:struct:__anon4::event	file:
tail	lib/battlefield/event.c	/^	struct eventListener * tail;$/;"	m	struct:__anon5	typeref:struct:__anon5::eventListener	file:
tail	lib/battlefield/scheduler.c	/^    struct timer * tail;$/;"	m	struct:timer_list	typeref:struct:timer_list::timer	file:
target	lib/battlefield/battlefield.h	/^    int target;$/;"	m	struct:opt
target	lib/battlefield/buffer.h	/^    struct role * target;$/;"	m	struct:buffer	typeref:struct:buffer::role
target	lib/battlefield/bullet.h	/^	int target;$/;"	m	struct:bullet
target	lib/battlefield/role.h	/^            int target;$/;"	m	struct:role::__anon26::__anon28
target	lib/battlefield/role.h	/^        int target;$/;"	m	struct:role::__anon24
target	lib/battlefield/skill.h	/^    int target;$/;"	m	struct:skill
target	lib/sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	lib/sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	lib/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tempFile	lib/sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary file *\/$/;"	m	struct:Pager	file:
tempReg	lib/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	lib/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
tenacity	lib/fight_type.h	/^	int64_t tenacity;$/;"	m	struct:tagCHARACTER_INFO
termCanDriveIndex	lib/sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	lib/sqlite3.c	/^static void testFunc($/;"	f	file:
testRtreeCell	lib/sqlite3.c	/^static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeEntry	lib/sqlite3.c	/^static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeGeom	lib/sqlite3.c	/^static int testRtreeGeom($/;"	f	file:
test_control	lib/sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	lib/sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	lib/sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	lib/sqlite3.c	116495;"	d	file:
testcase	lib/sqlite3.c	472;"	d	file:
testcase	lib/sqlite3.c	474;"	d	file:
texture	lib/battlefield/bullet.h	/^        char texture[32];$/;"	m	struct:bullet::__anon36
texture_head	lib/battlefield/bullet.h	/^		char texture_head[32];$/;"	m	struct:bullet::__anon36
texture_tail	lib/battlefield/bullet.h	/^		char texture_tail[32];$/;"	m	struct:bullet::__anon36
thread	lib/battlefield/script.h	/^	lua_State * thread;$/;"	m	struct:script
thread_cleanup	lib/sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	lib/sqlite3.c	25309;"	d	file:
threadid	lib/sqlite3.c	25311;"	d	file:
tick	../framework/network.c	/^	} tick;$/;"	m	struct:network	typeref:struct:network::__anon67	file:
tick	lib/battlefield/battlefield.h	/^    int tick;$/;"	m	struct:opt
tick	lib/battlefield/role.h	/^            int tick;$/;"	m	struct:role::__anon24::__anon25
tick	lib/battlefield/scheduler.c	/^	int tick;$/;"	m	struct:scheduler	file:
tick	lib/battlefield/scheduler.c	/^	int tick;$/;"	m	struct:timer	file:
tick	lib/battlefield/wave.h	/^    int tick;$/;"	m	struct:wave
time	../framework/mfile.c	/^	uint32_t time;$/;"	m	struct:MFileIndex	file:
time	../framework/mtime.h	/^DECLARE_MODULE(time);$/;"	v
time	lib/mfile.c	/^	uint32_t time;$/;"	m	struct:MFileIndex	file:
timeFunc	lib/sqlite3.c	/^static void timeFunc($/;"	f	file:
time_for_bone_action	lib/battlefield/bone.c	/^int time_for_bone_action(const char * boneName, const char * actionName, int * s1, int * s2)$/;"	f
timer	../framework/main.c	/^static void timer(time_t t, void * ctx)$/;"	f	file:
timer	../framework/network.c	/^	} timer;$/;"	m	struct:network	typeref:struct:network::__anon66	file:
timer	lib/battlefield/scheduler.c	/^    } timer;$/;"	m	struct:scheduler	typeref:struct:scheduler::__anon34	file:
timer	lib/battlefield/scheduler.c	/^struct timer$/;"	s	file:
timer_list	lib/battlefield/scheduler.c	/^struct timer_list$/;"	s	file:
timer_list_pop	lib/battlefield/scheduler.c	/^static struct timer * timer_list_pop(struct timer_list * list)$/;"	f	file:
timer_list_push_by_tick	lib/battlefield/scheduler.c	/^static void timer_list_push_by_tick(struct timer_list * list, struct timer * timer)$/;"	f	file:
timer_list_push_tail	lib/battlefield/scheduler.c	/^static void timer_list_push_tail(struct timer_list * list, struct timer * timer)$/;"	f	file:
timesub	../framework/network.c	/^static int timesub(struct timeval * t1, struct timeval * t2)$/;"	f	file:
tkCREATE	lib/sqlite3.c	112108;"	d	file:
tkEND	lib/sqlite3.c	112111;"	d	file:
tkEXPLAIN	lib/sqlite3.c	112107;"	d	file:
tkOTHER	lib/sqlite3.c	112105;"	d	file:
tkSEMI	lib/sqlite3.c	112103;"	d	file:
tkTEMP	lib/sqlite3.c	112109;"	d	file:
tkTRIGGER	lib/sqlite3.c	112110;"	d	file:
tkWS	lib/sqlite3.c	112104;"	d	file:
tmask	lib/sqlite3.c	90022;"	d	file:
tmp	lib/battlefield/role.h	/^        } tmp;$/;"	m	struct:role::__anon24	typeref:struct:role::__anon24::__anon25
tnum	lib/sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
tnum	lib/sqlite3.c	/^  int tnum;        \/* Page containing root of this index in database file *\/$/;"	m	struct:Index	file:
to	lib/battlefield/wave.h	/^    int to;$/;"	m	struct:wave
token	lib/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	lib/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tokens	lib/battlefield/bone.c	/^static jsmntok_t tokens[1024*1024];$/;"	v	file:
toknext	lib/battlefield/jsmn.h	/^	unsigned int toknext; \/* next token to allocate *\/$/;"	m	struct:__anon9
toksuper	lib/battlefield/jsmn.h	/^	int toksuper; \/* superior token node, e.g parent object or array *\/$/;"	m	struct:__anon9
tooBig	lib/sqlite3.c	/^  u8   tooBig;         \/* Becomes true if string size exceeds limits *\/$/;"	m	struct:StrAccum	file:
topen	../framework/log.c	/^	time_t topen;$/;"	m	struct:logger	file:
topen	lib/lua_log.c	/^	time_t topen;$/;"	m	struct:logger	file:
total	../framework/md5.h	/^	uint32 total[2];$/;"	m	struct:__anon65
totalAlloc	lib/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	lib/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	lib/sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	lib/sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	lib/sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	lib/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	lib/sqlite3.c	/^  FILE *trace;            \/* Write an execution trace here, if not NULL *\/$/;"	m	struct:Vdbe	file:
trace	lib/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	lib/sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	lib/sqlite3.c	/^ int   trace;       \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	lib/sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	lib/sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	lib/sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	lib/sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
translateEnv	../framework/xmlHelper.c	/^static const char * translateEnv(const char * text)$/;"	f	file:
translateEnv	lib/xmlHelper.c	/^static const char * translateEnv(const char * text)$/;"	f	file:
translate_color	config/generate.lua	/^function translate_color(color)$/;"	f
translate_header	../framework/package.h	/^struct translate_header {$/;"	s
tree	../framework/xmlHelper.c	/^	mxml_node_t * tree;$/;"	m	struct:xml_doc_t	file:
tree	lib/xmlHelper.c	/^	mxml_node_t * tree;$/;"	m	struct:xml_doc_t	file:
trigHash	lib/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	lib/sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	lib/sqlite3.c	/^static void trimFunc($/;"	f	file:
true_blood_ratio	lib/fight_type.h	/^	int64_t true_blood_ratio;$/;"	m	struct:tagCHARACTER_INFO
truncateOnCommit	lib/sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
type	../framework/amf.c	/^	enum amf_type type;$/;"	m	struct:amf_value	typeref:enum:amf_value::amf_type	file:
type	lib/battlefield/battlefield.h	/^	int type;$/;"	m	struct:reward
type	lib/battlefield/bullet.h	/^    enum bullet_type type;$/;"	m	struct:bullet	typeref:enum:bullet::bullet_type
type	lib/battlefield/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	lib/battlefield/jsmn.h	/^	jsmntype_t type;$/;"	m	struct:__anon8
type	lib/battlefield/randomAppearance.c	/^    const char * type;$/;"	m	struct:__anon32	file:
type	lib/battlefield/randomAppearance.c	/^    const char * type;$/;"	m	struct:__anon33	file:
type	lib/battlefield/role.h	/^        const char * type; \/\/ "ma", "cat", "ren", ...$/;"	m	struct:Appearance::__anon19
type	lib/battlefield/role.h	/^        const char * type; \/\/ "shuangshou", "changbing", "gongjian", "faqiu"$/;"	m	struct:Appearance::__anon20
type	lib/lua_fight.c	/^	int type;$/;"	m	struct:FightReward	file:
type	lib/lua_network.c	/^	enum SocketType type;$/;"	m	struct:Socket	typeref:enum:Socket::SocketType	file:
type	lib/sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	lib/sqlite3.c	/^  u8  type;           \/* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc *\/$/;"	m	struct:Mem	file:
type	lib/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeofFunc	lib/sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	lib/sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon52	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon40	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:IndexSample	typeref:union:IndexSample::__anon39	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::__anon47	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon49	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon46	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon43	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:WherePlan	typeref:union:WherePlan::__anon42	file:
u	lib/sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon53	file:
u1	lib/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon38	file:
u16	lib/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u32	lib/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	lib/sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	lib/sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	lib/sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	lib/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	lib/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	lib/sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	lib/sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
ucUtf8	lib/sqlite3.c	/^static UconvObject ucUtf8 = NULL; \/* convert between UTF-8 and UCS-2 *\/$/;"	v	file:
uclCp	lib/sqlite3.c	/^static UconvObject uclCp = NULL;  \/* convert between local codepage and UCS-2 *\/$/;"	v	file:
uint32	../framework/md5.h	9;"	d
uint8	../framework/md5.h	5;"	d
unLockFlag	lib/sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
under	lib/battlefield/bullet.h	/^	char under[32];$/;"	m	struct:hit_effect
unicodeToMbcs	lib/sqlite3.c	/^static char *unicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:
unicodeToUtf8	lib/sqlite3.c	/^static char *unicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:
unixAccess	lib/sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	lib/sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	lib/sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	lib/sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	lib/sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	lib/sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	lib/sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	lib/sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	lib/sqlite3.c	30463;"	d	file:
unixDlError	lib/sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	lib/sqlite3.c	30461;"	d	file:
unixDlOpen	lib/sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	lib/sqlite3.c	30460;"	d	file:
unixDlSym	lib/sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	lib/sqlite3.c	30462;"	d	file:
unixEnterMutex	lib/sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFile	lib/sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	lib/sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	lib/sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	lib/sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	lib/sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	lib/sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	lib/sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	lib/sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	lib/sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	lib/sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixInodeInfo	lib/sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	lib/sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	lib/sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	lib/sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	lib/sqlite3.c	26056;"	d	file:
unixLogErrorAtLine	lib/sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixModeBit	lib/sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	lib/sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	lib/sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	lib/sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	lib/sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	lib/sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	lib/sqlite3.c	/^static int unixRead($/;"	f	file:
unixSectorSize	lib/sqlite3.c	/^static int unixSectorSize(sqlite3_file *pFile){$/;"	f	file:
unixSetSystemCall	lib/sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	lib/sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	lib/sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	lib/sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	lib/sqlite3.c	29314;"	d	file:
unixShmLock	lib/sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	lib/sqlite3.c	29313;"	d	file:
unixShmMap	lib/sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	lib/sqlite3.c	29312;"	d	file:
unixShmNode	lib/sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	lib/sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	lib/sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmSystemLock	lib/sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	lib/sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	lib/sqlite3.c	29315;"	d	file:
unixSleep	lib/sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	lib/sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	lib/sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	lib/sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnlock	lib/sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixWrite	lib/sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	lib/sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unlikely	lib/sqlite3.c	543;"	d	file:
unlikely	lib/sqlite3.c	546;"	d	file:
unload	modules/mlua.c	/^	char unload[256];$/;"	m	struct:Script	file:
unlock	../framework/memory.c	/^static void unlock()$/;"	f	file:
unlock	lib/memory.c	/^static void unlock()$/;"	f	file:
unlockBtreeIfUnused	lib/sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	lib/sqlite3.c	/^static void unlockBtreeMutex(Btree *p){$/;"	f	file:
unlockReadLock	lib/sqlite3.c	/^static int unlockReadLock( os2File *id ){$/;"	f	file:
unlockReadLock	lib/sqlite3.c	/^static int unlockReadLock(winFile *pFile){$/;"	f	file:
unlock_notify	lib/sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
untestedTerms	lib/sqlite3.c	/^  u8 untestedTerms;    \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	lib/sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
update	lib/battlefield/buffer.h	/^    void (*update) (struct buffer_effect * buffer);$/;"	m	struct:buffer_effect_imp
update	modules/mlua.c	/^	char update[256];$/;"	m	struct:Script	file:
updateAccumulator	lib/sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	lib/sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	lib/sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	lib/sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	lib/sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	lib/sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
usable	lib/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usable	lib/sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
usableSize	lib/sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	lib/sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	lib/sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	lib/sqlite3.c	/^  Bool useRandomRowid;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	lib/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
used	../framework/memory.c	/^	int used;$/;"	m	struct:heap	file:
used	lib/memory.c	/^	int used;$/;"	m	struct:heap	file:
used	lib/sqlite3.c	/^  Bitmask used;      \/* Bitmask of cursors used by this plan *\/$/;"	m	struct:WhereCost	file:
usedAsColumnCache	lib/sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	lib/sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
user_logger	../framework/userlog.c	/^static struct logger * user_logger[MAX_USER_LOGGER_COUNT] = {0};$/;"	v	typeref:struct:logger	file:
user_logger_flush_time	../framework/userlog.c	/^static long long user_logger_flush_time[MAX_USER_LOGGER_COUNT] ={0};$/;"	v	file:
user_logger_name	../framework/userlog.c	/^static const char* user_logger_name[MAX_USER_LOGGER_COUNT] ={$/;"	v	file:
usesStmtJournal	lib/sqlite3.c	/^  u8 usesStmtJournal;     \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
utf8ToUnicode	lib/sqlite3.c	/^static LPWSTR utf8ToUnicode(const char *zFilename){$/;"	f	file:
v	lib/sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	lib/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	lib/sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	lib/battlefield/event.c	/^	int v1;$/;"	m	struct:event	file:
v2	lib/battlefield/event.c	/^	int v2;$/;"	m	struct:event	file:
vacuumFinalize	lib/sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
val	../framework/md5.c	/^static char *val[] =$/;"	v	file:
validHMS	lib/sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	lib/sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validNKey	lib/sqlite3.c	/^  u8 validNKey;             \/* True if info.nKey is valid *\/$/;"	m	struct:BtCursor	file:
validTZ	lib/sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	lib/sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	../framework/map.h	/^	void * value;$/;"	m	struct:map_element
value	../framework/matrix.c	/^	char * value;$/;"	m	struct:MatrixField	file:
value	lib/battlefield/battlefield.h	/^    int value;$/;"	m	struct:reward
value	lib/battlefield/buffer.h	/^	int value[4];$/;"	m	struct:buffer_effect
value	lib/battlefield/role.h	/^		int value;$/;"	m	struct:role::__anon26
value	lib/battlefield/role.h	/^        int value;$/;"	m	struct:role::__anon29
value	lib/battlefield/role.h	/^        long long value;$/;"	m	struct:role::__anon23
value	lib/battlefield/skill.h	/^    int value[4];$/;"	m	struct:skill
value	lib/lua_fight.c	/^	int value;$/;"	m	struct:FightReward	file:
value	lib/map.h	/^	void * value;$/;"	m	struct:map_element
value	lib/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	struct:__anon54::__anon55	file:
valueFromExpr	lib/sqlite3.c	/^static int valueFromExpr($/;"	f	file:
valueInRange	lib/battlefield/fight.c	/^int32_t valueInRange(struct WELLRNG512aGenerator * generator, int32_t min, int32_t max)$/;"	f
value_blob	lib/sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	lib/sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	lib/sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	lib/sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	lib/sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	lib/sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	lib/sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	lib/sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	lib/sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	lib/sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	lib/sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	lib/sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
valuedouble	lib/battlefield/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	lib/battlefield/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	lib/battlefield/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
vdbeCommit	lib/sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeExecCnt	lib/sqlite3.c	/^  int vdbeExecCnt;              \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
vdbeFreeOpArray	lib/sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeSafety	lib/sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	lib/sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSorterCompare	lib/sqlite3.c	/^static void vdbeSorterCompare($/;"	f	file:
vdbeSorterDoCompare	lib/sqlite3.c	/^static int vdbeSorterDoCompare(VdbeCursor *pCsr, int iOut){$/;"	f	file:
vdbeSorterInitMerge	lib/sqlite3.c	/^static int vdbeSorterInitMerge($/;"	f	file:
vdbeSorterIterInit	lib/sqlite3.c	/^static int vdbeSorterIterInit($/;"	f	file:
vdbeSorterIterNext	lib/sqlite3.c	/^static int vdbeSorterIterNext($/;"	f	file:
vdbeSorterIterZero	lib/sqlite3.c	/^static void vdbeSorterIterZero(sqlite3 *db, VdbeSorterIter *pIter){$/;"	f	file:
vdbeSorterListToPMA	lib/sqlite3.c	/^static int vdbeSorterListToPMA(sqlite3 *db, VdbeCursor *pCsr){$/;"	f	file:
vdbeSorterMerge	lib/sqlite3.c	/^static void vdbeSorterMerge($/;"	f	file:
vdbeSorterOpenTempFile	lib/sqlite3.c	/^static int vdbeSorterOpenTempFile(sqlite3 *db, sqlite3_file **ppFile){$/;"	f	file:
vdbeSorterReadVarint	lib/sqlite3.c	/^static int vdbeSorterReadVarint($/;"	f	file:
vdbeSorterRecordFree	lib/sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRowkey	lib/sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSort	lib/sqlite3.c	/^static int vdbeSorterSort(VdbeCursor *pCsr){$/;"	f	file:
vdbeSorterWriteVarint	lib/sqlite3.c	/^static int vdbeSorterWriteVarint($/;"	f	file:
vdbeUnbind	lib/sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeVComment	lib/sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
version	lib/battlefield/battlefield.h	/^    int version;$/;"	m	struct:battlefield
versionFunc	lib/sqlite3.c	/^static void versionFunc($/;"	f	file:
vfsFlags	lib/sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	lib/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	lib/sqlite3.c	14940;"	d	file:
vfsUnlink	lib/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	lib/sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	lib/sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	lib/sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
visiable	lib/fight_type.h	/^	int32_t visiable;$/;"	m	struct:tagFIGHT_REWARD_CONFIG
vmask	lib/sqlite3.c	/^  Bitmask vmask;           \/* Bitmask identifying virtual table cursors *\/$/;"	m	struct:WhereClause	file:
vmprintf	lib/sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtabBestIndex	lib/sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	lib/sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	lib/sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	lib/sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	lib/sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	lib/sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	lib/sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	lib/sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	lib/sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	lib/sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	lib/sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walBusyLock	lib/sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	lib/sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	lib/sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	lib/sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	lib/sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	lib/sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	lib/sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	lib/sqlite3.c	45735;"	d	file:
walFramePage	lib/sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	lib/sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	lib/sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	lib/sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	lib/sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	lib/sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	lib/sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	lib/sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	lib/sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	lib/sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	lib/sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	lib/sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	lib/sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	lib/sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	lib/sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	lib/sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	lib/sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	lib/sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	lib/sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	lib/sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	lib/sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	lib/sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	lib/sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartLog	lib/sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	lib/sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	lib/sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	lib/sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	lib/sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	lib/sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	lib/sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	lib/sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	lib/sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	lib/sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	lib/sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
wantToLock	lib/sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wave	lib/battlefield/wave.h	/^struct wave$/;"	s
waveCreate	lib/battlefield/battlefield_imp.c	/^void waveCreate(struct battlefield * battle, struct wave * wave)$/;"	f
waveList	lib/battlefield/battlefield.h	/^    struct wave * waveList;$/;"	m	struct:battlefield	typeref:struct:battlefield::wave
wave_add_harm_bullet	lib/battlefield/wave.c	/^void wave_add_harm_bullet(struct wave * wave, struct bullet * bullet)$/;"	f
wave_add_help_bullet	lib/battlefield/wave.c	/^void wave_add_help_bullet(struct wave * wave, struct bullet * bullet)$/;"	f
wave_attach	lib/battlefield/wave.c	/^void wave_attach(struct wave * wave)$/;"	f
wave_clone	lib/battlefield/wave.c	/^struct wave * wave_clone(struct wave * wave)$/;"	f
wave_detach	lib/battlefield/wave.c	/^void  wave_detach(struct wave * wave)$/;"	f
wave_new	lib/battlefield/wave.c	/^struct wave * wave_new(struct battlefield * battle, int caster, const char * display)$/;"	f
wave_release	lib/battlefield/wave.c	/^void wave_release(struct wave * wave)$/;"	f
wave_update	lib/battlefield/wave.c	/^static void wave_update(void * data)$/;"	f	file:
wave_update_pos	lib/battlefield/wave.c	/^static void wave_update_pos(struct wave * wave)$/;"	f	file:
wbuf	../framework/network.c	/^	struct buffer * wbuf;$/;"	m	struct:conn	typeref:struct:conn::buffer	file:
wc	lib/sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	lib/sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	lib/sqlite3.c	/^  u16 wctrlFlags;          \/* Might include WHERE_AND_ONLY *\/$/;"	m	struct:WhereClause	file:
wctrlFlags	lib/sqlite3.c	/^  u16 wctrlFlags;      \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
weapon	lib/battlefield/role.h	/^    } weapon;$/;"	m	struct:Appearance	typeref:struct:Appearance::__anon20
weapon_body_type	lib/fight_type.h	/^	BodyType weapon_body_type;$/;"	m	struct:tagCHARACTER_INFO
weapon_body_type	lib/fight_type.h	/^	BodyType weapon_body_type;$/;"	m	struct:tagKING_FIGHT_INFO
weapon_skin_id	lib/fight_type.h	/^	int32_t weapon_skin_id;$/;"	m	struct:tagCHARACTER_INFO
weapon_skin_id	lib/fight_type.h	/^	int32_t weapon_skin_id;$/;"	m	struct:tagKING_FIGHT_INFO
whereAndInfoDelete	lib/sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	lib/sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	lib/sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	lib/sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereEqualScanEst	lib/sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	lib/sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	lib/sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	lib/sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	lib/sqlite3.c	/^static int whereKeyStats($/;"	f	file:
whereOrInfoDelete	lib/sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrName	lib/sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
whereRangeScanEst	lib/sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereSplit	lib/sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){$/;"	f	file:
whereTempTriggers	lib/sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
width	lib/battlefield/battlefield.h	/^		int width;$/;"	m	struct:battlefield::__anon10
win32IoerrRetry	lib/sqlite3.c	/^static int win32IoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
win32IoerrRetryDelay	lib/sqlite3.c	/^static int win32IoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winAccess	lib/sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	lib/sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	lib/sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winCurrentTime	lib/sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	lib/sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	lib/sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	lib/sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	lib/sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	lib/sqlite3.c	35606;"	d	file:
winDlError	lib/sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	lib/sqlite3.c	35604;"	d	file:
winDlOpen	lib/sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	lib/sqlite3.c	35603;"	d	file:
winDlSym	lib/sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f	file:
winDlSym	lib/sqlite3.c	35605;"	d	file:
winFile	lib/sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	lib/sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	lib/sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	lib/sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	lib/sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetLastError	lib/sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetSystemCall	lib/sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winIoMethod	lib/sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winLock	lib/sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLogError	lib/sqlite3.c	33250;"	d	file:
winLogErrorAtLine	lib/sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winMemAssertMagic	lib/sqlite3.c	32248;"	d	file:
winMemAssertMagic	lib/sqlite3.c	32250;"	d	file:
winMemData	lib/sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	lib/sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	lib/sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetHeap	lib/sqlite3.c	32253;"	d	file:
winMemInit	lib/sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	lib/sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	lib/sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	lib/sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	lib/sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	lib/sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	lib/sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	lib/sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	lib/sqlite3.c	/^static int winMutexEnd(void){ $/;"	f	file:
winMutexEnter	lib/sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	lib/sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	lib/sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	lib/sqlite3.c	/^static int winMutexInit(void){ $/;"	f	file:
winMutexLeave	lib/sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	lib/sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	lib/sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	lib/sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	lib/sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_lock	lib/sqlite3.c	/^static long winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	lib/sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[6] = {$/;"	v	file:
winNextSystemCall	lib/sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winOpen	lib/sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	lib/sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	lib/sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	lib/sqlite3.c	/^static int winRead($/;"	f	file:
winSectorSize	lib/sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSetSystemCall	lib/sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	lib/sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	lib/sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	lib/sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	lib/sqlite3.c	34972;"	d	file:
winShmEnterMutex	lib/sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	lib/sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	lib/sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	lib/sqlite3.c	34971;"	d	file:
winShmMap	lib/sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	lib/sqlite3.c	34970;"	d	file:
winShmMutexHeld	lib/sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	lib/sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	lib/sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	lib/sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	lib/sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	lib/sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	lib/sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	lib/sqlite3.c	34973;"	d	file:
winSleep	lib/sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	lib/sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	lib/sqlite3.c	/^SYSTEM_INFO winSysInfo;$/;"	v
winTruncate	lib/sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnlock	lib/sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winWrite	lib/sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	lib/sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	lib/sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	lib/sqlite3.c	/^static BOOL winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	lib/sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	lib/sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	lib/sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	lib/sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceLockFileEx	lib/sqlite3.c	/^static BOOL winceLockFileEx($/;"	f	file:
winceMutexAcquire	lib/sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	lib/sqlite3.c	33373;"	d	file:
winceUnlockFile	lib/sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
wpos	../framework/buffer.c	/^	size_t wpos;$/;"	m	struct:buffer	file:
wrFlag	lib/sqlite3.c	/^  u8 wrFlag;                \/* True if writable *\/$/;"	m	struct:BtCursor	file:
write32bits	lib/sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	lib/sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	lib/sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	lib/sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	lib/sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	lib/sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	lib/sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	lib/sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writeVdbeCnt	lib/sqlite3.c	/^  int writeVdbeCnt;             \/* Number of active VDBEs that are writing *\/$/;"	m	struct:sqlite3	file:
wsFlags	lib/sqlite3.c	/^  u32 wsFlags;                   \/* WHERE_* flags that describe the strategy *\/$/;"	m	struct:WherePlan	file:
wsdAutoext	lib/sqlite3.c	91956;"	d	file:
wsdAutoext	lib/sqlite3.c	91959;"	d	file:
wsdAutoextInit	lib/sqlite3.c	91954;"	d	file:
wsdAutoextInit	lib/sqlite3.c	91958;"	d	file:
wsdHooks	lib/sqlite3.c	15075;"	d	file:
wsdHooks	lib/sqlite3.c	15078;"	d	file:
wsdHooksInit	lib/sqlite3.c	15073;"	d	file:
wsdHooksInit	lib/sqlite3.c	15077;"	d	file:
wsdPrng	lib/sqlite3.c	20395;"	d	file:
wsdStat	lib/sqlite3.c	13324;"	d	file:
wsdStat	lib/sqlite3.c	13327;"	d	file:
wsdStatInit	lib/sqlite3.c	13323;"	d	file:
wsdStatInit	lib/sqlite3.c	13326;"	d	file:
wtFlags	lib/sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	lib/battlefield/role.h	/^		int x;$/;"	m	struct:role::__anon24
x	lib/battlefield/role.h	/^            int x;$/;"	m	struct:role::__anon24::__anon25
x	lib/fight_type.h	/^	int32_t x;$/;"	m	struct:tagPVE_FIGHT_CONFIG
x	lib/sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon41	file:
xAccess	lib/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAccess	lib/sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xAdvance	lib/sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon37	file:
xAuth	lib/sqlite3.c	/^  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);$/;"	m	struct:sqlite3	file:
xBacktrace	lib/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon48	file:
xBegin	lib/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBegin	lib/sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBenignBegin	lib/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	lib/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	lib/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBestIndex	lib/sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xBusyHandler	lib/sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	lib/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	lib/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCachesize	lib/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	lib/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	lib/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xCheckReservedLock	lib/sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	lib/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	lib/sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	lib/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xClose	lib/sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	lib/sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xCmp	lib/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	lib/sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	lib/sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	lib/sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	lib/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	lib/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	lib/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xColumn	lib/sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	lib/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommit	lib/sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xCommitCallback	lib/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	lib/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xConnect	lib/sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	lib/sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	lib/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	lib/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	lib/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCreate	lib/sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	lib/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	lib/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCurrentTime	lib/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTime	lib/sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	lib/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	lib/sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDel	lib/sqlite3.c	/^  void (*xDel)(void *);  \/* If not null, call this function to delete Mem.z *\/$/;"	m	struct:Mem	file:
xDel	lib/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDelUser	lib/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	lib/sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelete	lib/sqlite3.c	/^    void (*xDelete)(void *);      \/* Destructor for the aux data *\/$/;"	m	struct:VdbeFunc::AuxData	file:
xDelete	lib/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	lib/sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDestroy	lib/sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	lib/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	lib/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	lib/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	lib/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	lib/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestroy	lib/sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	lib/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	lib/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDeviceCharacteristics	lib/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDeviceCharacteristics	lib/sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	lib/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDisconnect	lib/sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	lib/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlClose	lib/sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	lib/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlError	lib/sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	lib/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	lib/sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	lib/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xEof	lib/sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xExprCallback	lib/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	lib/sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	lib/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFetch	lib/sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	lib/sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	lib/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileControl	lib/sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	lib/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	lib/sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	lib/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFilter	lib/sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFinalize	lib/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	lib/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFindFunction	lib/sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	lib/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	lib/sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFree	lib/sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFreeSchema	lib/sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	lib/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFullPathname	lib/sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xFunc	lib/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	lib/sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	lib/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeConstraint	file:
xGeom	lib/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeGeomCallback	file:
xGeom	lib/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeMatchArg	file:
xGetLastError	lib/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetLastError	lib/sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	lib/sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	lib/sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	lib/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	lib/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	lib/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xInit	lib/sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	lib/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	lib/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xLanguageid	lib/sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	lib/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLock	lib/sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xLog	lib/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	lib/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMalloc	lib/sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	lib/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexAlloc	lib/sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	lib/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	lib/sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	lib/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	lib/sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	lib/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	lib/sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	lib/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	lib/sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	lib/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	lib/sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	lib/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	lib/sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	lib/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	lib/sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	lib/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	lib/sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	lib/sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	lib/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNext	lib/sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	lib/sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xNextSystemCall	lib/sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	lib/sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	lib/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	lib/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xOpen	lib/sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	lib/sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	lib/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	lib/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xPagecount	lib/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	lib/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xProfile	lib/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	lib/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xRandomness	lib/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRandomness	lib/sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	lib/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRead	lib/sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	lib/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRealloc	lib/sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xReiniter	lib/sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	lib/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	lib/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRekey	lib/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	lib/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	lib/sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRelease	lib/sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	lib/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRename	lib/sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	lib/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollback	lib/sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackCallback	lib/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	lib/sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRollbackTo	lib/sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	lib/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRoundup	lib/sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	lib/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xRowid	lib/sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSavepoint	lib/sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSavepoint	lib/sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	lib/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSectorSize	lib/sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSelectCallback	lib/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	lib/sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xSetSystemCall	lib/sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	lib/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmBarrier	lib/sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	lib/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	lib/sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	lib/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	lib/sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	lib/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	lib/sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	lib/sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShrink	lib/sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	lib/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	lib/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	lib/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	lib/sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	lib/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	lib/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	lib/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSize	lib/sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	lib/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSleep	lib/sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xStep	lib/sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	lib/sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	lib/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	lib/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xSync	lib/sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	lib/sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTrace	lib/sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	lib/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	lib/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	lib/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xTruncate	lib/sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	lib/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	lib/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnlock	lib/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	lib/sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnlockNotify	lib/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	lib/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	lib/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUnpin	lib/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	lib/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	lib/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdate	lib/sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUpdateCallback	lib/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xWalCallback	lib/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	lib/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xWrite	lib/sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xferCompatibleCollation	lib/sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	lib/sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	lib/sqlite3.c	/^static int xferOptimization($/;"	f	file:
xmlClose	../framework/xmlHelper.c	/^void xmlClose(xml_doc_t * doc)$/;"	f
xmlClose	lib/xmlHelper.c	/^void xmlClose(xml_doc_t * doc)$/;"	f
xmlDocGetRoot	../framework/xmlHelper.c	/^xml_node_t * xmlDocGetRoot(xml_doc_t * doc)$/;"	f
xmlDocGetRoot	lib/xmlHelper.c	/^xml_node_t * xmlDocGetRoot(xml_doc_t * doc)$/;"	f
xmlGetAttribute	../framework/xmlHelper.c	/^const char * xmlGetAttribute(xml_node_t * node, const char * attribute, const char * def)$/;"	f
xmlGetAttribute	lib/xmlHelper.c	/^const char * xmlGetAttribute(xml_node_t * node, const char * attribute, const char * def)$/;"	f
xmlGetAttributeCount	../framework/xmlHelper.c	/^unsigned int xmlGetAttributeCount(xml_node_t * node)$/;"	f
xmlGetAttributeCount	lib/xmlHelper.c	/^unsigned int xmlGetAttributeCount(xml_node_t * node)$/;"	f
xmlGetAttributeN	../framework/xmlHelper.c	/^const char * xmlGetAttributeN(xml_node_t * node, unsigned int n, const char ** key)$/;"	f
xmlGetAttributeN	lib/xmlHelper.c	/^const char * xmlGetAttributeN(xml_node_t * node, unsigned int n, const char ** key)$/;"	f
xmlGetChild	../framework/xmlHelper.c	205;"	d	file:
xmlGetChild	../framework/xmlHelper.h	26;"	d
xmlGetChild	lib/xmlHelper.c	205;"	d	file:
xmlGetChild	lib/xmlHelper.h	26;"	d
xmlGetChild_	../framework/xmlHelper.c	/^xml_node_t * xmlGetChild_(xml_node_t * node, ...)$/;"	f
xmlGetChild_	lib/xmlHelper.c	/^xml_node_t * xmlGetChild_(xml_node_t * node, ...)$/;"	f
xmlGetFirstChild	../framework/xmlHelper.c	/^xml_node_t * xmlGetFirstChild(xml_node_t * node)$/;"	f
xmlGetFirstChild	lib/xmlHelper.c	/^xml_node_t * xmlGetFirstChild(xml_node_t * node)$/;"	f
xmlGetName	../framework/xmlHelper.c	/^const char * xmlGetName(xml_node_t * node)$/;"	f
xmlGetName	lib/xmlHelper.c	/^const char * xmlGetName(xml_node_t * node)$/;"	f
xmlGetNextSibling	../framework/xmlHelper.c	/^xml_node_t * xmlGetNextSibling(xml_node_t * node)$/;"	f
xmlGetNextSibling	lib/xmlHelper.c	/^xml_node_t * xmlGetNextSibling(xml_node_t * node)$/;"	f
xmlGetValue	../framework/xmlHelper.c	/^const char * xmlGetValue(xml_node_t * node, const char * def)$/;"	f
xmlGetValue	lib/xmlHelper.c	/^const char * xmlGetValue(xml_node_t * node, const char * def)$/;"	f
xmlOpen	../framework/xmlHelper.c	/^xml_doc_t  * xmlOpen(const char * file)$/;"	f
xmlOpen	lib/xmlHelper.c	/^xml_doc_t  * xmlOpen(const char * file)$/;"	f
xml_doc_t	../framework/xmlHelper.c	/^struct xml_doc_t {$/;"	s	file:
xml_doc_t	../framework/xmlHelper.h	/^typedef struct xml_doc_t  xml_doc_t;$/;"	t	typeref:struct:xml_doc_t
xml_doc_t	lib/xmlHelper.c	/^struct xml_doc_t {$/;"	s	file:
xml_doc_t	lib/xmlHelper.h	/^typedef struct xml_doc_t  xml_doc_t;$/;"	t	typeref:struct:xml_doc_t
xml_node_t	../framework/xmlHelper.c	/^struct xml_node_t {$/;"	s	file:
xml_node_t	../framework/xmlHelper.h	/^typedef struct xml_node_t xml_node_t;$/;"	t	typeref:struct:xml_node_t
xml_node_t	lib/xmlHelper.c	/^struct xml_node_t {$/;"	s	file:
xml_node_t	lib/xmlHelper.h	/^typedef struct xml_node_t xml_node_t;$/;"	t	typeref:struct:xml_node_t
xthreadsafe	lib/sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
y	lib/battlefield/role.h	/^		int y;$/;"	m	struct:role::__anon24
y	lib/battlefield/role.h	/^            int y;$/;"	m	struct:role::__anon24::__anon25
y	lib/fight_type.h	/^	int32_t y;$/;"	m	struct:tagPVE_FIGHT_CONFIG
yColCache	lib/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	lib/sqlite3.c	/^  typedef sqlite3_uint64 yDbMask;$/;"	t	file:
yDbMask	lib/sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	lib/sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	lib/sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	lib/sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon54	file:
yy122	lib/sqlite3.c	/^  Expr* yy122;$/;"	m	union:__anon54	file:
yy159	lib/sqlite3.c	/^  Select* yy159;$/;"	m	union:__anon54	file:
yy180	lib/sqlite3.c	/^  IdList* yy180;$/;"	m	union:__anon54	file:
yy207	lib/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	union:__anon54	typeref:struct:__anon54::__anon55	file:
yy258	lib/sqlite3.c	/^  u8 yy258;$/;"	m	union:__anon54	file:
yy318	lib/sqlite3.c	/^  struct LikeOp yy318;$/;"	m	union:__anon54	typeref:struct:__anon54::LikeOp	file:
yy327	lib/sqlite3.c	/^  TriggerStep* yy327;$/;"	m	union:__anon54	file:
yy342	lib/sqlite3.c	/^  ExprSpan yy342;$/;"	m	union:__anon54	file:
yy347	lib/sqlite3.c	/^  SrcList* yy347;$/;"	m	union:__anon54	file:
yy392	lib/sqlite3.c	/^  int yy392;$/;"	m	union:__anon54	file:
yy410	lib/sqlite3.c	/^  struct TrigEvent yy410;$/;"	m	union:__anon54	typeref:struct:__anon54::TrigEvent	file:
yy442	lib/sqlite3.c	/^  ExprList* yy442;$/;"	m	union:__anon54	file:
yy487	lib/sqlite3.c	/^  struct ValueList yy487;$/;"	m	union:__anon54	typeref:struct:__anon54::ValueList	file:
yy64	lib/sqlite3.c	/^  struct LimitVal yy64;$/;"	m	union:__anon54	typeref:struct:__anon54::LimitVal	file:
yyFallback	lib/sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	lib/sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	lib/sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	lib/sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	lib/sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon56	file:
yyRuleName	lib/sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	lib/sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	lib/sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	lib/sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	lib/sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	lib/sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	lib/sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	lib/sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	lib/sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	lib/sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	lib/sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	lib/sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	lib/sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	lib/sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	lib/sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	lib/sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	lib/sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	lib/sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	lib/sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	lib/sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	lib/sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	lib/sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	lib/sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	lib/sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	lib/sqlite3.c	/^  int yyinit;$/;"	m	union:__anon54	file:
yystack	lib/sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	lib/sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	lib/sqlite3.c	107814;"	d	file:
yytestcase	lib/sqlite3.c	108030;"	d	file:
yyzerominor	lib/sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	lib/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon37	file:
z	lib/sqlite3.c	/^    char *z;        \/* Value if eType is SQLITE_TEXT or SQLITE_BLOB *\/$/;"	m	union:IndexSample::__anon39	file:
z	lib/sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	lib/sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	lib/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	lib/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	lib/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	lib/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	lib/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zBase	lib/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBase	lib/sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:
zBuf	lib/sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	lib/sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	lib/sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	lib/sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	lib/sqlite3.c	/^    char *zCol;        \/* Name of column in zTo.  If 0 use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	lib/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColAff	lib/sqlite3.c	/^  char *zColAff;   \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColl	lib/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zComment	lib/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContentTbl	lib/sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zData	lib/sqlite3.c	/^  u8 *zData;$/;"	m	struct:RtreeNode	file:
zDatabase	lib/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	lib/sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	lib/sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	lib/sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	lib/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	lib/sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	lib/sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	lib/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErrMsg	lib/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	lib/sqlite3.c	/^  char *zErrMsg;                \/* Most recent error message (UTF-8 encoded) *\/$/;"	m	struct:sqlite3	file:
zErrMsg	lib/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	lib/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	lib/sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg	lib/sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zErrMsg16	lib/sqlite3.c	/^  char *zErrMsg16;              \/* Most recent error message (UTF-16 encoded) *\/$/;"	m	struct:sqlite3	file:
zExplain	lib/sqlite3.c	/^  char *zExplain;         \/* Explanation of data structures *\/$/;"	m	struct:Vdbe	file:
zFilename	lib/sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	lib/sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	lib/sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFullPathCp	lib/sqlite3.c	/^  char *zFullPathCp;        \/* Full path name of this file *\/$/;"	m	struct:os2File	file:
zIndex	lib/sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	lib/sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	lib/sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	lib/sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLanguageid	lib/sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLocale	lib/sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	lib/sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	lib/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	lib/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	lib/sqlite3.c	/^  char *zMalloc;      \/* Dynamic buffer allocated by sqlite3_malloc() *\/$/;"	m	struct:Mem	file:
zMatchinfo	lib/sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	lib/sqlite3.c	/^    char *zName;           \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	lib/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	lib/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	lib/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	lib/sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	lib/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	lib/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	lib/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	lib/sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	lib/sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	lib/sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	lib/sqlite3.c	/^  char *zName;     \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	lib/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	lib/sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	lib/sqlite3.c	/^  const char *zName;            \/* Name of the sytem call *\/$/;"	m	struct:unix_syscall	file:
zName	lib/sqlite3.c	/^  const char *zName;            \/* Name of the sytem call *\/$/;"	m	struct:win_syscall	file:
zName	lib/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	lib/sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zName	lib/sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
zPath	lib/sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	lib/sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPool	lib/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	lib/sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	lib/sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSpan	lib/sqlite3.c	/^    char *zSpan;           \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	lib/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	lib/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	lib/sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	lib/sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	lib/sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	lib/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	lib/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	lib/sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	lib/sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	lib/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	lib/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon48	file:
zTo	lib/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	lib/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon40	file:
zToken	lib/sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zType	lib/sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	lib/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	lib/sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	lib/sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	lib/sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	lib/sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	lib/sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	lib/sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
zeroed	lib/sqlite3.c	/^  Bool zeroed;          \/* True if zeroed out and ready for reuse *\/$/;"	m	struct:VdbeCursor	file:
